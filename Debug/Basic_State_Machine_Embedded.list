
Basic_State_Machine_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f4  080047f4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f4  080047f4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f4  080047f4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080047fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd8  2000003c  08004838  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  08004838  00020c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189d0  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f5  00000000  00000000  00038a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003bd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f8  00000000  00000000  0003e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169f7  00000000  00000000  000564b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009402c  00000000  00000000  0006cea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100ed3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e1c  00000000  00000000  00100f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800478c 	.word	0x0800478c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	0800478c 	.word	0x0800478c

080001c8 <Manual_delay>:

#include "Interrupt_Services.h"
#include "main.h"

void Manual_delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(int i=0;i<=120;i++)
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <Manual_delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2b78      	cmp	r3, #120	; 0x78
 80001de:	ddf9      	ble.n	80001d4 <Manual_delay+0xc>
	{

	}
}
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
	...

080001f0 <WR_Interrupt_Service>:
//		setSn_IR(0, 0x1F);
//	}
//}

void WR_Interrupt_Service(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)"WR ",strlen("WR "));
 80001f4:	2203      	movs	r2, #3
 80001f6:	491f      	ldr	r1, [pc, #124]	; (8000274 <WR_Interrupt_Service+0x84>)
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 fdb9 	bl	8000d70 <send>
	WR_Counts++;
 80001fe:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <WR_Interrupt_Service+0x88>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	3301      	adds	r3, #1
 8000204:	4a1c      	ldr	r2, [pc, #112]	; (8000278 <WR_Interrupt_Service+0x88>)
 8000206:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==0)
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <WR_Interrupt_Service+0x8c>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d11f      	bne.n	8000250 <WR_Interrupt_Service+0x60>
	{
		switch(WR_Counts)
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <WR_Interrupt_Service+0x88>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2b01      	cmp	r3, #1
 8000216:	d002      	beq.n	800021e <WR_Interrupt_Service+0x2e>
 8000218:	2b02      	cmp	r3, #2
 800021a:	d00d      	beq.n	8000238 <WR_Interrupt_Service+0x48>
 800021c:	e019      	b.n	8000252 <WR_Interrupt_Service+0x62>
		{
		case(1):
		        Timer2_Start();
 800021e:	f000 f91f 	bl	8000460 <Timer2_Start>
				WR_Instant=Timer2_GetTimer();
 8000222:	f000 f927 	bl	8000474 <Timer2_GetTimer>
 8000226:	4603      	mov	r3, r0
 8000228:	461a      	mov	r2, r3
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <WR_Interrupt_Service+0x90>)
 800022c:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WR_Ring,&WR_Instant);
 800022e:	4914      	ldr	r1, [pc, #80]	; (8000280 <WR_Interrupt_Service+0x90>)
 8000230:	4814      	ldr	r0, [pc, #80]	; (8000284 <WR_Interrupt_Service+0x94>)
 8000232:	f000 fcdf 	bl	8000bf4 <RingWriteElement>
				break;
 8000236:	e00c      	b.n	8000252 <WR_Interrupt_Service+0x62>
		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 8000238:	2209      	movs	r2, #9
 800023a:	4913      	ldr	r1, [pc, #76]	; (8000288 <WR_Interrupt_Service+0x98>)
 800023c:	2000      	movs	r0, #0
 800023e:	f000 fd97 	bl	8000d70 <send>
				Entry_flag=1;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <WR_Interrupt_Service+0x9c>)
 8000244:	2201      	movs	r2, #1
 8000246:	801a      	strh	r2, [r3, #0]
				Rt_Lt_flag=1;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <WR_Interrupt_Service+0xa0>)
 800024a:	2201      	movs	r2, #1
 800024c:	801a      	strh	r2, [r3, #0]
				//WR_Instant=__HAL_TIM_GetCounter(&htim2);
				//RingWriteElement(&WR_Ring,&WR_Instant);
				break;
 800024e:	e000      	b.n	8000252 <WR_Interrupt_Service+0x62>
		}

	}
 8000250:	bf00      	nop

	if(Entry_flag==1)
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <WR_Interrupt_Service+0x9c>)
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d109      	bne.n	800026e <WR_Interrupt_Service+0x7e>
	{
		WR_Instant=Timer2_GetTimer();
 800025a:	f000 f90b 	bl	8000474 <Timer2_GetTimer>
 800025e:	4603      	mov	r3, r0
 8000260:	461a      	mov	r2, r3
 8000262:	4b07      	ldr	r3, [pc, #28]	; (8000280 <WR_Interrupt_Service+0x90>)
 8000264:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WR_Ring,&WR_Instant);
 8000266:	4906      	ldr	r1, [pc, #24]	; (8000280 <WR_Interrupt_Service+0x90>)
 8000268:	4806      	ldr	r0, [pc, #24]	; (8000284 <WR_Interrupt_Service+0x94>)
 800026a:	f000 fcc3 	bl	8000bf4 <RingWriteElement>
	}
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	080047a4 	.word	0x080047a4
 8000278:	2000072c 	.word	0x2000072c
 800027c:	200003bc 	.word	0x200003bc
 8000280:	20000078 	.word	0x20000078
 8000284:	200003c8 	.word	0x200003c8
 8000288:	080047a8 	.word	0x080047a8
 800028c:	20000a52 	.word	0x20000a52
 8000290:	20000a50 	.word	0x20000a50

08000294 <FCT_Interrupt_Service>:


void FCT_Interrupt_Service(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)"TLin ",strlen("TLin "));
 8000298:	2205      	movs	r2, #5
 800029a:	4922      	ldr	r1, [pc, #136]	; (8000324 <FCT_Interrupt_Service+0x90>)
 800029c:	2000      	movs	r0, #0
 800029e:	f000 fd67 	bl	8000d70 <send>
	FCT_Counts++;
 80002a2:	4b21      	ldr	r3, [pc, #132]	; (8000328 <FCT_Interrupt_Service+0x94>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	4a1f      	ldr	r2, [pc, #124]	; (8000328 <FCT_Interrupt_Service+0x94>)
 80002aa:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==1)
 80002ac:	4b1f      	ldr	r3, [pc, #124]	; (800032c <FCT_Interrupt_Service+0x98>)
 80002ae:	881b      	ldrh	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d10a      	bne.n	80002ca <FCT_Interrupt_Service+0x36>
	{
		FCT_Instant=Timer2_GetTimer();
 80002b4:	f000 f8de 	bl	8000474 <Timer2_GetTimer>
 80002b8:	4603      	mov	r3, r0
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b1c      	ldr	r3, [pc, #112]	; (8000330 <FCT_Interrupt_Service+0x9c>)
 80002be:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 80002c0:	491b      	ldr	r1, [pc, #108]	; (8000330 <FCT_Interrupt_Service+0x9c>)
 80002c2:	481c      	ldr	r0, [pc, #112]	; (8000334 <FCT_Interrupt_Service+0xa0>)
 80002c4:	f000 fc96 	bl	8000bf4 <RingWriteElement>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
		//send(0, (uint8_t *)"TL2 ",strlen("TL2 "));
	}
	//send(0, (uint8_t *)"TLout ",strlen("TLout "));
}
 80002c8:	e029      	b.n	800031e <FCT_Interrupt_Service+0x8a>
	else if(Rt_Lt_flag==1)
 80002ca:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <FCT_Interrupt_Service+0xa4>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d125      	bne.n	800031e <FCT_Interrupt_Service+0x8a>
		FCT_Instant=Timer2_GetTimer();
 80002d2:	f000 f8cf 	bl	8000474 <Timer2_GetTimer>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <FCT_Interrupt_Service+0x9c>)
 80002dc:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 80002de:	4914      	ldr	r1, [pc, #80]	; (8000330 <FCT_Interrupt_Service+0x9c>)
 80002e0:	4814      	ldr	r0, [pc, #80]	; (8000334 <FCT_Interrupt_Service+0xa0>)
 80002e2:	f000 fc87 	bl	8000bf4 <RingWriteElement>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ec:	4813      	ldr	r0, [pc, #76]	; (800033c <FCT_Interrupt_Service+0xa8>)
 80002ee:	f001 fd6b 	bl	8001dc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f001 fd64 	bl	8001dc8 <HAL_GPIO_WritePin>
		Manual_delay();
 8000300:	f7ff ff62 	bl	80001c8 <Manual_delay>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030a:	480c      	ldr	r0, [pc, #48]	; (800033c <FCT_Interrupt_Service+0xa8>)
 800030c:	f001 fd5c 	bl	8001dc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031a:	f001 fd55 	bl	8001dc8 <HAL_GPIO_WritePin>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	080047b4 	.word	0x080047b4
 8000328:	200003e8 	.word	0x200003e8
 800032c:	200003bc 	.word	0x200003bc
 8000330:	200003c0 	.word	0x200003c0
 8000334:	2000070c 	.word	0x2000070c
 8000338:	20000a50 	.word	0x20000a50
 800033c:	48000400 	.word	0x48000400

08000340 <WL_Interrupt_Service>:

void WL_Interrupt_Service(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	//send(0, (uint8_t *)"WL ",strlen("WL "));
	WL_Counts++;
 8000344:	4b1c      	ldr	r3, [pc, #112]	; (80003b8 <WL_Interrupt_Service+0x78>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3301      	adds	r3, #1
 800034a:	4a1b      	ldr	r2, [pc, #108]	; (80003b8 <WL_Interrupt_Service+0x78>)
 800034c:	6013      	str	r3, [r2, #0]
	if(Rt_Lt_flag==0)
 800034e:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <WL_Interrupt_Service+0x7c>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d11f      	bne.n	8000396 <WL_Interrupt_Service+0x56>
	{
		switch(WL_Counts)
 8000356:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <WL_Interrupt_Service+0x78>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d002      	beq.n	8000364 <WL_Interrupt_Service+0x24>
 800035e:	2b02      	cmp	r3, #2
 8000360:	d00d      	beq.n	800037e <WL_Interrupt_Service+0x3e>
 8000362:	e019      	b.n	8000398 <WL_Interrupt_Service+0x58>
		{
		case(1):
				Timer2_Start();
 8000364:	f000 f87c 	bl	8000460 <Timer2_Start>
				WL_Instant=Timer2_GetTimer();
 8000368:	f000 f884 	bl	8000474 <Timer2_GetTimer>
 800036c:	4603      	mov	r3, r0
 800036e:	461a      	mov	r2, r3
 8000370:	4b13      	ldr	r3, [pc, #76]	; (80003c0 <WL_Interrupt_Service+0x80>)
 8000372:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WL_Ring,&WL_Instant);
 8000374:	4912      	ldr	r1, [pc, #72]	; (80003c0 <WL_Interrupt_Service+0x80>)
 8000376:	4813      	ldr	r0, [pc, #76]	; (80003c4 <WL_Interrupt_Service+0x84>)
 8000378:	f000 fc3c 	bl	8000bf4 <RingWriteElement>
				break;
 800037c:	e00c      	b.n	8000398 <WL_Interrupt_Service+0x58>

		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 800037e:	2209      	movs	r2, #9
 8000380:	4911      	ldr	r1, [pc, #68]	; (80003c8 <WL_Interrupt_Service+0x88>)
 8000382:	2000      	movs	r0, #0
 8000384:	f000 fcf4 	bl	8000d70 <send>
				Entry_flag=1;
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <WL_Interrupt_Service+0x8c>)
 800038a:	2201      	movs	r2, #1
 800038c:	801a      	strh	r2, [r3, #0]
				Lt_Rt_flag=1;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <WL_Interrupt_Service+0x90>)
 8000390:	2201      	movs	r2, #1
 8000392:	801a      	strh	r2, [r3, #0]
				//WL_Instant=__HAL_TIM_GetCounter(&htim2);
				//RingWriteElement(&WL_Ring,&WL_Instant);
				break;
 8000394:	e000      	b.n	8000398 <WL_Interrupt_Service+0x58>
		}

	}
 8000396:	bf00      	nop

	if(Entry_flag==1)
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <WL_Interrupt_Service+0x8c>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	2b01      	cmp	r3, #1
 800039e:	d109      	bne.n	80003b4 <WL_Interrupt_Service+0x74>
	{
		WL_Instant=Timer2_GetTimer();
 80003a0:	f000 f868 	bl	8000474 <Timer2_GetTimer>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <WL_Interrupt_Service+0x80>)
 80003aa:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WL_Ring,&WL_Instant);
 80003ac:	4904      	ldr	r1, [pc, #16]	; (80003c0 <WL_Interrupt_Service+0x80>)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <WL_Interrupt_Service+0x84>)
 80003b0:	f000 fc20 	bl	8000bf4 <RingWriteElement>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200003c4 	.word	0x200003c4
 80003bc:	20000a50 	.word	0x20000a50
 80003c0:	20000a54 	.word	0x20000a54
 80003c4:	2000007c 	.word	0x2000007c
 80003c8:	080047a8 	.word	0x080047a8
 80003cc:	20000a52 	.word	0x20000a52
 80003d0:	200003bc 	.word	0x200003bc

080003d4 <Get_event>:
#include"event.h"

struct EventStruct test_Events = {NULL_Event,NULL_Event};

myEvents Get_event()
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

	return test_Events.Next_Event;
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <Get_event+0x14>)
 80003da:	785b      	ldrb	r3, [r3, #1]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000058 	.word	0x20000058

080003ec <Set_event>:

void Set_event(myEvents N_E)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
	test_Events.Next_Event = N_E;
 80003f6:	4a04      	ldr	r2, [pc, #16]	; (8000408 <Set_event+0x1c>)
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	7053      	strb	r3, [r2, #1]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	20000058 	.word	0x20000058

0800040c <Reset_event>:



void Reset_event()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	test_Events.Next_Event=NULL_Event;
 8000410:	4b03      	ldr	r3, [pc, #12]	; (8000420 <Reset_event+0x14>)
 8000412:	2200      	movs	r2, #0
 8000414:	705a      	strb	r2, [r3, #1]
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	20000058 	.word	0x20000058

08000424 <Timer2_Stop>:
{
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xffffffff);
}

void Timer2_Stop()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8000428:	4802      	ldr	r0, [pc, #8]	; (8000434 <Timer2_Stop+0x10>)
 800042a:	f003 fbe3 	bl	8003bf4 <HAL_TIM_Base_Stop>
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	20000b40 	.word	0x20000b40

08000438 <Timer2_DeInitilized>:

void Timer2_DeInitilized()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 800043c:	4802      	ldr	r0, [pc, #8]	; (8000448 <Timer2_DeInitilized+0x10>)
 800043e:	f003 fb30 	bl	8003aa2 <HAL_TIM_Base_DeInit>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000b40 	.word	0x20000b40

0800044c <Timer2_Initilized>:

void Timer2_Initilized()
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8000450:	4802      	ldr	r0, [pc, #8]	; (800045c <Timer2_Initilized+0x10>)
 8000452:	f003 facf 	bl	80039f4 <HAL_TIM_Base_Init>
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000b40 	.word	0x20000b40

08000460 <Timer2_Start>:

void Timer2_Start()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8000464:	4802      	ldr	r0, [pc, #8]	; (8000470 <Timer2_Start+0x10>)
 8000466:	f003 fb79 	bl	8003b5c <HAL_TIM_Base_Start>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000b40 	.word	0x20000b40

08000474 <Timer2_GetTimer>:

int Timer2_GetTimer()
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
	uint32_t Tim_val = __HAL_TIM_GetCounter(&htim2);
 800047a:	4b05      	ldr	r3, [pc, #20]	; (8000490 <Timer2_GetTimer+0x1c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000480:	607b      	str	r3, [r7, #4]
	return Tim_val;
 8000482:	687b      	ldr	r3, [r7, #4]
}
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	20000b40 	.word	0x20000b40

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000498:	f001 f9ac 	bl	80017f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049c:	f000 f872 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a0:	f000 fa30 	bl	8000904 <MX_GPIO_Init>
  MX_RTC_Init();
 80004a4:	f000 f8d6 	bl	8000654 <MX_RTC_Init>
  MX_SPI2_Init();
 80004a8:	f000 f92e 	bl	8000708 <MX_SPI2_Init>
  MX_SPI3_Init();
 80004ac:	f000 f96a 	bl	8000784 <MX_SPI3_Init>
  MX_TIM2_Init();
 80004b0:	f000 f9a6 	bl	8000800 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004b4:	f000 f9f2 	bl	800089c <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(Get_state())
 80004b8:	f000 fd54 	bl	8000f64 <Get_state>
 80004bc:	4603      	mov	r3, r0
 80004be:	3b01      	subs	r3, #1
 80004c0:	2b06      	cmp	r3, #6
 80004c2:	d8f9      	bhi.n	80004b8 <main+0x24>
 80004c4:	a201      	add	r2, pc, #4	; (adr r2, 80004cc <main+0x38>)
 80004c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ca:	bf00      	nop
 80004cc:	080004e9 	.word	0x080004e9
 80004d0:	080004f9 	.word	0x080004f9
 80004d4:	08000509 	.word	0x08000509
 80004d8:	08000529 	.word	0x08000529
 80004dc:	08000539 	.word	0x08000539
 80004e0:	08000549 	.word	0x08000549
 80004e4:	08000559 	.word	0x08000559
	  	  {
	  	  case Initilisation_State:
	  		  if(Get_event()==Reset_Event)
 80004e8:	f7ff ff74 	bl	80003d4 <Get_event>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d13a      	bne.n	8000568 <main+0xd4>
	  		  {
	  			  Reset_State_Handler();
 80004f2:	f000 fd53 	bl	8000f9c <Reset_State_Handler>
	  		  }
	  		  break;
 80004f6:	e037      	b.n	8000568 <main+0xd4>

	  	  case Reset_State:
	  		  if(Get_event()==Idle_Event)
 80004f8:	f7ff ff6c 	bl	80003d4 <Get_event>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b02      	cmp	r3, #2
 8000500:	d134      	bne.n	800056c <main+0xd8>
	  		  {
	  			  Idle_State_Handler();
 8000502:	f000 fd8b 	bl	800101c <Idle_State_Handler>
	  		  }
	  		  break;
 8000506:	e031      	b.n	800056c <main+0xd8>

	  	  case Idle_State:
	  		  if(Get_event()==WRSide_Train_Detect_Event)
 8000508:	f7ff ff64 	bl	80003d4 <Get_event>
 800050c:	4603      	mov	r3, r0
 800050e:	2b03      	cmp	r3, #3
 8000510:	d102      	bne.n	8000518 <main+0x84>
	  			  //Nothing should happen in the idle state! It only polls for a change in state. Event setting and getting and state change happens WRT ISR
	  		  {
	  			  WRSide_Train_Presence_State_Handler();
 8000512:	f000 fd8d 	bl	8001030 <WRSide_Train_Presence_State_Handler>
	  		  }
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
	  		  {
	  			  WLSide_Train_Presence_State_Handler();
	  		  }
	  		  break;
 8000516:	e02b      	b.n	8000570 <main+0xdc>
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
 8000518:	f7ff ff5c 	bl	80003d4 <Get_event>
 800051c:	4603      	mov	r3, r0
 800051e:	2b04      	cmp	r3, #4
 8000520:	d126      	bne.n	8000570 <main+0xdc>
	  			  WLSide_Train_Presence_State_Handler();
 8000522:	f000 fd93 	bl	800104c <WLSide_Train_Presence_State_Handler>
	  		  break;
 8000526:	e023      	b.n	8000570 <main+0xdc>

	  	  case WRSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 8000528:	f7ff ff54 	bl	80003d4 <Get_event>
 800052c:	4603      	mov	r3, r0
 800052e:	2b05      	cmp	r3, #5
 8000530:	d120      	bne.n	8000574 <main+0xe0>
	  		  {
	  			  Train_Exit_State_Handler();
 8000532:	f000 fd99 	bl	8001068 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000536:	e01d      	b.n	8000574 <main+0xe0>

	  	  case WLSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 8000538:	f7ff ff4c 	bl	80003d4 <Get_event>
 800053c:	4603      	mov	r3, r0
 800053e:	2b05      	cmp	r3, #5
 8000540:	d11a      	bne.n	8000578 <main+0xe4>
	  		  {
	  			  Train_Exit_State_Handler();
 8000542:	f000 fd91 	bl	8001068 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000546:	e017      	b.n	8000578 <main+0xe4>

	  	  case Train_Exit_State:
	  		  if(Get_event()==Log_Data_Event)
 8000548:	f7ff ff44 	bl	80003d4 <Get_event>
 800054c:	4603      	mov	r3, r0
 800054e:	2b06      	cmp	r3, #6
 8000550:	d114      	bne.n	800057c <main+0xe8>
	  		  {
	  			  Log_Data_State_Handler();
 8000552:	f000 fd95 	bl	8001080 <Log_Data_State_Handler>
	  		  }
	  		  break;
 8000556:	e011      	b.n	800057c <main+0xe8>

	  	  case Log_Data_State:
	  		  if(Get_event()==Reset_Event)
 8000558:	f7ff ff3c 	bl	80003d4 <Get_event>
 800055c:	4603      	mov	r3, r0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10e      	bne.n	8000580 <main+0xec>
	  		  {
	  			  Reset_State_Handler();
 8000562:	f000 fd1b 	bl	8000f9c <Reset_State_Handler>
	  		  }
	  		  break;
 8000566:	e00b      	b.n	8000580 <main+0xec>
	  		  break;
 8000568:	bf00      	nop
 800056a:	e7a5      	b.n	80004b8 <main+0x24>
	  		  break;
 800056c:	bf00      	nop
 800056e:	e7a3      	b.n	80004b8 <main+0x24>
	  		  break;
 8000570:	bf00      	nop
 8000572:	e7a1      	b.n	80004b8 <main+0x24>
	  		  break;
 8000574:	bf00      	nop
 8000576:	e79f      	b.n	80004b8 <main+0x24>
	  		  break;
 8000578:	bf00      	nop
 800057a:	e79d      	b.n	80004b8 <main+0x24>
	  		  break;
 800057c:	bf00      	nop
 800057e:	e79b      	b.n	80004b8 <main+0x24>
	  		  break;
 8000580:	bf00      	nop
	  switch(Get_state())
 8000582:	e799      	b.n	80004b8 <main+0x24>

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b09c      	sub	sp, #112	; 0x70
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800058e:	2228      	movs	r2, #40	; 0x28
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 f8f2 	bl	800477c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f8e4 	bl	800477c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fc38 	bl	8001e28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <SystemClock_Config+0xcc>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a24      	ldr	r2, [pc, #144]	; (8000650 <SystemClock_Config+0xcc>)
 80005be:	f023 0318 	bic.w	r3, r3, #24
 80005c2:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80005c4:	2305      	movs	r3, #5
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80005ce:	2304      	movs	r3, #4
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 80005e4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80005e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fc2a 	bl	8001e48 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005fa:	f000 faa7 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fb1c 	bl	8002c58 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000626:	f000 fa91 	bl	8000b4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000634:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fd45 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 fa82 	bl	8000b4c <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3770      	adds	r7, #112	; 0x70
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000

08000654 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <MX_RTC_Init+0xac>)
 800066e:	4a25      	ldr	r2, [pc, #148]	; (8000704 <MX_RTC_Init+0xb0>)
 8000670:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_RTC_Init+0xac>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_RTC_Init+0xac>)
 800067a:	227f      	movs	r2, #127	; 0x7f
 800067c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800067e:	4b20      	ldr	r3, [pc, #128]	; (8000700 <MX_RTC_Init+0xac>)
 8000680:	22ff      	movs	r2, #255	; 0xff
 8000682:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_RTC_Init+0xac>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_RTC_Init+0xac>)
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_RTC_Init+0xac>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000696:	481a      	ldr	r0, [pc, #104]	; (8000700 <MX_RTC_Init+0xac>)
 8000698:	f002 fe9a 	bl	80033d0 <HAL_RTC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 fa53 	bl	8000b4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2201      	movs	r2, #1
 80006be:	4619      	mov	r1, r3
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <MX_RTC_Init+0xac>)
 80006c2:	f002 ff16 	bl	80034f2 <HAL_RTC_SetTime>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80006cc:	f000 fa3e 	bl	8000b4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006d0:	2301      	movs	r3, #1
 80006d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80006d4:	2305      	movs	r3, #5
 80006d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 80006d8:	2325      	movs	r3, #37	; 0x25
 80006da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80006dc:	2322      	movs	r3, #34	; 0x22
 80006de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2201      	movs	r2, #1
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_RTC_Init+0xac>)
 80006e8:	f002 ffc0 	bl	800366c <HAL_RTC_SetDate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80006f2:	f000 fa2b 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000b20 	.word	0x20000b20
 8000704:	40002800 	.word	0x40002800

08000708 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_SPI2_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_SPI2_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_SPI2_Init+0x74>)
 8000714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_SPI2_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_SPI2_Init+0x74>)
 8000722:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000726:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_SPI2_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_SPI2_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_SPI2_Init+0x74>)
 8000736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800073a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SPI2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SPI2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_SPI2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SPI2_Init+0x74>)
 8000756:	2207      	movs	r2, #7
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_SPI2_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SPI2_Init+0x74>)
 8000762:	2208      	movs	r2, #8
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_SPI2_Init+0x74>)
 8000768:	f003 f899 	bl	800389e <HAL_SPI_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f9eb 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000a58 	.word	0x20000a58
 8000780:	40003800 	.word	0x40003800

08000784 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_SPI3_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_SPI3_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_SPI3_Init+0x74>)
 8000790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000794:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_SPI3_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800079c:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI3_Init+0x74>)
 800079e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007d2:	2207      	movs	r2, #7
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007de:	2208      	movs	r2, #8
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_SPI3_Init+0x74>)
 80007e4:	f003 f85b 	bl	800389e <HAL_SPI_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f9ad 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000abc 	.word	0x20000abc
 80007fc:	40003c00 	.word	0x40003c00

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_TIM2_Init+0x98>)
 8000820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000824:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_TIM2_Init+0x98>)
 8000828:	2245      	movs	r2, #69	; 0x45
 800082a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_TIM2_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF-1;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_TIM2_Init+0x98>)
 8000834:	f06f 0201 	mvn.w	r2, #1
 8000838:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_TIM2_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_TIM2_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_TIM2_Init+0x98>)
 8000848:	f003 f8d4 	bl	80039f4 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000852:	f000 f97b 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_TIM2_Init+0x98>)
 8000864:	f003 f9ed 	bl	8003c42 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800086e:	f000 f96d 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_TIM2_Init+0x98>)
 8000880:	f003 fbb0 	bl	8003fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800088a:	f000 f95f 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000b40 	.word	0x20000b40

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <MX_USART2_UART_Init+0x64>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008da:	2210      	movs	r2, #16
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x60>)
 80008e8:	f003 fbe2 	bl	80040b0 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80008f2:	f000 f92b 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000b8c 	.word	0x20000b8c
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b56      	ldr	r3, [pc, #344]	; (8000a74 <MX_GPIO_Init+0x170>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	4a55      	ldr	r2, [pc, #340]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000920:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000924:	6153      	str	r3, [r2, #20]
 8000926:	4b53      	ldr	r3, [pc, #332]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000932:	4b50      	ldr	r3, [pc, #320]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b4d      	ldr	r3, [pc, #308]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b4a      	ldr	r3, [pc, #296]	; (8000a74 <MX_GPIO_Init+0x170>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a49      	ldr	r2, [pc, #292]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b47      	ldr	r3, [pc, #284]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b44      	ldr	r3, [pc, #272]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a43      	ldr	r2, [pc, #268]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b41      	ldr	r3, [pc, #260]	; (8000a74 <MX_GPIO_Init+0x170>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2101      	movs	r1, #1
 800097e:	483e      	ldr	r0, [pc, #248]	; (8000a78 <MX_GPIO_Init+0x174>)
 8000980:	f001 fa22 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800098a:	483b      	ldr	r0, [pc, #236]	; (8000a78 <MX_GPIO_Init+0x174>)
 800098c:	f001 fa1c 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CA_OP1_Pin|LA_OP1_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f001 fa15 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f001 fa0e 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WR_IP_Pin WL_IP_Pin F_IP_Pin */
  GPIO_InitStruct.Pin = WR_IP_Pin|WL_IP_Pin|F_IP_Pin;
 80009ac:	2323      	movs	r3, #35	; 0x23
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 f88e 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_CS_Pin;
 80009c8:	2301      	movs	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LAN_CS_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4826      	ldr	r0, [pc, #152]	; (8000a78 <MX_GPIO_Init+0x174>)
 80009e0:	f001 f880 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_INT_Pin */
  GPIO_InitStruct.Pin = LAN_INT_Pin;
 80009e4:	2304      	movs	r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_INT_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	481f      	ldr	r0, [pc, #124]	; (8000a78 <MX_GPIO_Init+0x174>)
 80009fa:	f001 f873 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 CA_OP_Pin LA_OP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin;
 80009fe:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4818      	ldr	r0, [pc, #96]	; (8000a78 <MX_GPIO_Init+0x174>)
 8000a18:	f001 f864 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CA_OP1_Pin LA_OP1_Pin LAN_RESET_Pin */
  GPIO_InitStruct.Pin = CA_OP1_Pin|LA_OP1_Pin|LAN_RESET_Pin;
 8000a1c:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f001 f854 	bl	8001ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2006      	movs	r0, #6
 8000a42:	f001 f818 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a46:	2006      	movs	r0, #6
 8000a48:	f001 f831 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2007      	movs	r0, #7
 8000a52:	f001 f810 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a56:	2007      	movs	r0, #7
 8000a58:	f001 f829 	bl	8001aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2017      	movs	r0, #23
 8000a62:	f001 f808 	bl	8001a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a66:	2017      	movs	r0, #23
 8000a68:	f001 f821 	bl	8001aae <HAL_NVIC_EnableIRQ>

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40021000 	.word	0x40021000
 8000a78:	48000400 	.word	0x48000400

08000a7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed
   */

  switch(GPIO_Pin)
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d044      	beq.n	8000b16 <HAL_GPIO_EXTI_Callback+0x9a>
 8000a8c:	2b20      	cmp	r3, #32
 8000a8e:	dc54      	bgt.n	8000b3a <HAL_GPIO_EXTI_Callback+0xbe>
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d002      	beq.n	8000a9a <HAL_GPIO_EXTI_Callback+0x1e>
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d01f      	beq.n	8000ad8 <HAL_GPIO_EXTI_Callback+0x5c>
		  FCT_Interrupt_Service();
		  break;
	  }
	  break;
  }
}
 8000a98:	e04f      	b.n	8000b3a <HAL_GPIO_EXTI_Callback+0xbe>
	  switch(Get_state()){
 8000a9a:	f000 fa63 	bl	8000f64 <Get_state>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d00c      	beq.n	8000abe <HAL_GPIO_EXTI_Callback+0x42>
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	dc0d      	bgt.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x48>
 8000aa8:	2b03      	cmp	r3, #3
 8000aaa:	d002      	beq.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x36>
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x3c>
 8000ab0:	e008      	b.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x48>
		  Set_event(WRSide_Train_Detect_Event);
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	f7ff fc9a 	bl	80003ec <Set_event>
		  WR_Interrupt_Service();
 8000ab8:	f7ff fb9a 	bl	80001f0 <WR_Interrupt_Service>
		  break;
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_EXTI_Callback+0x48>
		  WR_Interrupt_Service();
 8000abe:	f7ff fb97 	bl	80001f0 <WR_Interrupt_Service>
		  break;
 8000ac2:	bf00      	nop
	  if (WR_Counts==WL_Counts)//(Counts of WL_Counts==WR_Counts)
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d131      	bne.n	8000b34 <HAL_GPIO_EXTI_Callback+0xb8>
		  Set_event(Train_Exit_Event);
 8000ad0:	2005      	movs	r0, #5
 8000ad2:	f7ff fc8b 	bl	80003ec <Set_event>
	  break;
 8000ad6:	e02d      	b.n	8000b34 <HAL_GPIO_EXTI_Callback+0xb8>
	  switch(Get_state()){
 8000ad8:	f000 fa44 	bl	8000f64 <Get_state>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b05      	cmp	r3, #5
 8000ae0:	d00c      	beq.n	8000afc <HAL_GPIO_EXTI_Callback+0x80>
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	dc0d      	bgt.n	8000b02 <HAL_GPIO_EXTI_Callback+0x86>
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d002      	beq.n	8000af0 <HAL_GPIO_EXTI_Callback+0x74>
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_EXTI_Callback+0x7a>
 8000aee:	e008      	b.n	8000b02 <HAL_GPIO_EXTI_Callback+0x86>
		  Set_event(WLSide_Train_Detect_Event);
 8000af0:	2004      	movs	r0, #4
 8000af2:	f7ff fc7b 	bl	80003ec <Set_event>
		  WL_Interrupt_Service();
 8000af6:	f7ff fc23 	bl	8000340 <WL_Interrupt_Service>
		  break;
 8000afa:	e002      	b.n	8000b02 <HAL_GPIO_EXTI_Callback+0x86>
		  WL_Interrupt_Service();
 8000afc:	f7ff fc20 	bl	8000340 <WL_Interrupt_Service>
		  break;
 8000b00:	bf00      	nop
	  if (WR_Counts==WL_Counts)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d114      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0xbc>
		  Set_event(Train_Exit_Event);
 8000b0e:	2005      	movs	r0, #5
 8000b10:	f7ff fc6c 	bl	80003ec <Set_event>
	  break;
 8000b14:	e010      	b.n	8000b38 <HAL_GPIO_EXTI_Callback+0xbc>
	  switch(Get_state())
 8000b16:	f000 fa25 	bl	8000f64 <Get_state>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d002      	beq.n	8000b26 <HAL_GPIO_EXTI_Callback+0xaa>
 8000b20:	2b05      	cmp	r3, #5
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_EXTI_Callback+0xb0>
	  break;
 8000b24:	e009      	b.n	8000b3a <HAL_GPIO_EXTI_Callback+0xbe>
		  FCT_Interrupt_Service();
 8000b26:	f7ff fbb5 	bl	8000294 <FCT_Interrupt_Service>
		  break;
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_EXTI_Callback+0xb6>
		  FCT_Interrupt_Service();
 8000b2c:	f7ff fbb2 	bl	8000294 <FCT_Interrupt_Service>
		  break;
 8000b30:	bf00      	nop
	  break;
 8000b32:	e002      	b.n	8000b3a <HAL_GPIO_EXTI_Callback+0xbe>
	  break;
 8000b34:	bf00      	nop
 8000b36:	e000      	b.n	8000b3a <HAL_GPIO_EXTI_Callback+0xbe>
	  break;
 8000b38:	bf00      	nop
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000072c 	.word	0x2000072c
 8000b48:	200003c4 	.word	0x200003c4

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <RingInit>:
uint32_t RingGetDataCnt (RingBuffer_t* buffer){
	return buffer -> size - RingGetSpace(buffer);
}

/* DONE: Add null pointer exceptions. */
RingStatus_t RingInit (RingBuffer_t* buffer, void* arrayBuffer, size_t bufferSize, size_t elementSize){
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b084      	sub	sp, #16
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	603b      	str	r3, [r7, #0]
	if(NULL == buffer) return NO_PTR;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d102      	bne.n	8000b74 <RingInit+0x1a>
 8000b6e:	f06f 0302 	mvn.w	r3, #2
 8000b72:	e03b      	b.n	8000bec <RingInit+0x92>
	if(NULL == arrayBuffer) return NO_PTR;
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <RingInit+0x26>
 8000b7a:	f06f 0302 	mvn.w	r3, #2
 8000b7e:	e035      	b.n	8000bec <RingInit+0x92>

	memset(buffer, 0, sizeof(RingBuffer_t));
 8000b80:	2220      	movs	r2, #32
 8000b82:	2100      	movs	r1, #0
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f003 fdf9 	bl	800477c <memset>

	if(arrayBuffer == NULL) return NO_PTR;
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <RingInit+0x3c>
 8000b90:	f06f 0302 	mvn.w	r3, #2
 8000b94:	e02a      	b.n	8000bec <RingInit+0x92>
	if(bufferSize <= 0) return NO_DATA;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <RingInit+0x48>
 8000b9c:	f06f 0301 	mvn.w	r3, #1
 8000ba0:	e024      	b.n	8000bec <RingInit+0x92>

	buffer -> buffer = arrayBuffer;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	61da      	str	r2, [r3, #28]
	buffer -> size = bufferSize;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	601a      	str	r2, [r3, #0]
	buffer -> place = buffer -> size - 1;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	619a      	str	r2, [r3, #24]
	buffer -> writePtr = 0;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
	buffer -> readPtr = 0;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
	buffer -> elementSize = elementSize;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
	buffer -> sizeB = buffer -> elementSize * buffer -> size;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	6812      	ldr	r2, [r2, #0]
 8000bd2:	fb02 f203 	mul.w	r2, r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	609a      	str	r2, [r3, #8]

	memset(buffer -> buffer, 0, buffer -> sizeB);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	69d8      	ldr	r0, [r3, #28]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	461a      	mov	r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	f003 fdc9 	bl	800477c <memset>
	return OK;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <RingWriteElement>:
		return NO_PTR;
	}
	return RingInit(buffer, ptr, bufferSize, elementSize);
}

RingStatus_t RingWriteElement (RingBuffer_t* buffer, void* data){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	77fb      	strb	r3, [r7, #31]

	if(buffer == NULL) return NO_PTR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <RingWriteElement+0x1a>
 8000c08:	f06f 0302 	mvn.w	r3, #2
 8000c0c:	e03e      	b.n	8000c8c <RingWriteElement+0x98>
	if(data == NULL) return NO_PTR;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <RingWriteElement+0x26>
 8000c14:	f06f 0302 	mvn.w	r3, #2
 8000c18:	e038      	b.n	8000c8c <RingWriteElement+0x98>
	if(buffer -> buffer == NULL) return NO_PTR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <RingWriteElement+0x34>
 8000c22:	f06f 0302 	mvn.w	r3, #2
 8000c26:	e031      	b.n	8000c8c <RingWriteElement+0x98>

	uint32_t tempHead = buffer -> writePtr;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	61bb      	str	r3, [r7, #24]
	uint32_t tempTail = buffer -> readPtr;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	613b      	str	r3, [r7, #16]
	size_t bufferSize = buffer -> sizeB;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	60fb      	str	r3, [r7, #12]

	void* wrPtr;
	wrPtr = buffer -> buffer + tempHead;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69da      	ldr	r2, [r3, #28]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	4413      	add	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]

	tempHead = MODULO_BUF(tempHead + elSize, bufferSize);
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4413      	add	r3, r2
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c56:	68f9      	ldr	r1, [r7, #12]
 8000c58:	fb01 f202 	mul.w	r2, r1, r2
 8000c5c:	1a9b      	subs	r3, r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
	if(tempHead != tempTail){
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d00d      	beq.n	8000c84 <RingWriteElement+0x90>
		memcpy(wrPtr, data, elSize);
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	6839      	ldr	r1, [r7, #0]
 8000c6c:	68b8      	ldr	r0, [r7, #8]
 8000c6e:	f003 fd77 	bl	8004760 <memcpy>
		buffer -> writePtr = tempHead;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	611a      	str	r2, [r3, #16]
		buffer -> place --;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	619a      	str	r2, [r3, #24]
 8000c82:	e001      	b.n	8000c88 <RingWriteElement+0x94>
	}else{
		retval = NO_PLACE;
 8000c84:	23ff      	movs	r3, #255	; 0xff
 8000c86:	77fb      	strb	r3, [r7, #31]
	}
	return retval;
 8000c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d902      	bls.n	8000caa <close+0x16>
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	e055      	b.n	8000d56 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	3301      	adds	r3, #1
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fbe3 	bl	8001484 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000cbe:	bf00      	nop
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fb8d 	bl	80013ec <WIZCHIP_READ>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f3      	bne.n	8000cc0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	3301      	adds	r3, #1
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ce4:	211f      	movs	r1, #31
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fbcc 	bl	8001484 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	b21a      	sxth	r2, r3
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <close+0xcc>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <close+0xcc>)
 8000d08:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <close+0xd0>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4013      	ands	r3, r2
 8000d20:	b21b      	sxth	r3, r3
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <close+0xd0>)
 8000d26:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <close+0xd4>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <close+0xd8>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000d3a:	bf00      	nop
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	3301      	adds	r3, #1
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fb4f 	bl	80013ec <WIZCHIP_READ>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1f3      	bne.n	8000d3c <close+0xa8>
	return SOCK_OK;
 8000d54:	2301      	movs	r3, #1
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000005a 	.word	0x2000005a
 8000d64:	2000005c 	.word	0x2000005c
 8000d68:	20000060 	.word	0x20000060
 8000d6c:	20000070 	.word	0x20000070

08000d70 <send>:
	return SOCK_OK;
}


int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d902      	bls.n	8000d94 <send+0x24>
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e0de      	b.n	8000f52 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	3301      	adds	r3, #1
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 fb25 	bl	80013ec <WIZCHIP_READ>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f003 030f 	and.w	r3, r3, #15
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d002      	beq.n	8000db2 <send+0x42>
 8000dac:	f06f 0304 	mvn.w	r3, #4
 8000db0:	e0cf      	b.n	8000f52 <send+0x1e2>
   CHECK_SOCKDATA();
 8000db2:	88bb      	ldrh	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <send+0x4e>
 8000db8:	f06f 030d 	mvn.w	r3, #13
 8000dbc:	e0c9      	b.n	8000f52 <send+0x1e2>
   tmp = getSn_SR(sn);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fb0e 	bl	80013ec <WIZCHIP_READ>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b17      	cmp	r3, #23
 8000dd8:	d005      	beq.n	8000de6 <send+0x76>
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b1c      	cmp	r3, #28
 8000dde:	d002      	beq.n	8000de6 <send+0x76>
 8000de0:	f06f 0306 	mvn.w	r3, #6
 8000de4:	e0b5      	b.n	8000f52 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000de6:	4b5d      	ldr	r3, [pc, #372]	; (8000f5c <send+0x1ec>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	fa42 f303 	asr.w	r3, r2, r3
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d039      	beq.n	8000e6e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	3301      	adds	r3, #1
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 faf0 	bl	80013ec <WIZCHIP_READ>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d019      	beq.n	8000e52 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	3301      	adds	r3, #1
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fb29 	bl	8001484 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2201      	movs	r2, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <send+0x1ec>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	4013      	ands	r3, r2
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <send+0x1ec>)
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	e00d      	b.n	8000e6e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <send+0xfa>
      {
         close(sn);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff18 	bl	8000c94 <close>
         return SOCKERR_TIMEOUT;
 8000e64:	f06f 030c 	mvn.w	r3, #12
 8000e68:	e073      	b.n	8000f52 <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e071      	b.n	8000f52 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	3301      	adds	r3, #1
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fab6 	bl	80013ec <WIZCHIP_READ>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	029b      	lsls	r3, r3, #10
 8000e86:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000e88:	88ba      	ldrh	r2, [r7, #4]
 8000e8a:	89bb      	ldrh	r3, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d901      	bls.n	8000e94 <send+0x124>
 8000e90:	89bb      	ldrh	r3, [r7, #12]
 8000e92:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fba2 	bl	80015e0 <getSn_TX_FSR>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fa9d 	bl	80013ec <WIZCHIP_READ>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b17      	cmp	r3, #23
 8000eba:	d009      	beq.n	8000ed0 <send+0x160>
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b1c      	cmp	r3, #28
 8000ec0:	d006      	beq.n	8000ed0 <send+0x160>
      {
         close(sn);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fee5 	bl	8000c94 <close>
         return SOCKERR_SOCKSTATUS;
 8000eca:	f06f 0306 	mvn.w	r3, #6
 8000ece:	e040      	b.n	8000f52 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <send+0x1f0>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	fa42 f303 	asr.w	r3, r2, r3
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d005      	beq.n	8000ef0 <send+0x180>
 8000ee4:	88ba      	ldrh	r2, [r7, #4]
 8000ee6:	89bb      	ldrh	r3, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d901      	bls.n	8000ef0 <send+0x180>
 8000eec:	2300      	movs	r3, #0
 8000eee:	e030      	b.n	8000f52 <send+0x1e2>
      if(len <= freesize) break;
 8000ef0:	88ba      	ldrh	r2, [r7, #4]
 8000ef2:	89bb      	ldrh	r3, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d900      	bls.n	8000efa <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8000ef8:	e7cc      	b.n	8000e94 <send+0x124>
      if(len <= freesize) break;
 8000efa:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8000efc:	88ba      	ldrh	r2, [r7, #4]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	6839      	ldr	r1, [r7, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fbb7 	bl	8001676 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f14:	2120      	movs	r1, #32
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fab4 	bl	8001484 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8000f1c:	bf00      	nop
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	3301      	adds	r3, #1
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fa5e 	bl	80013ec <WIZCHIP_READ>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f3      	bne.n	8000f1e <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <send+0x1ec>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <send+0x1ec>)
 8000f4e:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8000f50:	88bb      	ldrh	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000005c 	.word	0x2000005c
 8000f60:	2000005a 	.word	0x2000005a

08000f64 <Get_state>:


struct StatesStruct test_states={Initilisation_State, NULL_State}; // current state defined as initilisation state, next state defined as NULL state

myStates Get_state()
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	return	 test_states.Current_State;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <Get_state+0x14>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <Set_state>:

void Set_state(myStates N_S)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
test_states.Current_State = N_S;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <Set_state+0x1c>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	7013      	strb	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	20000000 	.word	0x20000000

08000f9c <Reset_State_Handler>:

	Set_event(Reset_Event);
}

void Reset_State_Handler()
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	Set_state(Reset_State);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f7ff ffeb 	bl	8000f7c <Set_state>
	Reset_event();
 8000fa6:	f7ff fa31 	bl	800040c <Reset_event>
	//Reset the RingBuffers
	RingInit(&WR_Ring,&WR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8000faa:	2304      	movs	r3, #4
 8000fac:	22c8      	movs	r2, #200	; 0xc8
 8000fae:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <Reset_State_Handler+0x5c>)
 8000fb0:	4812      	ldr	r0, [pc, #72]	; (8000ffc <Reset_State_Handler+0x60>)
 8000fb2:	f7ff fdd2 	bl	8000b5a <RingInit>
	RingInit(&WL_Ring,&WL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	4911      	ldr	r1, [pc, #68]	; (8001000 <Reset_State_Handler+0x64>)
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <Reset_State_Handler+0x68>)
 8000fbe:	f7ff fdcc 	bl	8000b5a <RingInit>
	RingInit(&FCT_Ring,&FCT_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	22c8      	movs	r2, #200	; 0xc8
 8000fc6:	4910      	ldr	r1, [pc, #64]	; (8001008 <Reset_State_Handler+0x6c>)
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <Reset_State_Handler+0x70>)
 8000fca:	f7ff fdc6 	bl	8000b5a <RingInit>
	//Reset the Counts
	WR_Counts=0;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <Reset_State_Handler+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	WL_Counts=0;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <Reset_State_Handler+0x78>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
	FCT_Counts=0;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <Reset_State_Handler+0x7c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	//Reset the 32 bit timer 2
	Timer2_Stop(); //Timer Stopped
 8000fe0:	f7ff fa20 	bl	8000424 <Timer2_Stop>

	Timer2_DeInitilized();//Timer DeInitilized
 8000fe4:	f7ff fa28 	bl	8000438 <Timer2_DeInitilized>

	Timer2_Initilized(); //Timer Initialized
 8000fe8:	f7ff fa30 	bl	800044c <Timer2_Initilized>

	//set the event to idle
	Set_event(Idle_Event);
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff f9fd 	bl	80003ec <Set_event>
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000009c 	.word	0x2000009c
 8000ffc:	200003c8 	.word	0x200003c8
 8001000:	200003ec 	.word	0x200003ec
 8001004:	2000007c 	.word	0x2000007c
 8001008:	20000730 	.word	0x20000730
 800100c:	2000070c 	.word	0x2000070c
 8001010:	2000072c 	.word	0x2000072c
 8001014:	200003c4 	.word	0x200003c4
 8001018:	200003e8 	.word	0x200003e8

0800101c <Idle_State_Handler>:

void Idle_State_Handler()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	//Set state to idle state
	Set_state(Idle_State);
 8001020:	2003      	movs	r0, #3
 8001022:	f7ff ffab 	bl	8000f7c <Set_state>
	//reset the event
	Reset_event();
 8001026:	f7ff f9f1 	bl	800040c <Reset_event>
	//
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <WRSide_Train_Presence_State_Handler>:

void WRSide_Train_Presence_State_Handler()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	if(Get_state!=WRSide_Train_Presence_State)
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <WRSide_Train_Presence_State_Handler+0x18>)
 8001036:	2b04      	cmp	r3, #4
 8001038:	d004      	beq.n	8001044 <WRSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WRSide Train Presence state
		Set_state(WRSide_Train_Presence_State);
 800103a:	2004      	movs	r0, #4
 800103c:	f7ff ff9e 	bl	8000f7c <Set_state>
		//reset the event
		Reset_event();
 8001040:	f7ff f9e4 	bl	800040c <Reset_event>
	}
	//tasks that need to be done on each WR trigger
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	08000f65 	.word	0x08000f65

0800104c <WLSide_Train_Presence_State_Handler>:

void WLSide_Train_Presence_State_Handler()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	if(Get_state!=WLSide_Train_Presence_State)
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <WLSide_Train_Presence_State_Handler+0x18>)
 8001052:	2b05      	cmp	r3, #5
 8001054:	d004      	beq.n	8001060 <WLSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WLSide Train Presence state
		Set_state(WLSide_Train_Presence_State);
 8001056:	2005      	movs	r0, #5
 8001058:	f7ff ff90 	bl	8000f7c <Set_state>
		//reset the event
		Reset_event();
 800105c:	f7ff f9d6 	bl	800040c <Reset_event>
	}
	//tasks that need to be done on each WL trigger
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08000f65 	.word	0x08000f65

08001068 <Train_Exit_State_Handler>:

void Train_Exit_State_Handler()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	//Set state to Train Exit state
	Set_state(Train_Exit_State);
 800106c:	2006      	movs	r0, #6
 800106e:	f7ff ff85 	bl	8000f7c <Set_state>
	//reset the event
	Reset_event();
 8001072:	f7ff f9cb 	bl	800040c <Reset_event>
	//shut down the purge and close the shutters
	//set the event to Log Data event
	Set_event(Log_Data_Event);
 8001076:	2006      	movs	r0, #6
 8001078:	f7ff f9b8 	bl	80003ec <Set_event>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <Log_Data_State_Handler>:

void Log_Data_State_Handler()
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	//Set state to Log Data state
	Set_state(Log_Data_State);
 8001084:	2007      	movs	r0, #7
 8001086:	f7ff ff79 	bl	8000f7c <Set_state>
	//reset the event
	Reset_event();
 800108a:	f7ff f9bf 	bl	800040c <Reset_event>
	//send the data over TCPIP
	//set the event to reset event
	Set_event(Reset_Event);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff f9ac 	bl	80003ec <Set_event>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x44>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_RTC_MspInit+0x44>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d111      	bne.n	8001116 <HAL_RTC_MspInit+0x36>
 80010f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001100:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001102:	fab3 f383 	clz	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <HAL_RTC_MspInit+0x48>)
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	461a      	mov	r2, r3
 8001112:	2301      	movs	r3, #1
 8001114:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40002800 	.word	0x40002800
 8001128:	10908100 	.word	0x10908100

0800112c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <HAL_SPI_MspInit+0x114>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d147      	bne.n	80011de <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	61d3      	str	r3, [r2, #28]
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_SPI_MspInit+0x118>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a36      	ldr	r2, [pc, #216]	; (8001244 <HAL_SPI_MspInit+0x118>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_SPI_MspInit+0x118>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a8:	2305      	movs	r3, #5
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <HAL_SPI_MspInit+0x11c>)
 80011b4:	f000 fc96 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ca:	2305      	movs	r3, #5
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fc84 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011dc:	e02c      	b.n	8001238 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_SPI_MspInit+0x120>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d127      	bne.n	8001238 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_SPI_MspInit+0x118>)
 80011ea:	69db      	ldr	r3, [r3, #28]
 80011ec:	4a15      	ldr	r2, [pc, #84]	; (8001244 <HAL_SPI_MspInit+0x118>)
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f2:	61d3      	str	r3, [r2, #28]
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_SPI_MspInit+0x118>)
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_SPI_MspInit+0x118>)
 8001206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120a:	6153      	str	r3, [r2, #20]
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_SPI_MspInit+0x118>)
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001218:	2338      	movs	r3, #56	; 0x38
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001228:	2306      	movs	r3, #6
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_SPI_MspInit+0x11c>)
 8001234:	f000 fc56 	bl	8001ae4 <HAL_GPIO_Init>
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003800 	.word	0x40003800
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400
 800124c:	40003c00 	.word	0x40003c00

08001250 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001260:	d10b      	bne.n	800127a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_TIM_Base_MspInit+0x38>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_TIM_Base_MspInit+0x38>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	61d3      	str	r3, [r2, #28]
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_TIM_Base_MspInit+0x38>)
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800129c:	d105      	bne.n	80012aa <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_TIM_Base_MspDeInit+0x2c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_TIM_Base_MspDeInit+0x2c>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_UART_MspInit+0x7c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d128      	bne.n	8001330 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <HAL_UART_MspInit+0x80>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <HAL_UART_MspInit+0x80>)
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_UART_MspInit+0x80>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_UART_MspInit+0x80>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_UART_MspInit+0x80>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_UART_MspInit+0x80>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130e:	230c      	movs	r3, #12
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131e:	2307      	movs	r3, #7
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f000 fbda 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40004400 	.word	0x40004400
 800133c:	40021000 	.word	0x40021000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 fa74 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f000 fd29 	bl	8001df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013ae:	2002      	movs	r0, #2
 80013b0:	f000 fd22 	bl	8001df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013bc:	2020      	movs	r0, #32
 80013be:	f000 fd1b 	bl	8001df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <WIZCHIP_READ+0x94>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <WIZCHIP_READ+0x94>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <WIZCHIP_READ+0x94>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <WIZCHIP_READ+0x24>
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <WIZCHIP_READ+0x94>)
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b00      	cmp	r3, #0
 800140e:	d114      	bne.n	800143a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <WIZCHIP_READ+0x94>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	4610      	mov	r0, r2
 800141c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <WIZCHIP_READ+0x94>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	0a12      	lsrs	r2, r2, #8
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	4610      	mov	r0, r2
 800142a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800142c:	4b14      	ldr	r3, [pc, #80]	; (8001480 <WIZCHIP_READ+0x94>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	4610      	mov	r0, r2
 8001436:	4798      	blx	r3
 8001438:	e011      	b.n	800145e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2db      	uxtb	r3, r3
 8001440:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	b2db      	uxtb	r3, r3
 8001448:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <WIZCHIP_READ+0x94>)
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	f107 020c 	add.w	r2, r7, #12
 8001458:	2103      	movs	r1, #3
 800145a:	4610      	mov	r0, r2
 800145c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <WIZCHIP_READ+0x94>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	4798      	blx	r3
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <WIZCHIP_READ+0x94>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <WIZCHIP_READ+0x94>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	4798      	blx	r3
   return ret;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008

08001484 <WIZCHIP_WRITE>:

void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];
   WIZCHIP_CRITICAL_ENTER();
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <WIZCHIP_WRITE+0x98>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <WIZCHIP_WRITE+0x98>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <WIZCHIP_WRITE+0x98>)
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d119      	bne.n	80014e0 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <WIZCHIP_WRITE+0x98>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	0c12      	lsrs	r2, r2, #16
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	4610      	mov	r0, r2
 80014b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <WIZCHIP_WRITE+0x98>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	0a12      	lsrs	r2, r2, #8
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	4610      	mov	r0, r2
 80014c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <WIZCHIP_WRITE+0x98>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	4610      	mov	r0, r2
 80014d2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <WIZCHIP_WRITE+0x98>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	78fa      	ldrb	r2, [r7, #3]
 80014da:	4610      	mov	r0, r2
 80014dc:	4798      	blx	r3
 80014de:	e013      	b.n	8001508 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <WIZCHIP_WRITE+0x98>)
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	f107 020c 	add.w	r2, r7, #12
 8001502:	2104      	movs	r1, #4
 8001504:	4610      	mov	r0, r2
 8001506:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <WIZCHIP_WRITE+0x98>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800150e:	4b03      	ldr	r3, [pc, #12]	; (800151c <WIZCHIP_WRITE+0x98>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	4798      	blx	r3
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000008 	.word	0x20000008

08001520 <WIZCHIP_WRITE_BUF>:
   WIZCHIP_CRITICAL_EXIT();
}


void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	4613      	mov	r3, r2
 800152c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	2b00      	cmp	r3, #0
 8001548:	d126      	bne.n	8001598 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	0c12      	lsrs	r2, r2, #16
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	4610      	mov	r0, r2
 8001556:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	0a12      	lsrs	r2, r2, #8
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	4610      	mov	r0, r2
 8001564:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	4610      	mov	r0, r2
 8001570:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	82fb      	strh	r3, [r7, #22]
 8001576:	e00a      	b.n	800158e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	8afa      	ldrh	r2, [r7, #22]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	440a      	add	r2, r1
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	4610      	mov	r0, r2
 8001586:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001588:	8afb      	ldrh	r3, [r7, #22]
 800158a:	3301      	adds	r3, #1
 800158c:	82fb      	strh	r3, [r7, #22]
 800158e:	8afa      	ldrh	r2, [r7, #22]
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3f0      	bcc.n	8001578 <WIZCHIP_WRITE_BUF+0x58>
 8001596:	e017      	b.n	80015c8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else 														// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	0c1b      	lsrs	r3, r3, #16
 800159c:	b2db      	uxtb	r3, r3
 800159e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	0a1b      	lsrs	r3, r3, #8
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	f107 0210 	add.w	r2, r7, #16
 80015b6:	2103      	movs	r1, #3
 80015b8:	4610      	mov	r0, r2
 80015ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	4611      	mov	r1, r2
 80015c4:	68b8      	ldr	r0, [r7, #8]
 80015c6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <WIZCHIP_WRITE_BUF+0xbc>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4798      	blx	r3
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000008 	.word	0x20000008

080015e0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	81fb      	strh	r3, [r7, #14]
 80015ee:	2300      	movs	r3, #0
 80015f0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	3301      	adds	r3, #1
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fef4 	bl	80013ec <WIZCHIP_READ>
 8001604:	4603      	mov	r3, r0
 8001606:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001608:	89bb      	ldrh	r3, [r7, #12]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b29c      	uxth	r4, r3
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	3301      	adds	r3, #1
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fee6 	bl	80013ec <WIZCHIP_READ>
 8001620:	4603      	mov	r3, r0
 8001622:	b29b      	uxth	r3, r3
 8001624:	4423      	add	r3, r4
 8001626:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01a      	beq.n	8001664 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	3301      	adds	r3, #1
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fed6 	bl	80013ec <WIZCHIP_READ>
 8001640:	4603      	mov	r3, r0
 8001642:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b29c      	uxth	r4, r3
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	3301      	adds	r3, #1
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fec8 	bl	80013ec <WIZCHIP_READ>
 800165c:	4603      	mov	r3, r0
 800165e:	b29b      	uxth	r3, r3
 8001660:	4423      	add	r3, r4
 8001662:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001664:	89fa      	ldrh	r2, [r7, #14]
 8001666:	89bb      	ldrh	r3, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d1c2      	bne.n	80015f2 <getSn_TX_FSR+0x12>
   return val;
 800166c:	89fb      	ldrh	r3, [r7, #14]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}

08001676 <wiz_send_data>:
   return val;
}


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	6039      	str	r1, [r7, #0]
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	4613      	mov	r3, r2
 8001684:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d048      	beq.n	8001726 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	3301      	adds	r3, #1
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fea3 	bl	80013ec <WIZCHIP_READ>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b29c      	uxth	r4, r3
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	3301      	adds	r3, #1
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe96 	bl	80013ec <WIZCHIP_READ>
 80016c0:	4603      	mov	r3, r0
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4423      	add	r3, r4
 80016c6:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80016c8:	89fb      	ldrh	r3, [r7, #14]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	3202      	adds	r2, #2
 80016d2:	00d2      	lsls	r2, r2, #3
 80016d4:	4413      	add	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80016d8:	88bb      	ldrh	r3, [r7, #4]
 80016da:	461a      	mov	r2, r3
 80016dc:	6839      	ldr	r1, [r7, #0]
 80016de:	68b8      	ldr	r0, [r7, #8]
 80016e0:	f7ff ff1e 	bl	8001520 <WIZCHIP_WRITE_BUF>
   ptr += len;
 80016e4:	89fa      	ldrh	r2, [r7, #14]
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	3301      	adds	r3, #1
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80016f8:	461a      	mov	r2, r3
 80016fa:	89fb      	ldrh	r3, [r7, #14]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff febd 	bl	8001484 <WIZCHIP_WRITE>
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	3301      	adds	r3, #1
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001716:	461a      	mov	r2, r3
 8001718:	89fb      	ldrh	r3, [r7, #14]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f7ff feb0 	bl	8001484 <WIZCHIP_WRITE>
 8001724:	e000      	b.n	8001728 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001726:	bf00      	nop
}
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}

0800172e <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490e      	ldr	r1, [pc, #56]	; (80017e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0b      	ldr	r4, [pc, #44]	; (80017ec <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ca:	f7ff fdfd 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f002 ffa3 	bl	8004718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d2:	f7fe fe5f 	bl	8000494 <main>

080017d6 <LoopForever>:

LoopForever:
    b LoopForever
 80017d6:	e7fe      	b.n	80017d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80017e4:	080047fc 	.word	0x080047fc
  ldr r2, =_sbss
 80017e8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80017ec:	20000c14 	.word	0x20000c14

080017f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC1_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x28>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x28>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f92b 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f808 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fc42 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000

08001820 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x54>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x58>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f943 	bl	8001aca <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00e      	b.n	800186c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d80a      	bhi.n	800186a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f000 f90b 	bl	8001a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001860:	4a06      	ldr	r2, [pc, #24]	; (800187c <HAL_InitTick+0x5c>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000004 	.word	0x20000004
 8001878:	20000038 	.word	0x20000038
 800187c:	20000034 	.word	0x20000034

08001880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000038 	.word	0x20000038
 80018a4:	20000c10 	.word	0x20000c10

080018a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000c10 	.word	0x20000c10

080018c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018dc:	4013      	ands	r3, r2
 80018de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <__NVIC_SetPriorityGrouping+0x44>)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	60d3      	str	r3, [r2, #12]
}
 80018f8:	bf00      	nop
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <__NVIC_GetPriorityGrouping+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	f003 0307 	and.w	r3, r3, #7
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	db0b      	blt.n	800194e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	f003 021f 	and.w	r2, r3, #31
 800193c:	4907      	ldr	r1, [pc, #28]	; (800195c <__NVIC_EnableIRQ+0x38>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	2001      	movs	r0, #1
 8001946:	fa00 f202 	lsl.w	r2, r0, r2
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000e100 	.word	0xe000e100

08001960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
         );
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff29 	bl	80018c0 <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a88:	f7ff ff3e 	bl	8001908 <__NVIC_GetPriorityGrouping>
 8001a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7ff ff8e 	bl	80019b4 <NVIC_EncodePriority>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff5d 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa6:	bf00      	nop
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff31 	bl	8001924 <__NVIC_EnableIRQ>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ffa2 	bl	8001a1c <SysTick_Config>
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af2:	e14e      	b.n	8001d92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8140 	beq.w	8001d8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <HAL_GPIO_Init+0x40>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	f003 0201 	and.w	r2, r3, #1
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d017      	beq.n	8001bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d123      	bne.n	8001c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	6939      	ldr	r1, [r7, #16]
 8001c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0203 	and.w	r2, r3, #3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 809a 	beq.w	8001d8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b55      	ldr	r3, [pc, #340]	; (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a54      	ldr	r2, [pc, #336]	; (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <HAL_GPIO_Init+0x2cc>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9a:	d013      	beq.n	8001cc4 <HAL_GPIO_Init+0x1e0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a46      	ldr	r2, [pc, #280]	; (8001db8 <HAL_GPIO_Init+0x2d4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_GPIO_Init+0x1dc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a45      	ldr	r2, [pc, #276]	; (8001dbc <HAL_GPIO_Init+0x2d8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d007      	beq.n	8001cbc <HAL_GPIO_Init+0x1d8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a44      	ldr	r2, [pc, #272]	; (8001dc0 <HAL_GPIO_Init+0x2dc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_GPIO_Init+0x1d4>
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1e2>
 8001cb8:	2305      	movs	r3, #5
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1e2>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1e2>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1e2>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd6:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d08:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_GPIO_Init+0x2e0>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f47f aea9 	bne.w	8001af4 <HAL_GPIO_Init+0x10>
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000c00 	.word	0x48000c00
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d006      	beq.n	8001e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe30 	bl	8000a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40007000 	.word	0x40007000

08001e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f000 bef4 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 816a 	beq.w	8002146 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e72:	4bb3      	ldr	r3, [pc, #716]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7e:	4bb0      	ldr	r3, [pc, #704]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d159      	bne.n	8001f3e <HAL_RCC_OscConfig+0xf6>
 8001e8a:	4bad      	ldr	r3, [pc, #692]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e96:	d152      	bne.n	8001f3e <HAL_RCC_OscConfig+0xf6>
 8001e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e9c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001eac:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb0:	fab3 f383 	clz	r3, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d102      	bne.n	8001eca <HAL_RCC_OscConfig+0x82>
 8001ec4:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0xae>
 8001eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ece:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ee6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ef2:	4b93      	ldr	r3, [pc, #588]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001efa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001efe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001f02:	fa92 f2a2 	rbit	r2, r2
 8001f06:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001f0a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0220 	orr.w	r2, r2, #32
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f002 021f 	and.w	r2, r2, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 810c 	beq.w	8002144 <HAL_RCC_OscConfig+0x2fc>
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 8106 	bne.w	8002144 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f000 be86 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f48:	d106      	bne.n	8001f58 <HAL_RCC_OscConfig+0x110>
 8001f4a:	4b7d      	ldr	r3, [pc, #500]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7c      	ldr	r2, [pc, #496]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e030      	b.n	8001fba <HAL_RCC_OscConfig+0x172>
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x134>
 8001f62:	4b77      	ldr	r3, [pc, #476]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a76      	ldr	r2, [pc, #472]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b74      	ldr	r3, [pc, #464]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01e      	b.n	8001fba <HAL_RCC_OscConfig+0x172>
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f86:	d10c      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x15a>
 8001f88:	4b6d      	ldr	r3, [pc, #436]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6c      	ldr	r2, [pc, #432]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a69      	ldr	r2, [pc, #420]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e00b      	b.n	8001fba <HAL_RCC_OscConfig+0x172>
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a66      	ldr	r2, [pc, #408]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a63      	ldr	r2, [pc, #396]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fba:	4b61      	ldr	r3, [pc, #388]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	f023 020f 	bic.w	r2, r3, #15
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	495d      	ldr	r1, [pc, #372]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d059      	beq.n	800208c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fc66 	bl	80018a8 <HAL_GetTick>
 8001fdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fc61 	bl	80018a8 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d902      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f000 be29 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>
 8001ff8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ffc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800200c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d102      	bne.n	800202a <HAL_RCC_OscConfig+0x1e2>
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e015      	b.n	8002056 <HAL_RCC_OscConfig+0x20e>
 800202a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800203e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002042:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002046:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002052:	4b3b      	ldr	r3, [pc, #236]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800205a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800205e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002062:	fa92 f2a2 	rbit	r2, r2
 8002066:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800206a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0ab      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x19a>
 800208a:	e05c      	b.n	8002146 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fc0c 	bl	80018a8 <HAL_GetTick>
 8002090:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002096:	f7ff fc07 	bl	80018a8 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	; 0x64
 80020a4:	d902      	bls.n	80020ac <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	f000 bdcf 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80020b8:	fa93 f3a3 	rbit	r3, r3
 80020bc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80020c0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x296>
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x2c2>
 80020de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80020f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80020fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_RCC_OscConfig+0x2f8>)
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800210e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002112:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002116:	fa92 f2a2 	rbit	r2, r2
 800211a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800211e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002122:	fab2 f282 	clz	r2, r2
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	f042 0220 	orr.w	r2, r2, #32
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	f002 021f 	and.w	r2, r2, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f202 	lsl.w	r2, r1, r2
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ab      	bne.n	8002096 <HAL_RCC_OscConfig+0x24e>
 800213e:	e002      	b.n	8002146 <HAL_RCC_OscConfig+0x2fe>
 8002140:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 816f 	beq.w	8002434 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002156:	4bd0      	ldr	r3, [pc, #832]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002162:	4bcd      	ldr	r3, [pc, #820]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b08      	cmp	r3, #8
 800216c:	d16c      	bne.n	8002248 <HAL_RCC_OscConfig+0x400>
 800216e:	4bca      	ldr	r3, [pc, #808]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d166      	bne.n	8002248 <HAL_RCC_OscConfig+0x400>
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800218c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_RCC_OscConfig+0x362>
 80021a4:	4bbc      	ldr	r3, [pc, #752]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	e013      	b.n	80021d2 <HAL_RCC_OscConfig+0x38a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80021bc:	2302      	movs	r3, #2
 80021be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80021c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80021ce:	4bb2      	ldr	r3, [pc, #712]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2202      	movs	r2, #2
 80021d4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80021d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80021e4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80021e8:	fab2 f282 	clz	r2, r2
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f042 0220 	orr.w	r2, r2, #32
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	f002 021f 	and.w	r2, r2, #31
 80021f8:	2101      	movs	r1, #1
 80021fa:	fa01 f202 	lsl.w	r2, r1, r2
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_RCC_OscConfig+0x3cc>
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d002      	beq.n	8002214 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f000 bd1b 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4ba0      	ldr	r3, [pc, #640]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	21f8      	movs	r1, #248	; 0xf8
 8002224:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800222c:	fa91 f1a1 	rbit	r1, r1
 8002230:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002234:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002238:	fab1 f181 	clz	r1, r1
 800223c:	b2c9      	uxtb	r1, r1
 800223e:	408b      	lsls	r3, r1
 8002240:	4995      	ldr	r1, [pc, #596]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e0f5      	b.n	8002434 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8085 	beq.w	800235e <HAL_RCC_OscConfig+0x516>
 8002254:	2301      	movs	r3, #1
 8002256:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002266:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002274:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	461a      	mov	r2, r3
 800227c:	2301      	movs	r3, #1
 800227e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fb12 	bl	80018a8 <HAL_GetTick>
 8002284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228a:	f7ff fb0d 	bl	80018a8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d902      	bls.n	80022a0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	f000 bcd5 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>
 80022a0:	2302      	movs	r3, #2
 80022a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80022b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d102      	bne.n	80022d0 <HAL_RCC_OscConfig+0x488>
 80022ca:	4b73      	ldr	r3, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	e013      	b.n	80022f8 <HAL_RCC_OscConfig+0x4b0>
 80022d0:	2302      	movs	r3, #2
 80022d2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022da:	fa93 f3a3 	rbit	r3, r3
 80022de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80022f4:	4b68      	ldr	r3, [pc, #416]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2202      	movs	r2, #2
 80022fa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80022fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002302:	fa92 f2a2 	rbit	r2, r2
 8002306:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800230a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800230e:	fab2 f282 	clz	r2, r2
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f042 0220 	orr.w	r2, r2, #32
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f002 021f 	and.w	r2, r2, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f202 	lsl.w	r2, r1, r2
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0af      	beq.n	800228a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	21f8      	movs	r1, #248	; 0xf8
 800233a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002342:	fa91 f1a1 	rbit	r1, r1
 8002346:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800234a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800234e:	fab1 f181 	clz	r1, r1
 8002352:	b2c9      	uxtb	r1, r1
 8002354:	408b      	lsls	r3, r1
 8002356:	4950      	ldr	r1, [pc, #320]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e06a      	b.n	8002434 <HAL_RCC_OscConfig+0x5ec>
 800235e:	2301      	movs	r3, #1
 8002360:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800237e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	461a      	mov	r2, r3
 8002386:	2300      	movs	r3, #0
 8002388:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff fa8d 	bl	80018a8 <HAL_GetTick>
 800238e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	e00a      	b.n	80023aa <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002394:	f7ff fa88 	bl	80018a8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d902      	bls.n	80023aa <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f000 bc50 	b.w	8002c4a <HAL_RCC_OscConfig+0xe02>
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80023bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c0:	fab3 f383 	clz	r3, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_RCC_OscConfig+0x592>
 80023d4:	4b30      	ldr	r3, [pc, #192]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	e013      	b.n	8002402 <HAL_RCC_OscConfig+0x5ba>
 80023da:	2302      	movs	r3, #2
 80023dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80023e4:	fa93 f3a3 	rbit	r3, r3
 80023e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023ec:	2302      	movs	r3, #2
 80023ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x650>)
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2202      	movs	r2, #2
 8002404:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002408:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800240c:	fa92 f2a2 	rbit	r2, r2
 8002410:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002414:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f002 021f 	and.w	r2, r2, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1af      	bne.n	8002394 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80da 	beq.w	80025f8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d069      	beq.n	8002522 <HAL_RCC_OscConfig+0x6da>
 800244e:	2301      	movs	r3, #1
 8002450:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_OscConfig+0x654>)
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	461a      	mov	r2, r3
 8002474:	2301      	movs	r3, #1
 8002476:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002478:	f7ff fa16 	bl	80018a8 <HAL_GetTick>
 800247c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002480:	e00e      	b.n	80024a0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff fa11 	bl	80018a8 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d906      	bls.n	80024a0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e3d9      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	10908120 	.word	0x10908120
 80024a0:	2302      	movs	r3, #2
 80024a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80024b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024b6:	2202      	movs	r2, #2
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f2a3 	rbit	r2, r3
 80024c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80024e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4ba5      	ldr	r3, [pc, #660]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80024e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024ea:	2102      	movs	r1, #2
 80024ec:	6019      	str	r1, [r3, #0]
 80024ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	fa93 f1a3 	rbit	r1, r3
 80024f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024fc:	6019      	str	r1, [r3, #0]
  return result;
 80024fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0b0      	beq.n	8002482 <HAL_RCC_OscConfig+0x63a>
 8002520:	e06a      	b.n	80025f8 <HAL_RCC_OscConfig+0x7b0>
 8002522:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	fa93 f2a3 	rbit	r2, r3
 8002534:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002538:	601a      	str	r2, [r3, #0]
  return result;
 800253a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800253e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	4b8c      	ldr	r3, [pc, #560]	; (800277c <HAL_RCC_OscConfig+0x934>)
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	461a      	mov	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff f9a8 	bl	80018a8 <HAL_GetTick>
 8002558:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	e009      	b.n	8002572 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800255e:	f7ff f9a3 	bl	80018a8 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e36b      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 8002572:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002576:	2202      	movs	r2, #2
 8002578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	fa93 f2a3 	rbit	r2, r3
 8002584:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800258e:	2202      	movs	r2, #2
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fa93 f2a3 	rbit	r2, r3
 800259c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025a6:	2202      	movs	r2, #2
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	fa93 f2a3 	rbit	r2, r3
 80025b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80025bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025c2:	2102      	movs	r1, #2
 80025c4:	6019      	str	r1, [r3, #0]
 80025c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	fa93 f1a3 	rbit	r1, r3
 80025d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025d4:	6019      	str	r1, [r3, #0]
  return result;
 80025d6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	fab3 f383 	clz	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1b2      	bne.n	800255e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8158 	beq.w	80028b8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b5a      	ldr	r3, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	4b57      	ldr	r3, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a56      	ldr	r2, [pc, #344]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f107 0308 	add.w	r3, r7, #8
 8002638:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x938>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11a      	bne.n	8002682 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <HAL_RCC_OscConfig+0x938>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a4b      	ldr	r2, [pc, #300]	; (8002780 <HAL_RCC_OscConfig+0x938>)
 8002652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002656:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002658:	f7ff f926 	bl	80018a8 <HAL_GetTick>
 800265c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	e009      	b.n	8002676 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7ff f921 	bl	80018a8 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e2e9      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_OscConfig+0x938>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0ef      	beq.n	8002662 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x852>
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	4a39      	ldr	r2, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6213      	str	r3, [r2, #32]
 8002698:	e02f      	b.n	80026fa <HAL_RCC_OscConfig+0x8b2>
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x876>
 80026a4:	4b34      	ldr	r3, [pc, #208]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a33      	ldr	r2, [pc, #204]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026b6:	f023 0304 	bic.w	r3, r3, #4
 80026ba:	6213      	str	r3, [r2, #32]
 80026bc:	e01d      	b.n	80026fa <HAL_RCC_OscConfig+0x8b2>
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x89a>
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a2a      	ldr	r2, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x8b2>
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d06b      	beq.n	80027dc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7ff f8d0 	bl	80018a8 <HAL_GetTick>
 8002708:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff f8cb 	bl	80018a8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e291      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 8002726:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800272a:	2202      	movs	r2, #2
 800272c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fa93 f2a3 	rbit	r2, r3
 8002738:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002742:	2202      	movs	r2, #2
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	fa93 f2a3 	rbit	r2, r3
 8002750:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002754:	601a      	str	r2, [r3, #0]
  return result;
 8002756:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800275a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d109      	bne.n	8002784 <HAL_RCC_OscConfig+0x93c>
 8002770:	4b01      	ldr	r3, [pc, #4]	; (8002778 <HAL_RCC_OscConfig+0x930>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x958>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	10908120 	.word	0x10908120
 8002780:	40007000 	.word	0x40007000
 8002784:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002788:	2202      	movs	r2, #2
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	4bbb      	ldr	r3, [pc, #748]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027a4:	2102      	movs	r1, #2
 80027a6:	6011      	str	r1, [r2, #0]
 80027a8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	fa92 f1a2 	rbit	r1, r2
 80027b2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80027b6:	6011      	str	r1, [r2, #0]
  return result;
 80027b8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	fab2 f282 	clz	r2, r2
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f002 021f 	and.w	r2, r2, #31
 80027ce:	2101      	movs	r1, #1
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d099      	beq.n	800270e <HAL_RCC_OscConfig+0x8c6>
 80027da:	e063      	b.n	80028a4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7ff f864 	bl	80018a8 <HAL_GetTick>
 80027e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7ff f85f 	bl	80018a8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e225      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 80027fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002802:	2202      	movs	r2, #2
 8002804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	fa93 f2a3 	rbit	r2, r3
 8002810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800281a:	2202      	movs	r2, #2
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fa93 f2a3 	rbit	r2, r3
 8002828:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800282c:	601a      	str	r2, [r3, #0]
  return result;
 800282e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002832:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d102      	bne.n	800284e <HAL_RCC_OscConfig+0xa06>
 8002848:	4b90      	ldr	r3, [pc, #576]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	e00d      	b.n	800286a <HAL_RCC_OscConfig+0xa22>
 800284e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002852:	2202      	movs	r2, #2
 8002854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fa93 f2a3 	rbit	r2, r3
 8002860:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800286e:	2102      	movs	r1, #2
 8002870:	6011      	str	r1, [r2, #0]
 8002872:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	fa92 f1a2 	rbit	r1, r2
 800287c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002880:	6011      	str	r1, [r2, #0]
  return result;
 8002882:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	f002 021f 	and.w	r2, r2, #31
 8002898:	2101      	movs	r1, #1
 800289a:	fa01 f202 	lsl.w	r2, r1, r2
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1a0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b77      	ldr	r3, [pc, #476]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	4a76      	ldr	r2, [pc, #472]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 80028b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 81c2 	beq.w	8002c48 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b71      	ldr	r3, [pc, #452]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	f000 819c 	beq.w	8002c0a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	f040 8114 	bne.w	8002b06 <HAL_RCC_OscConfig+0xcbe>
 80028de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028f6:	601a      	str	r2, [r3, #0]
  return result;
 80028f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002908:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	461a      	mov	r2, r3
 8002910:	2300      	movs	r3, #0
 8002912:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe ffc8 	bl	80018a8 <HAL_GetTick>
 8002918:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291c:	e009      	b.n	8002932 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291e:	f7fe ffc3 	bl	80018a8 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e18b      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 8002932:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002936:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800293a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	fa93 f2a3 	rbit	r2, r3
 8002946:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800294a:	601a      	str	r2, [r3, #0]
  return result;
 800294c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002950:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_OscConfig+0xb24>
 8002966:	4b49      	ldr	r3, [pc, #292]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e01b      	b.n	80029a4 <HAL_RCC_OscConfig+0xb5c>
 800296c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002970:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800298a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	fa93 f2a3 	rbit	r2, r3
 800299a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029ac:	6011      	str	r1, [r2, #0]
 80029ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	fa92 f1a2 	rbit	r1, r2
 80029b8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80029bc:	6011      	str	r1, [r2, #0]
  return result;
 80029be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f042 0220 	orr.w	r2, r2, #32
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f002 021f 	and.w	r2, r2, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d19e      	bne.n	800291e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029e8:	1d3b      	adds	r3, r7, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	4925      	ldr	r1, [pc, #148]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a14:	601a      	str	r2, [r3, #0]
  return result;
 8002a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a1a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2301      	movs	r3, #1
 8002a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe ff39 	bl	80018a8 <HAL_GetTick>
 8002a36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3a:	e009      	b.n	8002a50 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe ff34 	bl	80018a8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e0fc      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 8002a50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fa93 f2a3 	rbit	r2, r3
 8002a64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a68:	601a      	str	r2, [r3, #0]
  return result;
 8002a6a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_RCC_OscConfig+0xc48>
 8002a84:	4b01      	ldr	r3, [pc, #4]	; (8002a8c <HAL_RCC_OscConfig+0xc44>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e01e      	b.n	8002ac8 <HAL_RCC_OscConfig+0xc80>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f2a3 	rbit	r2, r3
 8002aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_OscConfig+0xe0c>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002acc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ad0:	6011      	str	r1, [r2, #0]
 8002ad2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	fa92 f1a2 	rbit	r1, r2
 8002adc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ae0:	6011      	str	r1, [r2, #0]
  return result;
 8002ae2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f042 0220 	orr.w	r2, r2, #32
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	f002 021f 	and.w	r2, r2, #31
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d09b      	beq.n	8002a3c <HAL_RCC_OscConfig+0xbf4>
 8002b04:	e0a0      	b.n	8002c48 <HAL_RCC_OscConfig+0xe00>
 8002b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1e:	601a      	str	r2, [r3, #0]
  return result;
 8002b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3c:	f7fe feb4 	bl	80018a8 <HAL_GetTick>
 8002b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b44:	e009      	b.n	8002b5a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b46:	f7fe feaf 	bl	80018a8 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e077      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
 8002b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	601a      	str	r2, [r3, #0]
  return result;
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	095b      	lsrs	r3, r3, #5
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_RCC_OscConfig+0xd4c>
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <HAL_RCC_OscConfig+0xe0c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e01b      	b.n	8002bcc <HAL_RCC_OscConfig+0xd84>
 8002b94:	f107 0320 	add.w	r3, r7, #32
 8002b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	f107 0320 	add.w	r3, r7, #32
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 0318 	add.w	r3, r7, #24
 8002bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f2a3 	rbit	r2, r3
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_OscConfig+0xe0c>)
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	f107 0210 	add.w	r2, r7, #16
 8002bd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bd4:	6011      	str	r1, [r2, #0]
 8002bd6:	f107 0210 	add.w	r2, r7, #16
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	fa92 f1a2 	rbit	r1, r2
 8002be0:	f107 020c 	add.w	r2, r7, #12
 8002be4:	6011      	str	r1, [r2, #0]
  return result;
 8002be6:	f107 020c 	add.w	r2, r7, #12
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	fab2 f282 	clz	r2, r2
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	f042 0220 	orr.w	r2, r2, #32
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f002 021f 	and.w	r2, r2, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d19e      	bne.n	8002b46 <HAL_RCC_OscConfig+0xcfe>
 8002c08:	e01e      	b.n	8002c48 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e018      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCC_OscConfig+0xe0c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c20:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000

08002c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b09e      	sub	sp, #120	; 0x78
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e162      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b90      	ldr	r3, [pc, #576]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b8d      	ldr	r3, [pc, #564]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 0207 	bic.w	r2, r3, #7
 8002c86:	498b      	ldr	r1, [pc, #556]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e14a      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d008      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b82      	ldr	r3, [pc, #520]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	497f      	ldr	r1, [pc, #508]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80dc 	beq.w	8002e84 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d13c      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xf6>
 8002cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xa6>
 8002cf8:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	e00f      	b.n	8002d1e <HAL_RCC_ClockConfig+0xc6>
 8002cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d06:	fa93 f3a3 	rbit	r3, r3
 8002d0a:	667b      	str	r3, [r7, #100]	; 0x64
 8002d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d10:	663b      	str	r3, [r7, #96]	; 0x60
 8002d12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1a:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d22:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d26:	fa92 f2a2 	rbit	r2, r2
 8002d2a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d2e:	fab2 f282 	clz	r2, r2
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f042 0220 	orr.w	r2, r2, #32
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f002 021f 	and.w	r2, r2, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d17b      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0f3      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d13c      	bne.n	8002dd0 <HAL_RCC_ClockConfig+0x178>
 8002d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d102      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x128>
 8002d7a:	4b4f      	ldr	r3, [pc, #316]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	e00f      	b.n	8002da0 <HAL_RCC_ClockConfig+0x148>
 8002d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40
 8002d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d9c:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002da4:	63ba      	str	r2, [r7, #56]	; 0x38
 8002da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002da8:	fa92 f2a2 	rbit	r2, r2
 8002dac:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002db0:	fab2 f282 	clz	r2, r2
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	f042 0220 	orr.w	r2, r2, #32
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f002 021f 	and.w	r2, r2, #31
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d13a      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e0b2      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d102      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x1a0>
 8002df2:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e00d      	b.n	8002e14 <HAL_RCC_ClockConfig+0x1bc>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2202      	movs	r2, #2
 8002e16:	61ba      	str	r2, [r7, #24]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	fa92 f2a2 	rbit	r2, r2
 8002e1e:	617a      	str	r2, [r7, #20]
  return result;
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	fab2 f282 	clz	r2, r2
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	f042 0220 	orr.w	r2, r2, #32
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	f002 021f 	and.w	r2, r2, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f202 	lsl.w	r2, r1, r2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e079      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f023 0203 	bic.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	491a      	ldr	r1, [pc, #104]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e54:	f7fe fd28 	bl	80018a8 <HAL_GetTick>
 8002e58:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	e00a      	b.n	8002e72 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e5c:	f7fe fd24 	bl	80018a8 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e061      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 020c 	and.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d1eb      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d214      	bcs.n	8002ebc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	4906      	ldr	r1, [pc, #24]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <HAL_RCC_ClockConfig+0x25c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e040      	b.n	8002f36 <HAL_RCC_ClockConfig+0x2de>
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_RCC_ClockConfig+0x2e8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	491a      	ldr	r1, [pc, #104]	; (8002f40 <HAL_RCC_ClockConfig+0x2e8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x2e8>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x2e8>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002efa:	f000 f829 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002efe:	4601      	mov	r1, r0
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_RCC_ClockConfig+0x2e8>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f08:	22f0      	movs	r2, #240	; 0xf0
 8002f0a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	fa92 f2a2 	rbit	r2, r2
 8002f12:	60fa      	str	r2, [r7, #12]
  return result;
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	40d3      	lsrs	r3, r2
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x2ec>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	fa21 f303 	lsr.w	r3, r1, r3
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_RCC_ClockConfig+0x2f0>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_RCC_ClockConfig+0x2f4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fc76 	bl	8001820 <HAL_InitTick>
  
  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3778      	adds	r7, #120	; 0x78
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	080047bc 	.word	0x080047bc
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	20000034 	.word	0x20000034

08002f50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b08b      	sub	sp, #44	; 0x2c
 8002f54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f6a:	4b29      	ldr	r3, [pc, #164]	; (8003010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d002      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x30>
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d003      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x36>
 8002f7e:	e03c      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f82:	623b      	str	r3, [r7, #32]
      break;
 8002f84:	e03c      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f8c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f90:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	fa92 f2a2 	rbit	r2, r2
 8002f98:	607a      	str	r2, [r7, #4]
  return result;
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	fab2 f282 	clz	r2, r2
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	40d3      	lsrs	r3, r2
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	fa92 f2a2 	rbit	r2, r2
 8002fbc:	60fa      	str	r2, [r7, #12]
  return result;
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	fab2 f282 	clz	r2, r2
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	40d3      	lsrs	r3, r2
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4a0c      	ldr	r2, [pc, #48]	; (8003020 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	623b      	str	r3, [r7, #32]
      break;
 8002ff8:	e002      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ffc:	623b      	str	r3, [r7, #32]
      break;
 8002ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003000:	6a3b      	ldr	r3, [r7, #32]
}
 8003002:	4618      	mov	r0, r3
 8003004:	372c      	adds	r7, #44	; 0x2c
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	017d7840 	.word	0x017d7840
 8003018:	080047d4 	.word	0x080047d4
 800301c:	080047e4 	.word	0x080047e4
 8003020:	003d0900 	.word	0x003d0900
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003046:	f7ff ffef 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 800304a:	4601      	mov	r1, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003054:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003058:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	fa92 f2a2 	rbit	r2, r2
 8003060:	603a      	str	r2, [r7, #0]
  return result;
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	fab2 f282 	clz	r2, r2
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	40d3      	lsrs	r3, r2
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <HAL_RCC_GetPCLK1Freq+0x40>)
 800306e:	5cd3      	ldrb	r3, [r2, r3]
 8003070:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	080047cc 	.word	0x080047cc

08003084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800308a:	f7ff ffcd 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003098:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800309c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	fa92 f2a2 	rbit	r2, r2
 80030a4:	603a      	str	r2, [r7, #0]
  return result;
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	40d3      	lsrs	r3, r2
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000
 80030c4:	080047cc 	.word	0x080047cc

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b092      	sub	sp, #72	; 0x48
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80d4 	beq.w	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ec:	4b4e      	ldr	r3, [pc, #312]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003102:	61d3      	str	r3, [r2, #28]
 8003104:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b45      	ldr	r3, [pc, #276]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b42      	ldr	r3, [pc, #264]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a41      	ldr	r2, [pc, #260]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe fbbb 	bl	80018a8 <HAL_GetTick>
 8003132:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe fbb7 	bl	80018a8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b64      	cmp	r3, #100	; 0x64
 8003142:	d901      	bls.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e13c      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b38      	ldr	r3, [pc, #224]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800315e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8084 	beq.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800316e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003170:	429a      	cmp	r2, r3
 8003172:	d07c      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003174:	4b2c      	ldr	r3, [pc, #176]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800317e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	4b26      	ldr	r3, [pc, #152]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	461a      	mov	r2, r3
 800319e:	2301      	movs	r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	461a      	mov	r2, r3
 80031c2:	2300      	movs	r3, #0
 80031c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d04b      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d6:	f7fe fb67 	bl	80018a8 <HAL_GetTick>
 80031da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fb63 	bl	80018a8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0e6      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80031f4:	2302      	movs	r3, #2
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	61fb      	str	r3, [r7, #28]
  return result;
 800320c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	fab3 f383 	clz	r3, r3
 8003212:	b2db      	uxtb	r3, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d108      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003222:	4b01      	ldr	r3, [pc, #4]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	e00d      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003228:	40021000 	.word	0x40021000
 800322c:	40007000 	.word	0x40007000
 8003230:	10908100 	.word	0x10908100
 8003234:	2302      	movs	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	4b62      	ldr	r3, [pc, #392]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	2202      	movs	r2, #2
 8003246:	613a      	str	r2, [r7, #16]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	60fa      	str	r2, [r7, #12]
  return result;
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	fab2 f282 	clz	r2, r2
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f002 021f 	and.w	r2, r2, #31
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0b7      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800326e:	4b57      	ldr	r3, [pc, #348]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4954      	ldr	r1, [pc, #336]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800327c:	4313      	orrs	r3, r2
 800327e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003280:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003288:	4b50      	ldr	r3, [pc, #320]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	4a4f      	ldr	r2, [pc, #316]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800328e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003292:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f023 0203 	bic.w	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4947      	ldr	r1, [pc, #284]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d008      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032be:	4b43      	ldr	r3, [pc, #268]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f023 0210 	bic.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4940      	ldr	r1, [pc, #256]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032dc:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	f023 0220 	bic.w	r2, r3, #32
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4938      	ldr	r1, [pc, #224]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4931      	ldr	r1, [pc, #196]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003308:	4313      	orrs	r3, r2
 800330a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	4929      	ldr	r1, [pc, #164]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003326:	4313      	orrs	r3, r2
 8003328:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003336:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	4922      	ldr	r1, [pc, #136]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003344:	4313      	orrs	r3, r2
 8003346:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	491a      	ldr	r1, [pc, #104]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003362:	4313      	orrs	r3, r2
 8003364:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	4913      	ldr	r1, [pc, #76]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003380:	4313      	orrs	r3, r2
 8003382:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	490b      	ldr	r1, [pc, #44]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	4904      	ldr	r1, [pc, #16]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3748      	adds	r7, #72	; 0x48
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e083      	b.n	80034ea <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7f5b      	ldrb	r3, [r3, #29]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd fe74 	bl	80010e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	22ca      	movs	r2, #202	; 0xca
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2253      	movs	r2, #83	; 0x53
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f9fb 	bl	800380a <RTC_EnterInitMode>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	22ff      	movs	r2, #255	; 0xff
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2204      	movs	r2, #4
 8003426:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e05e      	b.n	80034ea <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800343a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6899      	ldr	r1, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68d2      	ldr	r2, [r2, #12]
 8003466:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6919      	ldr	r1, [r3, #16]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	041a      	lsls	r2, r3, #16
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10e      	bne.n	80034b8 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f98d 	bl	80037ba <HAL_RTC_WaitForSynchro>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	22ff      	movs	r2, #255	; 0xff
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2204      	movs	r2, #4
 80034b2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e018      	b.n	80034ea <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034c6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	22ff      	movs	r2, #255	; 0xff
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034f2:	b590      	push	{r4, r7, lr}
 80034f4:	b087      	sub	sp, #28
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	7f1b      	ldrb	r3, [r3, #28]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_RTC_SetTime+0x1c>
 800350a:	2302      	movs	r3, #2
 800350c:	e0aa      	b.n	8003664 <HAL_RTC_SetTime+0x172>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2202      	movs	r2, #2
 8003518:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d126      	bne.n	800356e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2200      	movs	r2, #0
 8003532:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f992 	bl	8003862 <RTC_ByteToBcd2>
 800353e:	4603      	mov	r3, r0
 8003540:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f98b 	bl	8003862 <RTC_ByteToBcd2>
 800354c:	4603      	mov	r3, r0
 800354e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003550:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	789b      	ldrb	r3, [r3, #2]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f983 	bl	8003862 <RTC_ByteToBcd2>
 800355c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800355e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	78db      	ldrb	r3, [r3, #3]
 8003566:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	e018      	b.n	80035a0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	785b      	ldrb	r3, [r3, #1]
 800358c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800358e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003594:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	78db      	ldrb	r3, [r3, #3]
 800359a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	22ca      	movs	r2, #202	; 0xca
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2253      	movs	r2, #83	; 0x53
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f92a 	bl	800380a <RTC_EnterInitMode>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2204      	movs	r2, #4
 80035c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e047      	b.n	8003664 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800361a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d111      	bne.n	800364e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f8c5 	bl	80037ba <HAL_RTC_WaitForSynchro>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00b      	beq.n	800364e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2204      	movs	r2, #4
 8003642:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e00a      	b.n	8003664 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	22ff      	movs	r2, #255	; 0xff
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003662:	2300      	movs	r3, #0
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	bd90      	pop	{r4, r7, pc}

0800366c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	7f1b      	ldrb	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_RTC_SetDate+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e094      	b.n	80037b2 <HAL_RTC_SetDate+0x146>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2202      	movs	r2, #2
 8003692:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10e      	bne.n	80036b8 <HAL_RTC_SetDate+0x4c>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	785b      	ldrb	r3, [r3, #1]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	f023 0310 	bic.w	r3, r3, #16
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	330a      	adds	r3, #10
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d11c      	bne.n	80036f8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	78db      	ldrb	r3, [r3, #3]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f8cd 	bl	8003862 <RTC_ByteToBcd2>
 80036c8:	4603      	mov	r3, r0
 80036ca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f8c6 	bl	8003862 <RTC_ByteToBcd2>
 80036d6:	4603      	mov	r3, r0
 80036d8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036da:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	789b      	ldrb	r3, [r3, #2]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f8be 	bl	8003862 <RTC_ByteToBcd2>
 80036e6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80036e8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e00e      	b.n	8003716 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	78db      	ldrb	r3, [r3, #3]
 80036fc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003704:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800370a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22ca      	movs	r2, #202	; 0xca
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2253      	movs	r2, #83	; 0x53
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f86f 	bl	800380a <RTC_EnterInitMode>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	22ff      	movs	r2, #255	; 0xff
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2204      	movs	r2, #4
 800373e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e033      	b.n	80037b2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003758:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003768:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f81e 	bl	80037ba <HAL_RTC_WaitForSynchro>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2204      	movs	r2, #4
 8003790:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e00a      	b.n	80037b2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	22ff      	movs	r2, #255	; 0xff
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2201      	movs	r2, #1
 80037a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80037b0:	2300      	movs	r3, #0
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd90      	pop	{r4, r7, pc}

080037ba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80037d6:	f7fe f867 	bl	80018a8 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037dc:	e009      	b.n	80037f2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037de:	f7fe f863 	bl	80018a8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ec:	d901      	bls.n	80037f2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e007      	b.n	8003802 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ee      	beq.n	80037de <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d119      	bne.n	8003858 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800382e:	f7fe f83b 	bl	80018a8 <HAL_GetTick>
 8003832:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003834:	e009      	b.n	800384a <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003836:	f7fe f837 	bl	80018a8 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003844:	d901      	bls.n	800384a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e007      	b.n	800385a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ee      	beq.n	8003836 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003870:	e005      	b.n	800387e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3301      	adds	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	3b0a      	subs	r3, #10
 800387c:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b09      	cmp	r3, #9
 8003882:	d8f6      	bhi.n	8003872 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	b2da      	uxtb	r2, r3
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	4313      	orrs	r3, r2
 8003890:	b2db      	uxtb	r3, r3
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e09d      	b.n	80039ec <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d108      	bne.n	80038ca <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c0:	d009      	beq.n	80038d6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	61da      	str	r2, [r3, #28]
 80038c8:	e005      	b.n	80038d6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7fd fc1b 	bl	800112c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003916:	d902      	bls.n	800391e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	e002      	b.n	8003924 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800391e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800392c:	d007      	beq.n	800393e <HAL_SPI_Init+0xa0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003936:	d002      	beq.n	800393e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	ea42 0103 	orr.w	r1, r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	f003 0204 	and.w	r2, r3, #4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	f003 0310 	and.w	r3, r3, #16
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80039ba:	ea42 0103 	orr.w	r1, r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69da      	ldr	r2, [r3, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e049      	b.n	8003a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fc18 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 f9ce 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a1a      	ldr	r2, [r3, #32]
 8003ab8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10f      	bne.n	8003ae2 <HAL_TIM_Base_DeInit+0x40>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	f240 4344 	movw	r3, #1092	; 0x444
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_TIM_Base_DeInit+0x40>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fd fbd2 	bl	800128c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d001      	beq.n	8003b74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e033      	b.n	8003bdc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_TIM_Base_Start+0x8c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_TIM_Base_Start+0x3e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIM_Base_Start+0x3e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a15      	ldr	r2, [pc, #84]	; (8003bec <HAL_TIM_Base_Start+0x90>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d115      	bne.n	8003bc6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_TIM_Base_Start+0x94>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d015      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x7c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb2:	d011      	beq.n	8003bd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	e008      	b.n	8003bd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	00010007 	.word	0x00010007

08003bf4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6a1a      	ldr	r2, [r3, #32]
 8003c02:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <HAL_TIM_Base_Stop+0x38>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a1a      	ldr	r2, [r3, #32]
 8003c12:	f240 4344 	movw	r3, #1092	; 0x444
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d107      	bne.n	8003c2c <HAL_TIM_Base_Stop+0x38>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_ConfigClockSource+0x1c>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0b6      	b.n	8003dcc <HAL_TIM_ConfigClockSource+0x18a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	d03e      	beq.n	8003d1a <HAL_TIM_ConfigClockSource+0xd8>
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	f200 8087 	bhi.w	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca8:	f000 8086 	beq.w	8003db8 <HAL_TIM_ConfigClockSource+0x176>
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d87f      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003cb2:	2b70      	cmp	r3, #112	; 0x70
 8003cb4:	d01a      	beq.n	8003cec <HAL_TIM_ConfigClockSource+0xaa>
 8003cb6:	2b70      	cmp	r3, #112	; 0x70
 8003cb8:	d87b      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003cba:	2b60      	cmp	r3, #96	; 0x60
 8003cbc:	d050      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x11e>
 8003cbe:	2b60      	cmp	r3, #96	; 0x60
 8003cc0:	d877      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003cc2:	2b50      	cmp	r3, #80	; 0x50
 8003cc4:	d03c      	beq.n	8003d40 <HAL_TIM_ConfigClockSource+0xfe>
 8003cc6:	2b50      	cmp	r3, #80	; 0x50
 8003cc8:	d873      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d058      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x13e>
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d86f      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003cd2:	2b30      	cmp	r3, #48	; 0x30
 8003cd4:	d064      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x15e>
 8003cd6:	2b30      	cmp	r3, #48	; 0x30
 8003cd8:	d86b      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d060      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x15e>
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d867      	bhi.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d05c      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x15e>
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d05a      	beq.n	8003da0 <HAL_TIM_ConfigClockSource+0x15e>
 8003cea:	e062      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6899      	ldr	r1, [r3, #8]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	f000 f952 	bl	8003fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	609a      	str	r2, [r3, #8]
      break;
 8003d18:	e04f      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6818      	ldr	r0, [r3, #0]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6899      	ldr	r1, [r3, #8]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f000 f93b 	bl	8003fa4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d3c:	609a      	str	r2, [r3, #8]
      break;
 8003d3e:	e03c      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f000 f8af 	bl	8003eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2150      	movs	r1, #80	; 0x50
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f908 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e02c      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f000 f8ce 	bl	8003f0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2160      	movs	r1, #96	; 0x60
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f8f8 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003d7e:	e01c      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6859      	ldr	r1, [r3, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f000 f88f 	bl	8003eb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f8e8 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003d9e:	e00c      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f000 f8df 	bl	8003f6e <TIM_ITRx_SetConfig>
      break;
 8003db0:	e003      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e000      	b.n	8003dba <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003db8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a2e      	ldr	r2, [pc, #184]	; (8003ea0 <TIM_Base_SetConfig+0xcc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <TIM_Base_SetConfig+0x20>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d108      	bne.n	8003e06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_Base_SetConfig+0xcc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00f      	beq.n	8003e2e <TIM_Base_SetConfig+0x5a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0x5a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <TIM_Base_SetConfig+0xd0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0x5a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a21      	ldr	r2, [pc, #132]	; (8003ea8 <TIM_Base_SetConfig+0xd4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0x5a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a20      	ldr	r2, [pc, #128]	; (8003eac <TIM_Base_SetConfig+0xd8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <TIM_Base_SetConfig+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0xb0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <TIM_Base_SetConfig+0xd0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <TIM_Base_SetConfig+0xd4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0xb0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0b      	ldr	r2, [pc, #44]	; (8003eac <TIM_Base_SetConfig+0xd8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d103      	bne.n	8003e8c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	615a      	str	r2, [r3, #20]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40014400 	.word	0x40014400
 8003eac:	40014800 	.word	0x40014800

08003eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0201 	bic.w	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f023 030a 	bic.w	r3, r3, #10
 8003eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b087      	sub	sp, #28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0210 	bic.w	r2, r3, #16
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	031b      	lsls	r3, r3, #12
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f043 0307 	orr.w	r3, r3, #7
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e04f      	b.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a21      	ldr	r2, [pc, #132]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800402c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d009      	beq.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004064:	d004      	beq.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a10      	ldr	r2, [pc, #64]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10c      	bne.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004076:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	4313      	orrs	r3, r2
 8004080:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40014000 	.word	0x40014000

080040b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e040      	b.n	8004144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd f8f2 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0201 	bic.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f82c 	bl	800414c <UART_SetConfig>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e022      	b.n	8004144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f956 	bl	80043b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800411a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800412a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 0201 	orr.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f9dd 	bl	80044fc <UART_CheckIdleState>
 8004142:	4603      	mov	r3, r0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b8a      	ldr	r3, [pc, #552]	; (80043a0 <UART_SetConfig+0x254>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	430b      	orrs	r3, r1
 8004182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68da      	ldr	r2, [r3, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a78      	ldr	r2, [pc, #480]	; (80043a4 <UART_SetConfig+0x258>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d120      	bne.n	800420a <UART_SetConfig+0xbe>
 80041c8:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <UART_SetConfig+0x25c>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d817      	bhi.n	8004204 <UART_SetConfig+0xb8>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x90>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	080041ed 	.word	0x080041ed
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	080041ff 	.word	0x080041ff
 80041e8:	080041f3 	.word	0x080041f3
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e01d      	b.n	800422e <UART_SetConfig+0xe2>
 80041f2:	2302      	movs	r3, #2
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e01a      	b.n	800422e <UART_SetConfig+0xe2>
 80041f8:	2304      	movs	r3, #4
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e017      	b.n	800422e <UART_SetConfig+0xe2>
 80041fe:	2308      	movs	r3, #8
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e014      	b.n	800422e <UART_SetConfig+0xe2>
 8004204:	2310      	movs	r3, #16
 8004206:	77fb      	strb	r3, [r7, #31]
 8004208:	e011      	b.n	800422e <UART_SetConfig+0xe2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a67      	ldr	r2, [pc, #412]	; (80043ac <UART_SetConfig+0x260>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d102      	bne.n	800421a <UART_SetConfig+0xce>
 8004214:	2300      	movs	r3, #0
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e009      	b.n	800422e <UART_SetConfig+0xe2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a64      	ldr	r2, [pc, #400]	; (80043b0 <UART_SetConfig+0x264>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d102      	bne.n	800422a <UART_SetConfig+0xde>
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e001      	b.n	800422e <UART_SetConfig+0xe2>
 800422a:	2310      	movs	r3, #16
 800422c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004236:	d15b      	bne.n	80042f0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d827      	bhi.n	800428e <UART_SetConfig+0x142>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xf8>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004269 	.word	0x08004269
 8004248:	08004271 	.word	0x08004271
 800424c:	08004279 	.word	0x08004279
 8004250:	0800428f 	.word	0x0800428f
 8004254:	0800427f 	.word	0x0800427f
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800428f 	.word	0x0800428f
 8004260:	0800428f 	.word	0x0800428f
 8004264:	08004287 	.word	0x08004287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7fe feea 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 800426c:	61b8      	str	r0, [r7, #24]
        break;
 800426e:	e013      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004270:	f7fe ff08 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 8004274:	61b8      	str	r0, [r7, #24]
        break;
 8004276:	e00f      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004278:	4b4e      	ldr	r3, [pc, #312]	; (80043b4 <UART_SetConfig+0x268>)
 800427a:	61bb      	str	r3, [r7, #24]
        break;
 800427c:	e00c      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe fe67 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8004282:	61b8      	str	r0, [r7, #24]
        break;
 8004284:	e008      	b.n	8004298 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428a:	61bb      	str	r3, [r7, #24]
        break;
 800428c:	e004      	b.n	8004298 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	77bb      	strb	r3, [r7, #30]
        break;
 8004296:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d074      	beq.n	8004388 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	005a      	lsls	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b0f      	cmp	r3, #15
 80042ba:	d916      	bls.n	80042ea <UART_SetConfig+0x19e>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d212      	bcs.n	80042ea <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f023 030f 	bic.w	r3, r3, #15
 80042cc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	085b      	lsrs	r3, r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	b29a      	uxth	r2, r3
 80042da:	89fb      	ldrh	r3, [r7, #14]
 80042dc:	4313      	orrs	r3, r2
 80042de:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	89fa      	ldrh	r2, [r7, #14]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	e04e      	b.n	8004388 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77bb      	strb	r3, [r7, #30]
 80042ee:	e04b      	b.n	8004388 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042f0:	7ffb      	ldrb	r3, [r7, #31]
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d827      	bhi.n	8004346 <UART_SetConfig+0x1fa>
 80042f6:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0x1b0>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	08004347 	.word	0x08004347
 800430c:	08004337 	.word	0x08004337
 8004310:	08004347 	.word	0x08004347
 8004314:	08004347 	.word	0x08004347
 8004318:	08004347 	.word	0x08004347
 800431c:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe fe8e 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004324:	61b8      	str	r0, [r7, #24]
        break;
 8004326:	e013      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004328:	f7fe feac 	bl	8003084 <HAL_RCC_GetPCLK2Freq>
 800432c:	61b8      	str	r0, [r7, #24]
        break;
 800432e:	e00f      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <UART_SetConfig+0x268>)
 8004332:	61bb      	str	r3, [r7, #24]
        break;
 8004334:	e00c      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fe fe0b 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 800433a:	61b8      	str	r0, [r7, #24]
        break;
 800433c:	e008      	b.n	8004350 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e004      	b.n	8004350 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	77bb      	strb	r3, [r7, #30]
        break;
 800434e:	bf00      	nop
    }

    if (pclk != 0U)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d018      	beq.n	8004388 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	085a      	lsrs	r2, r3, #1
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	441a      	add	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	fbb2 f3f3 	udiv	r3, r2, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	d908      	bls.n	8004384 <UART_SetConfig+0x238>
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004378:	d204      	bcs.n	8004384 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	60da      	str	r2, [r3, #12]
 8004382:	e001      	b.n	8004388 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004394:	7fbb      	ldrb	r3, [r7, #30]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	efff69f3 	.word	0xefff69f3
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40004800 	.word	0x40004800
 80043b4:	007a1200 	.word	0x007a1200

080043b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0320 	and.w	r3, r3, #32
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01a      	beq.n	80044ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b6:	d10a      	bne.n	80044ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]
  }
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af02      	add	r7, sp, #8
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800450c:	f7fd f9cc 	bl	80018a8 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b08      	cmp	r3, #8
 800451e:	d10e      	bne.n	800453e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f82d 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e023      	b.n	8004586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b04      	cmp	r3, #4
 800454a:	d10e      	bne.n	800456a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800454c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f817 	bl	800458e <UART_WaitOnFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e00d      	b.n	8004586 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b09c      	sub	sp, #112	; 0x70
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459e:	e0a5      	b.n	80046ec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a6:	f000 80a1 	beq.w	80046ec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd f97d 	bl	80018a8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80045ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d13e      	bne.n	800463e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d4:	667b      	str	r3, [r7, #100]	; 0x64
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e6      	bne.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3308      	adds	r3, #8
 80045f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004604:	f023 0301 	bic.w	r3, r3, #1
 8004608:	663b      	str	r3, [r7, #96]	; 0x60
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3308      	adds	r3, #8
 8004610:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004612:	64ba      	str	r2, [r7, #72]	; 0x48
 8004614:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004618:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e067      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d04f      	beq.n	80046ec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465a:	d147      	bne.n	80046ec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004664:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800467a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
 8004686:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800468a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e6      	bne.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3308      	adds	r3, #8
 800469e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	613b      	str	r3, [r7, #16]
   return(result);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046b8:	623a      	str	r2, [r7, #32]
 80046ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	69f9      	ldr	r1, [r7, #28]
 80046be:	6a3a      	ldr	r2, [r7, #32]
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e5      	bne.n	8004698 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e010      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4013      	ands	r3, r2
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	429a      	cmp	r2, r3
 8004708:	f43f af4a 	beq.w	80045a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3770      	adds	r7, #112	; 0x70
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <__libc_init_array>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4d0d      	ldr	r5, [pc, #52]	; (8004750 <__libc_init_array+0x38>)
 800471c:	4c0d      	ldr	r4, [pc, #52]	; (8004754 <__libc_init_array+0x3c>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	2600      	movs	r6, #0
 8004724:	42a6      	cmp	r6, r4
 8004726:	d109      	bne.n	800473c <__libc_init_array+0x24>
 8004728:	4d0b      	ldr	r5, [pc, #44]	; (8004758 <__libc_init_array+0x40>)
 800472a:	4c0c      	ldr	r4, [pc, #48]	; (800475c <__libc_init_array+0x44>)
 800472c:	f000 f82e 	bl	800478c <_init>
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	2600      	movs	r6, #0
 8004736:	42a6      	cmp	r6, r4
 8004738:	d105      	bne.n	8004746 <__libc_init_array+0x2e>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004740:	4798      	blx	r3
 8004742:	3601      	adds	r6, #1
 8004744:	e7ee      	b.n	8004724 <__libc_init_array+0xc>
 8004746:	f855 3b04 	ldr.w	r3, [r5], #4
 800474a:	4798      	blx	r3
 800474c:	3601      	adds	r6, #1
 800474e:	e7f2      	b.n	8004736 <__libc_init_array+0x1e>
 8004750:	080047f4 	.word	0x080047f4
 8004754:	080047f4 	.word	0x080047f4
 8004758:	080047f4 	.word	0x080047f4
 800475c:	080047f8 	.word	0x080047f8

08004760 <memcpy>:
 8004760:	440a      	add	r2, r1
 8004762:	4291      	cmp	r1, r2
 8004764:	f100 33ff 	add.w	r3, r0, #4294967295
 8004768:	d100      	bne.n	800476c <memcpy+0xc>
 800476a:	4770      	bx	lr
 800476c:	b510      	push	{r4, lr}
 800476e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004776:	4291      	cmp	r1, r2
 8004778:	d1f9      	bne.n	800476e <memcpy+0xe>
 800477a:	bd10      	pop	{r4, pc}

0800477c <memset>:
 800477c:	4402      	add	r2, r0
 800477e:	4603      	mov	r3, r0
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	f803 1b01 	strb.w	r1, [r3], #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
