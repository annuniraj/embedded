
Basic_State_Machine_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080dc  080080dc  000210a8  2**0
                  CONTENTS
  4 .ARM          00000000  080080dc  080080dc  000210a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080080dc  080080dc  000210a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080dc  080080dc  000180dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010a8  20000000  080080e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e50  200010a8  0800918c  000210a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ef8  0800918c  00022ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ace  00000000  00000000  000210d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033aa  00000000  00000000  00036ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00039f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019550  00000000  00000000  0003c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186e6  00000000  00000000  00055b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009479d  00000000  00000000  0006e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001029a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005408  00000000  00000000  001029f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200010a8 	.word	0x200010a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007fa4 	.word	0x08007fa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200010ac 	.word	0x200010ac
 80001c4:	08007fa4 	.word	0x08007fa4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <Manual_delay>:
 					Entry_flag;

 uint8_t Receive_Buffer[255];

void Manual_delay(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	for(int i=0;i<=500;i++)
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <Manual_delay+0x12>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000204:	ddf8      	ble.n	80001f8 <Manual_delay+0xc>
	{

	}
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <Lan_Interrupt_Service>:

void Lan_Interrupt_Service(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	if(getSn_IR(0) & (1 << 2))
 8000218:	f44f 7002 	mov.w	r0, #520	; 0x208
 800021c:	f002 fc00 	bl	8002a20 <WIZCHIP_READ>
 8000220:	4603      	mov	r3, r0
 8000222:	f003 0304 	and.w	r3, r3, #4
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00f      	beq.n	800024a <Lan_Interrupt_Service+0x36>
	{
		recv(0,Receive_Buffer,255);
 800022a:	22ff      	movs	r2, #255	; 0xff
 800022c:	4913      	ldr	r1, [pc, #76]	; (800027c <Lan_Interrupt_Service+0x68>)
 800022e:	2000      	movs	r0, #0
 8000230:	f001 fe14 	bl	8001e5c <recv>
//		if(Receive_Buffer==PING_ACK_CMD)
//		{
//			//Set State Idle State
//		}

		memset(Receive_Buffer,0,sizeof Receive_Buffer);// clear the receiving buffer
 8000234:	22ff      	movs	r2, #255	; 0xff
 8000236:	2100      	movs	r1, #0
 8000238:	4810      	ldr	r0, [pc, #64]	; (800027c <Lan_Interrupt_Service+0x68>)
 800023a:	f007 fd5b 	bl	8007cf4 <memset>
		setSn_IR(0, 0x04);
 800023e:	2104      	movs	r1, #4
 8000240:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000244:	f002 fc38 	bl	8002ab8 <WIZCHIP_WRITE>

	else
	{
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
	}
}
 8000248:	e015      	b.n	8000276 <Lan_Interrupt_Service+0x62>
	else if(getSn_IR(0) & (1 << 1))
 800024a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800024e:	f002 fbe7 	bl	8002a20 <WIZCHIP_READ>
 8000252:	4603      	mov	r3, r0
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d007      	beq.n	800026c <Lan_Interrupt_Service+0x58>
		Ethernet_Connect();
 800025c:	f000 fba2 	bl	80009a4 <Ethernet_Connect>
		setSn_IR(0, 0x02);
 8000260:	2102      	movs	r1, #2
 8000262:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000266:	f002 fc27 	bl	8002ab8 <WIZCHIP_WRITE>
}
 800026a:	e004      	b.n	8000276 <Lan_Interrupt_Service+0x62>
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
 800026c:	211f      	movs	r1, #31
 800026e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000272:	f002 fc21 	bl	8002ab8 <WIZCHIP_WRITE>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	200010e4 	.word	0x200010e4

08000280 <WR_Interrupt_Service>:

void WR_Interrupt_Service(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,WR_TRIG_LED_Pin,GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f003 fe8f 	bl	8003fb0 <HAL_GPIO_WritePin>
	Manual_delay();
 8000292:	f7ff ffab 	bl	80001ec <Manual_delay>
	HAL_GPIO_WritePin(GPIOA,WR_TRIG_LED_Pin,GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f003 fe86 	bl	8003fb0 <HAL_GPIO_WritePin>
	WR_Counts++;
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <WR_Interrupt_Service+0xc4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a26      	ldr	r2, [pc, #152]	; (8000344 <WR_Interrupt_Service+0xc4>)
 80002ac:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==0)
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <WR_Interrupt_Service+0xc8>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d126      	bne.n	8000304 <WR_Interrupt_Service+0x84>
	{
		switch(WR_Counts)
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <WR_Interrupt_Service+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d002      	beq.n	80002c4 <WR_Interrupt_Service+0x44>
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d012      	beq.n	80002e8 <WR_Interrupt_Service+0x68>
 80002c2:	e020      	b.n	8000306 <WR_Interrupt_Service+0x86>
		{
		case(1):
				send(0, (uint8_t *)INIT_CMD,strlen(INIT_CMD));
 80002c4:	2206      	movs	r2, #6
 80002c6:	4921      	ldr	r1, [pc, #132]	; (800034c <WR_Interrupt_Service+0xcc>)
 80002c8:	2000      	movs	r0, #0
 80002ca:	f001 fccd 	bl	8001c68 <send>
		        Timer2_Start();
 80002ce:	f000 fc2d 	bl	8000b2c <Timer2_Start>
				WR_Instant=Timer2_GetTimer();
 80002d2:	f000 fc79 	bl	8000bc8 <Timer2_GetTimer>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <WR_Interrupt_Service+0xd0>)
 80002dc:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WR_Ring,&WR_Instant);
 80002de:	491c      	ldr	r1, [pc, #112]	; (8000350 <WR_Interrupt_Service+0xd0>)
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <WR_Interrupt_Service+0xd4>)
 80002e2:	f001 f9cd 	bl	8001680 <RingWriteElement>
				break;
 80002e6:	e00e      	b.n	8000306 <WR_Interrupt_Service+0x86>
		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 80002e8:	220b      	movs	r2, #11
 80002ea:	491b      	ldr	r1, [pc, #108]	; (8000358 <WR_Interrupt_Service+0xd8>)
 80002ec:	2000      	movs	r0, #0
 80002ee:	f001 fcbb 	bl	8001c68 <send>
				Entry_flag=1;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <WR_Interrupt_Service+0xdc>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	801a      	strh	r2, [r3, #0]
				Rt_Lt_flag=1;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <WR_Interrupt_Service+0xe0>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	801a      	strh	r2, [r3, #0]
				Timer6_Start();
 80002fe:	f000 fc1f 	bl	8000b40 <Timer6_Start>
				break;
 8000302:	e000      	b.n	8000306 <WR_Interrupt_Service+0x86>
		}
	}
 8000304:	bf00      	nop

	if(Entry_flag==1)
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <WR_Interrupt_Service+0xdc>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d109      	bne.n	8000322 <WR_Interrupt_Service+0xa2>
	{
		WR_Instant=Timer2_GetTimer();
 800030e:	f000 fc5b 	bl	8000bc8 <Timer2_GetTimer>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <WR_Interrupt_Service+0xd0>)
 8000318:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WR_Ring,&WR_Instant);
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <WR_Interrupt_Service+0xd0>)
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <WR_Interrupt_Service+0xd4>)
 800031e:	f001 f9af 	bl	8001680 <RingWriteElement>
	}

	if(count<=TIMEOOUTPERIOD  || WR_Counts>=2 )
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <WR_Interrupt_Service+0xe4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b14      	cmp	r3, #20
 8000328:	d903      	bls.n	8000332 <WR_Interrupt_Service+0xb2>
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <WR_Interrupt_Service+0xc4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d906      	bls.n	8000340 <WR_Interrupt_Service+0xc0>
	{
		Timer6_Stop();
 8000332:	f000 fc0f 	bl	8000b54 <Timer6_Stop>
		count=0;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <WR_Interrupt_Service+0xe4>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
		Timer6_Start();
 800033c:	f000 fc00 	bl	8000b40 <Timer6_Start>
	}
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200010c4 	.word	0x200010c4
 8000348:	200010dc 	.word	0x200010dc
 800034c:	08007fbc 	.word	0x08007fbc
 8000350:	200010d0 	.word	0x200010d0
 8000354:	20002678 	.word	0x20002678
 8000358:	08007fc4 	.word	0x08007fc4
 800035c:	200010e0 	.word	0x200010e0
 8000360:	200010de 	.word	0x200010de
 8000364:	200014e8 	.word	0x200014e8

08000368 <FCT_Interrupt_Service>:


void FCT_Interrupt_Service(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,FCT_TRIG_LED_Pin,GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	4849      	ldr	r0, [pc, #292]	; (8000498 <FCT_Interrupt_Service+0x130>)
 8000374:	f003 fe1c 	bl	8003fb0 <HAL_GPIO_WritePin>
	Manual_delay();
 8000378:	f7ff ff38 	bl	80001ec <Manual_delay>
	HAL_GPIO_WritePin(GPIOC,FCT_TRIG_LED_Pin,GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000382:	4845      	ldr	r0, [pc, #276]	; (8000498 <FCT_Interrupt_Service+0x130>)
 8000384:	f003 fe14 	bl	8003fb0 <HAL_GPIO_WritePin>
	FCT_Counts++;
 8000388:	4b44      	ldr	r3, [pc, #272]	; (800049c <FCT_Interrupt_Service+0x134>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	4a43      	ldr	r2, [pc, #268]	; (800049c <FCT_Interrupt_Service+0x134>)
 8000390:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==1)
 8000392:	4b43      	ldr	r3, [pc, #268]	; (80004a0 <FCT_Interrupt_Service+0x138>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d10a      	bne.n	80003b0 <FCT_Interrupt_Service+0x48>
	{
		FCT_Instant=Timer2_GetTimer();
 800039a:	f000 fc15 	bl	8000bc8 <Timer2_GetTimer>
 800039e:	4603      	mov	r3, r0
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b40      	ldr	r3, [pc, #256]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003a4:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 80003a6:	493f      	ldr	r1, [pc, #252]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003a8:	483f      	ldr	r0, [pc, #252]	; (80004a8 <FCT_Interrupt_Service+0x140>)
 80003aa:	f001 f969 	bl	8001680 <RingWriteElement>
 80003ae:	e061      	b.n	8000474 <FCT_Interrupt_Service+0x10c>
	}
	else if(Rt_Lt_flag==1)
 80003b0:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <FCT_Interrupt_Service+0x144>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d15d      	bne.n	8000474 <FCT_Interrupt_Service+0x10c>
	{
		FCT_Instant=Timer2_GetTimer();
 80003b8:	f000 fc06 	bl	8000bc8 <Timer2_GetTimer>
 80003bc:	4603      	mov	r3, r0
 80003be:	461a      	mov	r2, r3
 80003c0:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003c2:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 80003c4:	4937      	ldr	r1, [pc, #220]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003c6:	4838      	ldr	r0, [pc, #224]	; (80004a8 <FCT_Interrupt_Service+0x140>)
 80003c8:	f001 f95a 	bl	8001680 <RingWriteElement>

		//HAL_GPIO_WritePin(GPIOA,CA_TRIG_LED_Pin,GPIO_PIN_RESET);//test
		//Laser ON
		HAL_GPIO_WritePin(GPIOA,LA_TRIG_LED_Pin,GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f003 fdec 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,LA_OP_Pin,GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	4834      	ldr	r0, [pc, #208]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 80003e0:	f003 fde6 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LA_OP1_Pin,GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f003 fddf 	bl	8003fb0 <HAL_GPIO_WritePin>
		Manual_delay();
 80003f2:	f7ff fefb 	bl	80001ec <Manual_delay>

		//Camera ON
		HAL_GPIO_WritePin(GPIOA,CA_TRIG_LED_Pin,GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f003 fdd7 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000408:	4829      	ldr	r0, [pc, #164]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 800040a:	f003 fdd1 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 fdca 	bl	8003fb0 <HAL_GPIO_WritePin>
		//HAL_Delay(200);

		//Camera OFF
		Manual_delay();
 800041c:	f7ff fee6 	bl	80001ec <Manual_delay>
		Manual_delay();
 8000420:	f7ff fee4 	bl	80001ec <Manual_delay>
		HAL_GPIO_WritePin(GPIOA,CA_TRIG_LED_Pin,GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f003 fdc0 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	481e      	ldr	r0, [pc, #120]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 8000438:	f003 fdba 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f003 fdb3 	bl	8003fb0 <HAL_GPIO_WritePin>
		Manual_delay();
 800044a:	f7ff fecf 	bl	80001ec <Manual_delay>

		//Laser OFF
		HAL_GPIO_WritePin(GPIOA,LA_TRIG_LED_Pin,GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f003 fdab 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,LA_OP_Pin,GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 8000462:	f003 fda5 	bl	8003fb0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LA_OP1_Pin,GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f003 fd9e 	bl	8003fb0 <HAL_GPIO_WritePin>
	}

	if(count<=TIMEOOUTPERIOD  || FCT_Counts>=2 )
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <FCT_Interrupt_Service+0x14c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b14      	cmp	r3, #20
 800047a:	d903      	bls.n	8000484 <FCT_Interrupt_Service+0x11c>
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <FCT_Interrupt_Service+0x134>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d906      	bls.n	8000492 <FCT_Interrupt_Service+0x12a>
	{
		Timer6_Stop();
 8000484:	f000 fb66 	bl	8000b54 <Timer6_Stop>
		count=0;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <FCT_Interrupt_Service+0x14c>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		Timer6_Start();
 800048e:	f000 fb57 	bl	8000b40 <Timer6_Start>
	}

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	48000800 	.word	0x48000800
 800049c:	200010c8 	.word	0x200010c8
 80004a0:	200010dc 	.word	0x200010dc
 80004a4:	200010d8 	.word	0x200010d8
 80004a8:	20002698 	.word	0x20002698
 80004ac:	200010de 	.word	0x200010de
 80004b0:	48000400 	.word	0x48000400
 80004b4:	200014e8 	.word	0x200014e8

080004b8 <WL_Interrupt_Service>:

void WL_Interrupt_Service(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,WL_TRIG_LED_Pin,GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c2:	482d      	ldr	r0, [pc, #180]	; (8000578 <WL_Interrupt_Service+0xc0>)
 80004c4:	f003 fd74 	bl	8003fb0 <HAL_GPIO_WritePin>
	Manual_delay();
 80004c8:	f7ff fe90 	bl	80001ec <Manual_delay>
	HAL_GPIO_WritePin(GPIOB,WL_TRIG_LED_Pin,GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d2:	4829      	ldr	r0, [pc, #164]	; (8000578 <WL_Interrupt_Service+0xc0>)
 80004d4:	f003 fd6c 	bl	8003fb0 <HAL_GPIO_WritePin>
	WL_Counts++;
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <WL_Interrupt_Service+0xc4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a27      	ldr	r2, [pc, #156]	; (800057c <WL_Interrupt_Service+0xc4>)
 80004e0:	6013      	str	r3, [r2, #0]
	if(Rt_Lt_flag==0)
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <WL_Interrupt_Service+0xc8>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d126      	bne.n	8000538 <WL_Interrupt_Service+0x80>
	{
		switch(WL_Counts)
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <WL_Interrupt_Service+0xc4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d002      	beq.n	80004f8 <WL_Interrupt_Service+0x40>
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d012      	beq.n	800051c <WL_Interrupt_Service+0x64>
 80004f6:	e020      	b.n	800053a <WL_Interrupt_Service+0x82>
		{
		case(1):
				send(0, (uint8_t *)INIT_CMD,strlen(INIT_CMD));
 80004f8:	2206      	movs	r2, #6
 80004fa:	4922      	ldr	r1, [pc, #136]	; (8000584 <WL_Interrupt_Service+0xcc>)
 80004fc:	2000      	movs	r0, #0
 80004fe:	f001 fbb3 	bl	8001c68 <send>
				Timer2_Start();
 8000502:	f000 fb13 	bl	8000b2c <Timer2_Start>
				WL_Instant=Timer2_GetTimer();
 8000506:	f000 fb5f 	bl	8000bc8 <Timer2_GetTimer>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <WL_Interrupt_Service+0xd0>)
 8000510:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WL_Ring,&WL_Instant);
 8000512:	491d      	ldr	r1, [pc, #116]	; (8000588 <WL_Interrupt_Service+0xd0>)
 8000514:	481d      	ldr	r0, [pc, #116]	; (800058c <WL_Interrupt_Service+0xd4>)
 8000516:	f001 f8b3 	bl	8001680 <RingWriteElement>
				break;
 800051a:	e00e      	b.n	800053a <WL_Interrupt_Service+0x82>

		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 800051c:	220b      	movs	r2, #11
 800051e:	491c      	ldr	r1, [pc, #112]	; (8000590 <WL_Interrupt_Service+0xd8>)
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fba1 	bl	8001c68 <send>
				Entry_flag=1;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <WL_Interrupt_Service+0xdc>)
 8000528:	2201      	movs	r2, #1
 800052a:	801a      	strh	r2, [r3, #0]
				Lt_Rt_flag=1;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <WL_Interrupt_Service+0xe0>)
 800052e:	2201      	movs	r2, #1
 8000530:	801a      	strh	r2, [r3, #0]
				Timer6_Start();
 8000532:	f000 fb05 	bl	8000b40 <Timer6_Start>
				break;
 8000536:	e000      	b.n	800053a <WL_Interrupt_Service+0x82>
		}
	}
 8000538:	bf00      	nop

	if(Entry_flag==1)
 800053a:	4b16      	ldr	r3, [pc, #88]	; (8000594 <WL_Interrupt_Service+0xdc>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d109      	bne.n	8000556 <WL_Interrupt_Service+0x9e>
	{
		WL_Instant=Timer2_GetTimer();
 8000542:	f000 fb41 	bl	8000bc8 <Timer2_GetTimer>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <WL_Interrupt_Service+0xd0>)
 800054c:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WL_Ring,&WL_Instant);
 800054e:	490e      	ldr	r1, [pc, #56]	; (8000588 <WL_Interrupt_Service+0xd0>)
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <WL_Interrupt_Service+0xd4>)
 8000552:	f001 f895 	bl	8001680 <RingWriteElement>
	}

	if(count<=TIMEOOUTPERIOD  || WL_Counts>=2 )
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <WL_Interrupt_Service+0xe4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b14      	cmp	r3, #20
 800055c:	d903      	bls.n	8000566 <WL_Interrupt_Service+0xae>
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <WL_Interrupt_Service+0xc4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d906      	bls.n	8000574 <WL_Interrupt_Service+0xbc>
	{
		Timer6_Stop();
 8000566:	f000 faf5 	bl	8000b54 <Timer6_Stop>
		count=0;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <WL_Interrupt_Service+0xe4>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
		Timer6_Start();
 8000570:	f000 fae6 	bl	8000b40 <Timer6_Start>
	}
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	48000400 	.word	0x48000400
 800057c:	200010cc 	.word	0x200010cc
 8000580:	200010de 	.word	0x200010de
 8000584:	08007fbc 	.word	0x08007fbc
 8000588:	200010d4 	.word	0x200010d4
 800058c:	200026b8 	.word	0x200026b8
 8000590:	08007fc4 	.word	0x08007fc4
 8000594:	200010e0 	.word	0x200010e0
 8000598:	200010dc 	.word	0x200010dc
 800059c:	200014e8 	.word	0x200014e8

080005a0 <Send_WR_Samples>:
 buff_size	WR_Ring_Unit,
 			WL_Ring_Unit,
 			FCT_Ring_Unit;

void Send_WR_Samples()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	WR_Roller = (BUFFERSIZE-1)-(WR_Ring.place + 1);
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <Send_WR_Samples+0xa4>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	f06f 0339 	mvn.w	r3, #57	; 0x39
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <Send_WR_Samples+0xa8>)
 80005b6:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e036      	b.n	800062c <Send_WR_Samples+0x8c>
	{
		RingReadElement(&WR_Ring,&WR_Ring_Unit);
 80005be:	4923      	ldr	r1, [pc, #140]	; (800064c <Send_WR_Samples+0xac>)
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <Send_WR_Samples+0xa4>)
 80005c2:	f001 f8ad 	bl	8001720 <RingReadElement>
		itoa(WR_Ring_Unit,WR_Ring_Bulletin,10);
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <Send_WR_Samples+0xac>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	220a      	movs	r2, #10
 80005cc:	4920      	ldr	r1, [pc, #128]	; (8000650 <Send_WR_Samples+0xb0>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 fb70 	bl	8007cb4 <itoa>
		unsigned char* WR_Packet;
		WR_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(WR_Ring_Bulletin));
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <Send_WR_Samples+0xb0>)
 80005d6:	f7ff fe01 	bl	80001dc <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	3309      	adds	r3, #9
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 fb6a 	bl	8007cb8 <malloc>
 80005e4:	4603      	mov	r3, r0
 80005e6:	603b      	str	r3, [r7, #0]
		strcpy(WR_Packet,LOG_WRITE_CMD);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	491a      	ldr	r1, [pc, #104]	; (8000654 <Send_WR_Samples+0xb4>)
 80005ec:	461a      	mov	r2, r3
 80005ee:	460b      	mov	r3, r1
 80005f0:	cb03      	ldmia	r3!, {r0, r1}
 80005f2:	6010      	str	r0, [r2, #0]
 80005f4:	6051      	str	r1, [r2, #4]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	8113      	strh	r3, [r2, #8]
		strcat(WR_Packet,WR_Ring_Bulletin);
 80005fa:	4915      	ldr	r1, [pc, #84]	; (8000650 <Send_WR_Samples+0xb0>)
 80005fc:	6838      	ldr	r0, [r7, #0]
 80005fe:	f007 fc71 	bl	8007ee4 <strcat>

		send(0, (buff_size *)WR_Packet,strlen(WR_Packet));
 8000602:	6838      	ldr	r0, [r7, #0]
 8000604:	f7ff fdea 	bl	80001dc <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29b      	uxth	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	2000      	movs	r0, #0
 8000612:	f001 fb29 	bl	8001c68 <send>
		free(WR_Packet);
 8000616:	6838      	ldr	r0, [r7, #0]
 8000618:	f007 fb56 	bl	8007cc8 <free>
		WR_Packet=NULL;
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]

		HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f003 f9eb 	bl	80039fc <HAL_Delay>
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3301      	adds	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <Send_WR_Samples+0xa8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4293      	cmp	r3, r2
 8000636:	ddc2      	ble.n	80005be <Send_WR_Samples+0x1e>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20002678 	.word	0x20002678
 8000648:	2000123a 	.word	0x2000123a
 800064c:	2000123c 	.word	0x2000123c
 8000650:	200011e4 	.word	0x200011e4
 8000654:	08007fd0 	.word	0x08007fd0

08000658 <Send_WL_Samples>:
	}
}


void Send_WL_Samples()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	WL_Roller = (BUFFERSIZE-1)-(WL_Ring.place + 1);
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <Send_WL_Samples+0xa4>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f06f 0339 	mvn.w	r3, #57	; 0x39
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <Send_WL_Samples+0xa8>)
 800066e:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e036      	b.n	80006e4 <Send_WL_Samples+0x8c>
	{
		RingReadElement(&WL_Ring,&WL_Ring_Unit);
 8000676:	4923      	ldr	r1, [pc, #140]	; (8000704 <Send_WL_Samples+0xac>)
 8000678:	4820      	ldr	r0, [pc, #128]	; (80006fc <Send_WL_Samples+0xa4>)
 800067a:	f001 f851 	bl	8001720 <RingReadElement>
		itoa(WL_Ring_Unit,WL_Ring_Bulletin,10);
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <Send_WL_Samples+0xac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	220a      	movs	r2, #10
 8000684:	4920      	ldr	r1, [pc, #128]	; (8000708 <Send_WL_Samples+0xb0>)
 8000686:	4618      	mov	r0, r3
 8000688:	f007 fb14 	bl	8007cb4 <itoa>
		unsigned char* WL_Packet;
		WL_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(WL_Ring_Bulletin));
 800068c:	481e      	ldr	r0, [pc, #120]	; (8000708 <Send_WL_Samples+0xb0>)
 800068e:	f7ff fda5 	bl	80001dc <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	3309      	adds	r3, #9
 8000696:	4618      	mov	r0, r3
 8000698:	f007 fb0e 	bl	8007cb8 <malloc>
 800069c:	4603      	mov	r3, r0
 800069e:	603b      	str	r3, [r7, #0]
		strcpy(WL_Packet,LOG_WRITE_CMD);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	491a      	ldr	r1, [pc, #104]	; (800070c <Send_WL_Samples+0xb4>)
 80006a4:	461a      	mov	r2, r3
 80006a6:	460b      	mov	r3, r1
 80006a8:	cb03      	ldmia	r3!, {r0, r1}
 80006aa:	6010      	str	r0, [r2, #0]
 80006ac:	6051      	str	r1, [r2, #4]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	8113      	strh	r3, [r2, #8]
		strcat(WL_Packet,WL_Ring_Bulletin);
 80006b2:	4915      	ldr	r1, [pc, #84]	; (8000708 <Send_WL_Samples+0xb0>)
 80006b4:	6838      	ldr	r0, [r7, #0]
 80006b6:	f007 fc15 	bl	8007ee4 <strcat>

		send(0, (buff_size *)WL_Packet,strlen(WL_Packet));
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	f7ff fd8e 	bl	80001dc <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	2000      	movs	r0, #0
 80006ca:	f001 facd 	bl	8001c68 <send>
		free(WL_Packet);
 80006ce:	6838      	ldr	r0, [r7, #0]
 80006d0:	f007 fafa 	bl	8007cc8 <free>
		WL_Packet=NULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
		HAL_Delay(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f003 f98f 	bl	80039fc <HAL_Delay>
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <Send_WL_Samples+0xa8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	ddc2      	ble.n	8000676 <Send_WL_Samples+0x1e>
	}
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200026b8 	.word	0x200026b8
 8000700:	2000123b 	.word	0x2000123b
 8000704:	20001240 	.word	0x20001240
 8000708:	2000120c 	.word	0x2000120c
 800070c:	08007fd0 	.word	0x08007fd0

08000710 <Send_Data>:

void Send_Data()
{
 8000710:	b598      	push	{r3, r4, r7, lr}
 8000712:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)GRAB_STOP_CMD,strlen(GRAB_STOP_CMD));
 8000714:	220a      	movs	r2, #10
 8000716:	495b      	ldr	r1, [pc, #364]	; (8000884 <Send_Data+0x174>)
 8000718:	2000      	movs	r0, #0
 800071a:	f001 faa5 	bl	8001c68 <send>
	HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f003 f96c 	bl	80039fc <HAL_Delay>
	send(0, (uint8_t *)LOG_START_CMD,strlen(LOG_START_CMD));
 8000724:	220a      	movs	r2, #10
 8000726:	4958      	ldr	r1, [pc, #352]	; (8000888 <Send_Data+0x178>)
 8000728:	2000      	movs	r0, #0
 800072a:	f001 fa9d 	bl	8001c68 <send>
	HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f003 f964 	bl	80039fc <HAL_Delay>

	send(0, (uint8_t *)LOG_WR_CMD,strlen(LOG_WR_CMD));
 8000734:	220d      	movs	r2, #13
 8000736:	4955      	ldr	r1, [pc, #340]	; (800088c <Send_Data+0x17c>)
 8000738:	2000      	movs	r0, #0
 800073a:	f001 fa95 	bl	8001c68 <send>
	HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f003 f95c 	bl	80039fc <HAL_Delay>

	Send_WR_Samples();//send WR Samples
 8000744:	f7ff ff2c 	bl	80005a0 <Send_WR_Samples>
	HAL_Delay(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f003 f957 	bl	80039fc <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 800074e:	220c      	movs	r2, #12
 8000750:	494f      	ldr	r1, [pc, #316]	; (8000890 <Send_Data+0x180>)
 8000752:	2000      	movs	r0, #0
 8000754:	f001 fa88 	bl	8001c68 <send>
	HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f003 f94f 	bl	80039fc <HAL_Delay>

	send(0, (uint8_t *)LOG_FCT_CMD,strlen(LOG_FCT_CMD));
 800075e:	220e      	movs	r2, #14
 8000760:	494c      	ldr	r1, [pc, #304]	; (8000894 <Send_Data+0x184>)
 8000762:	2000      	movs	r0, #0
 8000764:	f001 fa80 	bl	8001c68 <send>
	HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f003 f947 	bl	80039fc <HAL_Delay>

	//Send_FCT_Samples();//send  Samples
	HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	f003 f944 	bl	80039fc <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 8000774:	220c      	movs	r2, #12
 8000776:	4946      	ldr	r1, [pc, #280]	; (8000890 <Send_Data+0x180>)
 8000778:	2000      	movs	r0, #0
 800077a:	f001 fa75 	bl	8001c68 <send>
	HAL_Delay(100);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f003 f93c 	bl	80039fc <HAL_Delay>

	send(0, (uint8_t *)LOG_WL_CMD,strlen(LOG_WL_CMD));
 8000784:	220d      	movs	r2, #13
 8000786:	4944      	ldr	r1, [pc, #272]	; (8000898 <Send_Data+0x188>)
 8000788:	2000      	movs	r0, #0
 800078a:	f001 fa6d 	bl	8001c68 <send>
	HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f003 f934 	bl	80039fc <HAL_Delay>

	Send_WL_Samples();
 8000794:	f7ff ff60 	bl	8000658 <Send_WL_Samples>
	HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f003 f92f 	bl	80039fc <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 800079e:	220c      	movs	r2, #12
 80007a0:	493b      	ldr	r1, [pc, #236]	; (8000890 <Send_Data+0x180>)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f001 fa60 	bl	8001c68 <send>
	HAL_Delay(100);
 80007a8:	2064      	movs	r0, #100	; 0x64
 80007aa:	f003 f927 	bl	80039fc <HAL_Delay>

	itoa(WR_Counts,WR_Count_Bulletin,10);
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <Send_Data+0x18c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	220a      	movs	r2, #10
 80007b4:	493a      	ldr	r1, [pc, #232]	; (80008a0 <Send_Data+0x190>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 fa7c 	bl	8007cb4 <itoa>
	send(0, (buff_size *)strcat(WR_Count_Bulletin,","),strlen(WR_Count_Bulletin));
 80007bc:	4838      	ldr	r0, [pc, #224]	; (80008a0 <Send_Data+0x190>)
 80007be:	f7ff fd0d 	bl	80001dc <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <Send_Data+0x190>)
 80007c8:	4413      	add	r3, r2
 80007ca:	4936      	ldr	r1, [pc, #216]	; (80008a4 <Send_Data+0x194>)
 80007cc:	461a      	mov	r2, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	8013      	strh	r3, [r2, #0]
 80007d4:	4c32      	ldr	r4, [pc, #200]	; (80008a0 <Send_Data+0x190>)
 80007d6:	4832      	ldr	r0, [pc, #200]	; (80008a0 <Send_Data+0x190>)
 80007d8:	f7ff fd00 	bl	80001dc <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29b      	uxth	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	4621      	mov	r1, r4
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 fa3f 	bl	8001c68 <send>

	HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f003 f906 	bl	80039fc <HAL_Delay>
	itoa(FCT_Counts,FCT_Count_Bulletin,10);
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <Send_Data+0x198>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	220a      	movs	r2, #10
 80007f6:	492d      	ldr	r1, [pc, #180]	; (80008ac <Send_Data+0x19c>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f007 fa5b 	bl	8007cb4 <itoa>
	send(0, (buff_size *)strcat(FCT_Count_Bulletin,","),strlen(FCT_Count_Bulletin));
 80007fe:	482b      	ldr	r0, [pc, #172]	; (80008ac <Send_Data+0x19c>)
 8000800:	f7ff fcec 	bl	80001dc <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <Send_Data+0x19c>)
 800080a:	4413      	add	r3, r2
 800080c:	4925      	ldr	r1, [pc, #148]	; (80008a4 <Send_Data+0x194>)
 800080e:	461a      	mov	r2, r3
 8000810:	460b      	mov	r3, r1
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	8013      	strh	r3, [r2, #0]
 8000816:	4c25      	ldr	r4, [pc, #148]	; (80008ac <Send_Data+0x19c>)
 8000818:	4824      	ldr	r0, [pc, #144]	; (80008ac <Send_Data+0x19c>)
 800081a:	f7ff fcdf 	bl	80001dc <strlen>
 800081e:	4603      	mov	r3, r0
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4621      	mov	r1, r4
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fa1e 	bl	8001c68 <send>

	HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f003 f8e5 	bl	80039fc <HAL_Delay>
	itoa(WL_Counts,WL_Count_Bulletin,10);
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <Send_Data+0x1a0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	220a      	movs	r2, #10
 8000838:	491e      	ldr	r1, [pc, #120]	; (80008b4 <Send_Data+0x1a4>)
 800083a:	4618      	mov	r0, r3
 800083c:	f007 fa3a 	bl	8007cb4 <itoa>
	send(0, (buff_size *)strcat(WL_Count_Bulletin,","),strlen(WL_Count_Bulletin));
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <Send_Data+0x1a4>)
 8000842:	f7ff fccb 	bl	80001dc <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <Send_Data+0x1a4>)
 800084c:	4413      	add	r3, r2
 800084e:	4915      	ldr	r1, [pc, #84]	; (80008a4 <Send_Data+0x194>)
 8000850:	461a      	mov	r2, r3
 8000852:	460b      	mov	r3, r1
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	8013      	strh	r3, [r2, #0]
 8000858:	4c16      	ldr	r4, [pc, #88]	; (80008b4 <Send_Data+0x1a4>)
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <Send_Data+0x1a4>)
 800085c:	f7ff fcbe 	bl	80001dc <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29b      	uxth	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	4621      	mov	r1, r4
 8000868:	2000      	movs	r0, #0
 800086a:	f001 f9fd 	bl	8001c68 <send>

	HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f003 f8c4 	bl	80039fc <HAL_Delay>
	send(0, (uint8_t *)LOG_STOP_CMD,strlen(LOG_STOP_CMD));
 8000874:	2209      	movs	r2, #9
 8000876:	4910      	ldr	r1, [pc, #64]	; (80008b8 <Send_Data+0x1a8>)
 8000878:	2000      	movs	r0, #0
 800087a:	f001 f9f5 	bl	8001c68 <send>
}
 800087e:	bf00      	nop
 8000880:	bd98      	pop	{r3, r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	08007fdc 	.word	0x08007fdc
 8000888:	08007fe8 	.word	0x08007fe8
 800088c:	08007ff4 	.word	0x08007ff4
 8000890:	08008004 	.word	0x08008004
 8000894:	08008014 	.word	0x08008014
 8000898:	08008024 	.word	0x08008024
 800089c:	200010c4 	.word	0x200010c4
 80008a0:	20001218 	.word	0x20001218
 80008a4:	08008034 	.word	0x08008034
 80008a8:	200010c8 	.word	0x200010c8
 80008ac:	20001230 	.word	0x20001230
 80008b0:	200010cc 	.word	0x200010cc
 80008b4:	20001224 	.word	0x20001224
 80008b8:	08008038 	.word	0x08008038

080008bc <cs_sel>:
uint8_t  IntStatus;
uint8_t  Sock_Rx_Flag;
uint8_t  Sock_Disconnect_Flag;

void cs_sel(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_RESET); //CS LOW
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <cs_sel+0x14>)
 80008c6:	f003 fb73 	bl	8003fb0 <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400

080008d4 <cs_desel>:

void cs_desel(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET); //CS HIGH
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <cs_desel+0x14>)
 80008de:	f003 fb67 	bl	8003fb0 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	48000400 	.word	0x48000400

080008ec <Init_Ethernet>:


void Init_Ethernet(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
	uint8_t bufSize[] = {2, 2, 2, 2};
 80008f2:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 80008f6:	61fb      	str	r3, [r7, #28]

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80008f8:	4922      	ldr	r1, [pc, #136]	; (8000984 <Init_Ethernet+0x98>)
 80008fa:	4823      	ldr	r0, [pc, #140]	; (8000988 <Init_Ethernet+0x9c>)
 80008fc:	f002 fb84 	bl	8003008 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000900:	4922      	ldr	r1, [pc, #136]	; (800098c <Init_Ethernet+0xa0>)
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <Init_Ethernet+0xa4>)
 8000904:	f002 fba6 	bl	8003054 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);
 8000908:	f107 021c 	add.w	r2, r7, #28
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fcf4 	bl	8003300 <wizchip_init>
	wiz_NetInfo netInfo = { .mac = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}, // Mac address
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	f8c3 2013 	str.w	r2, [r3, #19]
 800092a:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <Init_Ethernet+0xa8>)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000932:	6018      	str	r0, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	8019      	strh	r1, [r3, #0]
 8000938:	4a17      	ldr	r2, [pc, #92]	; (8000998 <Init_Ethernet+0xac>)
 800093a:	f107 030a 	add.w	r3, r7, #10
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6018      	str	r0, [r3, #0]
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <Init_Ethernet+0xb0>)
 8000944:	f107 030e 	add.w	r3, r7, #14
 8000948:	6810      	ldr	r0, [r2, #0]
 800094a:	6018      	str	r0, [r3, #0]
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <Init_Ethernet+0xb4>)
 800094e:	f107 0312 	add.w	r3, r7, #18
 8000952:	6810      	ldr	r0, [r2, #0]
 8000954:	6018      	str	r0, [r3, #0]
	 .ip = {192, 168, 1, 204},    // IP address
	 .sn = {255, 255, 255, 0},    // Subnet mask
	 .gw = {192, 168, 1, 1}};    // Gateway address

	wizchip_setnetinfo(&netInfo);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f002 ff3f 	bl	80037dc <wizchip_setnetinfo>
	wizchip_getnetinfo(&netInfo);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f002 ff7b 	bl	800385c <wizchip_getnetinfo>

	setSn_IMR(0, 0x06);
 8000966:	2106      	movs	r1, #6
 8000968:	f642 4008 	movw	r0, #11272	; 0x2c08
 800096c:	f002 f8a4 	bl	8002ab8 <WIZCHIP_WRITE>
	WIZCHIP_WRITE(SIMR,0x01);
 8000970:	2101      	movs	r1, #1
 8000972:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8000976:	f002 f89f 	bl	8002ab8 <WIZCHIP_WRITE>
}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	080008d5 	.word	0x080008d5
 8000988:	080008bd 	.word	0x080008bd
 800098c:	08000a95 	.word	0x08000a95
 8000990:	08000a71 	.word	0x08000a71
 8000994:	08008044 	.word	0x08008044
 8000998:	0800804c 	.word	0x0800804c
 800099c:	08008050 	.word	0x08008050
 80009a0:	08008054 	.word	0x08008054

080009a4 <Ethernet_Connect>:

void Ethernet_Connect(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	Init_Ethernet();
 80009a8:	f7ff ffa0 	bl	80008ec <Init_Ethernet>


	while(Connect_Reply !=SOCK_OK)
 80009ac:	e012      	b.n	80009d4 <Ethernet_Connect+0x30>
	{
		socket(0, Sn_MR_TCP, PORT_ADDR, SF_TCP_NODELAY);
 80009ae:	2320      	movs	r3, #32
 80009b0:	f242 328b 	movw	r2, #9099	; 0x238b
 80009b4:	2101      	movs	r1, #1
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 fef6 	bl	80017a8 <socket>
		Refresh_Watchdog();
 80009bc:	f000 f822 	bl	8000a04 <Refresh_Watchdog>
		Connect_Reply = connect(0,server_Add,PORT_ADDR);
 80009c0:	f242 328b 	movw	r2, #9099	; 0x238b
 80009c4:	490d      	ldr	r1, [pc, #52]	; (80009fc <Ethernet_Connect+0x58>)
 80009c6:	2000      	movs	r0, #0
 80009c8:	f001 f872 	bl	8001ab0 <connect>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009d2:	701a      	strb	r2, [r3, #0]
	while(Connect_Reply !=SOCK_OK)
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d1e8      	bne.n	80009ae <Ethernet_Connect+0xa>
	}

	if(Connect_Reply == 1)
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d102      	bne.n	80009ea <Ethernet_Connect+0x46>
	{
		Connect_Reply = 0;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(500);
 80009ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ee:	f003 f805 	bl	80039fc <HAL_Delay>
	Refresh_Watchdog();
 80009f2:	f000 f807 	bl	8000a04 <Refresh_Watchdog>

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20001244 	.word	0x20001244

08000a04 <Refresh_Watchdog>:

void Refresh_Watchdog(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	IWDG->KR  = 0x0000AAAA;
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <Refresh_Watchdog+0x18>)
 8000a0a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40003000 	.word	0x40003000

08000a20 <Get_event>:
#include"event.h"

struct EventStruct test_Events = {NULL_Event,NULL_Event};

myEvents Get_event()
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

	return test_Events.Next_Event;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <Get_event+0x14>)
 8000a26:	785b      	ldrb	r3, [r3, #1]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20001248 	.word	0x20001248

08000a38 <Set_event>:

void Set_event(myEvents N_E)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	test_Events.Next_Event = N_E;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <Set_event+0x1c>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	7053      	strb	r3, [r2, #1]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	20001248 	.word	0x20001248

08000a58 <Reset_event>:



void Reset_event()
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	test_Events.Next_Event=NULL_Event;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <Reset_event+0x14>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	705a      	strb	r2, [r3, #1]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20001248 	.word	0x20001248

08000a70 <spi_rb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi_rb(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi3, &rbuf, 1, 0xffffffff);
 8000a76:	1df9      	adds	r1, r7, #7
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <spi_rb+0x20>)
 8000a80:	f005 fb50 	bl	8006124 <HAL_SPI_Receive>
	return rbuf;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200012d0 	.word	0x200012d0

08000a94 <spi_wb>:

void spi_wb(uint8_t b)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xffffffff);
 8000a9e:	1df9      	adds	r1, r7, #7
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <spi_wb+0x20>)
 8000aa8:	f005 f9ce 	bl	8005e48 <HAL_SPI_Transmit>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200012d0 	.word	0x200012d0

08000ab8 <Timer2_Stop>:

void Timer2_Stop()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <Timer2_Stop+0x10>)
 8000abe:	f006 f931 	bl	8006d24 <HAL_TIM_Base_Stop>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20001334 	.word	0x20001334

08000acc <Timer2_DeInitilized>:

void Timer2_DeInitilized()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <Timer2_DeInitilized+0x20>)
 8000ad2:	f006 f87e 	bl	8006bd2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim6);
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <Timer2_DeInitilized+0x24>)
 8000ad8:	f006 f87b 	bl	8006bd2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim16);
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <Timer2_DeInitilized+0x28>)
 8000ade:	f006 f878 	bl	8006bd2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim17);
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <Timer2_DeInitilized+0x2c>)
 8000ae4:	f006 f875 	bl	8006bd2 <HAL_TIM_Base_DeInit>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20001334 	.word	0x20001334
 8000af0:	20001380 	.word	0x20001380
 8000af4:	200013cc 	.word	0x200013cc
 8000af8:	20001418 	.word	0x20001418

08000afc <Timer2_Initilized>:

void Timer2_Initilized()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <Timer2_Initilized+0x20>)
 8000b02:	f006 f80f 	bl	8006b24 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim6);
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <Timer2_Initilized+0x24>)
 8000b08:	f006 f80c 	bl	8006b24 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim16);
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <Timer2_Initilized+0x28>)
 8000b0e:	f006 f809 	bl	8006b24 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim17);
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <Timer2_Initilized+0x2c>)
 8000b14:	f006 f806 	bl	8006b24 <HAL_TIM_Base_Init>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20001334 	.word	0x20001334
 8000b20:	20001380 	.word	0x20001380
 8000b24:	200013cc 	.word	0x200013cc
 8000b28:	20001418 	.word	0x20001418

08000b2c <Timer2_Start>:

void Timer2_Start()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <Timer2_Start+0x10>)
 8000b32:	f006 f8ab 	bl	8006c8c <HAL_TIM_Base_Start>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20001334 	.word	0x20001334

08000b40 <Timer6_Start>:

void Timer6_Start()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <Timer6_Start+0x10>)
 8000b46:	f006 f915 	bl	8006d74 <HAL_TIM_Base_Start_IT>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20001380 	.word	0x20001380

08000b54 <Timer6_Stop>:

void Timer6_Stop()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <Timer6_Stop+0x10>)
 8000b5a:	f006 f95f 	bl	8006e1c <HAL_TIM_Base_Stop_IT>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20001380 	.word	0x20001380

08000b68 <Timer16_Start>:

void Timer16_Start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim16);
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Timer16_Start+0x14>)
 8000b6e:	f005 ffd9 	bl	8006b24 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim16);
 8000b72:	4802      	ldr	r0, [pc, #8]	; (8000b7c <Timer16_Start+0x14>)
 8000b74:	f006 f8fe 	bl	8006d74 <HAL_TIM_Base_Start_IT>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200013cc 	.word	0x200013cc

08000b80 <Timer16_Stop>:

void Timer16_Stop()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim16);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <Timer16_Stop+0x14>)
 8000b86:	f006 f949 	bl	8006e1c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_DeInit(&htim16);
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <Timer16_Stop+0x14>)
 8000b8c:	f006 f821 	bl	8006bd2 <HAL_TIM_Base_DeInit>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200013cc 	.word	0x200013cc

08000b98 <Timer17_Start>:

void Timer17_Start()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim17);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <Timer17_Start+0x14>)
 8000b9e:	f005 ffc1 	bl	8006b24 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim17);
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <Timer17_Start+0x14>)
 8000ba4:	f006 f8e6 	bl	8006d74 <HAL_TIM_Base_Start_IT>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20001418 	.word	0x20001418

08000bb0 <Timer17_Stop>:

void Timer17_Stop()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim17);
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <Timer17_Stop+0x14>)
 8000bb6:	f006 f931 	bl	8006e1c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_DeInit(&htim17);
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <Timer17_Stop+0x14>)
 8000bbc:	f006 f809 	bl	8006bd2 <HAL_TIM_Base_DeInit>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20001418 	.word	0x20001418

08000bc8 <Timer2_GetTimer>:

int Timer2_GetTimer()
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	uint32_t Tim_val = __HAL_TIM_GetCounter(&htim2);
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <Timer2_GetTimer+0x1c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	607b      	str	r3, [r7, #4]
	return Tim_val;
 8000bd6:	687b      	ldr	r3, [r7, #4]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20001334 	.word	0x20001334

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b094      	sub	sp, #80	; 0x50
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f002 fe9f 	bl	8003930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f909 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 fb53 	bl	80012a0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000bfa:	f000 f971 	bl	8000ee0 <MX_RTC_Init>
  MX_SPI2_Init();
 8000bfe:	f000 f9c9 	bl	8000f94 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c02:	f000 fa05 	bl	8001010 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c06:	f000 fa41 	bl	800108c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000c0a:	f000 fb15 	bl	8001238 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000c0e:	f000 fa8b 	bl	8001128 <MX_TIM6_Init>
  MX_TIM16_Init();
 8000c12:	f000 fac1 	bl	8001198 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000c16:	f000 fae7 	bl	80011e8 <MX_TIM17_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(Get_state())
 8000c1a:	f001 fb1f 	bl	800225c <Get_state>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	3b01      	subs	r3, #1
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d8f9      	bhi.n	8000c1a <main+0x32>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <main+0x44>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000c49 	.word	0x08000c49
 8000c30:	08000c81 	.word	0x08000c81
 8000c34:	08000ca1 	.word	0x08000ca1
 8000c38:	08000d71 	.word	0x08000d71
 8000c3c:	08000d8f 	.word	0x08000d8f
 8000c40:	08000dad 	.word	0x08000dad
 8000c44:	08000dbd 	.word	0x08000dbd
	  	  {
	  	  case Initilisation_State:
	  		  Initilisation_State_Handler();
 8000c48:	f001 fb24 	bl	8002294 <Initilisation_State_Handler>

	  		  if(Get_event()==Reset_Event)
 8000c4c:	f7ff fee8 	bl	8000a20 <Get_event>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	f040 80ba 	bne.w	8000dcc <main+0x1e4>
	  		  {
		  		  ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP);
 8000c58:	4963      	ldr	r1, [pc, #396]	; (8000de8 <main+0x200>)
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f002 fa26 	bl	80030ac <ctlwizchip>
		  		  if((Phy_TCP_IP==PHY_LINK_OFF) || (PortStatus==SOCKERR_SOCKSTATUS))
 8000c60:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <main+0x200>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d004      	beq.n	8000c72 <main+0x8a>
 8000c68:	4b60      	ldr	r3, [pc, #384]	; (8000dec <main+0x204>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f113 0f07 	cmn.w	r3, #7
 8000c70:	d103      	bne.n	8000c7a <main+0x92>
		  		  {
		  			  Set_state(Initilisation_State);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f001 fafe 	bl	8002274 <Set_state>
		  		  else
		  		  {
		  			Reset_State_Handler();
		  		  }
	  		  }
	  		  break;
 8000c78:	e0a8      	b.n	8000dcc <main+0x1e4>
		  			Reset_State_Handler();
 8000c7a:	f001 fb6f 	bl	800235c <Reset_State_Handler>
	  		  break;
 8000c7e:	e0a5      	b.n	8000dcc <main+0x1e4>

	  	  case Reset_State:
	  		  if(Get_event()==Idle_Event)
 8000c80:	f7ff fece 	bl	8000a20 <Get_event>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	f040 80a2 	bne.w	8000dd0 <main+0x1e8>
	  		  {
	  			  Idle_State_Handler();
 8000c8c:	f001 fbc6 	bl	800241c <Idle_State_Handler>
	  			  Timer16_Stop();
 8000c90:	f7ff ff76 	bl	8000b80 <Timer16_Stop>
	  			  tim16_count=0;
 8000c94:	4b56      	ldr	r3, [pc, #344]	; (8000df0 <main+0x208>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
	  			  Timer16_Start();
 8000c9a:	f7ff ff65 	bl	8000b68 <Timer16_Start>
	  		  }
	  		  break;
 8000c9e:	e097      	b.n	8000dd0 <main+0x1e8>

	  	  case Idle_State:
	  		  if(Get_event()==WRSide_Train_Detect_Event)
 8000ca0:	f7ff febe 	bl	8000a20 <Get_event>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d102      	bne.n	8000cb0 <main+0xc8>
	  			  //Nothing should happen in the idle state! It only polls for a change in state. Event setting and getting and state change happens WRT ISR
	  		  {
	  			  WRSide_Train_Presence_State_Handler();
 8000caa:	f001 fbc7 	bl	800243c <WRSide_Train_Presence_State_Handler>
 8000cae:	e006      	b.n	8000cbe <main+0xd6>
	  		  }
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
 8000cb0:	f7ff feb6 	bl	8000a20 <Get_event>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d101      	bne.n	8000cbe <main+0xd6>
	  		  {
	  			  WLSide_Train_Presence_State_Handler();
 8000cba:	f001 fbcd 	bl	8002458 <WLSide_Train_Presence_State_Handler>
//	  		  {
//	  			  Set_state(Initilisation_State);
//	  		  }

	  		   //Check for physical connection.
	  		  ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP);
 8000cbe:	494a      	ldr	r1, [pc, #296]	; (8000de8 <main+0x200>)
 8000cc0:	200f      	movs	r0, #15
 8000cc2:	f002 f9f3 	bl	80030ac <ctlwizchip>
	  		  if(Phy_TCP_IP==PHY_LINK_OFF)
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <main+0x200>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <main+0xee>
	  		  {
	  			  Set_state(Initilisation_State);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f001 fad0 	bl	8002274 <Set_state>
	  				tim17_count=0;
	  			  }
	  		  }
	  		  //Timer17_Stop();
	  		  //tim17_count=0;
	  		  break;
 8000cd4:	e07e      	b.n	8000dd4 <main+0x1ec>
	  		  else if(Phy_TCP_IP==PHY_LINK_ON)
 8000cd6:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <main+0x200>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d17a      	bne.n	8000dd4 <main+0x1ec>
	  			  if (tim16_count>TIM16TIMEOOUTPERIOD)
 8000cde:	4b44      	ldr	r3, [pc, #272]	; (8000df0 <main+0x208>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d976      	bls.n	8000dd4 <main+0x1ec>
	  				send(0, (uint8_t *)PING_CMD,strlen(PING_CMD));
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4942      	ldr	r1, [pc, #264]	; (8000df4 <main+0x20c>)
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 ffbc 	bl	8001c68 <send>
	  				Timer16_Stop();
 8000cf0:	f7ff ff46 	bl	8000b80 <Timer16_Stop>
	  				tim16_count=0;
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <main+0x208>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
	  				Timer16_Start();
 8000cfa:	f7ff ff35 	bl	8000b68 <Timer16_Start>
	  				Timer17_Start();
 8000cfe:	f7ff ff4b 	bl	8000b98 <Timer17_Start>
	  				memset(Recv_Ping,0,sizeof Recv_Ping);
 8000d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d06:	2100      	movs	r1, #0
 8000d08:	483b      	ldr	r0, [pc, #236]	; (8000df8 <main+0x210>)
 8000d0a:	f006 fff3 	bl	8007cf4 <memset>
	  				while(tim17_count<TIM17TIMEOOUTPERIOD)
 8000d0e:	e015      	b.n	8000d3c <main+0x154>
	  					recv(0, Recv_Ping,2048);
 8000d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d14:	4938      	ldr	r1, [pc, #224]	; (8000df8 <main+0x210>)
 8000d16:	2000      	movs	r0, #0
 8000d18:	f001 f8a0 	bl	8001e5c <recv>
	  					if(Get_event()==WRSide_Train_Detect_Event)
 8000d1c:	f7ff fe80 	bl	8000a20 <Get_event>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d102      	bne.n	8000d2c <main+0x144>
	  						WRSide_Train_Presence_State_Handler();
 8000d26:	f001 fb89 	bl	800243c <WRSide_Train_Presence_State_Handler>
	  						break;
 8000d2a:	e00b      	b.n	8000d44 <main+0x15c>
	  					else if (Get_event()==WLSide_Train_Detect_Event)
 8000d2c:	f7ff fe78 	bl	8000a20 <Get_event>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	d102      	bne.n	8000d3c <main+0x154>
	  						WLSide_Train_Presence_State_Handler();
 8000d36:	f001 fb8f 	bl	8002458 <WLSide_Train_Presence_State_Handler>
	  						break;
 8000d3a:	e003      	b.n	8000d44 <main+0x15c>
	  				while(tim17_count<TIM17TIMEOOUTPERIOD)
 8000d3c:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <main+0x214>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d9e5      	bls.n	8000d10 <main+0x128>
  					if(strcmp(Ping_ack,Recv_Ping)!=0)
 8000d44:	492c      	ldr	r1, [pc, #176]	; (8000df8 <main+0x210>)
 8000d46:	482e      	ldr	r0, [pc, #184]	; (8000e00 <main+0x218>)
 8000d48:	f7ff fa3e 	bl	80001c8 <strcmp>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d008      	beq.n	8000d64 <main+0x17c>
  						Timer17_Stop();
 8000d52:	f7ff ff2d 	bl	8000bb0 <Timer17_Stop>
  						tim17_count=0;
 8000d56:	4b29      	ldr	r3, [pc, #164]	; (8000dfc <main+0x214>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
  						Set_state(Initilisation_State);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f001 fa89 	bl	8002274 <Set_state>
  						break;
 8000d62:	e040      	b.n	8000de6 <main+0x1fe>
	  				Timer17_Stop();
 8000d64:	f7ff ff24 	bl	8000bb0 <Timer17_Stop>
	  				tim17_count=0;
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <main+0x214>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
	  		  break;
 8000d6e:	e031      	b.n	8000dd4 <main+0x1ec>

//			  itoa(count,Count_Bulletin,10);
//			  send(0, (uint32_t *)strcat(Count_Bulletin,","), strlen(Count_Bulletin));
//			  HAL_Delay(1000);

			  if (count>TIMEOOUTPERIOD)
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <main+0x21c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b14      	cmp	r3, #20
 8000d76:	d902      	bls.n	8000d7e <main+0x196>
			  {
				  Set_event(Train_Exit_Event);
 8000d78:	2005      	movs	r0, #5
 8000d7a:	f7ff fe5d 	bl	8000a38 <Set_event>
			  }

	  		  if(Get_event()==Train_Exit_Event)
 8000d7e:	f7ff fe4f 	bl	8000a20 <Get_event>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d127      	bne.n	8000dd8 <main+0x1f0>
	  		  {
	  			  Train_Exit_State_Handler();
 8000d88:	f001 fb74 	bl	8002474 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000d8c:	e024      	b.n	8000dd8 <main+0x1f0>

//			  itoa(count,Count_Bulletin1,10);
//			  send(0, (uint32_t *)strcat(Count_Bulletin1,","), strlen(Count_Bulletin1));
//			  HAL_Delay(1000);

			  if (count>TIMEOOUTPERIOD)
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <main+0x21c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b14      	cmp	r3, #20
 8000d94:	d902      	bls.n	8000d9c <main+0x1b4>
			  {
				  Set_event(Train_Exit_Event);
 8000d96:	2005      	movs	r0, #5
 8000d98:	f7ff fe4e 	bl	8000a38 <Set_event>
			  }

	  		  if(Get_event()==Train_Exit_Event)
 8000d9c:	f7ff fe40 	bl	8000a20 <Get_event>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d11a      	bne.n	8000ddc <main+0x1f4>
	  		  {
	  			  Train_Exit_State_Handler();
 8000da6:	f001 fb65 	bl	8002474 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000daa:	e017      	b.n	8000ddc <main+0x1f4>

	  	  case Train_Exit_State:
	  		  if(Get_event()==Log_Data_Event)
 8000dac:	f7ff fe38 	bl	8000a20 <Get_event>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d114      	bne.n	8000de0 <main+0x1f8>
	  		  {
	  			  Log_Data_State_Handler();
 8000db6:	f001 fb69 	bl	800248c <Log_Data_State_Handler>
	  		  }
	  		  break;
 8000dba:	e011      	b.n	8000de0 <main+0x1f8>

	  	  case Log_Data_State:
	  		  if(Get_event()==Reset_Event)
 8000dbc:	f7ff fe30 	bl	8000a20 <Get_event>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10e      	bne.n	8000de4 <main+0x1fc>
	  		  {
	  			  Reset_State_Handler();
 8000dc6:	f001 fac9 	bl	800235c <Reset_State_Handler>
	  		  }
	  		  break;
 8000dca:	e00b      	b.n	8000de4 <main+0x1fc>
	  		  break;
 8000dcc:	bf00      	nop
 8000dce:	e724      	b.n	8000c1a <main+0x32>
	  		  break;
 8000dd0:	bf00      	nop
 8000dd2:	e722      	b.n	8000c1a <main+0x32>
	  		  break;
 8000dd4:	bf00      	nop
 8000dd6:	e720      	b.n	8000c1a <main+0x32>
	  		  break;
 8000dd8:	bf00      	nop
 8000dda:	e71e      	b.n	8000c1a <main+0x32>
	  		  break;
 8000ddc:	bf00      	nop
 8000dde:	e71c      	b.n	8000c1a <main+0x32>
	  		  break;
 8000de0:	bf00      	nop
 8000de2:	e71a      	b.n	8000c1a <main+0x32>
	  		  break;
 8000de4:	bf00      	nop
	  switch(Get_state())
 8000de6:	e718      	b.n	8000c1a <main+0x32>
 8000de8:	20001245 	.word	0x20001245
 8000dec:	200014f4 	.word	0x200014f4
 8000df0:	200014ec 	.word	0x200014ec
 8000df4:	08008058 	.word	0x08008058
 8000df8:	200014f8 	.word	0x200014f8
 8000dfc:	200014f0 	.word	0x200014f0
 8000e00:	20000004 	.word	0x20000004
 8000e04:	200014e8 	.word	0x200014e8

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b09c      	sub	sp, #112	; 0x70
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e12:	2228      	movs	r2, #40	; 0x28
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f006 ff6c 	bl	8007cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2230      	movs	r2, #48	; 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f006 ff5e 	bl	8007cf4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e38:	f003 f8ea 	bl	8004010 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <SystemClock_Config+0xd4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <SystemClock_Config+0xd4>)
 8000e42:	f023 0318 	bic.w	r3, r3, #24
 8000e46:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e50:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000e52:	2304      	movs	r3, #4
 8000e54:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e56:	2301      	movs	r3, #1
 8000e58:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000e68:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000e6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f8dc 	bl	8004030 <HAL_RCC_OscConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e7e:	f000 fbab 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e98:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f904 	bl	80050ac <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000eaa:	f000 fb95 	bl	80015d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM16
 8000eae:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8000eb2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fb29 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000ed0:	f000 fb82 	bl	80015d8 <Error_Handler>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3770      	adds	r7, #112	; 0x70
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000

08000ee0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <MX_RTC_Init+0xac>)
 8000efa:	4a25      	ldr	r2, [pc, #148]	; (8000f90 <MX_RTC_Init+0xb0>)
 8000efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f06:	227f      	movs	r2, #127	; 0x7f
 8000f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f22:	481a      	ldr	r0, [pc, #104]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f24:	f004 fc7e 	bl	8005824 <HAL_RTC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f000 fb53 	bl	80015d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f4e:	f004 fcfa 	bl	8005946 <HAL_RTC_SetTime>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f58:	f000 fb3e 	bl	80015d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x28;
 8000f64:	2328      	movs	r3, #40	; 0x28
 8000f66:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000f68:	2323      	movs	r3, #35	; 0x23
 8000f6a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_RTC_Init+0xac>)
 8000f74:	f004 fda4 	bl	8005ac0 <HAL_RTC_SetDate>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f7e:	f000 fb2b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000124c 	.word	0x2000124c
 8000f90:	40002800 	.word	0x40002800

08000f94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_SPI2_Init+0x74>)
 8000f9a:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_SPI2_Init+0x78>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fb2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI2_Init+0x74>)
 8000fee:	2208      	movs	r2, #8
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_SPI2_Init+0x74>)
 8000ff4:	f004 fe7d 	bl	8005cf2 <HAL_SPI_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ffe:	f000 faeb 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000126c 	.word	0x2000126c
 800100c:	40003800 	.word	0x40003800

08001010 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_SPI3_Init+0x74>)
 8001016:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <MX_SPI3_Init+0x78>)
 8001018:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800101a:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_SPI3_Init+0x74>)
 800101c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001020:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_SPI3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_SPI3_Init+0x74>)
 800102a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800102e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_SPI3_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <MX_SPI3_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_SPI3_Init+0x74>)
 800103e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001042:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_SPI3_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_SPI3_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_SPI3_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_SPI3_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_SPI3_Init+0x74>)
 800105e:	2207      	movs	r2, #7
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_SPI3_Init+0x74>)
 800106a:	2208      	movs	r2, #8
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_SPI3_Init+0x74>)
 8001070:	f004 fe3f 	bl	8005cf2 <HAL_SPI_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800107a:	f000 faad 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200012d0 	.word	0x200012d0
 8001088:	40003c00 	.word	0x40003c00

0800108c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_TIM2_Init+0x98>)
 80010ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_TIM2_Init+0x98>)
 80010b4:	2245      	movs	r2, #69	; 0x45
 80010b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_TIM2_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF-1;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_TIM2_Init+0x98>)
 80010c0:	f06f 0201 	mvn.w	r2, #1
 80010c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_TIM2_Init+0x98>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_TIM2_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010d2:	4814      	ldr	r0, [pc, #80]	; (8001124 <MX_TIM2_Init+0x98>)
 80010d4:	f005 fd26 	bl	8006b24 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010de:	f000 fa7b 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_TIM2_Init+0x98>)
 80010f0:	f005 ffe2 	bl	80070b8 <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010fa:	f000 fa6d 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_TIM2_Init+0x98>)
 800110c:	f006 f9d8 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001116:	f000 fa5f 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3720      	adds	r7, #32
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001334 	.word	0x20001334

08001128 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM6_Init+0x68>)
 800113a:	4a16      	ldr	r2, [pc, #88]	; (8001194 <MX_TIM6_Init+0x6c>)
 800113c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6999;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_TIM6_Init+0x68>)
 8001140:	f641 3257 	movw	r2, #6999	; 0x1b57
 8001144:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_TIM6_Init+0x68>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_TIM6_Init+0x68>)
 800114e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001152:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_TIM6_Init+0x68>)
 8001156:	2280      	movs	r2, #128	; 0x80
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM6_Init+0x68>)
 800115c:	f005 fce2 	bl	8006b24 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001166:	f000 fa37 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_TIM6_Init+0x68>)
 8001178:	f006 f9a2 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001182:	f000 fa29 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20001380 	.word	0x20001380
 8001194:	40001000 	.word	0x40001000

08001198 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_TIM16_Init+0x48>)
 800119e:	4a11      	ldr	r2, [pc, #68]	; (80011e4 <MX_TIM16_Init+0x4c>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6999;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011a4:	f641 3257 	movw	r2, #6999	; 0x1b57
 80011a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_TIM16_Init+0x48>)
 80011cc:	f005 fcaa 	bl	8006b24 <HAL_TIM_Base_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80011d6:	f000 f9ff 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200013cc 	.word	0x200013cc
 80011e4:	40014400 	.word	0x40014400

080011e8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_TIM17_Init+0x48>)
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <MX_TIM17_Init+0x4c>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6999;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_TIM17_Init+0x48>)
 80011f4:	f641 3257 	movw	r2, #6999	; 0x1b57
 80011f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_TIM17_Init+0x48>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_TIM17_Init+0x48>)
 8001202:	f242 720f 	movw	r2, #9999	; 0x270f
 8001206:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_TIM17_Init+0x48>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_TIM17_Init+0x48>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_TIM17_Init+0x48>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_TIM17_Init+0x48>)
 800121c:	f005 fc82 	bl	8006b24 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001226:	f000 f9d7 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20001418 	.word	0x20001418
 8001234:	40014800 	.word	0x40014800

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <MX_USART2_UART_Init+0x60>)
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <MX_USART2_UART_Init+0x64>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001244:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <MX_USART2_UART_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_USART2_UART_Init+0x60>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x60>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001276:	2210      	movs	r2, #16
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <MX_USART2_UART_Init+0x60>)
 800127c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001280:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_USART2_UART_Init+0x60>)
 8001284:	f006 f9a0 	bl	80075c8 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800128e:	f000 f9a3 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001464 	.word	0x20001464
 800129c:	40004400 	.word	0x40004400

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012c0:	6153      	str	r3, [r2, #20]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4a69      	ldr	r2, [pc, #420]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d8:	6153      	str	r3, [r2, #20]
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a63      	ldr	r2, [pc, #396]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	6153      	str	r3, [r2, #20]
 80012f2:	4b61      	ldr	r3, [pc, #388]	; (8001478 <MX_GPIO_Init+0x1d8>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <MX_GPIO_Init+0x1d8>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a5d      	ldr	r2, [pc, #372]	; (8001478 <MX_GPIO_Init+0x1d8>)
 8001304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001308:	6153      	str	r3, [r2, #20]
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <MX_GPIO_Init+0x1d8>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FCT_TRIG_LED_GPIO_Port, FCT_TRIG_LED_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131c:	4857      	ldr	r0, [pc, #348]	; (800147c <MX_GPIO_Init+0x1dc>)
 800131e:	f002 fe47 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LA_TRIG_LED_Pin|CA_TRIG_LED_Pin|WR_TRIG_LED_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f241 0190 	movw	r1, #4240	; 0x1090
 8001328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132c:	f002 fe40 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_CS_Pin|CA_OP_Pin|LA_OP_Pin, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f240 3101 	movw	r1, #769	; 0x301
 8001336:	4852      	ldr	r0, [pc, #328]	; (8001480 <MX_GPIO_Init+0x1e0>)
 8001338:	f002 fe3a 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|WL_TRIG_LED_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8001342:	484f      	ldr	r0, [pc, #316]	; (8001480 <MX_GPIO_Init+0x1e0>)
 8001344:	f002 fe34 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CA_OP1_Pin|LA_OP1_Pin|LAN_RESET_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 800134e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001352:	f002 fe2d 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FCT_TRIG_LED_Pin */
  GPIO_InitStruct.Pin = FCT_TRIG_LED_Pin;
 8001356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FCT_TRIG_LED_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4843      	ldr	r0, [pc, #268]	; (800147c <MX_GPIO_Init+0x1dc>)
 8001370:	f002 fcac 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_IP_Pin WL_IP_Pin F_IP_Pin */
  GPIO_InitStruct.Pin = WR_IP_Pin|WL_IP_Pin|F_IP_Pin;
 8001374:	2323      	movs	r3, #35	; 0x23
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001378:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f002 fc9e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LA_TRIG_LED_Pin CA_TRIG_LED_Pin CA_OP1_Pin LA_OP1_Pin
                           LAN_RESET_Pin */
  GPIO_InitStruct.Pin = LA_TRIG_LED_Pin|CA_TRIG_LED_Pin|CA_OP1_Pin|LA_OP1_Pin
 8001390:	f248 3390 	movw	r3, #33680	; 0x8390
 8001394:	617b      	str	r3, [r7, #20]
                          |LAN_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f002 fc8e 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_CS_Pin;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LAN_CS_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	482e      	ldr	r0, [pc, #184]	; (8001480 <MX_GPIO_Init+0x1e0>)
 80013c8:	f002 fc80 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_INT_Pin */
  GPIO_InitStruct.Pin = LAN_INT_Pin;
 80013cc:	2304      	movs	r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_INT_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4828      	ldr	r0, [pc, #160]	; (8001480 <MX_GPIO_Init+0x1e0>)
 80013e0:	f002 fc74 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 CA_OP_Pin LA_OP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin;
 80013e4:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4820      	ldr	r0, [pc, #128]	; (8001480 <MX_GPIO_Init+0x1e0>)
 80013fe:	f002 fc65 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_TRIG_LED_Pin */
  GPIO_InitStruct.Pin = WL_TRIG_LED_Pin;
 8001402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800140c:	2302      	movs	r3, #2
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WL_TRIG_LED_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4819      	ldr	r0, [pc, #100]	; (8001480 <MX_GPIO_Init+0x1e0>)
 800141c:	f002 fc56 	bl	8003ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : WR_TRIG_LED_Pin */
  GPIO_InitStruct.Pin = WR_TRIG_LED_Pin;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800142a:	2302      	movs	r3, #2
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WR_TRIG_LED_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f002 fc46 	bl	8003ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2006      	movs	r0, #6
 8001446:	f002 fbfc 	bl	8003c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800144a:	2006      	movs	r0, #6
 800144c:	f002 fc15 	bl	8003c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2007      	movs	r0, #7
 8001456:	f002 fbf4 	bl	8003c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800145a:	2007      	movs	r0, #7
 800145c:	f002 fc0d 	bl	8003c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2017      	movs	r0, #23
 8001466:	f002 fbec 	bl	8003c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800146a:	2017      	movs	r0, #23
 800146c:	f002 fc05 	bl	8003c7a <HAL_NVIC_EnableIRQ>

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	48000800 	.word	0x48000800
 8001480:	48000400 	.word	0x48000400

08001484 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed
   */

  switch(GPIO_Pin)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	3b01      	subs	r3, #1
 8001492:	2b1f      	cmp	r3, #31
 8001494:	f200 8097 	bhi.w	80015c6 <HAL_GPIO_EXTI_Callback+0x142>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <HAL_GPIO_EXTI_Callback+0x1c>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	08001521 	.word	0x08001521
 80014a4:	0800155f 	.word	0x0800155f
 80014a8:	080015c7 	.word	0x080015c7
 80014ac:	080015bb 	.word	0x080015bb
 80014b0:	080015c7 	.word	0x080015c7
 80014b4:	080015c7 	.word	0x080015c7
 80014b8:	080015c7 	.word	0x080015c7
 80014bc:	080015c7 	.word	0x080015c7
 80014c0:	080015c7 	.word	0x080015c7
 80014c4:	080015c7 	.word	0x080015c7
 80014c8:	080015c7 	.word	0x080015c7
 80014cc:	080015c7 	.word	0x080015c7
 80014d0:	080015c7 	.word	0x080015c7
 80014d4:	080015c7 	.word	0x080015c7
 80014d8:	080015c7 	.word	0x080015c7
 80014dc:	080015c7 	.word	0x080015c7
 80014e0:	080015c7 	.word	0x080015c7
 80014e4:	080015c7 	.word	0x080015c7
 80014e8:	080015c7 	.word	0x080015c7
 80014ec:	080015c7 	.word	0x080015c7
 80014f0:	080015c7 	.word	0x080015c7
 80014f4:	080015c7 	.word	0x080015c7
 80014f8:	080015c7 	.word	0x080015c7
 80014fc:	080015c7 	.word	0x080015c7
 8001500:	080015c7 	.word	0x080015c7
 8001504:	080015c7 	.word	0x080015c7
 8001508:	080015c7 	.word	0x080015c7
 800150c:	080015c7 	.word	0x080015c7
 8001510:	080015c7 	.word	0x080015c7
 8001514:	080015c7 	.word	0x080015c7
 8001518:	080015c7 	.word	0x080015c7
 800151c:	0800159d 	.word	0x0800159d
  {
  case WR_IP_Pin:
	  switch(Get_state()){
 8001520:	f000 fe9c 	bl	800225c <Get_state>
 8001524:	4603      	mov	r3, r0
 8001526:	2b05      	cmp	r3, #5
 8001528:	d00c      	beq.n	8001544 <HAL_GPIO_EXTI_Callback+0xc0>
 800152a:	2b05      	cmp	r3, #5
 800152c:	dc0d      	bgt.n	800154a <HAL_GPIO_EXTI_Callback+0xc6>
 800152e:	2b03      	cmp	r3, #3
 8001530:	d002      	beq.n	8001538 <HAL_GPIO_EXTI_Callback+0xb4>
 8001532:	2b04      	cmp	r3, #4
 8001534:	d003      	beq.n	800153e <HAL_GPIO_EXTI_Callback+0xba>
 8001536:	e008      	b.n	800154a <HAL_GPIO_EXTI_Callback+0xc6>
	  case Idle_State:
		  Set_event(WRSide_Train_Detect_Event);
 8001538:	2003      	movs	r0, #3
 800153a:	f7ff fa7d 	bl	8000a38 <Set_event>
	  case WRSide_Train_Presence_State:
		  WR_Interrupt_Service();
 800153e:	f7fe fe9f 	bl	8000280 <WR_Interrupt_Service>
		  break;
 8001542:	e002      	b.n	800154a <HAL_GPIO_EXTI_Callback+0xc6>
	  case WLSide_Train_Presence_State:
		  WR_Interrupt_Service();
 8001544:	f7fe fe9c 	bl	8000280 <WR_Interrupt_Service>
		  break;
 8001548:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)//(Counts of WL_Counts==WR_Counts)
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x150>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d134      	bne.n	80015c0 <HAL_GPIO_EXTI_Callback+0x13c>
	  {
		  Set_event(Train_Exit_Event);
 8001556:	2005      	movs	r0, #5
 8001558:	f7ff fa6e 	bl	8000a38 <Set_event>
	  }
	  break;
 800155c:	e030      	b.n	80015c0 <HAL_GPIO_EXTI_Callback+0x13c>

  case WL_IP_Pin:

	  switch(Get_state()){
 800155e:	f000 fe7d 	bl	800225c <Get_state>
 8001562:	4603      	mov	r3, r0
 8001564:	2b05      	cmp	r3, #5
 8001566:	d00c      	beq.n	8001582 <HAL_GPIO_EXTI_Callback+0xfe>
 8001568:	2b05      	cmp	r3, #5
 800156a:	dc0d      	bgt.n	8001588 <HAL_GPIO_EXTI_Callback+0x104>
 800156c:	2b03      	cmp	r3, #3
 800156e:	d002      	beq.n	8001576 <HAL_GPIO_EXTI_Callback+0xf2>
 8001570:	2b04      	cmp	r3, #4
 8001572:	d003      	beq.n	800157c <HAL_GPIO_EXTI_Callback+0xf8>
 8001574:	e008      	b.n	8001588 <HAL_GPIO_EXTI_Callback+0x104>
	  case Idle_State:
		  Set_event(WLSide_Train_Detect_Event);
 8001576:	2004      	movs	r0, #4
 8001578:	f7ff fa5e 	bl	8000a38 <Set_event>
	  case WRSide_Train_Presence_State:
		  WL_Interrupt_Service();
 800157c:	f7fe ff9c 	bl	80004b8 <WL_Interrupt_Service>
		  break;
 8001580:	e002      	b.n	8001588 <HAL_GPIO_EXTI_Callback+0x104>
	  case WLSide_Train_Presence_State:
		  WL_Interrupt_Service();
 8001582:	f7fe ff99 	bl	80004b8 <WL_Interrupt_Service>
		  break;
 8001586:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x14c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_GPIO_EXTI_Callback+0x150>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d117      	bne.n	80015c4 <HAL_GPIO_EXTI_Callback+0x140>
	  {
		  Set_event(Train_Exit_Event);
 8001594:	2005      	movs	r0, #5
 8001596:	f7ff fa4f 	bl	8000a38 <Set_event>
	  }

	  break;
 800159a:	e013      	b.n	80015c4 <HAL_GPIO_EXTI_Callback+0x140>


  case F_IP_Pin:


	  switch(Get_state())
 800159c:	f000 fe5e 	bl	800225c <Get_state>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d002      	beq.n	80015ac <HAL_GPIO_EXTI_Callback+0x128>
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_EXTI_Callback+0x12e>
		  break;
	  case WLSide_Train_Presence_State:
		  FCT_Interrupt_Service();
		  break;
	  }
	  break;
 80015aa:	e00c      	b.n	80015c6 <HAL_GPIO_EXTI_Callback+0x142>
		  FCT_Interrupt_Service();
 80015ac:	f7fe fedc 	bl	8000368 <FCT_Interrupt_Service>
		  break;
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_EXTI_Callback+0x134>
		  FCT_Interrupt_Service();
 80015b2:	f7fe fed9 	bl	8000368 <FCT_Interrupt_Service>
		  break;
 80015b6:	bf00      	nop
	  break;
 80015b8:	e005      	b.n	80015c6 <HAL_GPIO_EXTI_Callback+0x142>

  case LAN_INT_Pin:

	  Lan_Interrupt_Service();
 80015ba:	f7fe fe2b 	bl	8000214 <Lan_Interrupt_Service>
	  break;
 80015be:	e002      	b.n	80015c6 <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 80015c0:	bf00      	nop
 80015c2:	e000      	b.n	80015c6 <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 80015c4:	bf00      	nop
  }
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200010c4 	.word	0x200010c4
 80015d4:	200010cc 	.word	0x200010cc

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <RingInit>:
uint32_t RingGetDataCnt (RingBuffer_t* buffer){
	return buffer -> size - RingGetSpace(buffer);
}

/* DONE: Add null pointer exceptions. */
RingStatus_t RingInit (RingBuffer_t* buffer, void* arrayBuffer, size_t bufferSize, size_t elementSize){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
	if(NULL == buffer) return NO_PTR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <RingInit+0x1a>
 80015fa:	f06f 0302 	mvn.w	r3, #2
 80015fe:	e03b      	b.n	8001678 <RingInit+0x92>
	if(NULL == arrayBuffer) return NO_PTR;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <RingInit+0x26>
 8001606:	f06f 0302 	mvn.w	r3, #2
 800160a:	e035      	b.n	8001678 <RingInit+0x92>

	memset(buffer, 0, sizeof(RingBuffer_t));
 800160c:	2220      	movs	r2, #32
 800160e:	2100      	movs	r1, #0
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f006 fb6f 	bl	8007cf4 <memset>

	if(arrayBuffer == NULL) return NO_PTR;
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <RingInit+0x3c>
 800161c:	f06f 0302 	mvn.w	r3, #2
 8001620:	e02a      	b.n	8001678 <RingInit+0x92>
	if(bufferSize <= 0) return NO_DATA;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <RingInit+0x48>
 8001628:	f06f 0301 	mvn.w	r3, #1
 800162c:	e024      	b.n	8001678 <RingInit+0x92>

	buffer -> buffer = arrayBuffer;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	61da      	str	r2, [r3, #28]
	buffer -> size = bufferSize;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
	buffer -> place = buffer -> size - 1;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1e5a      	subs	r2, r3, #1
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	619a      	str	r2, [r3, #24]
	buffer -> writePtr = 0;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
	buffer -> readPtr = 0;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
	buffer -> elementSize = elementSize;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	605a      	str	r2, [r3, #4]
	buffer -> sizeB = buffer -> elementSize * buffer -> size;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	fb03 f202 	mul.w	r2, r3, r2
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	609a      	str	r2, [r3, #8]

	memset(buffer -> buffer, 0, buffer -> sizeB);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	69d8      	ldr	r0, [r3, #28]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	461a      	mov	r2, r3
 8001670:	2100      	movs	r1, #0
 8001672:	f006 fb3f 	bl	8007cf4 <memset>
	return OK;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <RingWriteElement>:
		return NO_PTR;
	}
	return RingInit(buffer, ptr, bufferSize, elementSize);
}

RingStatus_t RingWriteElement (RingBuffer_t* buffer, void* data){
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 800168a:	2301      	movs	r3, #1
 800168c:	77fb      	strb	r3, [r7, #31]

	if(buffer == NULL) return NO_PTR;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <RingWriteElement+0x1a>
 8001694:	f06f 0302 	mvn.w	r3, #2
 8001698:	e03e      	b.n	8001718 <RingWriteElement+0x98>
	if(data == NULL) return NO_PTR;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <RingWriteElement+0x26>
 80016a0:	f06f 0302 	mvn.w	r3, #2
 80016a4:	e038      	b.n	8001718 <RingWriteElement+0x98>
	if(buffer -> buffer == NULL) return NO_PTR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <RingWriteElement+0x34>
 80016ae:	f06f 0302 	mvn.w	r3, #2
 80016b2:	e031      	b.n	8001718 <RingWriteElement+0x98>

	uint32_t tempHead = buffer -> writePtr;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	61bb      	str	r3, [r7, #24]
	uint32_t tempTail = buffer -> readPtr;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
	size_t bufferSize = buffer -> sizeB;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	60fb      	str	r3, [r7, #12]

	void* wrPtr;
	wrPtr = buffer -> buffer + tempHead;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	4413      	add	r3, r2
 80016d4:	60bb      	str	r3, [r7, #8]

	tempHead = MODULO_BUF(tempHead + elSize, bufferSize);
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4413      	add	r3, r2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	fbb3 f2f2 	udiv	r2, r3, r2
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	fb01 f202 	mul.w	r2, r1, r2
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
	if(tempHead != tempTail){
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d00d      	beq.n	8001710 <RingWriteElement+0x90>
		memcpy(wrPtr, data, elSize);
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f006 faed 	bl	8007cd8 <memcpy>
		buffer -> writePtr = tempHead;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	611a      	str	r2, [r3, #16]
		buffer -> place --;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
 800170e:	e001      	b.n	8001714 <RingWriteElement+0x94>
	}else{
		retval = NO_PLACE;
 8001710:	23ff      	movs	r3, #255	; 0xff
 8001712:	77fb      	strb	r3, [r7, #31]
	}
	return retval;
 8001714:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <RingReadElement>:
	}

	return retval;
}

RingStatus_t RingReadElement (RingBuffer_t* buffer, void* data){
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tempHead = buffer -> writePtr;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	623b      	str	r3, [r7, #32]
	uint32_t tempTail = buffer -> readPtr;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	61fb      	str	r3, [r7, #28]
	uint32_t tempPlace = buffer -> place;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	61bb      	str	r3, [r7, #24]
	size_t bufferSize = buffer -> sizeB;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
	void* wrPtr;
	wrPtr = buffer -> buffer + tempTail;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

	if(tempHead != tempTail){
 8001758:	6a3a      	ldr	r2, [r7, #32]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	429a      	cmp	r2, r3
 800175e:	d019      	beq.n	8001794 <RingReadElement+0x74>
		memcpy(data, wrPtr, elSize);
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	6838      	ldr	r0, [r7, #0]
 8001766:	f006 fab7 	bl	8007cd8 <memcpy>
		tempTail = MODULO_BUF(tempTail + elSize, bufferSize);
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4413      	add	r3, r2
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	fbb3 f2f2 	udiv	r2, r3, r2
 8001776:	6979      	ldr	r1, [r7, #20]
 8001778:	fb01 f202 	mul.w	r2, r1, r2
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	61fb      	str	r3, [r7, #28]
		tempPlace++;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	3301      	adds	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
		buffer -> readPtr = tempTail;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	615a      	str	r2, [r3, #20]
		buffer -> place = tempPlace;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	619a      	str	r2, [r3, #24]
 8001792:	e002      	b.n	800179a <RingReadElement+0x7a>
	}else{
		retval = NO_DATA;
 8001794:	23fe      	movs	r3, #254	; 0xfe
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return retval;
 800179a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	4603      	mov	r3, r0
 80017bc:	71bb      	strb	r3, [r7, #6]
 80017be:	460b      	mov	r3, r1
 80017c0:	80bb      	strh	r3, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d902      	bls.n	80017d2 <socket+0x2a>
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
 80017d0:	e0f2      	b.n	80019b8 <socket+0x210>
	switch(protocol)
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d005      	beq.n	80017e4 <socket+0x3c>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dd11      	ble.n	8001800 <socket+0x58>
 80017dc:	3b02      	subs	r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d80e      	bhi.n	8001800 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80017e2:	e011      	b.n	8001808 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2204      	movs	r2, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017f0:	f001 f9b0 	bl	8002b54 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <socket+0x5e>
 80017fa:	f06f 0302 	mvn.w	r3, #2
 80017fe:	e0db      	b.n	80019b8 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001800:	f06f 0304 	mvn.w	r3, #4
 8001804:	e0d8      	b.n	80019b8 <socket+0x210>
	    break;
 8001806:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <socket+0x70>
 8001812:	f06f 0305 	mvn.w	r3, #5
 8001816:	e0cf      	b.n	80019b8 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d025      	beq.n	800186a <socket+0xc2>
	{
   	switch(protocol)
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d002      	beq.n	800182a <socket+0x82>
 8001824:	2b02      	cmp	r3, #2
 8001826:	d008      	beq.n	800183a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001828:	e024      	b.n	8001874 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11c      	bne.n	800186e <socket+0xc6>
 8001834:	f06f 0305 	mvn.w	r3, #5
 8001838:	e0be      	b.n	80019b8 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db02      	blt.n	8001852 <socket+0xaa>
 800184c:	f06f 0305 	mvn.w	r3, #5
 8001850:	e0b2      	b.n	80019b8 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00a      	beq.n	8001872 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800185c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db06      	blt.n	8001872 <socket+0xca>
 8001864:	f06f 0305 	mvn.w	r3, #5
 8001868:	e0a6      	b.n	80019b8 <socket+0x210>
   	}
   }
 800186a:	bf00      	nop
 800186c:	e002      	b.n	8001874 <socket+0xcc>
   	      break;
 800186e:	bf00      	nop
 8001870:	e000      	b.n	8001874 <socket+0xcc>
   	      break;
 8001872:	bf00      	nop
	close(sn);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f8ac 	bl	80019d4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	3301      	adds	r3, #1
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4618      	mov	r0, r3
 8001886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800188a:	f023 030f 	bic.w	r3, r3, #15
 800188e:	b25a      	sxtb	r2, r3
 8001890:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001894:	4313      	orrs	r3, r2
 8001896:	b25b      	sxtb	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	4619      	mov	r1, r3
 800189c:	f001 f90c 	bl	8002ab8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d110      	bne.n	80018c8 <socket+0x120>
	{
	   port = sock_any_port++;
 80018a6:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <socket+0x218>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	b291      	uxth	r1, r2
 80018ae:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <socket+0x218>)
 80018b0:	8011      	strh	r1, [r2, #0]
 80018b2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80018b4:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <socket+0x218>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80018bc:	4293      	cmp	r3, r2
 80018be:	d103      	bne.n	80018c8 <socket+0x120>
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <socket+0x218>)
 80018c2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80018c6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3301      	adds	r3, #1
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d4:	461a      	mov	r2, r3
 80018d6:	88bb      	ldrh	r3, [r7, #4]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f001 f8e9 	bl	8002ab8 <WIZCHIP_WRITE>
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	3301      	adds	r3, #1
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	461a      	mov	r2, r3
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f001 f8dc 	bl	8002ab8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3301      	adds	r3, #1
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f001 f8d2 	bl	8002ab8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001914:	bf00      	nop
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	3301      	adds	r3, #1
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001922:	4618      	mov	r0, r3
 8001924:	f001 f87c 	bl	8002a20 <WIZCHIP_READ>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f3      	bne.n	8001916 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2201      	movs	r2, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	b21b      	sxth	r3, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	b21a      	sxth	r2, r3
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <socket+0x21c>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b21b      	sxth	r3, r3
 8001942:	4013      	ands	r3, r2
 8001944:	b21b      	sxth	r3, r3
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <socket+0x21c>)
 800194a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <socket+0x21c>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b21b      	sxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b21b      	sxth	r3, r3
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <socket+0x21c>)
 8001968:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2201      	movs	r2, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	b21b      	sxth	r3, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	b21a      	sxth	r2, r3
 8001978:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <socket+0x220>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b21b      	sxth	r3, r3
 800197e:	4013      	ands	r3, r2
 8001980:	b21b      	sxth	r3, r3
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <socket+0x220>)
 8001986:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <socket+0x224>)
 800198c:	2100      	movs	r1, #0
 800198e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <socket+0x228>)
 8001996:	2100      	movs	r1, #0
 8001998:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800199a:	bf00      	nop
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	3301      	adds	r3, #1
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80019a8:	4618      	mov	r0, r3
 80019aa:	f001 f839 	bl	8002a20 <WIZCHIP_READ>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f3      	beq.n	800199c <socket+0x1f4>
   return (int8_t)sn;
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000804 	.word	0x20000804
 80019c4:	20001cf8 	.word	0x20001cf8
 80019c8:	20001cfa 	.word	0x20001cfa
 80019cc:	20001cfc 	.word	0x20001cfc
 80019d0:	20001d10 	.word	0x20001d10

080019d4 <close>:

int8_t close(uint8_t sn)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d902      	bls.n	80019ea <close+0x16>
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	e055      	b.n	8001a96 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3301      	adds	r3, #1
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019f6:	2110      	movs	r1, #16
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 f85d 	bl	8002ab8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80019fe:	bf00      	nop
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3301      	adds	r3, #1
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f001 f807 	bl	8002a20 <WIZCHIP_READ>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f3      	bne.n	8001a00 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a24:	211f      	movs	r1, #31
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 f846 	bl	8002ab8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	b21a      	sxth	r2, r3
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <close+0xcc>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	4013      	ands	r3, r2
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <close+0xcc>)
 8001a48:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	b21a      	sxth	r2, r3
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <close+0xd0>)
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b21b      	sxth	r3, r3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <close+0xd0>)
 8001a66:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <close+0xd4>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <close+0xd8>)
 8001a76:	2100      	movs	r1, #0
 8001a78:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001a7a:	bf00      	nop
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	3301      	adds	r3, #1
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 ffc9 	bl	8002a20 <WIZCHIP_READ>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f3      	bne.n	8001a7c <close+0xa8>
	return SOCK_OK;
 8001a94:	2301      	movs	r3, #1
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20001cf8 	.word	0x20001cf8
 8001aa4:	20001cfa 	.word	0x20001cfa
 8001aa8:	20001cfc 	.word	0x20001cfc
 8001aac:	20001d10 	.word	0x20001d10

08001ab0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
 8001abc:	4613      	mov	r3, r2
 8001abe:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d902      	bls.n	8001acc <connect+0x1c>
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aca:	e0c6      	b.n	8001c5a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 ffa3 	bl	8002a20 <WIZCHIP_READ>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d002      	beq.n	8001aea <connect+0x3a>
 8001ae4:	f06f 0304 	mvn.w	r3, #4
 8001ae8:	e0b7      	b.n	8001c5a <connect+0x1aa>
   CHECK_SOCKINIT();
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	3301      	adds	r3, #1
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 ff92 	bl	8002a20 <WIZCHIP_READ>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b13      	cmp	r3, #19
 8001b00:	d002      	beq.n	8001b08 <connect+0x58>
 8001b02:	f06f 0302 	mvn.w	r3, #2
 8001b06:	e0a8      	b.n	8001c5a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	3201      	adds	r2, #1
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	3202      	adds	r2, #2
 8001b24:	7812      	ldrb	r2, [r2, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	3203      	adds	r2, #3
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3e:	d002      	beq.n	8001b46 <connect+0x96>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <connect+0x9c>
 8001b46:	f06f 030b 	mvn.w	r3, #11
 8001b4a:	e086      	b.n	8001c5a <connect+0x1aa>
   }

	if(port == 0) return SOCKERR_PORTZERO;
 8001b4c:	88bb      	ldrh	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <connect+0xa8>
 8001b52:	f06f 030a 	mvn.w	r3, #10
 8001b56:	e080      	b.n	8001c5a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001b64:	2204      	movs	r2, #4
 8001b66:	6839      	ldr	r1, [r7, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f001 f853 	bl	8002c14 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3301      	adds	r3, #1
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	88bb      	ldrh	r3, [r7, #4]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f000 ff96 	bl	8002ab8 <WIZCHIP_WRITE>
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	3301      	adds	r3, #1
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b98:	461a      	mov	r2, r3
 8001b9a:	88bb      	ldrh	r3, [r7, #4]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f000 ff89 	bl	8002ab8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	3301      	adds	r3, #1
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 ff7f 	bl	8002ab8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001bba:	bf00      	nop
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 ff29 	bl	8002a20 <WIZCHIP_READ>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f3      	bne.n	8001bbc <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <connect+0x1b4>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	fa42 f303 	asr.w	r3, r2, r3
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d02b      	beq.n	8001c40 <connect+0x190>
 8001be8:	2300      	movs	r3, #0
 8001bea:	e036      	b.n	8001c5a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
//	    Refresh_Watchdog();
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 ff11 	bl	8002a20 <WIZCHIP_READ>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00c      	beq.n	8001c22 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c14:	2108      	movs	r1, #8
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 ff4e 	bl	8002ab8 <WIZCHIP_WRITE>
			return SOCKERR_TIMEOUT;
 8001c1c:	f06f 030c 	mvn.w	r3, #12
 8001c20:	e01b      	b.n	8001c5a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3301      	adds	r3, #1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fef6 	bl	8002a20 <WIZCHIP_READ>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8001c3a:	f06f 0303 	mvn.w	r3, #3
 8001c3e:	e00c      	b.n	8001c5a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	3301      	adds	r3, #1
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fee7 	bl	8002a20 <WIZCHIP_READ>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b17      	cmp	r3, #23
 8001c56:	d1c9      	bne.n	8001bec <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20001cf8 	.word	0x20001cf8

08001c68 <send>:
	return SOCK_OK;
}


int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d902      	bls.n	8001c8c <send+0x24>
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e0de      	b.n	8001e4a <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	3301      	adds	r3, #1
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fec3 	bl	8002a20 <WIZCHIP_READ>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d002      	beq.n	8001caa <send+0x42>
 8001ca4:	f06f 0304 	mvn.w	r3, #4
 8001ca8:	e0cf      	b.n	8001e4a <send+0x1e2>
   CHECK_SOCKDATA();
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <send+0x4e>
 8001cb0:	f06f 030d 	mvn.w	r3, #13
 8001cb4:	e0c9      	b.n	8001e4a <send+0x1e2>
   tmp = getSn_SR(sn);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3301      	adds	r3, #1
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 feac 	bl	8002a20 <WIZCHIP_READ>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	2b17      	cmp	r3, #23
 8001cd0:	d005      	beq.n	8001cde <send+0x76>
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
 8001cd4:	2b1c      	cmp	r3, #28
 8001cd6:	d002      	beq.n	8001cde <send+0x76>
 8001cd8:	f06f 0306 	mvn.w	r3, #6
 8001cdc:	e0b5      	b.n	8001e4a <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <send+0x1ec>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	fa42 f303 	asr.w	r3, r2, r3
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d039      	beq.n	8001d66 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fe8e 	bl	8002a20 <WIZCHIP_READ>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d22:	2110      	movs	r1, #16
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fec7 	bl	8002ab8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <send+0x1ec>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <send+0x1ec>)
 8001d46:	801a      	strh	r2, [r3, #0]
 8001d48:	e00d      	b.n	8001d66 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <send+0xfa>
      {
         close(sn);
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fe3c 	bl	80019d4 <close>
         return SOCKERR_TIMEOUT;
 8001d5c:	f06f 030c 	mvn.w	r3, #12
 8001d60:	e073      	b.n	8001e4a <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e071      	b.n	8001e4a <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fe54 	bl	8002a20 <WIZCHIP_READ>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	029b      	lsls	r3, r3, #10
 8001d7e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001d80:	88ba      	ldrh	r2, [r7, #4]
 8001d82:	89bb      	ldrh	r3, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d901      	bls.n	8001d8c <send+0x124>
 8001d88:	89bb      	ldrh	r3, [r7, #12]
 8001d8a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 ffa0 	bl	8002cd4 <getSn_TX_FSR>
 8001d94:	4603      	mov	r3, r0
 8001d96:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fe3b 	bl	8002a20 <WIZCHIP_READ>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b17      	cmp	r3, #23
 8001db2:	d009      	beq.n	8001dc8 <send+0x160>
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b1c      	cmp	r3, #28
 8001db8:	d006      	beq.n	8001dc8 <send+0x160>
      {
         close(sn);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe09 	bl	80019d4 <close>
         return SOCKERR_SOCKSTATUS;
 8001dc2:	f06f 0306 	mvn.w	r3, #6
 8001dc6:	e040      	b.n	8001e4a <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <send+0x1f0>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	fa42 f303 	asr.w	r3, r2, r3
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <send+0x180>
 8001ddc:	88ba      	ldrh	r2, [r7, #4]
 8001dde:	89bb      	ldrh	r3, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d901      	bls.n	8001de8 <send+0x180>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e030      	b.n	8001e4a <send+0x1e2>
      if(len <= freesize) break;
 8001de8:	88ba      	ldrh	r2, [r7, #4]
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d900      	bls.n	8001df2 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001df0:	e7cc      	b.n	8001d8c <send+0x124>
      if(len <= freesize) break;
 8001df2:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001df4:	88ba      	ldrh	r2, [r7, #4]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 f800 	bl	8002e00 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	3301      	adds	r3, #1
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fe52 	bl	8002ab8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001e14:	bf00      	nop
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 fdfc 	bl	8002a20 <WIZCHIP_READ>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f3      	bne.n	8001e16 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2201      	movs	r2, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	b21a      	sxth	r2, r3
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <send+0x1ec>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <send+0x1ec>)
 8001e46:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001e48:	88bb      	ldrh	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001cfa 	.word	0x20001cfa
 8001e58:	20001cf8 	.word	0x20001cf8

08001e5c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d902      	bls.n	8001e80 <recv+0x24>
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e0c6      	b.n	800200e <recv+0x1b2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	3301      	adds	r3, #1
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fdc9 	bl	8002a20 <WIZCHIP_READ>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d002      	beq.n	8001e9e <recv+0x42>
 8001e98:	f06f 0304 	mvn.w	r3, #4
 8001e9c:	e0b7      	b.n	800200e <recv+0x1b2>
   CHECK_SOCKDATA();
 8001e9e:	88bb      	ldrh	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <recv+0x4e>
 8001ea4:	f06f 030d 	mvn.w	r3, #13
 8001ea8:	e0b1      	b.n	800200e <recv+0x1b2>
   
   recvsize = getSn_RxMAX(sn);
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	3301      	adds	r3, #1
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fdb2 	bl	8002a20 <WIZCHIP_READ>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	029b      	lsls	r3, r3, #10
 8001ec2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001ec4:	89ba      	ldrh	r2, [r7, #12]
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d201      	bcs.n	8001ed0 <recv+0x74>
 8001ecc:	89bb      	ldrh	r3, [r7, #12]
 8001ece:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 ff49 	bl	8002d6a <getSn_RX_RSR>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fd99 	bl	8002a20 <WIZCHIP_READ>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b17      	cmp	r3, #23
 8001ef6:	d026      	beq.n	8001f46 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b1c      	cmp	r3, #28
 8001efc:	d11c      	bne.n	8001f38 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001efe:	89bb      	ldrh	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d157      	bne.n	8001fb4 <recv+0x158>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fee4 	bl	8002cd4 <getSn_TX_FSR>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461c      	mov	r4, r3
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	3301      	adds	r3, #1
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 fd7f 	bl	8002a20 <WIZCHIP_READ>
 8001f22:	4603      	mov	r3, r0
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	429c      	cmp	r4, r3
 8001f28:	d10d      	bne.n	8001f46 <recv+0xea>
               {
                  close(sn);
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fd51 	bl	80019d4 <close>
                  return SOCKERR_SOCKSTATUS;
 8001f32:	f06f 0306 	mvn.w	r3, #6
 8001f36:	e06a      	b.n	800200e <recv+0x1b2>
               }
            }
            else
            {
               close(sn);
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fd4a 	bl	80019d4 <close>
               return SOCKERR_SOCKSTATUS;
 8001f40:	f06f 0306 	mvn.w	r3, #6
 8001f44:	e063      	b.n	800200e <recv+0x1b2>
            }
         }
        if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001f46:	4b34      	ldr	r3, [pc, #208]	; (8002018 <recv+0x1bc>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	fa42 f303 	asr.w	r3, r2, r3
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <recv+0x108>
 8001f5a:	89bb      	ldrh	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <recv+0x108>
 8001f60:	2300      	movs	r3, #0
 8001f62:	e054      	b.n	800200e <recv+0x1b2>
     	ctlwizchip(CW_GET_PHYLINK, (void*) &Physical_Connection); // gets physical status of the TCPIP
 8001f64:	492d      	ldr	r1, [pc, #180]	; (800201c <recv+0x1c0>)
 8001f66:	200f      	movs	r0, #15
 8001f68:	f001 f8a0 	bl	80030ac <ctlwizchip>

     	if(Physical_Connection==PHY_LINK_OFF)
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <recv+0x1c0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d021      	beq.n	8001fb8 <recv+0x15c>
     	{
     		break;
     	}

         if(recvsize != 0) break;
 8001f74:	89bb      	ldrh	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d120      	bne.n	8001fbc <recv+0x160>
         if(recvsize == 0) break;
 8001f7a:	89bb      	ldrh	r3, [r7, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01f      	beq.n	8001fc0 <recv+0x164>

 		  uint8_t  server_Address[4] = {192,168,1,111};
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <recv+0x1c4>)
 8001f82:	60bb      	str	r3, [r7, #8]
 		  Refresh_Watchdog();
 8001f84:	f7fe fd3e 	bl	8000a04 <Refresh_Watchdog>
 		  connect(0,server_Address,9099);
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	f242 328b 	movw	r2, #9099	; 0x238b
 8001f90:	4619      	mov	r1, r3
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff fd8c 	bl	8001ab0 <connect>
 		  remote1 = getsockopt(0,SO_STATUS, &remotePort1);
 8001f98:	4a22      	ldr	r2, [pc, #136]	; (8002024 <recv+0x1c8>)
 8001f9a:	210a      	movs	r1, #10
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f845 	bl	800202c <getsockopt>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <recv+0x1cc>)
 8001fa8:	701a      	strb	r2, [r3, #0]
 		  if(remotePort1==28)
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <recv+0x1c8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b1c      	cmp	r3, #28
 8001fb0:	d008      	beq.n	8001fc4 <recv+0x168>
      {
 8001fb2:	e78d      	b.n	8001ed0 <recv+0x74>
               if(recvsize != 0) break;
 8001fb4:	bf00      	nop
 8001fb6:	e006      	b.n	8001fc6 <recv+0x16a>
     		break;
 8001fb8:	bf00      	nop
 8001fba:	e004      	b.n	8001fc6 <recv+0x16a>
         if(recvsize != 0) break;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <recv+0x16a>
         if(recvsize == 0) break;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <recv+0x16a>
 		  {
 			  break;
 8001fc4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001fc6:	89ba      	ldrh	r2, [r7, #12]
 8001fc8:	88bb      	ldrh	r3, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d201      	bcs.n	8001fd2 <recv+0x176>
 8001fce:	89bb      	ldrh	r3, [r7, #12]
 8001fd0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001fd2:	88ba      	ldrh	r2, [r7, #4]
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	6839      	ldr	r1, [r7, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 ff6d 	bl	8002eb8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);    //Sn_CR_RECV - Update RX buffer pointer and receive data
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fd63 	bl	8002ab8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001ff2:	bf00      	nop
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fd0d 	bl	8002a20 <WIZCHIP_READ>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f3      	bne.n	8001ff4 <recv+0x198>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800200c:	88bb      	ldrh	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	20001cf8 	.word	0x20001cf8
 800201c:	20001d0c 	.word	0x20001d0c
 8002020:	6f01a8c0 	.word	0x6f01a8c0
 8002024:	20001d0e 	.word	0x20001d0e
 8002028:	20001d0d 	.word	0x20001d0d

0800202c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 800202c:	b590      	push	{r4, r7, lr}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	603a      	str	r2, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	460b      	mov	r3, r1
 800203a:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d902      	bls.n	8002048 <getsockopt+0x1c>
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e101      	b.n	800224c <getsockopt+0x220>
   switch(sotype)
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	f200 80fa 	bhi.w	8002244 <getsockopt+0x218>
 8002050:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <getsockopt+0x2c>)
 8002052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002056:	bf00      	nop
 8002058:	0800208d 	.word	0x0800208d
 800205c:	080020a9 	.word	0x080020a9
 8002060:	080020c5 	.word	0x080020c5
 8002064:	080020e1 	.word	0x080020e1
 8002068:	0800211b 	.word	0x0800211b
 800206c:	08002133 	.word	0x08002133
 8002070:	08002245 	.word	0x08002245
 8002074:	0800216d 	.word	0x0800216d
 8002078:	080021a7 	.word	0x080021a7
 800207c:	080021b9 	.word	0x080021b9
 8002080:	080021cb 	.word	0x080021cb
 8002084:	080021e7 	.word	0x080021e7
 8002088:	0800221f 	.word	0x0800221f
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	3301      	adds	r3, #1
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fcc3 	bl	8002a20 <WIZCHIP_READ>
 800209a:	4603      	mov	r3, r0
 800209c:	f023 030f 	bic.w	r3, r3, #15
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
         break;
 80020a6:	e0d0      	b.n	800224a <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3301      	adds	r3, #1
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fcb3 	bl	8002a20 <WIZCHIP_READ>
 80020ba:	4603      	mov	r3, r0
 80020bc:	461a      	mov	r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	701a      	strb	r2, [r3, #0]
         break;
 80020c2:	e0c2      	b.n	800224a <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	3301      	adds	r3, #1
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fca5 	bl	8002a20 <WIZCHIP_READ>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	701a      	strb	r2, [r3, #0]
         break;
 80020de:	e0b4      	b.n	800224a <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3301      	adds	r3, #1
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fc97 	bl	8002a20 <WIZCHIP_READ>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b29c      	uxth	r4, r3
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3301      	adds	r3, #1
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fc8a 	bl	8002a20 <WIZCHIP_READ>
 800210c:	4603      	mov	r3, r0
 800210e:	b29b      	uxth	r3, r3
 8002110:	4423      	add	r3, r4
 8002112:	b29a      	uxth	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	801a      	strh	r2, [r3, #0]
         break;
 8002118:	e097      	b.n	800224a <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	3301      	adds	r3, #1
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002126:	2204      	movs	r2, #4
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd12 	bl	8002b54 <WIZCHIP_READ_BUF>
         break;
 8002130:	e08b      	b.n	800224a <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	3301      	adds	r3, #1
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fc6e 	bl	8002a20 <WIZCHIP_READ>
 8002144:	4603      	mov	r3, r0
 8002146:	b29b      	uxth	r3, r3
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	b29c      	uxth	r4, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3301      	adds	r3, #1
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fc61 	bl	8002a20 <WIZCHIP_READ>
 800215e:	4603      	mov	r3, r0
 8002160:	b29b      	uxth	r3, r3
 8002162:	4423      	add	r3, r4
 8002164:	b29a      	uxth	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	801a      	strh	r2, [r3, #0]
         break;
 800216a:	e06e      	b.n	800224a <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	3301      	adds	r3, #1
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fc53 	bl	8002a20 <WIZCHIP_READ>
 800217a:	4603      	mov	r3, r0
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	2b01      	cmp	r3, #1
 8002182:	d002      	beq.n	800218a <getsockopt+0x15e>
 8002184:	f06f 0304 	mvn.w	r3, #4
 8002188:	e060      	b.n	800224c <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	3301      	adds	r3, #1
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fc42 	bl	8002a20 <WIZCHIP_READ>
 800219c:	4603      	mov	r3, r0
 800219e:	b29a      	uxth	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	801a      	strh	r2, [r3, #0]
         break;
 80021a4:	e051      	b.n	800224a <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 fd93 	bl	8002cd4 <getSn_TX_FSR>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	801a      	strh	r2, [r3, #0]
         break;
 80021b6:	e048      	b.n	800224a <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fdd5 	bl	8002d6a <getSn_RX_RSR>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	801a      	strh	r2, [r3, #0]
         break;
 80021c8:	e03f      	b.n	800224a <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	3301      	adds	r3, #1
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fc22 	bl	8002a20 <WIZCHIP_READ>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	701a      	strb	r2, [r3, #0]
         break;
 80021e4:	e031      	b.n	800224a <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3301      	adds	r3, #1
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fc16 	bl	8002a20 <WIZCHIP_READ>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fdb2 	bl	8002d6a <getSn_RX_RSR>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 800220e:	e01c      	b.n	800224a <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <getsockopt+0x228>)
 8002214:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	801a      	strh	r2, [r3, #0]
         break;
 800221c:	e015      	b.n	800224a <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	3301      	adds	r3, #1
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fbfa 	bl	8002a20 <WIZCHIP_READ>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d102      	bne.n	8002238 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 8002232:	f06f 0304 	mvn.w	r3, #4
 8002236:	e009      	b.n	800224c <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4a07      	ldr	r2, [pc, #28]	; (8002258 <getsockopt+0x22c>)
 800223c:	5cd2      	ldrb	r2, [r2, r3]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	701a      	strb	r2, [r3, #0]
         break;
 8002242:	e002      	b.n	800224a <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 8002244:	f06f 0301 	mvn.w	r3, #1
 8002248:	e000      	b.n	800224c <getsockopt+0x220>
   }
   return SOCK_OK;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}
 8002254:	20001cfc 	.word	0x20001cfc
 8002258:	20001d10 	.word	0x20001d10

0800225c <Get_state>:


struct StatesStruct test_states={Initilisation_State, NULL_State}; // current state defined as initilisation state, next state defined as NULL state

myStates Get_state()
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
	return	 test_states.Current_State;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <Get_state+0x14>)
 8002262:	781b      	ldrb	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000808 	.word	0x20000808

08002274 <Set_state>:

void Set_state(myStates N_S)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
test_states.Current_State = N_S;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <Set_state+0x1c>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	7013      	strb	r3, [r2, #0]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20000808 	.word	0x20000808

08002294 <Initilisation_State_Handler>:
 extern uint8_t remotePort;
 extern uint32_t PortStatus;
 extern uint8_t remote;

void Initilisation_State_Handler()
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	Set_state(Initilisation_State);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff ffeb 	bl	8002274 <Set_state>
	Reset_event();
 800229e:	f7fe fbdb 	bl	8000a58 <Reset_event>
	//Initialize the TCPIP Connection
	Init_Ethernet();
 80022a2:	f7fe fb23 	bl	80008ec <Init_Ethernet>
	//Check the physical Connection of TCP IP
	ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP); // gets physical status of the TCPIP
 80022a6:	4928      	ldr	r1, [pc, #160]	; (8002348 <Initilisation_State_Handler+0xb4>)
 80022a8:	200f      	movs	r0, #15
 80022aa:	f000 feff 	bl	80030ac <ctlwizchip>

	if(Phy_TCP_IP==PHY_LINK_OFF)
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <Initilisation_State_Handler+0xb4>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d103      	bne.n	80022be <Initilisation_State_Handler+0x2a>
	{
		//Save the status in the flash memory with date and time stamp+++++++++++++++++++++
		Set_state(Initilisation_State);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7ff ffdc 	bl	8002274 <Set_state>
	  			break;
	  		}
		}
		Set_event(Reset_Event);
	}
}
 80022bc:	e041      	b.n	8002342 <Initilisation_State_Handler+0xae>
	else if(Phy_TCP_IP==PHY_LINK_ON)
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <Initilisation_State_Handler+0xb4>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d13d      	bne.n	8002342 <Initilisation_State_Handler+0xae>
		HAL_Delay(100);
 80022c6:	2064      	movs	r0, #100	; 0x64
 80022c8:	f001 fb98 	bl	80039fc <HAL_Delay>
		Refresh_Watchdog();
 80022cc:	f7fe fb9a 	bl	8000a04 <Refresh_Watchdog>
		Ethernet_Connect();
 80022d0:	f7fe fb68 	bl	80009a4 <Ethernet_Connect>
		HAL_Delay(100);
 80022d4:	2064      	movs	r0, #100	; 0x64
 80022d6:	f001 fb91 	bl	80039fc <HAL_Delay>
		send(0, (uint8_t *)SYS_INIT_CMD,strlen(SYS_INIT_CMD));
 80022da:	2209      	movs	r2, #9
 80022dc:	491b      	ldr	r1, [pc, #108]	; (800234c <Initilisation_State_Handler+0xb8>)
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff fcc2 	bl	8001c68 <send>
		while(strcmp(Recv_Cmd,Abox_Ready)!=0)
 80022e4:	e01f      	b.n	8002326 <Initilisation_State_Handler+0x92>
			memset(Recv_Cmd,0,sizeof Recv_Cmd);
 80022e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ea:	2100      	movs	r1, #0
 80022ec:	4818      	ldr	r0, [pc, #96]	; (8002350 <Initilisation_State_Handler+0xbc>)
 80022ee:	f005 fd01 	bl	8007cf4 <memset>
			PortStatus=recv(0, Recv_Cmd,2048);
 80022f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f6:	4916      	ldr	r1, [pc, #88]	; (8002350 <Initilisation_State_Handler+0xbc>)
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fdaf 	bl	8001e5c <recv>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b14      	ldr	r3, [pc, #80]	; (8002354 <Initilisation_State_Handler+0xc0>)
 8002304:	601a      	str	r2, [r3, #0]
			HAL_Delay(100);
 8002306:	2064      	movs	r0, #100	; 0x64
 8002308:	f001 fb78 	bl	80039fc <HAL_Delay>
	  		ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP);
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <Initilisation_State_Handler+0xb4>)
 800230e:	200f      	movs	r0, #15
 8002310:	f000 fecc 	bl	80030ac <ctlwizchip>
	  		if(PortStatus==SOCKERR_SOCKSTATUS)
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <Initilisation_State_Handler+0xc0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f113 0f07 	cmn.w	r3, #7
 800231c:	d00b      	beq.n	8002336 <Initilisation_State_Handler+0xa2>
	  		if(Phy_TCP_IP==PHY_LINK_OFF)
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <Initilisation_State_Handler+0xb4>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <Initilisation_State_Handler+0xa6>
		while(strcmp(Recv_Cmd,Abox_Ready)!=0)
 8002326:	490c      	ldr	r1, [pc, #48]	; (8002358 <Initilisation_State_Handler+0xc4>)
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <Initilisation_State_Handler+0xbc>)
 800232a:	f7fd ff4d 	bl	80001c8 <strcmp>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1d8      	bne.n	80022e6 <Initilisation_State_Handler+0x52>
 8002334:	e002      	b.n	800233c <Initilisation_State_Handler+0xa8>
	  			break;
 8002336:	bf00      	nop
 8002338:	e000      	b.n	800233c <Initilisation_State_Handler+0xa8>
	  			break;
 800233a:	bf00      	nop
		Set_event(Reset_Event);
 800233c:	2001      	movs	r0, #1
 800233e:	f7fe fb7b 	bl	8000a38 <Set_event>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20001245 	.word	0x20001245
 800234c:	08008060 	.word	0x08008060
 8002350:	200026d8 	.word	0x200026d8
 8002354:	200014f4 	.word	0x200014f4
 8002358:	2000080c 	.word	0x2000080c

0800235c <Reset_State_Handler>:

void Reset_State_Handler()
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	Set_state(Reset_State);
 8002360:	2002      	movs	r0, #2
 8002362:	f7ff ff87 	bl	8002274 <Set_state>
	Reset_event();
 8002366:	f7fe fb77 	bl	8000a58 <Reset_event>
	//Reset the RingBuffers
	RingInit(&WR_Ring,&WR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 800236a:	2304      	movs	r3, #4
 800236c:	22c8      	movs	r2, #200	; 0xc8
 800236e:	491d      	ldr	r1, [pc, #116]	; (80023e4 <Reset_State_Handler+0x88>)
 8002370:	481d      	ldr	r0, [pc, #116]	; (80023e8 <Reset_State_Handler+0x8c>)
 8002372:	f7ff f938 	bl	80015e6 <RingInit>
	RingInit(&WL_Ring,&WL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8002376:	2304      	movs	r3, #4
 8002378:	22c8      	movs	r2, #200	; 0xc8
 800237a:	491c      	ldr	r1, [pc, #112]	; (80023ec <Reset_State_Handler+0x90>)
 800237c:	481c      	ldr	r0, [pc, #112]	; (80023f0 <Reset_State_Handler+0x94>)
 800237e:	f7ff f932 	bl	80015e6 <RingInit>
	RingInit(&FCT_Ring,&FCT_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8002382:	2304      	movs	r3, #4
 8002384:	22c8      	movs	r2, #200	; 0xc8
 8002386:	491b      	ldr	r1, [pc, #108]	; (80023f4 <Reset_State_Handler+0x98>)
 8002388:	481b      	ldr	r0, [pc, #108]	; (80023f8 <Reset_State_Handler+0x9c>)
 800238a:	f7ff f92c 	bl	80015e6 <RingInit>
	//Reset the Counts
	WR_Counts=0;
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <Reset_State_Handler+0xa0>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
	WL_Counts=0;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <Reset_State_Handler+0xa4>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
	FCT_Counts=0;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <Reset_State_Handler+0xa8>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
	//Reset the 32 bit timer 2
	Timer2_Stop(); //Timer Stopped
 80023a0:	f7fe fb8a 	bl	8000ab8 <Timer2_Stop>
	Timer6_Stop();
 80023a4:	f7fe fbd6 	bl	8000b54 <Timer6_Stop>

	Timer2_DeInitilized();//Timer DeInitilized
 80023a8:	f7fe fb90 	bl	8000acc <Timer2_DeInitilized>

	Timer2_Initilized(); //Timer Initialized
 80023ac:	f7fe fba6 	bl	8000afc <Timer2_Initilized>
	Entry_flag=0;
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <Reset_State_Handler+0xac>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
	Lt_Rt_flag=0;
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <Reset_State_Handler+0xb0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	801a      	strh	r2, [r3, #0]
	Rt_Lt_flag=0;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <Reset_State_Handler+0xb4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	801a      	strh	r2, [r3, #0]
	memset(Recv_Cmd,0,sizeof Recv_Cmd);
 80023c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023c6:	2100      	movs	r1, #0
 80023c8:	4812      	ldr	r0, [pc, #72]	; (8002414 <Reset_State_Handler+0xb8>)
 80023ca:	f005 fc93 	bl	8007cf4 <memset>
	send(0, (uint8_t *)"RESET",strlen("RESET"));
 80023ce:	2205      	movs	r2, #5
 80023d0:	4911      	ldr	r1, [pc, #68]	; (8002418 <Reset_State_Handler+0xbc>)
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fc48 	bl	8001c68 <send>
	//set the event to idle
	Set_event(Idle_Event);
 80023d8:	2002      	movs	r0, #2
 80023da:	f7fe fb2d 	bl	8000a38 <Set_event>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20001d18 	.word	0x20001d18
 80023e8:	20002678 	.word	0x20002678
 80023ec:	20002358 	.word	0x20002358
 80023f0:	200026b8 	.word	0x200026b8
 80023f4:	20002038 	.word	0x20002038
 80023f8:	20002698 	.word	0x20002698
 80023fc:	200010c4 	.word	0x200010c4
 8002400:	200010cc 	.word	0x200010cc
 8002404:	200010c8 	.word	0x200010c8
 8002408:	200010e0 	.word	0x200010e0
 800240c:	200010dc 	.word	0x200010dc
 8002410:	200010de 	.word	0x200010de
 8002414:	200026d8 	.word	0x200026d8
 8002418:	0800806c 	.word	0x0800806c

0800241c <Idle_State_Handler>:

void Idle_State_Handler()
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
	//Set state to idle state
	Set_state(Idle_State);
 8002420:	2003      	movs	r0, #3
 8002422:	f7ff ff27 	bl	8002274 <Set_state>


	send(0, (buff_size *)" Idle,",strlen(" Idle,"));
 8002426:	2206      	movs	r2, #6
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <Idle_State_Handler+0x1c>)
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff fc1c 	bl	8001c68 <send>
	//reset the event
	Reset_event();
 8002430:	f7fe fb12 	bl	8000a58 <Reset_event>
	//
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	08008074 	.word	0x08008074

0800243c <WRSide_Train_Presence_State_Handler>:

void WRSide_Train_Presence_State_Handler()
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	if(Get_state!=WRSide_Train_Presence_State)
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <WRSide_Train_Presence_State_Handler+0x18>)
 8002442:	2b04      	cmp	r3, #4
 8002444:	d004      	beq.n	8002450 <WRSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WRSide Train Presence state
		Set_state(WRSide_Train_Presence_State);
 8002446:	2004      	movs	r0, #4
 8002448:	f7ff ff14 	bl	8002274 <Set_state>

		//send(0, (buff_size *)" WRSide,",strlen(" WRSide,"));
		//reset the event
		Reset_event();
 800244c:	f7fe fb04 	bl	8000a58 <Reset_event>
	}
	//tasks that need to be done on each WR trigger
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	0800225d 	.word	0x0800225d

08002458 <WLSide_Train_Presence_State_Handler>:

void WLSide_Train_Presence_State_Handler()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	if(Get_state!=WLSide_Train_Presence_State)
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <WLSide_Train_Presence_State_Handler+0x18>)
 800245e:	2b05      	cmp	r3, #5
 8002460:	d004      	beq.n	800246c <WLSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WLSide Train Presence state
		Set_state(WLSide_Train_Presence_State);
 8002462:	2005      	movs	r0, #5
 8002464:	f7ff ff06 	bl	8002274 <Set_state>

		//send(0, (buff_size *)" WLSide,",strlen(" WLSide,"));
		//reset the event
		Reset_event();
 8002468:	f7fe faf6 	bl	8000a58 <Reset_event>
	}
	//tasks that need to be done on each WL trigger
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	0800225d 	.word	0x0800225d

08002474 <Train_Exit_State_Handler>:

void Train_Exit_State_Handler()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	//Set state to Train Exit state
	Set_state(Train_Exit_State);
 8002478:	2006      	movs	r0, #6
 800247a:	f7ff fefb 	bl	8002274 <Set_state>

	//send(0, (buff_size *)" Exit,",strlen(" Exit,"));
	//reset the event
	Reset_event();
 800247e:	f7fe faeb 	bl	8000a58 <Reset_event>
	//shut down the purge and close the shutters
	//set the event to Log Data event
	Set_event(Log_Data_Event);
 8002482:	2006      	movs	r0, #6
 8002484:	f7fe fad8 	bl	8000a38 <Set_event>
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <Log_Data_State_Handler>:

void Log_Data_State_Handler()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	//Set state to Log Data state
	Set_state(Log_Data_State);
 8002490:	2007      	movs	r0, #7
 8002492:	f7ff feef 	bl	8002274 <Set_state>

	//send(0, (buff_size *)" Log,",strlen(" Log,"));
	//reset the event
	Reset_event();
 8002496:	f7fe fadf 	bl	8000a58 <Reset_event>
	//send the data over TCPIP
	Send_Data();
 800249a:	f7fe f939 	bl	8000710 <Send_Data>
	//set the event to reset event
	Set_event(Reset_Event);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7fe faca 	bl	8000a38 <Set_event>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_MspInit+0x44>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_MspInit+0x44>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6193      	str	r3, [r2, #24]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_MspInit+0x44>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x44>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x44>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x44>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <HAL_RTC_MspInit+0x44>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <HAL_RTC_MspInit+0x36>
 8002502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002506:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002510:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <HAL_RTC_MspInit+0x48>)
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	461a      	mov	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40002800 	.word	0x40002800
 8002538:	10908100 	.word	0x10908100

0800253c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3d      	ldr	r2, [pc, #244]	; (8002650 <HAL_SPI_MspInit+0x114>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d147      	bne.n	80025ee <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002568:	61d3      	str	r3, [r2, #28]
 800256a:	4b3a      	ldr	r3, [pc, #232]	; (8002654 <HAL_SPI_MspInit+0x118>)
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002576:	4b37      	ldr	r3, [pc, #220]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4a36      	ldr	r2, [pc, #216]	; (8002654 <HAL_SPI_MspInit+0x118>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002580:	6153      	str	r3, [r2, #20]
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	4a30      	ldr	r2, [pc, #192]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	6153      	str	r3, [r2, #20]
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <HAL_SPI_MspInit+0x118>)
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80025a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025b8:	2305      	movs	r3, #5
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4825      	ldr	r0, [pc, #148]	; (8002658 <HAL_SPI_MspInit+0x11c>)
 80025c4:	f001 fb82 	bl	8003ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025d6:	2303      	movs	r3, #3
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80025da:	2305      	movs	r3, #5
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e8:	f001 fb70 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80025ec:	e02c      	b.n	8002648 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_SPI_MspInit+0x120>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d127      	bne.n	8002648 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_SPI_MspInit+0x118>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <HAL_SPI_MspInit+0x118>)
 80025fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002602:	61d3      	str	r3, [r2, #28]
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_SPI_MspInit+0x118>)
 8002616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800261a:	6153      	str	r3, [r2, #20]
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_SPI_MspInit+0x118>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002628:	2338      	movs	r3, #56	; 0x38
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002638:	2306      	movs	r3, #6
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <HAL_SPI_MspInit+0x11c>)
 8002644:	f001 fb42 	bl	8003ccc <HAL_GPIO_Init>
}
 8002648:	bf00      	nop
 800264a:	3730      	adds	r7, #48	; 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40003800 	.word	0x40003800
 8002654:	40021000 	.word	0x40021000
 8002658:	48000400 	.word	0x48000400
 800265c:	40003c00 	.word	0x40003c00

08002660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002670:	d10c      	bne.n	800268c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	61d3      	str	r3, [r2, #28]
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800268a:	e04c      	b.n	8002726 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_TIM_Base_MspInit+0xd4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d114      	bne.n	80026c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a25      	ldr	r2, [pc, #148]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 800269c:	f043 0310 	orr.w	r3, r3, #16
 80026a0:	61d3      	str	r3, [r2, #28]
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2036      	movs	r0, #54	; 0x36
 80026b4:	f001 fac5 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026b8:	2036      	movs	r0, #54	; 0x36
 80026ba:	f001 fade 	bl	8003c7a <HAL_NVIC_EnableIRQ>
}
 80026be:	e032      	b.n	8002726 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_TIM_Base_MspInit+0xd8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d114      	bne.n	80026f4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026ca:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	6193      	str	r3, [r2, #24]
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	2019      	movs	r0, #25
 80026e8:	f001 faab 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026ec:	2019      	movs	r0, #25
 80026ee:	f001 fac4 	bl	8003c7a <HAL_NVIC_EnableIRQ>
}
 80026f2:	e018      	b.n	8002726 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIM_Base_MspInit+0xdc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d113      	bne.n	8002726 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	4a0b      	ldr	r2, [pc, #44]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6193      	str	r3, [r2, #24]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_TIM_Base_MspInit+0xd0>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	201a      	movs	r0, #26
 800271c:	f001 fa91 	bl	8003c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002720:	201a      	movs	r0, #26
 8002722:	f001 faaa 	bl	8003c7a <HAL_NVIC_EnableIRQ>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	40001000 	.word	0x40001000
 8002738:	40014400 	.word	0x40014400
 800273c:	40014800 	.word	0x40014800

08002740 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d106      	bne.n	8002760 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 800275e:	e02b      	b.n	80027b8 <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM6)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <HAL_TIM_Base_MspDeInit+0x84>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d109      	bne.n	800277e <HAL_TIM_Base_MspDeInit+0x3e>
    __HAL_RCC_TIM6_CLK_DISABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 8002770:	f023 0310 	bic.w	r3, r3, #16
 8002774:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8002776:	2036      	movs	r0, #54	; 0x36
 8002778:	f001 fa8d 	bl	8003c96 <HAL_NVIC_DisableIRQ>
}
 800277c:	e01c      	b.n	80027b8 <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM16)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_TIM_Base_MspDeInit+0x88>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d109      	bne.n	800279c <HAL_TIM_Base_MspDeInit+0x5c>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 800278e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002792:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8002794:	2019      	movs	r0, #25
 8002796:	f001 fa7e 	bl	8003c96 <HAL_NVIC_DisableIRQ>
}
 800279a:	e00d      	b.n	80027b8 <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM17)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_TIM_Base_MspDeInit+0x8c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d108      	bne.n	80027b8 <HAL_TIM_Base_MspDeInit+0x78>
    __HAL_RCC_TIM17_CLK_DISABLE();
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4a05      	ldr	r2, [pc, #20]	; (80027c0 <HAL_TIM_Base_MspDeInit+0x80>)
 80027ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b0:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80027b2:	201a      	movs	r0, #26
 80027b4:	f001 fa6f 	bl	8003c96 <HAL_NVIC_DisableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40001000 	.word	0x40001000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a17      	ldr	r2, [pc, #92]	; (800284c <HAL_UART_MspInit+0x7c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d128      	bne.n	8002844 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_UART_MspInit+0x80>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a16      	ldr	r2, [pc, #88]	; (8002850 <HAL_UART_MspInit+0x80>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_UART_MspInit+0x80>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_UART_MspInit+0x80>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_UART_MspInit+0x80>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	6153      	str	r3, [r2, #20]
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <HAL_UART_MspInit+0x80>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002822:	230c      	movs	r3, #12
 8002824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002826:	2302      	movs	r3, #2
 8002828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002832:	2307      	movs	r3, #7
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002836:	f107 0314 	add.w	r3, r7, #20
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002840:	f001 fa44 	bl	8003ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40004400 	.word	0x40004400
 8002850:	40021000 	.word	0x40021000

08002854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002866:	e7fe      	b.n	8002866 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	e7fe      	b.n	800286c <MemManage_Handler+0x4>

0800286e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <UsageFault_Handler+0x4>

0800287a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a8:	f001 f888 	bl	80039bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80028b4:	2001      	movs	r0, #1
 80028b6:	f001 fb93 	bl	8003fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}

080028be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80028c2:	2002      	movs	r0, #2
 80028c4:	f001 fb8c 	bl	8003fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}

080028cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80028d0:	2020      	movs	r0, #32
 80028d2:	f001 fb85 	bl	8003fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if ((TIM16->SR & 0x0001))
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <TIM1_UP_TIM16_IRQHandler+0x30>)
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <TIM1_UP_TIM16_IRQHandler+0x26>
	{
		TIM16->SR &= ~(1 << 0);		           //Reset the update interrupt flag
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <TIM1_UP_TIM16_IRQHandler+0x30>)
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	4a06      	ldr	r2, [pc, #24]	; (800290c <TIM1_UP_TIM16_IRQHandler+0x30>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6113      	str	r3, [r2, #16]
		tim16_count++;
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <TIM1_UP_TIM16_IRQHandler+0x34>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a04      	ldr	r2, [pc, #16]	; (8002910 <TIM1_UP_TIM16_IRQHandler+0x34>)
 8002900:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002902:	4804      	ldr	r0, [pc, #16]	; (8002914 <TIM1_UP_TIM16_IRQHandler+0x38>)
 8002904:	f004 fab9 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40014400 	.word	0x40014400
 8002910:	200014ec 	.word	0x200014ec
 8002914:	200013cc 	.word	0x200013cc

08002918 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if ((TIM17->SR & 0x0001))
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <TIM1_TRG_COM_TIM17_IRQHandler+0x26>
	{
		TIM17->SR &= ~(1 << 0);		           //Reset the update interrupt flag
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a06      	ldr	r2, [pc, #24]	; (8002948 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6113      	str	r3, [r2, #16]
		tim17_count++;
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 800293c:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800293e:	4804      	ldr	r0, [pc, #16]	; (8002950 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 8002940:	f004 fa9b 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40014800 	.word	0x40014800
 800294c:	200014f0 	.word	0x200014f0
 8002950:	20001418 	.word	0x20001418

08002954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ((TIM6->SR & 0x0001))
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <TIM6_DAC_IRQHandler+0x30>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <TIM6_DAC_IRQHandler+0x26>
	{
		TIM6->SR &= ~(1 << 0);		           //Reset the update interrupt flag
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <TIM6_DAC_IRQHandler+0x30>)
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <TIM6_DAC_IRQHandler+0x30>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6113      	str	r3, [r2, #16]
		count++;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <TIM6_DAC_IRQHandler+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <TIM6_DAC_IRQHandler+0x34>)
 8002978:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800297a:	4804      	ldr	r0, [pc, #16]	; (800298c <TIM6_DAC_IRQHandler+0x38>)
 800297c:	f004 fa7d 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40001000 	.word	0x40001000
 8002988:	200014e8 	.word	0x200014e8
 800298c:	20001380 	.word	0x20001380

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f005 f936 	bl	8007c30 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20004000 	.word	0x20004000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	20002ed8 	.word	0x20002ed8
 80029f8:	20002ef8 	.word	0x20002ef8

080029fc <SystemInit>:
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <SystemInit+0x20>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	4a05      	ldr	r2, [pc, #20]	; (8002a1c <SystemInit+0x20>)
 8002a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002a28:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <WIZCHIP_READ+0x24>
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d114      	bne.n	8002a6e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	0c12      	lsrs	r2, r2, #16
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	0a12      	lsrs	r2, r2, #8
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4798      	blx	r3
 8002a6c:	e011      	b.n	8002a92 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a88:	f107 020c 	add.w	r2, r7, #12
 8002a8c:	2103      	movs	r1, #3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4798      	blx	r3
 8002a98:	4603      	mov	r3, r0
 8002a9a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <WIZCHIP_READ+0x94>)
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	4798      	blx	r3
   return ret;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20001010 	.word	0x20001010

08002ab8 <WIZCHIP_WRITE>:

void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];
   WIZCHIP_CRITICAL_ENTER();
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d119      	bne.n	8002b14 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	0c12      	lsrs	r2, r2, #16
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	4610      	mov	r0, r2
 8002aec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	0a12      	lsrs	r2, r2, #8
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	4610      	mov	r0, r2
 8002afa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4610      	mov	r0, r2
 8002b06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002b08:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4798      	blx	r3
 8002b12:	e013      	b.n	8002b3c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f107 020c 	add.w	r2, r7, #12
 8002b36:	2104      	movs	r1, #4
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002b3c:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b42:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <WIZCHIP_WRITE+0x98>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	4798      	blx	r3
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20001010 	.word	0x20001010

08002b54 <WIZCHIP_READ_BUF>:
         
void WIZCHIP_READ_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002b62:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b68:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <WIZCHIP_READ_BUF+0x2a>
 8002b76:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d126      	bne.n	8002bcc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002b7e:	4b24      	ldr	r3, [pc, #144]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	0c12      	lsrs	r2, r2, #16
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002b8c:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	0a12      	lsrs	r2, r2, #8
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	4610      	mov	r0, r2
 8002b98:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002b9a:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	82fb      	strh	r3, [r7, #22]
 8002baa:	e00a      	b.n	8002bc2 <WIZCHIP_READ_BUF+0x6e>
		pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002bac:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	8afa      	ldrh	r2, [r7, #22]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	188c      	adds	r4, r1, r2
 8002bb6:	4798      	blx	r3
 8002bb8:	4603      	mov	r3, r0
 8002bba:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002bbc:	8afb      	ldrh	r3, [r7, #22]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	82fb      	strh	r3, [r7, #22]
 8002bc2:	8afa      	ldrh	r2, [r7, #22]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d3f0      	bcc.n	8002bac <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002bca:	e017      	b.n	8002bfc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f107 0210 	add.w	r2, r7, #16
 8002bea:	2103      	movs	r1, #3
 8002bec:	4610      	mov	r0, r2
 8002bee:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	88fa      	ldrh	r2, [r7, #6]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	68b8      	ldr	r0, [r7, #8]
 8002bfa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002c02:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <WIZCHIP_READ_BUF+0xbc>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4798      	blx	r3
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	20001010 	.word	0x20001010

08002c14 <WIZCHIP_WRITE_BUF>:


void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002c28:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d126      	bne.n	8002c8c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	0c12      	lsrs	r2, r2, #16
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002c4c:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	0a12      	lsrs	r2, r2, #8
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	4610      	mov	r0, r2
 8002c58:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	4610      	mov	r0, r2
 8002c64:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	82fb      	strh	r3, [r7, #22]
 8002c6a:	e00a      	b.n	8002c82 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	8afa      	ldrh	r2, [r7, #22]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	440a      	add	r2, r1
 8002c76:	7812      	ldrb	r2, [r2, #0]
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c7c:	8afb      	ldrh	r3, [r7, #22]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	82fb      	strh	r3, [r7, #22]
 8002c82:	8afa      	ldrh	r2, [r7, #22]
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d3f0      	bcc.n	8002c6c <WIZCHIP_WRITE_BUF+0x58>
 8002c8a:	e017      	b.n	8002cbc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else 														// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	f107 0210 	add.w	r2, r7, #16
 8002caa:	2103      	movs	r1, #3
 8002cac:	4610      	mov	r0, r2
 8002cae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	88fa      	ldrh	r2, [r7, #6]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	68b8      	ldr	r0, [r7, #8]
 8002cba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002cc2:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	4798      	blx	r3
}
 8002cc8:	bf00      	nop
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20001010 	.word	0x20001010

08002cd4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	81fb      	strh	r3, [r7, #14]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	3301      	adds	r3, #1
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fe94 	bl	8002a20 <WIZCHIP_READ>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002cfc:	89bb      	ldrh	r3, [r7, #12]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	b29c      	uxth	r4, r3
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	3301      	adds	r3, #1
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fe86 	bl	8002a20 <WIZCHIP_READ>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4423      	add	r3, r4
 8002d1a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002d1c:	89bb      	ldrh	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	3301      	adds	r3, #1
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fe76 	bl	8002a20 <WIZCHIP_READ>
 8002d34:	4603      	mov	r3, r0
 8002d36:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002d38:	89fb      	ldrh	r3, [r7, #14]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	b29c      	uxth	r4, r3
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3301      	adds	r3, #1
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fe68 	bl	8002a20 <WIZCHIP_READ>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	4423      	add	r3, r4
 8002d56:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002d58:	89fa      	ldrh	r2, [r7, #14]
 8002d5a:	89bb      	ldrh	r3, [r7, #12]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1c2      	bne.n	8002ce6 <getSn_TX_FSR+0x12>
   return val;
 8002d60:	89fb      	ldrh	r3, [r7, #14]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}

08002d6a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002d6a:	b590      	push	{r4, r7, lr}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	81fb      	strh	r3, [r7, #14]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	3301      	adds	r3, #1
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fe49 	bl	8002a20 <WIZCHIP_READ>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002d92:	89bb      	ldrh	r3, [r7, #12]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	b29c      	uxth	r4, r3
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe3b 	bl	8002a20 <WIZCHIP_READ>
 8002daa:	4603      	mov	r3, r0
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	4423      	add	r3, r4
 8002db0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002db2:	89bb      	ldrh	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01a      	beq.n	8002dee <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe2b 	bl	8002a20 <WIZCHIP_READ>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b29c      	uxth	r4, r3
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	3301      	adds	r3, #1
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe1d 	bl	8002a20 <WIZCHIP_READ>
 8002de6:	4603      	mov	r3, r0
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4423      	add	r3, r4
 8002dec:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002dee:	89fa      	ldrh	r2, [r7, #14]
 8002df0:	89bb      	ldrh	r3, [r7, #12]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d1c2      	bne.n	8002d7c <getSn_RX_RSR+0x12>
   return val;
 8002df6:	89fb      	ldrh	r3, [r7, #14]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}

08002e00 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002e18:	88bb      	ldrh	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d048      	beq.n	8002eb0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3301      	adds	r3, #1
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fdf8 	bl	8002a20 <WIZCHIP_READ>
 8002e30:	4603      	mov	r3, r0
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b29c      	uxth	r4, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fdeb 	bl	8002a20 <WIZCHIP_READ>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	4423      	add	r3, r4
 8002e50:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	021b      	lsls	r3, r3, #8
 8002e56:	79fa      	ldrb	r2, [r7, #7]
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	3202      	adds	r2, #2
 8002e5c:	00d2      	lsls	r2, r2, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	461a      	mov	r2, r3
 8002e66:	6839      	ldr	r1, [r7, #0]
 8002e68:	68b8      	ldr	r0, [r7, #8]
 8002e6a:	f7ff fed3 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   ptr += len;
 8002e6e:	89fa      	ldrh	r2, [r7, #14]
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002e82:	461a      	mov	r2, r3
 8002e84:	89fb      	ldrh	r3, [r7, #14]
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7ff fe12 	bl	8002ab8 <WIZCHIP_WRITE>
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	3301      	adds	r3, #1
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f7ff fe05 	bl	8002ab8 <WIZCHIP_WRITE>
 8002eae:	e000      	b.n	8002eb2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002eb0:	bf00      	nop
}
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd90      	pop	{r4, r7, pc}

08002eb8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	6039      	str	r1, [r7, #0]
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002ed0:	88bb      	ldrh	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d048      	beq.n	8002f68 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	3301      	adds	r3, #1
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fd9c 	bl	8002a20 <WIZCHIP_READ>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	b29c      	uxth	r4, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fd8f 	bl	8002a20 <WIZCHIP_READ>
 8002f02:	4603      	mov	r3, r0
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4423      	add	r3, r4
 8002f08:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002f0a:	89fb      	ldrh	r3, [r7, #14]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	79fa      	ldrb	r2, [r7, #7]
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	3203      	adds	r2, #3
 8002f14:	00d2      	lsls	r2, r2, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]

   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002f1a:	88bb      	ldrh	r3, [r7, #4]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6839      	ldr	r1, [r7, #0]
 8002f20:	68b8      	ldr	r0, [r7, #8]
 8002f22:	f7ff fe17 	bl	8002b54 <WIZCHIP_READ_BUF>
   ptr += len;
 8002f26:	89fa      	ldrh	r2, [r7, #14]
 8002f28:	88bb      	ldrh	r3, [r7, #4]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	3301      	adds	r3, #1
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7ff fdb6 	bl	8002ab8 <WIZCHIP_WRITE>
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	3301      	adds	r3, #1
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002f58:	461a      	mov	r2, r3
 8002f5a:	89fb      	ldrh	r3, [r7, #14]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f7ff fda9 	bl	8002ab8 <WIZCHIP_WRITE>
 8002f66:	e000      	b.n	8002f6a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002f68:	bf00      	nop
}
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}

08002f70 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	70fb      	strb	r3, [r7, #3]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <reg_wizchip_cs_cbfunc+0x16>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <reg_wizchip_cs_cbfunc+0x40>)
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <reg_wizchip_cs_cbfunc+0x44>)
 8003022:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <reg_wizchip_cs_cbfunc+0x40>)
 8003026:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <reg_wizchip_cs_cbfunc+0x48>)
 8003028:	619a      	str	r2, [r3, #24]
 800302a:	e006      	b.n	800303a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800302c:	4a06      	ldr	r2, [pc, #24]	; (8003048 <reg_wizchip_cs_cbfunc+0x40>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003032:	4a05      	ldr	r2, [pc, #20]	; (8003048 <reg_wizchip_cs_cbfunc+0x40>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6193      	str	r3, [r2, #24]
   }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20001010 	.word	0x20001010
 800304c:	08002f8d 	.word	0x08002f8d
 8003050:	08002f9b 	.word	0x08002f9b

08003054 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800305e:	bf00      	nop
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f9      	beq.n	8003060 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <reg_wizchip_spi_cbfunc+0x24>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <reg_wizchip_spi_cbfunc+0x4c>)
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <reg_wizchip_spi_cbfunc+0x50>)
 800307c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <reg_wizchip_spi_cbfunc+0x54>)
 8003082:	621a      	str	r2, [r3, #32]
 8003084:	e006      	b.n	8003094 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003086:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <reg_wizchip_spi_cbfunc+0x4c>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800308c:	4a04      	ldr	r2, [pc, #16]	; (80030a0 <reg_wizchip_spi_cbfunc+0x4c>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6213      	str	r3, [r2, #32]
   }
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20001010 	.word	0x20001010
 80030a4:	08002fe1 	.word	0x08002fe1
 80030a8:	08002ff1 	.word	0x08002ff1

080030ac <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	f200 80c2 	bhi.w	8003250 <ctlwizchip+0x1a4>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <ctlwizchip+0x28>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	08003115 	.word	0x08003115
 80030d8:	0800311b 	.word	0x0800311b
 80030dc:	08003147 	.word	0x08003147
 80030e0:	0800313b 	.word	0x0800313b
 80030e4:	08003155 	.word	0x08003155
 80030e8:	08003161 	.word	0x08003161
 80030ec:	0800316f 	.word	0x0800316f
 80030f0:	08003195 	.word	0x08003195
 80030f4:	080031bb 	.word	0x080031bb
 80030f8:	080031f5 	.word	0x080031f5
 80030fc:	080031fb 	.word	0x080031fb
 8003100:	08003203 	.word	0x08003203
 8003104:	08003257 	.word	0x08003257
 8003108:	0800320b 	.word	0x0800320b
 800310c:	08003219 	.word	0x08003219
 8003110:	08003235 	.word	0x08003235
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003114:	f000 f8a8 	bl	8003268 <wizchip_sw_reset>
         break;
 8003118:	e09e      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d004      	beq.n	800312a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3308      	adds	r3, #8
 8003128:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f8e5 	bl	8003300 <wizchip_init>
 8003136:	4603      	mov	r3, r0
 8003138:	e08f      	b.n	800325a <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f96a 	bl	8003418 <wizchip_clrinterrupt>
         break;
 8003144:	e088      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8003146:	f000 f99b 	bl	8003480 <wizchip_getinterrupt>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	801a      	strh	r2, [r3, #0]
         break;
 8003152:	e081      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f9b6 	bl	80034ca <wizchip_setinterruptmask>
         break;         
 800315e:	e07b      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8003160:	f000 f9ce 	bl	8003500 <wizchip_getinterruptmask>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	801a      	strh	r2, [r3, #0]
         break;
 800316c:	e074      	b.n	8003258 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	b29b      	uxth	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4619      	mov	r1, r3
 800317a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800317e:	f7ff fc9b 	bl	8002ab8 <WIZCHIP_WRITE>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	4619      	mov	r1, r3
 800318a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800318e:	f7ff fc93 	bl	8002ab8 <WIZCHIP_WRITE>
         break;
 8003192:	e061      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003194:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003198:	f7ff fc42 	bl	8002a20 <WIZCHIP_READ>
 800319c:	4603      	mov	r3, r0
 800319e:	b29b      	uxth	r3, r3
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	b29c      	uxth	r4, r3
 80031a4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80031a8:	f7ff fc3a 	bl	8002a20 <WIZCHIP_READ>
 80031ac:	4603      	mov	r3, r0
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4423      	add	r3, r4
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	801a      	strh	r2, [r3, #0]
         break;
 80031b8:	e04e      	b.n	8003258 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 80031ba:	4b2a      	ldr	r3, [pc, #168]	; (8003264 <ctlwizchip+0x1b8>)
 80031bc:	789a      	ldrb	r2, [r3, #2]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a27      	ldr	r2, [pc, #156]	; (8003264 <ctlwizchip+0x1b8>)
 80031c8:	78d2      	ldrb	r2, [r2, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	3302      	adds	r3, #2
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <ctlwizchip+0x1b8>)
 80031d2:	7912      	ldrb	r2, [r2, #4]
 80031d4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	3303      	adds	r3, #3
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <ctlwizchip+0x1b8>)
 80031dc:	7952      	ldrb	r2, [r2, #5]
 80031de:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <ctlwizchip+0x1b8>)
 80031e6:	7992      	ldrb	r2, [r2, #6]
 80031e8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	3305      	adds	r3, #5
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
         break;
 80031f2:	e031      	b.n	8003258 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80031f4:	f000 f9d6 	bl	80035a4 <wizphy_reset>
         break;
 80031f8:	e02e      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80031fa:	6838      	ldr	r0, [r7, #0]
 80031fc:	f000 f9f9 	bl	80035f2 <wizphy_setphyconf>
         break;
 8003200:	e02a      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003202:	6838      	ldr	r0, [r7, #0]
 8003204:	f000 fa37 	bl	8003676 <wizphy_getphyconf>
         break;
 8003208:	e026      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa9a 	bl	8003748 <wizphy_setphypmode>
 8003214:	4603      	mov	r3, r0
 8003216:	e020      	b.n	800325a <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003218:	f000 f9ab 	bl	8003572 <wizphy_getphypmode>
 800321c:	4603      	mov	r3, r0
 800321e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2bff      	cmp	r3, #255	; 0xff
 8003224:	d102      	bne.n	800322c <ctlwizchip+0x180>
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e016      	b.n	800325a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	7dfa      	ldrb	r2, [r7, #23]
 8003230:	701a      	strb	r2, [r3, #0]
         break;
 8003232:	e011      	b.n	8003258 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8003234:	f000 f987 	bl	8003546 <wizphy_getphylink>
 8003238:	4603      	mov	r3, r0
 800323a:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d102      	bne.n	8003248 <ctlwizchip+0x19c>
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	e008      	b.n	800325a <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	7dfa      	ldrb	r2, [r7, #23]
 800324c:	701a      	strb	r2, [r3, #0]
         break;
 800324e:	e003      	b.n	8003258 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	e001      	b.n	800325a <ctlwizchip+0x1ae>
         break;
 8003256:	bf00      	nop
   }
   return 0;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	bf00      	nop
 8003264:	20001010 	.word	0x20001010

08003268 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2206      	movs	r2, #6
 8003272:	4619      	mov	r1, r3
 8003274:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003278:	f7ff fc6c 	bl	8002b54 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	2204      	movs	r2, #4
 8003282:	4619      	mov	r1, r3
 8003284:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003288:	f7ff fc64 	bl	8002b54 <WIZCHIP_READ_BUF>
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	2204      	movs	r2, #4
 8003292:	4619      	mov	r1, r3
 8003294:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003298:	f7ff fc5c 	bl	8002b54 <WIZCHIP_READ_BUF>
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	2204      	movs	r2, #4
 80032a2:	4619      	mov	r1, r3
 80032a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80032a8:	f7ff fc54 	bl	8002b54 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff fc02 	bl	8002ab8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80032b4:	2000      	movs	r0, #0
 80032b6:	f7ff fbb3 	bl	8002a20 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	2206      	movs	r2, #6
 80032be:	4619      	mov	r1, r3
 80032c0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80032c4:	f7ff fca6 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	2204      	movs	r2, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80032d4:	f7ff fc9e 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	2204      	movs	r2, #4
 80032de:	4619      	mov	r1, r3
 80032e0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80032e4:	f7ff fc96 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80032e8:	f107 030c 	add.w	r3, r7, #12
 80032ec:	2204      	movs	r2, #4
 80032ee:	4619      	mov	r1, r3
 80032f0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80032f4:	f7ff fc8e 	bl	8002c14 <WIZCHIP_WRITE_BUF>
}
 80032f8:	bf00      	nop
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800330e:	f7ff ffab 	bl	8003268 <wizchip_sw_reset>
   if(txsize)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03b      	beq.n	8003390 <wizchip_init+0x90>
   {
      tmp = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e015      	b.n	800334e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	4413      	add	r3, r2
 8003330:	b2db      	uxtb	r3, r3
 8003332:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003338:	2b10      	cmp	r3, #16
 800333a:	dd02      	ble.n	8003342 <wizchip_init+0x42>
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	e066      	b.n	8003410 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	b2db      	uxtb	r3, r3
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003352:	2b07      	cmp	r3, #7
 8003354:	dde5      	ble.n	8003322 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e015      	b.n	8003388 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800335c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	3301      	adds	r3, #1
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800336a:	4618      	mov	r0, r3
 800336c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	f7ff fb9e 	bl	8002ab8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800337c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	73fb      	strb	r3, [r7, #15]
 8003388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338c:	2b07      	cmp	r3, #7
 800338e:	dde5      	ble.n	800335c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d03b      	beq.n	800340e <wizchip_init+0x10e>
   {
      tmp = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
 800339e:	e015      	b.n	80033cc <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80033a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	781a      	ldrb	r2, [r3, #0]
 80033aa:	7bbb      	ldrb	r3, [r7, #14]
 80033ac:	4413      	add	r3, r2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80033b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	dd02      	ble.n	80033c0 <wizchip_init+0xc0>
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	e027      	b.n	8003410 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	3301      	adds	r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	dde5      	ble.n	80033a0 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e015      	b.n	8003406 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	3301      	adds	r3, #1
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80033e8:	4618      	mov	r0, r3
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7ff fb5f 	bl	8002ab8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	2b07      	cmp	r3, #7
 800340c:	dde5      	ble.n	80033da <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003422:	88fb      	ldrh	r3, [r7, #6]
 8003424:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	0a1b      	lsrs	r3, r3, #8
 800342a:	b29b      	uxth	r3, r3
 800342c:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	b2db      	uxtb	r3, r3
 8003436:	4619      	mov	r1, r3
 8003438:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800343c:	f7ff fb3c 	bl	8002ab8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	e014      	b.n	8003470 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003446:	7bba      	ldrb	r2, [r7, #14]
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	fa42 f303 	asr.w	r3, r2, r3
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <wizchip_clrinterrupt+0x52>
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	3301      	adds	r3, #1
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003462:	211f      	movs	r1, #31
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb27 	bl	8002ab8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	3301      	adds	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b07      	cmp	r3, #7
 8003474:	d9e7      	bls.n	8003446 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003476:	bf00      	nop
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003492:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003496:	f7ff fac3 	bl	8002a20 <WIZCHIP_READ>
 800349a:	4603      	mov	r3, r0
 800349c:	f023 030f 	bic.w	r3, r3, #15
 80034a0:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80034a2:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 80034a6:	f7ff fabb 	bl	8002a20 <WIZCHIP_READ>
 80034aa:	4603      	mov	r3, r0
 80034ac:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80034ae:	79bb      	ldrb	r3, [r7, #6]
 80034b0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80034b2:	88bb      	ldrh	r3, [r7, #4]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4413      	add	r3, r2
 80034be:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80034c0:	88bb      	ldrh	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	b29b      	uxth	r3, r3
 80034de:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	4619      	mov	r1, r3
 80034e4:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80034e8:	f7ff fae6 	bl	8002ab8 <WIZCHIP_WRITE>
   setSIMR(simr);
 80034ec:	7bbb      	ldrb	r3, [r7, #14]
 80034ee:	4619      	mov	r1, r3
 80034f0:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80034f4:	f7ff fae0 	bl	8002ab8 <WIZCHIP_WRITE>
#endif   
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003512:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003516:	f7ff fa83 	bl	8002a20 <WIZCHIP_READ>
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800351e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003522:	f7ff fa7d 	bl	8002a20 <WIZCHIP_READ>
 8003526:	4603      	mov	r3, r0
 8003528:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800352a:	79bb      	ldrb	r3, [r7, #6]
 800352c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800352e:	88bb      	ldrh	r3, [r7, #4]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	b29a      	uxth	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	b29b      	uxth	r3, r3
 8003538:	4413      	add	r3, r2
 800353a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800353c:	88bb      	ldrh	r3, [r7, #4]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800354c:	2300      	movs	r3, #0
 800354e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003550:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003554:	f7ff fa64 	bl	8002a20 <WIZCHIP_READ>
 8003558:	4603      	mov	r3, r0
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003562:	2301      	movs	r3, #1
 8003564:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800357c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003580:	f7ff fa4e 	bl	8002a20 <WIZCHIP_READ>
 8003584:	4603      	mov	r3, r0
 8003586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800358a:	2b30      	cmp	r3, #48	; 0x30
 800358c:	d102      	bne.n	8003594 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800358e:	2301      	movs	r3, #1
 8003590:	71fb      	strb	r3, [r7, #7]
 8003592:	e001      	b.n	8003598 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003594:	2300      	movs	r3, #0
 8003596:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80035aa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035ae:	f7ff fa37 	bl	8002a20 <WIZCHIP_READ>
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035bc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4619      	mov	r1, r3
 80035c2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035c6:	f7ff fa77 	bl	8002ab8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80035ca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035ce:	f7ff fa27 	bl	8002a20 <WIZCHIP_READ>
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035dc:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4619      	mov	r1, r3
 80035e2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035e6:	f7ff fa67 	bl	8002ab8 <WIZCHIP_WRITE>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d104      	bne.n	8003610 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	e003      	b.n	8003618 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003616:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	785b      	ldrb	r3, [r3, #1]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d104      	bne.n	800362a <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003626:	73fb      	strb	r3, [r7, #15]
 8003628:	e019      	b.n	800365e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	78db      	ldrb	r3, [r3, #3]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d10d      	bne.n	800364e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	789b      	ldrb	r3, [r3, #2]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d104      	bne.n	8003644 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	f043 0318 	orr.w	r3, r3, #24
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	e00c      	b.n	800365e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	f043 0308 	orr.w	r3, r3, #8
 800364a:	73fb      	strb	r3, [r7, #15]
 800364c:	e007      	b.n	800365e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	789b      	ldrb	r3, [r3, #2]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d103      	bne.n	800365e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4619      	mov	r1, r3
 8003662:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003666:	f7ff fa27 	bl	8002ab8 <WIZCHIP_WRITE>
   wizphy_reset();
 800366a:	f7ff ff9b 	bl	80035a4 <wizphy_reset>
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003682:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003686:	f7ff f9cb 	bl	8002a20 <WIZCHIP_READ>
 800368a:	4603      	mov	r3, r0
 800368c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	119b      	asrs	r3, r3, #6
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d001      	beq.n	80036ac <wizphy_getphyconf+0x36>
 80036a8:	2b38      	cmp	r3, #56	; 0x38
 80036aa:	d103      	bne.n	80036b4 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	705a      	strb	r2, [r3, #1]
         break;
 80036b2:	e003      	b.n	80036bc <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	705a      	strb	r2, [r3, #1]
         break;
 80036ba:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c2:	3b10      	subs	r3, #16
 80036c4:	2b10      	cmp	r3, #16
 80036c6:	bf8c      	ite	hi
 80036c8:	2201      	movhi	r2, #1
 80036ca:	2200      	movls	r2, #0
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	d111      	bne.n	80036f6 <wizphy_getphyconf+0x80>
 80036d2:	2201      	movs	r2, #1
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80036dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	709a      	strb	r2, [r3, #2]
         break;
 80036f4:	e003      	b.n	80036fe <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	709a      	strb	r2, [r3, #2]
         break;
 80036fc:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003704:	3b08      	subs	r3, #8
 8003706:	2b18      	cmp	r3, #24
 8003708:	bf8c      	ite	hi
 800370a:	2201      	movhi	r2, #1
 800370c:	2200      	movls	r2, #0
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	2a00      	cmp	r2, #0
 8003712:	d111      	bne.n	8003738 <wizphy_getphyconf+0xc2>
 8003714:	2201      	movs	r2, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800371e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d003      	beq.n	8003738 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	70da      	strb	r2, [r3, #3]
         break;
 8003736:	e003      	b.n	8003740 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	70da      	strb	r2, [r3, #3]
         break;
 800373e:	bf00      	nop
   }
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003756:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800375a:	f7ff f961 	bl	8002a20 <WIZCHIP_READ>
 800375e:	4603      	mov	r3, r0
 8003760:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <wizphy_setphypmode+0x2a>
 800376c:	f04f 33ff 	mov.w	r3, #4294967295
 8003770:	e030      	b.n	80037d4 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003778:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d104      	bne.n	800378a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003786:	73fb      	strb	r3, [r7, #15]
 8003788:	e003      	b.n	8003792 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003790:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	4619      	mov	r1, r3
 8003796:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800379a:	f7ff f98d 	bl	8002ab8 <WIZCHIP_WRITE>
   wizphy_reset();
 800379e:	f7ff ff01 	bl	80035a4 <wizphy_reset>
   tmp = getPHYCFGR();
 80037a2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80037a6:	f7ff f93b 	bl	8002a20 <WIZCHIP_READ>
 80037aa:	4603      	mov	r3, r0
 80037ac:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <wizphy_setphypmode+0x88>
 80037be:	2300      	movs	r3, #0
 80037c0:	e008      	b.n	80037d4 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <wizphy_setphypmode+0x88>
 80037cc:	2300      	movs	r3, #0
 80037ce:	e001      	b.n	80037d4 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2206      	movs	r2, #6
 80037e8:	4619      	mov	r1, r3
 80037ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80037ee:	f7ff fa11 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	330e      	adds	r3, #14
 80037f6:	2204      	movs	r2, #4
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80037fe:	f7ff fa09 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	330a      	adds	r3, #10
 8003806:	2204      	movs	r2, #4
 8003808:	4619      	mov	r1, r3
 800380a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800380e:	f7ff fa01 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3306      	adds	r3, #6
 8003816:	2204      	movs	r2, #4
 8003818:	4619      	mov	r1, r3
 800381a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800381e:	f7ff f9f9 	bl	8002c14 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7c9a      	ldrb	r2, [r3, #18]
 8003826:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <wizchip_setnetinfo+0x78>)
 8003828:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7cda      	ldrb	r2, [r3, #19]
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <wizchip_setnetinfo+0x78>)
 8003830:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7d1a      	ldrb	r2, [r3, #20]
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <wizchip_setnetinfo+0x78>)
 8003838:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7d5a      	ldrb	r2, [r3, #21]
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <wizchip_setnetinfo+0x78>)
 8003840:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7d9a      	ldrb	r2, [r3, #22]
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <wizchip_setnetinfo+0x7c>)
 8003848:	701a      	strb	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20002edc 	.word	0x20002edc
 8003858:	20002ee0 	.word	0x20002ee0

0800385c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2206      	movs	r2, #6
 8003868:	4619      	mov	r1, r3
 800386a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800386e:	f7ff f971 	bl	8002b54 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	330e      	adds	r3, #14
 8003876:	2204      	movs	r2, #4
 8003878:	4619      	mov	r1, r3
 800387a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800387e:	f7ff f969 	bl	8002b54 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	330a      	adds	r3, #10
 8003886:	2204      	movs	r2, #4
 8003888:	4619      	mov	r1, r3
 800388a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800388e:	f7ff f961 	bl	8002b54 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3306      	adds	r3, #6
 8003896:	2204      	movs	r2, #4
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800389e:	f7ff f959 	bl	8002b54 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <wizchip_getnetinfo+0x78>)
 80038a4:	781a      	ldrb	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <wizchip_getnetinfo+0x78>)
 80038ac:	785a      	ldrb	r2, [r3, #1]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <wizchip_getnetinfo+0x78>)
 80038b4:	789a      	ldrb	r2, [r3, #2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <wizchip_getnetinfo+0x78>)
 80038bc:	78da      	ldrb	r2, [r3, #3]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <wizchip_getnetinfo+0x7c>)
 80038c4:	781a      	ldrb	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	759a      	strb	r2, [r3, #22]
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20002edc 	.word	0x20002edc
 80038d8:	20002ee0 	.word	0x20002ee0

080038dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003914 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <LoopForever+0x6>)
  ldr r1, =_edata
 80038e2:	490e      	ldr	r1, [pc, #56]	; (800391c <LoopForever+0xa>)
  ldr r2, =_sidata
 80038e4:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <LoopForever+0xe>)
  movs r3, #0
 80038e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e8:	e002      	b.n	80038f0 <LoopCopyDataInit>

080038ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ee:	3304      	adds	r3, #4

080038f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f4:	d3f9      	bcc.n	80038ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038f6:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038f8:	4c0b      	ldr	r4, [pc, #44]	; (8003928 <LoopForever+0x16>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038fc:	e001      	b.n	8003902 <LoopFillZerobss>

080038fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003900:	3204      	adds	r2, #4

08003902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003904:	d3fb      	bcc.n	80038fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003906:	f7ff f879 	bl	80029fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800390a:	f004 f997 	bl	8007c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800390e:	f7fd f96b 	bl	8000be8 <main>

08003912 <LoopForever>:

LoopForever:
    b LoopForever
 8003912:	e7fe      	b.n	8003912 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003914:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800391c:	200010a8 	.word	0x200010a8
  ldr r2, =_sidata
 8003920:	080080e4 	.word	0x080080e4
  ldr r2, =_sbss
 8003924:	200010a8 	.word	0x200010a8
  ldr r4, =_ebss
 8003928:	20002ef8 	.word	0x20002ef8

0800392c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800392c:	e7fe      	b.n	800392c <ADC1_IRQHandler>
	...

08003930 <HAL_Init>:
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <HAL_Init+0x28>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <HAL_Init+0x28>)
 800393a:	f043 0310 	orr.w	r3, r3, #16
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	2003      	movs	r0, #3
 8003942:	f000 f973 	bl	8003c2c <HAL_NVIC_SetPriorityGrouping>
 8003946:	2000      	movs	r0, #0
 8003948:	f000 f808 	bl	800395c <HAL_InitTick>
 800394c:	f7fe fdac 	bl	80024a8 <HAL_MspInit>
 8003950:	2300      	movs	r3, #0
 8003952:	4618      	mov	r0, r3
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	40022000 	.word	0x40022000

0800395c <HAL_InitTick>:
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_InitTick+0x54>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_InitTick+0x58>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003972:	fbb3 f3f1 	udiv	r3, r3, r1
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f999 	bl	8003cb2 <HAL_SYSTICK_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_InitTick+0x2e>
 8003986:	2301      	movs	r3, #1
 8003988:	e00e      	b.n	80039a8 <HAL_InitTick+0x4c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d80a      	bhi.n	80039a6 <HAL_InitTick+0x4a>
 8003990:	2200      	movs	r2, #0
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	f04f 30ff 	mov.w	r0, #4294967295
 8003998:	f000 f953 	bl	8003c42 <HAL_NVIC_SetPriority>
 800399c:	4a06      	ldr	r2, [pc, #24]	; (80039b8 <HAL_InitTick+0x5c>)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	e000      	b.n	80039a8 <HAL_InitTick+0x4c>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4618      	mov	r0, r3
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	2000100c 	.word	0x2000100c
 80039b4:	20001040 	.word	0x20001040
 80039b8:	2000103c 	.word	0x2000103c

080039bc <HAL_IncTick>:
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <HAL_IncTick+0x20>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_IncTick+0x24>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	4a04      	ldr	r2, [pc, #16]	; (80039e0 <HAL_IncTick+0x24>)
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20001040 	.word	0x20001040
 80039e0:	20002ee4 	.word	0x20002ee4

080039e4 <HAL_GetTick>:
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_GetTick+0x14>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20002ee4 	.word	0x20002ee4

080039fc <HAL_Delay>:
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	f7ff ffee 	bl	80039e4 <HAL_GetTick>
 8003a08:	60b8      	str	r0, [r7, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d005      	beq.n	8003a22 <HAL_Delay+0x26>
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_Delay+0x44>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	bf00      	nop
 8003a24:	f7ff ffde 	bl	80039e4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d8f7      	bhi.n	8003a24 <HAL_Delay+0x28>
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20001040 	.word	0x20001040

08003a44 <__NVIC_SetPriorityGrouping>:
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	60d3      	str	r3, [r2, #12]
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_GetPriorityGrouping>:
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <__NVIC_EnableIRQ>:
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	db0b      	blt.n	8003ad2 <__NVIC_EnableIRQ+0x2a>
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	f003 021f 	and.w	r2, r3, #31
 8003ac0:	4907      	ldr	r1, [pc, #28]	; (8003ae0 <__NVIC_EnableIRQ+0x38>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2001      	movs	r0, #1
 8003aca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <__NVIC_DisableIRQ>:
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	db12      	blt.n	8003b1c <__NVIC_DisableIRQ+0x38>
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	f003 021f 	and.w	r2, r3, #31
 8003afc:	490a      	ldr	r1, [pc, #40]	; (8003b28 <__NVIC_DisableIRQ+0x44>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	2001      	movs	r0, #1
 8003b06:	fa00 f202 	lsl.w	r2, r0, r2
 8003b0a:	3320      	adds	r3, #32
 8003b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	bf00      	nop
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	bf00      	nop
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_SetPriority>:
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db0a      	blt.n	8003b56 <__NVIC_SetPriority+0x2a>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	490c      	ldr	r1, [pc, #48]	; (8003b78 <__NVIC_SetPriority+0x4c>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003b54:	e00a      	b.n	8003b6c <__NVIC_SetPriority+0x40>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4908      	ldr	r1, [pc, #32]	; (8003b7c <__NVIC_SetPriority+0x50>)
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3b04      	subs	r3, #4
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	440b      	add	r3, r1
 8003b6a:	761a      	strb	r2, [r3, #24]
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <NVIC_EncodePriority>:
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf28      	it	cs
 8003b9e:	2304      	movcs	r3, #4
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d902      	bls.n	8003bb0 <NVIC_EncodePriority+0x30>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	e000      	b.n	8003bb2 <NVIC_EncodePriority+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	400b      	ands	r3, r1
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <SysTick_Config>:
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf8:	d301      	bcc.n	8003bfe <SysTick_Config+0x16>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00f      	b.n	8003c1e <SysTick_Config+0x36>
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <SysTick_Config+0x40>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	6053      	str	r3, [r2, #4]
 8003c06:	210f      	movs	r1, #15
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	f7ff ff8e 	bl	8003b2c <__NVIC_SetPriority>
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <SysTick_Config+0x40>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <SysTick_Config+0x40>)
 8003c18:	2207      	movs	r2, #7
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	e000e010 	.word	0xe000e010

08003c2c <HAL_NVIC_SetPriorityGrouping>:
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff05 	bl	8003a44 <__NVIC_SetPriorityGrouping>
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_SetPriority>:
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	f7ff ff1a 	bl	8003a8c <__NVIC_GetPriorityGrouping>
 8003c58:	6178      	str	r0, [r7, #20]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f7ff ff8e 	bl	8003b80 <NVIC_EncodePriority>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff5d 	bl	8003b2c <__NVIC_SetPriority>
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_NVIC_EnableIRQ>:
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	71fb      	strb	r3, [r7, #7]
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff0d 	bl	8003aa8 <__NVIC_EnableIRQ>
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_DisableIRQ>:
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	71fb      	strb	r3, [r7, #7]
 8003ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff1d 	bl	8003ae4 <__NVIC_DisableIRQ>
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_SYSTICK_Config>:
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ff94 	bl	8003be8 <SysTick_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_GPIO_Init>:
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e14e      	b.n	8003f7a <HAL_GPIO_Init+0x2ae>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 8140 	beq.w	8003f74 <HAL_GPIO_Init+0x2a8>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d005      	beq.n	8003d0c <HAL_GPIO_Init+0x40>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d130      	bne.n	8003d6e <HAL_GPIO_Init+0xa2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	2201      	movs	r2, #1
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	f003 0201 	and.w	r2, r3, #1
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d017      	beq.n	8003daa <HAL_GPIO_Init+0xde>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d123      	bne.n	8003dfe <HAL_GPIO_Init+0x132>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	08da      	lsrs	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3208      	adds	r2, #8
 8003dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	08da      	lsrs	r2, r3, #3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3208      	adds	r2, #8
 8003df8:	6939      	ldr	r1, [r7, #16]
 8003dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 0203 	and.w	r2, r3, #3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 809a 	beq.w	8003f74 <HAL_GPIO_Init+0x2a8>
 8003e40:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <HAL_GPIO_Init+0x2cc>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	4a54      	ldr	r2, [pc, #336]	; (8003f98 <HAL_GPIO_Init+0x2cc>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6193      	str	r3, [r2, #24]
 8003e4c:	4b52      	ldr	r3, [pc, #328]	; (8003f98 <HAL_GPIO_Init+0x2cc>)
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4a50      	ldr	r2, [pc, #320]	; (8003f9c <HAL_GPIO_Init+0x2d0>)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	3302      	adds	r3, #2
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	220f      	movs	r2, #15
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e82:	d013      	beq.n	8003eac <HAL_GPIO_Init+0x1e0>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a46      	ldr	r2, [pc, #280]	; (8003fa0 <HAL_GPIO_Init+0x2d4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00d      	beq.n	8003ea8 <HAL_GPIO_Init+0x1dc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a45      	ldr	r2, [pc, #276]	; (8003fa4 <HAL_GPIO_Init+0x2d8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <HAL_GPIO_Init+0x1d8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a44      	ldr	r2, [pc, #272]	; (8003fa8 <HAL_GPIO_Init+0x2dc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_GPIO_Init+0x1d4>
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e006      	b.n	8003eae <HAL_GPIO_Init+0x1e2>
 8003ea0:	2305      	movs	r3, #5
 8003ea2:	e004      	b.n	8003eae <HAL_GPIO_Init+0x1e2>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e002      	b.n	8003eae <HAL_GPIO_Init+0x1e2>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_GPIO_Init+0x1e2>
 8003eac:	2300      	movs	r3, #0
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	0092      	lsls	r2, r2, #2
 8003eb6:	4093      	lsls	r3, r2
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
 8003ebe:	4937      	ldr	r1, [pc, #220]	; (8003f9c <HAL_GPIO_Init+0x2d0>)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x224>
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x24e>
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	4a24      	ldr	r2, [pc, #144]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6053      	str	r3, [r2, #4]
 8003f20:	4b22      	ldr	r3, [pc, #136]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x278>
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6093      	str	r3, [r2, #8]
 8003f4a:	4b18      	ldr	r3, [pc, #96]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2a2>
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	4a0f      	ldr	r2, [pc, #60]	; (8003fac <HAL_GPIO_Init+0x2e0>)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	60d3      	str	r3, [r2, #12]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	3301      	adds	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f47f aea9 	bne.w	8003cdc <HAL_GPIO_Init+0x10>
 8003f8a:	bf00      	nop
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	48000400 	.word	0x48000400
 8003fa4:	48000800 	.word	0x48000800
 8003fa8:	48000c00 	.word	0x48000c00
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_WritePin>:
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	707b      	strb	r3, [r7, #1]
 8003fc0:	787b      	ldrb	r3, [r7, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_WritePin+0x1e>
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_WritePin+0x24>
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_GPIO_EXTI_IRQHandler>:
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	80fb      	strh	r3, [r7, #6]
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	88fb      	ldrh	r3, [r7, #6]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d006      	beq.n	8004004 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	6153      	str	r3, [r2, #20]
 8003ffc:	88fb      	ldrh	r3, [r7, #6]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fa40 	bl	8001484 <HAL_GPIO_EXTI_Callback>
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40010400 	.word	0x40010400

08004010 <HAL_PWR_EnableBkUpAccess>:
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800401a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401e:	6013      	str	r3, [r2, #0]
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40007000 	.word	0x40007000

08004030 <HAL_RCC_OscConfig>:
 8004030:	b580      	push	{r7, lr}
 8004032:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004036:	af00      	add	r7, sp, #0
 8004038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004040:	6018      	str	r0, [r3, #0]
 8004042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <HAL_RCC_OscConfig+0x26>
 8004050:	2301      	movs	r3, #1
 8004052:	f001 b823 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 817d 	beq.w	8004366 <HAL_RCC_OscConfig+0x336>
 800406c:	4bbc      	ldr	r3, [pc, #752]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b04      	cmp	r3, #4
 8004076:	d00c      	beq.n	8004092 <HAL_RCC_OscConfig+0x62>
 8004078:	4bb9      	ldr	r3, [pc, #740]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d15c      	bne.n	800413e <HAL_RCC_OscConfig+0x10e>
 8004084:	4bb6      	ldr	r3, [pc, #728]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d155      	bne.n	800413e <HAL_RCC_OscConfig+0x10e>
 8004092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004096:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800409a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800409e:	fa93 f3a3 	rbit	r3, r3
 80040a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80040a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_OscConfig+0x94>
 80040be:	4ba8      	ldr	r3, [pc, #672]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	e015      	b.n	80040f0 <HAL_RCC_OscConfig+0xc0>
 80040c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80040cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80040d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80040e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80040e4:	fa93 f3a3 	rbit	r3, r3
 80040e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80040ec:	4b9c      	ldr	r3, [pc, #624]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80040f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80040fc:	fa92 f2a2 	rbit	r2, r2
 8004100:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8004104:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004108:	fab2 f282 	clz	r2, r2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	f002 021f 	and.w	r2, r2, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f202 	lsl.w	r2, r1, r2
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 811f 	beq.w	8004364 <HAL_RCC_OscConfig+0x334>
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 8116 	bne.w	8004364 <HAL_RCC_OscConfig+0x334>
 8004138:	2301      	movs	r3, #1
 800413a:	f000 bfaf 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 800413e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d106      	bne.n	800415e <HAL_RCC_OscConfig+0x12e>
 8004150:	4b83      	ldr	r3, [pc, #524]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a82      	ldr	r2, [pc, #520]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	e036      	b.n	80041cc <HAL_RCC_OscConfig+0x19c>
 800415e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x158>
 800416e:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7b      	ldr	r2, [pc, #492]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b79      	ldr	r3, [pc, #484]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a78      	ldr	r2, [pc, #480]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	e021      	b.n	80041cc <HAL_RCC_OscConfig+0x19c>
 8004188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800418c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x184>
 800419a:	4b71      	ldr	r3, [pc, #452]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a70      	ldr	r2, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b6e      	ldr	r3, [pc, #440]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6d      	ldr	r2, [pc, #436]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0x19c>
 80041b4:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a69      	ldr	r2, [pc, #420]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b67      	ldr	r3, [pc, #412]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a66      	ldr	r2, [pc, #408]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b64      	ldr	r3, [pc, #400]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	f023 020f 	bic.w	r2, r3, #15
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	495f      	ldr	r1, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80041e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d059      	beq.n	80042aa <HAL_RCC_OscConfig+0x27a>
 80041f6:	f7ff fbf5 	bl	80039e4 <HAL_GetTick>
 80041fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_OscConfig+0x1e6>
 8004200:	f7ff fbf0 	bl	80039e4 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b64      	cmp	r3, #100	; 0x64
 800420e:	d902      	bls.n	8004216 <HAL_RCC_OscConfig+0x1e6>
 8004210:	2303      	movs	r3, #3
 8004212:	f000 bf43 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 8004216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800421e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800422a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800422e:	fab3 f383 	clz	r3, r3
 8004232:	b2db      	uxtb	r3, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d102      	bne.n	8004248 <HAL_RCC_OscConfig+0x218>
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	e015      	b.n	8004274 <HAL_RCC_OscConfig+0x244>
 8004248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800424c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004250:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800425c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004260:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004264:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004270:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004278:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800427c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004280:	fa92 f2a2 	rbit	r2, r2
 8004284:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8004288:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800428c:	fab2 f282 	clz	r2, r2
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	f042 0220 	orr.w	r2, r2, #32
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f002 021f 	and.w	r2, r2, #31
 800429c:	2101      	movs	r1, #1
 800429e:	fa01 f202 	lsl.w	r2, r1, r2
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ab      	beq.n	8004200 <HAL_RCC_OscConfig+0x1d0>
 80042a8:	e05d      	b.n	8004366 <HAL_RCC_OscConfig+0x336>
 80042aa:	f7ff fb9b 	bl	80039e4 <HAL_GetTick>
 80042ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x29a>
 80042b4:	f7ff fb96 	bl	80039e4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d902      	bls.n	80042ca <HAL_RCC_OscConfig+0x29a>
 80042c4:	2303      	movs	r3, #3
 80042c6:	f000 bee9 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 80042ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80042d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80042de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d102      	bne.n	80042fc <HAL_RCC_OscConfig+0x2cc>
 80042f6:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x2f8>
 80042fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004300:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004304:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004314:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004318:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004324:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <HAL_RCC_OscConfig+0x330>)
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800432c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004330:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004334:	fa92 f2a2 	rbit	r2, r2
 8004338:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800433c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004340:	fab2 f282 	clz	r2, r2
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	f042 0220 	orr.w	r2, r2, #32
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	f002 021f 	and.w	r2, r2, #31
 8004350:	2101      	movs	r1, #1
 8004352:	fa01 f202 	lsl.w	r2, r1, r2
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ab      	bne.n	80042b4 <HAL_RCC_OscConfig+0x284>
 800435c:	e003      	b.n	8004366 <HAL_RCC_OscConfig+0x336>
 800435e:	bf00      	nop
 8004360:	40021000 	.word	0x40021000
 8004364:	bf00      	nop
 8004366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800436a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 817d 	beq.w	8004676 <HAL_RCC_OscConfig+0x646>
 800437c:	4ba6      	ldr	r3, [pc, #664]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x370>
 8004388:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d172      	bne.n	800447a <HAL_RCC_OscConfig+0x44a>
 8004394:	4ba0      	ldr	r3, [pc, #640]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d16c      	bne.n	800447a <HAL_RCC_OscConfig+0x44a>
 80043a0:	2302      	movs	r3, #2
 80043a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80043a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80043aa:	fa93 f3a3 	rbit	r3, r3
 80043ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80043b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80043b6:	fab3 f383 	clz	r3, r3
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_RCC_OscConfig+0x3a0>
 80043ca:	4b93      	ldr	r3, [pc, #588]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e013      	b.n	80043f8 <HAL_RCC_OscConfig+0x3c8>
 80043d0:	2302      	movs	r3, #2
 80043d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80043d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80043e2:	2302      	movs	r3, #2
 80043e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043ec:	fa93 f3a3 	rbit	r3, r3
 80043f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80043f4:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	2202      	movs	r2, #2
 80043fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80043fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800440a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800440e:	fab2 f282 	clz	r2, r2
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	f042 0220 	orr.w	r2, r2, #32
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	f002 021f 	and.w	r2, r2, #31
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f202 	lsl.w	r2, r1, r2
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCC_OscConfig+0x410>
 800442a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d002      	beq.n	8004440 <HAL_RCC_OscConfig+0x410>
 800443a:	2301      	movs	r3, #1
 800443c:	f000 be2e 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 8004440:	4b75      	ldr	r3, [pc, #468]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	21f8      	movs	r1, #248	; 0xf8
 8004456:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 800445a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800445e:	fa91 f1a1 	rbit	r1, r1
 8004462:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
 8004466:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800446a:	fab1 f181 	clz	r1, r1
 800446e:	b2c9      	uxtb	r1, r1
 8004470:	408b      	lsls	r3, r1
 8004472:	4969      	ldr	r1, [pc, #420]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004474:	4313      	orrs	r3, r2
 8004476:	600b      	str	r3, [r1, #0]
 8004478:	e0fd      	b.n	8004676 <HAL_RCC_OscConfig+0x646>
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8088 	beq.w	800459c <HAL_RCC_OscConfig+0x56c>
 800448c:	2301      	movs	r3, #1
 800448e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004492:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800449e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80044a2:	fab3 f383 	clz	r3, r3
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	461a      	mov	r2, r3
 80044b4:	2301      	movs	r3, #1
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	f7ff fa94 	bl	80039e4 <HAL_GetTick>
 80044bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x4a8>
 80044c2:	f7ff fa8f 	bl	80039e4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d902      	bls.n	80044d8 <HAL_RCC_OscConfig+0x4a8>
 80044d2:	2303      	movs	r3, #3
 80044d4:	f000 bde2 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 80044d8:	2302      	movs	r3, #2
 80044da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80044de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80044ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d102      	bne.n	8004508 <HAL_RCC_OscConfig+0x4d8>
 8004502:	4b45      	ldr	r3, [pc, #276]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	e013      	b.n	8004530 <HAL_RCC_OscConfig+0x500>
 8004508:	2302      	movs	r3, #2
 800450a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800450e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800451a:	2302      	movs	r3, #2
 800451c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004520:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800452c:	4b3a      	ldr	r3, [pc, #232]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	2202      	movs	r2, #2
 8004532:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004536:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800453a:	fa92 f2a2 	rbit	r2, r2
 800453e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 8004542:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004546:	fab2 f282 	clz	r2, r2
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	f042 0220 	orr.w	r2, r2, #32
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	f002 021f 	and.w	r2, r2, #31
 8004556:	2101      	movs	r1, #1
 8004558:	fa01 f202 	lsl.w	r2, r1, r2
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0af      	beq.n	80044c2 <HAL_RCC_OscConfig+0x492>
 8004562:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800456a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800456e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	21f8      	movs	r1, #248	; 0xf8
 8004578:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800457c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004580:	fa91 f1a1 	rbit	r1, r1
 8004584:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8004588:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800458c:	fab1 f181 	clz	r1, r1
 8004590:	b2c9      	uxtb	r1, r1
 8004592:	408b      	lsls	r3, r1
 8004594:	4920      	ldr	r1, [pc, #128]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
 800459a:	e06c      	b.n	8004676 <HAL_RCC_OscConfig+0x646>
 800459c:	2301      	movs	r3, #1
 800459e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80045a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80045a6:	fa93 f3a3 	rbit	r3, r3
 80045aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80045ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	f7ff fa0c 	bl	80039e4 <HAL_GetTick>
 80045cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x5b8>
 80045d2:	f7ff fa07 	bl	80039e4 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d902      	bls.n	80045e8 <HAL_RCC_OscConfig+0x5b8>
 80045e2:	2303      	movs	r3, #3
 80045e4:	f000 bd5a 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 80045e8:	2302      	movs	r3, #2
 80045ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80045ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80045f2:	fa93 f3a3 	rbit	r3, r3
 80045f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80045fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045fe:	fab3 f383 	clz	r3, r3
 8004602:	b2db      	uxtb	r3, r3
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	d104      	bne.n	800461c <HAL_RCC_OscConfig+0x5ec>
 8004612:	4b01      	ldr	r3, [pc, #4]	; (8004618 <HAL_RCC_OscConfig+0x5e8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	e015      	b.n	8004644 <HAL_RCC_OscConfig+0x614>
 8004618:	40021000 	.word	0x40021000
 800461c:	2302      	movs	r3, #2
 800461e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800462e:	2302      	movs	r3, #2
 8004630:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004634:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004638:	fa93 f3a3 	rbit	r3, r3
 800463c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004640:	4bc8      	ldr	r3, [pc, #800]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2202      	movs	r2, #2
 8004646:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800464a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800464e:	fa92 f2a2 	rbit	r2, r2
 8004652:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8004656:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f002 021f 	and.w	r2, r2, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ad      	bne.n	80045d2 <HAL_RCC_OscConfig+0x5a2>
 8004676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800467a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 8110 	beq.w	80048ac <HAL_RCC_OscConfig+0x87c>
 800468c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d079      	beq.n	8004790 <HAL_RCC_OscConfig+0x760>
 800469c:	2301      	movs	r3, #1
 800469e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80046a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80046ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	461a      	mov	r2, r3
 80046ba:	4bab      	ldr	r3, [pc, #684]	; (8004968 <HAL_RCC_OscConfig+0x938>)
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	461a      	mov	r2, r3
 80046c2:	2301      	movs	r3, #1
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	f7ff f98d 	bl	80039e4 <HAL_GetTick>
 80046ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80046ce:	e00a      	b.n	80046e6 <HAL_RCC_OscConfig+0x6b6>
 80046d0:	f7ff f988 	bl	80039e4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d902      	bls.n	80046e6 <HAL_RCC_OscConfig+0x6b6>
 80046e0:	2303      	movs	r3, #3
 80046e2:	f000 bcdb 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 80046e6:	2302      	movs	r3, #2
 80046e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80046ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046f0:	fa93 f3a3 	rbit	r3, r3
 80046f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004700:	2202      	movs	r2, #2
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004708:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	fa93 f2a3 	rbit	r2, r3
 8004712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004724:	2202      	movs	r2, #2
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	fa93 f2a3 	rbit	r2, r3
 8004736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	4b88      	ldr	r3, [pc, #544]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 8004742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004748:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800474c:	2102      	movs	r1, #2
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004754:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	fa93 f1a3 	rbit	r1, r3
 800475e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004762:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004766:	6019      	str	r1, [r3, #0]
 8004768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	fab3 f383 	clz	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	2101      	movs	r1, #1
 8004784:	fa01 f303 	lsl.w	r3, r1, r3
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0a0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x6a0>
 800478e:	e08d      	b.n	80048ac <HAL_RCC_OscConfig+0x87c>
 8004790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004794:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	fa93 f2a3 	rbit	r2, r3
 80047aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	4b68      	ldr	r3, [pc, #416]	; (8004968 <HAL_RCC_OscConfig+0x938>)
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	461a      	mov	r2, r3
 80047ce:	2300      	movs	r3, #0
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	f7ff f907 	bl	80039e4 <HAL_GetTick>
 80047d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_OscConfig+0x7c2>
 80047dc:	f7ff f902 	bl	80039e4 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d902      	bls.n	80047f2 <HAL_RCC_OscConfig+0x7c2>
 80047ec:	2303      	movs	r3, #3
 80047ee:	f000 bc55 	b.w	800509c <HAL_RCC_OscConfig+0x106c>
 80047f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80047fa:	2202      	movs	r2, #2
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	fa93 f2a3 	rbit	r2, r3
 800480c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004810:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800481e:	2202      	movs	r2, #2
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004826:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	fa93 f2a3 	rbit	r2, r3
 8004830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800483e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004842:	2202      	movs	r2, #2
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	fa93 f2a3 	rbit	r2, r3
 8004854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004858:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 8004860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004866:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800486a:	2102      	movs	r1, #2
 800486c:	6019      	str	r1, [r3, #0]
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	fa93 f1a3 	rbit	r1, r3
 800487c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004880:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004884:	6019      	str	r1, [r3, #0]
 8004886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2101      	movs	r1, #1
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	4013      	ands	r3, r2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d197      	bne.n	80047dc <HAL_RCC_OscConfig+0x7ac>
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 81a1 	beq.w	8004c04 <HAL_RCC_OscConfig+0xbd4>
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80048c8:	4b26      	ldr	r3, [pc, #152]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d116      	bne.n	8004902 <HAL_RCC_OscConfig+0x8d2>
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	61d3      	str	r3, [r2, #28]
 80048e0:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80048e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8004902:	4b1a      	ldr	r3, [pc, #104]	; (800496c <HAL_RCC_OscConfig+0x93c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11a      	bne.n	8004944 <HAL_RCC_OscConfig+0x914>
 800490e:	4b17      	ldr	r3, [pc, #92]	; (800496c <HAL_RCC_OscConfig+0x93c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <HAL_RCC_OscConfig+0x93c>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	f7ff f863 	bl	80039e4 <HAL_GetTick>
 800491e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8004922:	e009      	b.n	8004938 <HAL_RCC_OscConfig+0x908>
 8004924:	f7ff f85e 	bl	80039e4 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b64      	cmp	r3, #100	; 0x64
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x908>
 8004934:	2303      	movs	r3, #3
 8004936:	e3b1      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_RCC_OscConfig+0x93c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ef      	beq.n	8004924 <HAL_RCC_OscConfig+0x8f4>
 8004944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d10d      	bne.n	8004970 <HAL_RCC_OscConfig+0x940>
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4a02      	ldr	r2, [pc, #8]	; (8004964 <HAL_RCC_OscConfig+0x934>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6213      	str	r3, [r2, #32]
 8004960:	e03c      	b.n	80049dc <HAL_RCC_OscConfig+0x9ac>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
 8004968:	10908120 	.word	0x10908120
 800496c:	40007000 	.word	0x40007000
 8004970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10c      	bne.n	800499a <HAL_RCC_OscConfig+0x96a>
 8004980:	4bc1      	ldr	r3, [pc, #772]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	4ac0      	ldr	r2, [pc, #768]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	6213      	str	r3, [r2, #32]
 800498c:	4bbe      	ldr	r3, [pc, #760]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	4abd      	ldr	r2, [pc, #756]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004992:	f023 0304 	bic.w	r3, r3, #4
 8004996:	6213      	str	r3, [r2, #32]
 8004998:	e020      	b.n	80049dc <HAL_RCC_OscConfig+0x9ac>
 800499a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x994>
 80049aa:	4bb7      	ldr	r3, [pc, #732]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	4ab6      	ldr	r2, [pc, #728]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6213      	str	r3, [r2, #32]
 80049b6:	4bb4      	ldr	r3, [pc, #720]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4ab3      	ldr	r2, [pc, #716]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6213      	str	r3, [r2, #32]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0x9ac>
 80049c4:	4bb0      	ldr	r3, [pc, #704]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	4aaf      	ldr	r2, [pc, #700]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	6213      	str	r3, [r2, #32]
 80049d0:	4bad      	ldr	r3, [pc, #692]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	4aac      	ldr	r2, [pc, #688]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	6213      	str	r3, [r2, #32]
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8081 	beq.w	8004af0 <HAL_RCC_OscConfig+0xac0>
 80049ee:	f7fe fff9 	bl	80039e4 <HAL_GetTick>
 80049f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 80049f6:	e00b      	b.n	8004a10 <HAL_RCC_OscConfig+0x9e0>
 80049f8:	f7fe fff4 	bl	80039e4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x9e0>
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e345      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 8004a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a18:	2202      	movs	r2, #2
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	fa93 f2a3 	rbit	r2, r3
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	fa93 f2a3 	rbit	r2, r3
 8004a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d102      	bne.n	8004a7c <HAL_RCC_OscConfig+0xa4c>
 8004a76:	4b84      	ldr	r3, [pc, #528]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	e013      	b.n	8004aa4 <HAL_RCC_OscConfig+0xa74>
 8004a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a84:	2202      	movs	r2, #2
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	fa93 f2a3 	rbit	r2, r3
 8004a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	4b79      	ldr	r3, [pc, #484]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004aa8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004aac:	2102      	movs	r1, #2
 8004aae:	6011      	str	r1, [r2, #0]
 8004ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ab4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	fa92 f1a2 	rbit	r1, r2
 8004abe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ac2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ac6:	6011      	str	r1, [r2, #0]
 8004ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004acc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	fab2 f282 	clz	r2, r2
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	f002 021f 	and.w	r2, r2, #31
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d084      	beq.n	80049f8 <HAL_RCC_OscConfig+0x9c8>
 8004aee:	e07f      	b.n	8004bf0 <HAL_RCC_OscConfig+0xbc0>
 8004af0:	f7fe ff78 	bl	80039e4 <HAL_GetTick>
 8004af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8004af8:	e00b      	b.n	8004b12 <HAL_RCC_OscConfig+0xae2>
 8004afa:	f7fe ff73 	bl	80039e4 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xae2>
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e2c4      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 8004b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	fa93 f2a3 	rbit	r2, r3
 8004b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b3e:	2202      	movs	r2, #2
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	fa93 f2a3 	rbit	r2, r3
 8004b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d102      	bne.n	8004b7e <HAL_RCC_OscConfig+0xb4e>
 8004b78:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	e013      	b.n	8004ba6 <HAL_RCC_OscConfig+0xb76>
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004b86:	2202      	movs	r2, #2
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	fa93 f2a3 	rbit	r2, r3
 8004b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	4b39      	ldr	r3, [pc, #228]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004baa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004bae:	2102      	movs	r1, #2
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	fa92 f1a2 	rbit	r1, r2
 8004bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004bd2:	6812      	ldr	r2, [r2, #0]
 8004bd4:	fab2 f282 	clz	r2, r2
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	f002 021f 	and.w	r2, r2, #31
 8004be4:	2101      	movs	r1, #1
 8004be6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d184      	bne.n	8004afa <HAL_RCC_OscConfig+0xaca>
 8004bf0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCC_OscConfig+0xbd4>
 8004bf8:	4b23      	ldr	r3, [pc, #140]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4a22      	ldr	r2, [pc, #136]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c02:	61d3      	str	r3, [r2, #28]
 8004c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8242 	beq.w	800509a <HAL_RCC_OscConfig+0x106a>
 8004c16:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <HAL_RCC_OscConfig+0xc58>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	f000 8213 	beq.w	800504a <HAL_RCC_OscConfig+0x101a>
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69db      	ldr	r3, [r3, #28]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	f040 8162 	bne.w	8004efa <HAL_RCC_OscConfig+0xeca>
 8004c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	fa93 f2a3 	rbit	r2, r3
 8004c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	fab3 f383 	clz	r3, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	f7fe feb2 	bl	80039e4 <HAL_GetTick>
 8004c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8004c84:	e00c      	b.n	8004ca0 <HAL_RCC_OscConfig+0xc70>
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	f7fe feaa 	bl	80039e4 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0xc70>
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e1fd      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 8004ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	fa93 f2a3 	rbit	r2, r3
 8004cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fab3 f383 	clz	r3, r3
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d102      	bne.n	8004cea <HAL_RCC_OscConfig+0xcba>
 8004ce4:	4bb0      	ldr	r3, [pc, #704]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	e027      	b.n	8004d3a <HAL_RCC_OscConfig+0xd0a>
 8004cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cfc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	fa93 f2a3 	rbit	r2, r3
 8004d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	fa93 f2a3 	rbit	r2, r3
 8004d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	4b9c      	ldr	r3, [pc, #624]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d3e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004d42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004d46:	6011      	str	r1, [r2, #0]
 8004d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	fa92 f1a2 	rbit	r1, r2
 8004d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004d5e:	6011      	str	r1, [r2, #0]
 8004d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004d64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	fab2 f282 	clz	r2, r2
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	f042 0220 	orr.w	r2, r2, #32
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	f002 021f 	and.w	r2, r2, #31
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d182      	bne.n	8004c8c <HAL_RCC_OscConfig+0xc5c>
 8004d86:	4b88      	ldr	r3, [pc, #544]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	497f      	ldr	r1, [pc, #508]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	604b      	str	r3, [r1, #4]
 8004dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004db2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	fa93 f2a3 	rbit	r2, r3
 8004dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	461a      	mov	r2, r3
 8004df0:	2301      	movs	r3, #1
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	f7fe fdf6 	bl	80039e4 <HAL_GetTick>
 8004df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8004dfc:	e009      	b.n	8004e12 <HAL_RCC_OscConfig+0xde2>
 8004dfe:	f7fe fdf1 	bl	80039e4 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0xde2>
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e144      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 8004e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	fa93 f2a3 	rbit	r2, r3
 8004e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_RCC_OscConfig+0xe2c>
 8004e56:	4b54      	ldr	r3, [pc, #336]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	e027      	b.n	8004eac <HAL_RCC_OscConfig+0xe7c>
 8004e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	fa93 f2a3 	rbit	r2, r3
 8004e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	fa93 f2a3 	rbit	r2, r3
 8004e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eb0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004eb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ebe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	fa92 f1a2 	rbit	r1, r2
 8004ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ecc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004ed0:	6011      	str	r1, [r2, #0]
 8004ed2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ed6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	fab2 f282 	clz	r2, r2
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	f042 0220 	orr.w	r2, r2, #32
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	f002 021f 	and.w	r2, r2, #31
 8004eec:	2101      	movs	r1, #1
 8004eee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d082      	beq.n	8004dfe <HAL_RCC_OscConfig+0xdce>
 8004ef8:	e0cf      	b.n	800509a <HAL_RCC_OscConfig+0x106a>
 8004efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	fa93 f2a3 	rbit	r2, r3
 8004f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	fab3 f383 	clz	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	f7fe fd50 	bl	80039e4 <HAL_GetTick>
 8004f44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
 8004f48:	e009      	b.n	8004f5e <HAL_RCC_OscConfig+0xf2e>
 8004f4a:	f7fe fd4b 	bl	80039e4 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xf2e>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e09e      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 8004f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	fa93 f2a3 	rbit	r2, r3
 8004f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	095b      	lsrs	r3, r3, #5
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d104      	bne.n	8004fac <HAL_RCC_OscConfig+0xf7c>
 8004fa2:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <HAL_RCC_OscConfig+0xf78>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	e029      	b.n	8004ffc <HAL_RCC_OscConfig+0xfcc>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	fa93 f2a3 	rbit	r2, r3
 8004fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fe4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	fa93 f2a3 	rbit	r2, r3
 8004fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_OscConfig+0x1078>)
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005000:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005004:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005008:	6011      	str	r1, [r2, #0]
 800500a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800500e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	fa92 f1a2 	rbit	r1, r2
 8005018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800501c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005020:	6011      	str	r1, [r2, #0]
 8005022:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005026:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	fab2 f282 	clz	r2, r2
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	f042 0220 	orr.w	r2, r2, #32
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	f002 021f 	and.w	r2, r2, #31
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f202 	lsl.w	r2, r1, r2
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d180      	bne.n	8004f4a <HAL_RCC_OscConfig+0xf1a>
 8005048:	e027      	b.n	800509a <HAL_RCC_OscConfig+0x106a>
 800504a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_RCC_OscConfig+0x102e>
 800505a:	2301      	movs	r3, #1
 800505c:	e01e      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <HAL_RCC_OscConfig+0x1078>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005066:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800506a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800506e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	429a      	cmp	r2, r3
 800507c:	d10b      	bne.n	8005096 <HAL_RCC_OscConfig+0x1066>
 800507e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800508a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	429a      	cmp	r2, r3
 8005094:	d001      	beq.n	800509a <HAL_RCC_OscConfig+0x106a>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <HAL_RCC_OscConfig+0x106c>
 800509a:	2300      	movs	r3, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000

080050ac <HAL_RCC_ClockConfig>:
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b09e      	sub	sp, #120	; 0x78
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
 80050b6:	2300      	movs	r3, #0
 80050b8:	677b      	str	r3, [r7, #116]	; 0x74
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d101      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x18>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e162      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 80050c4:	4b90      	ldr	r3, [pc, #576]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d910      	bls.n	80050f4 <HAL_RCC_ClockConfig+0x48>
 80050d2:	4b8d      	ldr	r3, [pc, #564]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 0207 	bic.w	r2, r3, #7
 80050da:	498b      	ldr	r1, [pc, #556]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
 80050e2:	4b89      	ldr	r3, [pc, #548]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x48>
 80050f0:	2301      	movs	r3, #1
 80050f2:	e14a      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_RCC_ClockConfig+0x66>
 8005100:	4b82      	ldr	r3, [pc, #520]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	497f      	ldr	r1, [pc, #508]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 800510e:	4313      	orrs	r3, r2
 8005110:	604b      	str	r3, [r1, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80dc 	beq.w	80052d8 <HAL_RCC_ClockConfig+0x22c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d13c      	bne.n	80051a2 <HAL_RCC_ClockConfig+0xf6>
 8005128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800512c:	673b      	str	r3, [r7, #112]	; 0x70
 800512e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005130:	fa93 f3a3 	rbit	r3, r3
 8005134:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005138:	fab3 f383 	clz	r3, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d102      	bne.n	8005152 <HAL_RCC_ClockConfig+0xa6>
 800514c:	4b6f      	ldr	r3, [pc, #444]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	e00f      	b.n	8005172 <HAL_RCC_ClockConfig+0xc6>
 8005152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005156:	66bb      	str	r3, [r7, #104]	; 0x68
 8005158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	667b      	str	r3, [r7, #100]	; 0x64
 8005160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005164:	663b      	str	r3, [r7, #96]	; 0x60
 8005166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005168:	fa93 f3a3 	rbit	r3, r3
 800516c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516e:	4b67      	ldr	r3, [pc, #412]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005176:	65ba      	str	r2, [r7, #88]	; 0x58
 8005178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800517a:	fa92 f2a2 	rbit	r2, r2
 800517e:	657a      	str	r2, [r7, #84]	; 0x54
 8005180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005182:	fab2 f282 	clz	r2, r2
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	f042 0220 	orr.w	r2, r2, #32
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	f002 021f 	and.w	r2, r2, #31
 8005192:	2101      	movs	r1, #1
 8005194:	fa01 f202 	lsl.w	r2, r1, r2
 8005198:	4013      	ands	r3, r2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d17b      	bne.n	8005296 <HAL_RCC_ClockConfig+0x1ea>
 800519e:	2301      	movs	r3, #1
 80051a0:	e0f3      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d13c      	bne.n	8005224 <HAL_RCC_ClockConfig+0x178>
 80051aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ae:	653b      	str	r3, [r7, #80]	; 0x50
 80051b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b2:	fa93 f3a3 	rbit	r3, r3
 80051b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	fab3 f383 	clz	r3, r3
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	095b      	lsrs	r3, r3, #5
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d102      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x128>
 80051ce:	4b4f      	ldr	r3, [pc, #316]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	e00f      	b.n	80051f4 <HAL_RCC_ClockConfig+0x148>
 80051d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80051da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051dc:	fa93 f3a3 	rbit	r3, r3
 80051e0:	647b      	str	r3, [r7, #68]	; 0x44
 80051e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051e6:	643b      	str	r3, [r7, #64]	; 0x40
 80051e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ea:	fa93 f3a3 	rbit	r3, r3
 80051ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f0:	4b46      	ldr	r3, [pc, #280]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80051fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fc:	fa92 f2a2 	rbit	r2, r2
 8005200:	637a      	str	r2, [r7, #52]	; 0x34
 8005202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005204:	fab2 f282 	clz	r2, r2
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	f042 0220 	orr.w	r2, r2, #32
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	f002 021f 	and.w	r2, r2, #31
 8005214:	2101      	movs	r1, #1
 8005216:	fa01 f202 	lsl.w	r2, r1, r2
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d13a      	bne.n	8005296 <HAL_RCC_ClockConfig+0x1ea>
 8005220:	2301      	movs	r3, #1
 8005222:	e0b2      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 8005224:	2302      	movs	r3, #2
 8005226:	633b      	str	r3, [r7, #48]	; 0x30
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	fa93 f3a3 	rbit	r3, r3
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	fab3 f383 	clz	r3, r3
 8005236:	b2db      	uxtb	r3, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_RCC_ClockConfig+0x1a0>
 8005246:	4b31      	ldr	r3, [pc, #196]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	e00d      	b.n	8005268 <HAL_RCC_ClockConfig+0x1bc>
 800524c:	2302      	movs	r3, #2
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	fa93 f3a3 	rbit	r3, r3
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
 8005258:	2302      	movs	r3, #2
 800525a:	623b      	str	r3, [r7, #32]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	fa93 f3a3 	rbit	r3, r3
 8005262:	61fb      	str	r3, [r7, #28]
 8005264:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	2202      	movs	r2, #2
 800526a:	61ba      	str	r2, [r7, #24]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	fa92 f2a2 	rbit	r2, r2
 8005272:	617a      	str	r2, [r7, #20]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	fab2 f282 	clz	r2, r2
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	f042 0220 	orr.w	r2, r2, #32
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	f002 021f 	and.w	r2, r2, #31
 8005286:	2101      	movs	r1, #1
 8005288:	fa01 f202 	lsl.w	r2, r1, r2
 800528c:	4013      	ands	r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_ClockConfig+0x1ea>
 8005292:	2301      	movs	r3, #1
 8005294:	e079      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 8005296:	4b1d      	ldr	r3, [pc, #116]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f023 0203 	bic.w	r2, r3, #3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	491a      	ldr	r1, [pc, #104]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
 80052a8:	f7fe fb9c 	bl	80039e4 <HAL_GetTick>
 80052ac:	6778      	str	r0, [r7, #116]	; 0x74
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_ClockConfig+0x21a>
 80052b0:	f7fe fb98 	bl	80039e4 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_ClockConfig+0x21a>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e061      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_RCC_ClockConfig+0x260>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 020c 	and.w	r2, r3, #12
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d1eb      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x204>
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d214      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x264>
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f023 0207 	bic.w	r2, r3, #7
 80052ee:	4906      	ldr	r1, [pc, #24]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <HAL_RCC_ClockConfig+0x25c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d005      	beq.n	8005310 <HAL_RCC_ClockConfig+0x264>
 8005304:	2301      	movs	r3, #1
 8005306:	e040      	b.n	800538a <HAL_RCC_ClockConfig+0x2de>
 8005308:	40022000 	.word	0x40022000
 800530c:	40021000 	.word	0x40021000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x282>
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <HAL_RCC_ClockConfig+0x2e8>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	491a      	ldr	r1, [pc, #104]	; (8005394 <HAL_RCC_ClockConfig+0x2e8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	604b      	str	r3, [r1, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x2a2>
 800533a:	4b16      	ldr	r3, [pc, #88]	; (8005394 <HAL_RCC_ClockConfig+0x2e8>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4912      	ldr	r1, [pc, #72]	; (8005394 <HAL_RCC_ClockConfig+0x2e8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
 800534e:	f000 f829 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 8005352:	4601      	mov	r1, r0
 8005354:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <HAL_RCC_ClockConfig+0x2e8>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800535c:	22f0      	movs	r2, #240	; 0xf0
 800535e:	613a      	str	r2, [r7, #16]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	fa92 f2a2 	rbit	r2, r2
 8005366:	60fa      	str	r2, [r7, #12]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	fab2 f282 	clz	r2, r2
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	40d3      	lsrs	r3, r2
 8005372:	4a09      	ldr	r2, [pc, #36]	; (8005398 <HAL_RCC_ClockConfig+0x2ec>)
 8005374:	5cd3      	ldrb	r3, [r2, r3]
 8005376:	fa21 f303 	lsr.w	r3, r1, r3
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <HAL_RCC_ClockConfig+0x2f0>)
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCC_ClockConfig+0x2f4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7fe faea 	bl	800395c <HAL_InitTick>
 8005388:	2300      	movs	r3, #0
 800538a:	4618      	mov	r0, r3
 800538c:	3778      	adds	r7, #120	; 0x78
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40021000 	.word	0x40021000
 8005398:	0800807c 	.word	0x0800807c
 800539c:	2000100c 	.word	0x2000100c
 80053a0:	2000103c 	.word	0x2000103c

080053a4 <HAL_RCC_GetSysClockFreq>:
 80053a4:	b480      	push	{r7}
 80053a6:	b08b      	sub	sp, #44	; 0x2c
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	61fb      	str	r3, [r7, #28]
 80053ae:	2300      	movs	r3, #0
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	2300      	movs	r3, #0
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	4b29      	ldr	r3, [pc, #164]	; (8005464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d002      	beq.n	80053d4 <HAL_RCC_GetSysClockFreq+0x30>
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d003      	beq.n	80053da <HAL_RCC_GetSysClockFreq+0x36>
 80053d2:	e03c      	b.n	800544e <HAL_RCC_GetSysClockFreq+0xaa>
 80053d4:	4b24      	ldr	r3, [pc, #144]	; (8005468 <HAL_RCC_GetSysClockFreq+0xc4>)
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	e03c      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xb0>
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80053e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80053e4:	60ba      	str	r2, [r7, #8]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	fa92 f2a2 	rbit	r2, r2
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	fab2 f282 	clz	r2, r2
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	40d3      	lsrs	r3, r2
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_RCC_GetSysClockFreq+0xc8>)
 80053fa:	5cd3      	ldrb	r3, [r2, r3]
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	220f      	movs	r2, #15
 8005408:	613a      	str	r2, [r7, #16]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	fa92 f2a2 	rbit	r2, r2
 8005410:	60fa      	str	r2, [r7, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	fab2 f282 	clz	r2, r2
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	40d3      	lsrs	r3, r2
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <HAL_RCC_GetSysClockFreq+0xcc>)
 800541e:	5cd3      	ldrb	r3, [r2, r3]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0x9a>
 800542c:	4a0e      	ldr	r2, [pc, #56]	; (8005468 <HAL_RCC_GetSysClockFreq+0xc4>)
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	fbb2 f2f3 	udiv	r2, r2, r3
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	fb02 f303 	mul.w	r3, r2, r3
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
 800543c:	e004      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0xa4>
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	4a0c      	ldr	r2, [pc, #48]	; (8005474 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005442:	fb02 f303 	mul.w	r3, r2, r3
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	623b      	str	r3, [r7, #32]
 800544c:	e002      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xb0>
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	bf00      	nop
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	4618      	mov	r0, r3
 8005458:	372c      	adds	r7, #44	; 0x2c
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40021000 	.word	0x40021000
 8005468:	017d7840 	.word	0x017d7840
 800546c:	08008094 	.word	0x08008094
 8005470:	080080a4 	.word	0x080080a4
 8005474:	003d0900 	.word	0x003d0900
 8005478:	007a1200 	.word	0x007a1200

0800547c <HAL_RCC_GetHCLKFreq>:
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
 8005480:	4b03      	ldr	r3, [pc, #12]	; (8005490 <HAL_RCC_GetHCLKFreq+0x14>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	2000100c 	.word	0x2000100c

08005494 <HAL_RCC_GetPCLK1Freq>:
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	f7ff ffef 	bl	800547c <HAL_RCC_GetHCLKFreq>
 800549e:	4601      	mov	r1, r0
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	fa92 f2a2 	rbit	r2, r2
 80054b4:	603a      	str	r2, [r7, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	fab2 f282 	clz	r2, r2
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	40d3      	lsrs	r3, r2
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	fa21 f303 	lsr.w	r3, r1, r3
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	0800808c 	.word	0x0800808c

080054d8 <HAL_RCC_GetPCLK2Freq>:
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	f7ff ffcd 	bl	800547c <HAL_RCC_GetHCLKFreq>
 80054e2:	4601      	mov	r1, r0
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80054ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	fa92 f2a2 	rbit	r2, r2
 80054f8:	603a      	str	r2, [r7, #0]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	fab2 f282 	clz	r2, r2
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	40d3      	lsrs	r3, r2
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005506:	5cd3      	ldrb	r3, [r2, r3]
 8005508:	fa21 f303 	lsr.w	r3, r1, r3
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	0800808c 	.word	0x0800808c

0800551c <HAL_RCCEx_PeriphCLKConfig>:
 800551c:	b580      	push	{r7, lr}
 800551e:	b092      	sub	sp, #72	; 0x48
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	2300      	movs	r3, #0
 8005526:	643b      	str	r3, [r7, #64]	; 0x40
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552c:	2300      	movs	r3, #0
 800552e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80d4 	beq.w	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005540:	4b4e      	ldr	r3, [pc, #312]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10e      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800554c:	4b4b      	ldr	r3, [pc, #300]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4a4a      	ldr	r2, [pc, #296]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005556:	61d3      	str	r3, [r2, #28]
 8005558:	4b48      	ldr	r3, [pc, #288]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800556a:	4b45      	ldr	r3, [pc, #276]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005572:	2b00      	cmp	r3, #0
 8005574:	d118      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8005576:	4b42      	ldr	r3, [pc, #264]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a41      	ldr	r2, [pc, #260]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800557c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	f7fe fa2f 	bl	80039e4 <HAL_GetTick>
 8005586:	6438      	str	r0, [r7, #64]	; 0x40
 8005588:	e008      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80>
 800558a:	f7fe fa2b 	bl	80039e4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	; 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x80>
 8005598:	2303      	movs	r3, #3
 800559a:	e13c      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800559c:	4b38      	ldr	r3, [pc, #224]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80055a8:	4b34      	ldr	r3, [pc, #208]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8084 	beq.w	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d07c      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80055c8:	4b2c      	ldr	r3, [pc, #176]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b26      	ldr	r3, [pc, #152]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055ec:	4413      	add	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	461a      	mov	r2, r3
 80055f2:	2301      	movs	r3, #1
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	fa93 f3a3 	rbit	r3, r3
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	fab3 f383 	clz	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	461a      	mov	r2, r3
 8005616:	2300      	movs	r3, #0
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	6213      	str	r3, [r2, #32]
 8005620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d04b      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800562a:	f7fe f9db 	bl	80039e4 <HAL_GetTick>
 800562e:	6438      	str	r0, [r7, #64]	; 0x40
 8005630:	e00a      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005632:	f7fe f9d7 	bl	80039e4 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8005644:	2303      	movs	r3, #3
 8005646:	e0e6      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005648:	2302      	movs	r3, #2
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	fa93 f3a3 	rbit	r3, r3
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
 8005654:	2302      	movs	r3, #2
 8005656:	623b      	str	r3, [r7, #32]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f043 0302 	orr.w	r3, r3, #2
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d108      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005676:	4b01      	ldr	r3, [pc, #4]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	e00d      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800567c:	40021000 	.word	0x40021000
 8005680:	40007000 	.word	0x40007000
 8005684:	10908100 	.word	0x10908100
 8005688:	2302      	movs	r3, #2
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	fa93 f3a3 	rbit	r3, r3
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	4b62      	ldr	r3, [pc, #392]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	2202      	movs	r2, #2
 800569a:	613a      	str	r2, [r7, #16]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	fa92 f2a2 	rbit	r2, r2
 80056a2:	60fa      	str	r2, [r7, #12]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	fab2 f282 	clz	r2, r2
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	f002 021f 	and.w	r2, r2, #31
 80056b6:	2101      	movs	r1, #1
 80056b8:	fa01 f202 	lsl.w	r2, r1, r2
 80056bc:	4013      	ands	r3, r2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d0b7      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056c2:	4b57      	ldr	r3, [pc, #348]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4954      	ldr	r1, [pc, #336]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	620b      	str	r3, [r1, #32]
 80056d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80056dc:	4b50      	ldr	r3, [pc, #320]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4a4f      	ldr	r2, [pc, #316]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056e6:	61d3      	str	r3, [r2, #28]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80056f4:	4b4a      	ldr	r3, [pc, #296]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	f023 0203 	bic.w	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	4947      	ldr	r1, [pc, #284]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005702:	4313      	orrs	r3, r2
 8005704:	630b      	str	r3, [r1, #48]	; 0x30
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d008      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005712:	4b43      	ldr	r3, [pc, #268]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f023 0210 	bic.w	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	4940      	ldr	r1, [pc, #256]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005720:	4313      	orrs	r3, r2
 8005722:	630b      	str	r3, [r1, #48]	; 0x30
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x226>
 8005730:	4b3b      	ldr	r3, [pc, #236]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f023 0220 	bic.w	r2, r3, #32
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	4938      	ldr	r1, [pc, #224]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800573e:	4313      	orrs	r3, r2
 8005740:	630b      	str	r3, [r1, #48]	; 0x30
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800574e:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	4931      	ldr	r1, [pc, #196]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800575c:	4313      	orrs	r3, r2
 800575e:	630b      	str	r3, [r1, #48]	; 0x30
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800576c:	4b2c      	ldr	r3, [pc, #176]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	4929      	ldr	r1, [pc, #164]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	4922      	ldr	r1, [pc, #136]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005798:	4313      	orrs	r3, r2
 800579a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80057a8:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	491a      	ldr	r1, [pc, #104]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	630b      	str	r3, [r1, #48]	; 0x30
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d008      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80057c6:	4b16      	ldr	r3, [pc, #88]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	4913      	ldr	r1, [pc, #76]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	630b      	str	r3, [r1, #48]	; 0x30
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80057e4:	4b0e      	ldr	r3, [pc, #56]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f0:	490b      	ldr	r1, [pc, #44]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	630b      	str	r3, [r1, #48]	; 0x30
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8005802:	4b07      	ldr	r3, [pc, #28]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	4904      	ldr	r1, [pc, #16]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005810:	4313      	orrs	r3, r2
 8005812:	630b      	str	r3, [r1, #48]	; 0x30
 8005814:	2300      	movs	r3, #0
 8005816:	4618      	mov	r0, r3
 8005818:	3748      	adds	r7, #72	; 0x48
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40021000 	.word	0x40021000

08005824 <HAL_RTC_Init>:
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RTC_Init+0x12>
 8005832:	2301      	movs	r3, #1
 8005834:	e083      	b.n	800593e <HAL_RTC_Init+0x11a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7f5b      	ldrb	r3, [r3, #29]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_RTC_Init+0x28>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	771a      	strb	r2, [r3, #28]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc fe52 	bl	80024f0 <HAL_RTC_MspInit>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	775a      	strb	r2, [r3, #29]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	22ca      	movs	r2, #202	; 0xca
 8005858:	625a      	str	r2, [r3, #36]	; 0x24
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2253      	movs	r2, #83	; 0x53
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9fb 	bl	8005c5e <RTC_EnterInitMode>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <HAL_RTC_Init+0x5c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	22ff      	movs	r2, #255	; 0xff
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2204      	movs	r2, #4
 800587a:	775a      	strb	r2, [r3, #29]
 800587c:	2301      	movs	r3, #1
 800587e:	e05e      	b.n	800593e <HAL_RTC_Init+0x11a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800588e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005892:	6093      	str	r3, [r2, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6899      	ldr	r1, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	68d2      	ldr	r2, [r2, #12]
 80058ba:	611a      	str	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6919      	ldr	r1, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	041a      	lsls	r2, r3, #16
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	611a      	str	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058de:	60da      	str	r2, [r3, #12]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_RTC_Init+0xe8>
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f98d 	bl	8005c0e <HAL_RTC_WaitForSynchro>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_RTC_Init+0xe8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	22ff      	movs	r2, #255	; 0xff
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2204      	movs	r2, #4
 8005906:	775a      	strb	r2, [r3, #29]
 8005908:	2301      	movs	r3, #1
 800590a:	e018      	b.n	800593e <HAL_RTC_Init+0x11a>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	625a      	str	r2, [r3, #36]	; 0x24
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	775a      	strb	r2, [r3, #29]
 800593c:	2300      	movs	r3, #0
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_RTC_SetTime>:
 8005946:	b590      	push	{r4, r7, lr}
 8005948:	b087      	sub	sp, #28
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	607a      	str	r2, [r7, #4]
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	7f1b      	ldrb	r3, [r3, #28]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_RTC_SetTime+0x1c>
 800595e:	2302      	movs	r3, #2
 8005960:	e0aa      	b.n	8005ab8 <HAL_RTC_SetTime+0x172>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	771a      	strb	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2202      	movs	r2, #2
 800596c:	775a      	strb	r2, [r3, #29]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d126      	bne.n	80059c2 <HAL_RTC_SetTime+0x7c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <HAL_RTC_SetTime+0x42>
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	70da      	strb	r2, [r3, #3]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 f992 	bl	8005cb6 <RTC_ByteToBcd2>
 8005992:	4603      	mov	r3, r0
 8005994:	041c      	lsls	r4, r3, #16
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 f98b 	bl	8005cb6 <RTC_ByteToBcd2>
 80059a0:	4603      	mov	r3, r0
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	431c      	orrs	r4, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	789b      	ldrb	r3, [r3, #2]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f983 	bl	8005cb6 <RTC_ByteToBcd2>
 80059b0:	4603      	mov	r3, r0
 80059b2:	ea44 0203 	orr.w	r2, r4, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	78db      	ldrb	r3, [r3, #3]
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e018      	b.n	80059f4 <HAL_RTC_SetTime+0xae>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <HAL_RTC_SetTime+0x90>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2200      	movs	r2, #0
 80059d4:	70da      	strb	r2, [r3, #3]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	041a      	lsls	r2, r3, #16
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	4313      	orrs	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	7892      	ldrb	r2, [r2, #2]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	78db      	ldrb	r3, [r3, #3]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	22ca      	movs	r2, #202	; 0xca
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2253      	movs	r2, #83	; 0x53
 8005a02:	625a      	str	r2, [r3, #36]	; 0x24
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f92a 	bl	8005c5e <RTC_EnterInitMode>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00b      	beq.n	8005a28 <HAL_RTC_SetTime+0xe2>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	775a      	strb	r2, [r3, #29]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
 8005a24:	2301      	movs	r3, #1
 8005a26:	e047      	b.n	8005ab8 <HAL_RTC_SetTime+0x172>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a32:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6e:	60da      	str	r2, [r3, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d111      	bne.n	8005aa2 <HAL_RTC_SetTime+0x15c>
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f8c5 	bl	8005c0e <HAL_RTC_WaitForSynchro>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_RTC_SetTime+0x15c>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	22ff      	movs	r2, #255	; 0xff
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2204      	movs	r2, #4
 8005a96:	775a      	strb	r2, [r3, #29]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	771a      	strb	r2, [r3, #28]
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RTC_SetTime+0x172>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	22ff      	movs	r2, #255	; 0xff
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	775a      	strb	r2, [r3, #29]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	771a      	strb	r2, [r3, #28]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	4618      	mov	r0, r3
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <HAL_RTC_SetDate>:
 8005ac0:	b590      	push	{r4, r7, lr}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	7f1b      	ldrb	r3, [r3, #28]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_RTC_SetDate+0x1c>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e094      	b.n	8005c06 <HAL_RTC_SetDate+0x146>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	771a      	strb	r2, [r3, #28]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	775a      	strb	r2, [r3, #29]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10e      	bne.n	8005b0c <HAL_RTC_SetDate+0x4c>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	785b      	ldrb	r3, [r3, #1]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d008      	beq.n	8005b0c <HAL_RTC_SetDate+0x4c>
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	330a      	adds	r3, #10
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	705a      	strb	r2, [r3, #1]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d11c      	bne.n	8005b4c <HAL_RTC_SetDate+0x8c>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f8cd 	bl	8005cb6 <RTC_ByteToBcd2>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	041c      	lsls	r4, r3, #16
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f8c6 	bl	8005cb6 <RTC_ByteToBcd2>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	431c      	orrs	r4, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	789b      	ldrb	r3, [r3, #2]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 f8be 	bl	8005cb6 <RTC_ByteToBcd2>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	ea44 0203 	orr.w	r2, r4, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	035b      	lsls	r3, r3, #13
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e00e      	b.n	8005b6a <HAL_RTC_SetDate+0xaa>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	041a      	lsls	r2, r3, #16
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	7892      	ldrb	r2, [r2, #2]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	035b      	lsls	r3, r3, #13
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	22ca      	movs	r2, #202	; 0xca
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2253      	movs	r2, #83	; 0x53
 8005b78:	625a      	str	r2, [r3, #36]	; 0x24
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f86f 	bl	8005c5e <RTC_EnterInitMode>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <HAL_RTC_SetDate+0xde>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	22ff      	movs	r2, #255	; 0xff
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2204      	movs	r2, #4
 8005b92:	775a      	strb	r2, [r3, #29]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	771a      	strb	r2, [r3, #28]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e033      	b.n	8005c06 <HAL_RTC_SetDate+0x146>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ba8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005bac:	6053      	str	r3, [r2, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <HAL_RTC_SetDate+0x130>
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f81e 	bl	8005c0e <HAL_RTC_WaitForSynchro>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_RTC_SetDate+0x130>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	22ff      	movs	r2, #255	; 0xff
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2204      	movs	r2, #4
 8005be4:	775a      	strb	r2, [r3, #29]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
 8005bec:	2301      	movs	r3, #1
 8005bee:	e00a      	b.n	8005c06 <HAL_RTC_SetDate+0x146>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	22ff      	movs	r2, #255	; 0xff
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	775a      	strb	r2, [r3, #29]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]
 8005c04:	2300      	movs	r3, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd90      	pop	{r4, r7, pc}

08005c0e <HAL_RTC_WaitForSynchro>:
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	f7fd fedb 	bl	80039e4 <HAL_GetTick>
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	e009      	b.n	8005c46 <HAL_RTC_WaitForSynchro+0x38>
 8005c32:	f7fd fed7 	bl	80039e4 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c40:	d901      	bls.n	8005c46 <HAL_RTC_WaitForSynchro+0x38>
 8005c42:	2303      	movs	r3, #3
 8005c44:	e007      	b.n	8005c56 <HAL_RTC_WaitForSynchro+0x48>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ee      	beq.n	8005c32 <HAL_RTC_WaitForSynchro+0x24>
 8005c54:	2300      	movs	r3, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <RTC_EnterInitMode>:
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d119      	bne.n	8005cac <RTC_EnterInitMode+0x4e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	f7fd feaf 	bl	80039e4 <HAL_GetTick>
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	e009      	b.n	8005c9e <RTC_EnterInitMode+0x40>
 8005c8a:	f7fd feab 	bl	80039e4 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c98:	d901      	bls.n	8005c9e <RTC_EnterInitMode+0x40>
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e007      	b.n	8005cae <RTC_EnterInitMode+0x50>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0ee      	beq.n	8005c8a <RTC_EnterInitMode+0x2c>
 8005cac:	2300      	movs	r3, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <RTC_ByteToBcd2>:
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	71fb      	strb	r3, [r7, #7]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e005      	b.n	8005cd2 <RTC_ByteToBcd2+0x1c>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	3b0a      	subs	r3, #10
 8005cd0:	71fb      	strb	r3, [r7, #7]
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d8f6      	bhi.n	8005cc6 <RTC_ByteToBcd2+0x10>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3714      	adds	r7, #20
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_SPI_Init>:
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_SPI_Init+0x12>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e09d      	b.n	8005e40 <HAL_SPI_Init+0x14e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <HAL_SPI_Init+0x2c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d14:	d009      	beq.n	8005d2a <HAL_SPI_Init+0x38>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	61da      	str	r2, [r3, #28]
 8005d1c:	e005      	b.n	8005d2a <HAL_SPI_Init+0x38>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	611a      	str	r2, [r3, #16]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	615a      	str	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_SPI_Init+0x58>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fc fbf9 	bl	800253c <HAL_SPI_MspInit>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d6a:	d902      	bls.n	8005d72 <HAL_SPI_Init+0x80>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	e002      	b.n	8005d78 <HAL_SPI_Init+0x86>
 8005d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d80:	d007      	beq.n	8005d92 <HAL_SPI_Init+0xa0>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d8a:	d002      	beq.n	8005d92 <HAL_SPI_Init+0xa0>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	ea42 0103 	orr.w	r1, r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	f003 0204 	and.w	r2, r3, #4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e00:	f003 0308 	and.w	r3, r3, #8
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e0e:	ea42 0103 	orr.w	r1, r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2e:	61da      	str	r2, [r3, #28]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	661a      	str	r2, [r3, #96]	; 0x60
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005e3e:	2300      	movs	r3, #0
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_SPI_Transmit>:
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	80fb      	strh	r3, [r7, #6]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d101      	bne.n	8005e6a <HAL_SPI_Transmit+0x22>
 8005e66:	2302      	movs	r3, #2
 8005e68:	e158      	b.n	800611c <HAL_SPI_Transmit+0x2d4>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005e72:	f7fd fdb7 	bl	80039e4 <HAL_GetTick>
 8005e76:	61b8      	str	r0, [r7, #24]
 8005e78:	88fb      	ldrh	r3, [r7, #6]
 8005e7a:	82fb      	strh	r3, [r7, #22]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d002      	beq.n	8005e8e <HAL_SPI_Transmit+0x46>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	77fb      	strb	r3, [r7, #31]
 8005e8c:	e13d      	b.n	800610a <HAL_SPI_Transmit+0x2c2>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <HAL_SPI_Transmit+0x52>
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d102      	bne.n	8005ea0 <HAL_SPI_Transmit+0x58>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	77fb      	strb	r3, [r7, #31]
 8005e9e:	e134      	b.n	800610a <HAL_SPI_Transmit+0x2c2>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	639a      	str	r2, [r3, #56]	; 0x38
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	88fa      	ldrh	r2, [r7, #6]
 8005eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	651a      	str	r2, [r3, #80]	; 0x50
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	64da      	str	r2, [r3, #76]	; 0x4c
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eea:	d10f      	bne.n	8005f0c <HAL_SPI_Transmit+0xc4>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	d007      	beq.n	8005f2a <HAL_SPI_Transmit+0xe2>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f32:	d94b      	bls.n	8005fcc <HAL_SPI_Transmit+0x184>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <HAL_SPI_Transmit+0xfa>
 8005f3c:	8afb      	ldrh	r3, [r7, #22]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d13e      	bne.n	8005fc0 <HAL_SPI_Transmit+0x178>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	881a      	ldrh	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f66:	e02b      	b.n	8005fc0 <HAL_SPI_Transmit+0x178>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d112      	bne.n	8005f9c <HAL_SPI_Transmit+0x154>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	881a      	ldrh	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	1c9a      	adds	r2, r3, #2
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f9a:	e011      	b.n	8005fc0 <HAL_SPI_Transmit+0x178>
 8005f9c:	f7fd fd22 	bl	80039e4 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d803      	bhi.n	8005fb4 <HAL_SPI_Transmit+0x16c>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_Transmit+0x172>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d102      	bne.n	8005fc0 <HAL_SPI_Transmit+0x178>
 8005fba:	2303      	movs	r3, #3
 8005fbc:	77fb      	strb	r3, [r7, #31]
 8005fbe:	e0a4      	b.n	800610a <HAL_SPI_Transmit+0x2c2>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1ce      	bne.n	8005f68 <HAL_SPI_Transmit+0x120>
 8005fca:	e07c      	b.n	80060c6 <HAL_SPI_Transmit+0x27e>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_Transmit+0x192>
 8005fd4:	8afb      	ldrh	r3, [r7, #22]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d170      	bne.n	80060bc <HAL_SPI_Transmit+0x274>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d912      	bls.n	800600a <HAL_SPI_Transmit+0x1c2>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	881a      	ldrh	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60da      	str	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	1c9a      	adds	r2, r3, #2
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b02      	subs	r3, #2
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006008:	e058      	b.n	80060bc <HAL_SPI_Transmit+0x274>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	639a      	str	r2, [r3, #56]	; 0x38
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006030:	e044      	b.n	80060bc <HAL_SPI_Transmit+0x274>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d12b      	bne.n	8006098 <HAL_SPI_Transmit+0x250>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d912      	bls.n	8006070 <HAL_SPI_Transmit+0x228>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	1c9a      	adds	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006064:	b29b      	uxth	r3, r3
 8006066:	3b02      	subs	r3, #2
 8006068:	b29a      	uxth	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800606e:	e025      	b.n	80060bc <HAL_SPI_Transmit+0x274>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006096:	e011      	b.n	80060bc <HAL_SPI_Transmit+0x274>
 8006098:	f7fd fca4 	bl	80039e4 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d803      	bhi.n	80060b0 <HAL_SPI_Transmit+0x268>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d102      	bne.n	80060b6 <HAL_SPI_Transmit+0x26e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Transmit+0x274>
 80060b6:	2303      	movs	r3, #3
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e026      	b.n	800610a <HAL_SPI_Transmit+0x2c2>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1b5      	bne.n	8006032 <HAL_SPI_Transmit+0x1ea>
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 fce4 	bl	8006a98 <SPI_EndRxTxTransaction>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_SPI_Transmit+0x294>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <HAL_SPI_Transmit+0x2b2>
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	613b      	str	r3, [r7, #16]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_SPI_Transmit+0x2c0>
 8006102:	2301      	movs	r3, #1
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e000      	b.n	800610a <HAL_SPI_Transmit+0x2c2>
 8006108:	bf00      	nop
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800611a:	7ffb      	ldrb	r3, [r7, #31]
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_SPI_Receive>:
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	80fb      	strh	r3, [r7, #6]
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006140:	d112      	bne.n	8006168 <HAL_SPI_Receive+0x44>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10e      	bne.n	8006168 <HAL_SPI_Receive+0x44>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2204      	movs	r2, #4
 800614e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	4613      	mov	r3, r2
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f910 	bl	8006384 <HAL_SPI_TransmitReceive>
 8006164:	4603      	mov	r3, r0
 8006166:	e109      	b.n	800637c <HAL_SPI_Receive+0x258>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_SPI_Receive+0x52>
 8006172:	2302      	movs	r3, #2
 8006174:	e102      	b.n	800637c <HAL_SPI_Receive+0x258>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800617e:	f7fd fc31 	bl	80039e4 <HAL_GetTick>
 8006182:	6138      	str	r0, [r7, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d002      	beq.n	8006196 <HAL_SPI_Receive+0x72>
 8006190:	2302      	movs	r3, #2
 8006192:	75fb      	strb	r3, [r7, #23]
 8006194:	e0e9      	b.n	800636a <HAL_SPI_Receive+0x246>
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_Receive+0x7e>
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <HAL_SPI_Receive+0x84>
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
 80061a6:	e0e0      	b.n	800636a <HAL_SPI_Receive+0x246>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2204      	movs	r2, #4
 80061ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	661a      	str	r2, [r3, #96]	; 0x60
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	88fa      	ldrh	r2, [r7, #6]
 80061c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	651a      	str	r2, [r3, #80]	; 0x50
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f2:	d908      	bls.n	8006206 <HAL_SPI_Receive+0xe2>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	e007      	b.n	8006216 <HAL_SPI_Receive+0xf2>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621e:	d10f      	bne.n	8006240 <HAL_SPI_Receive+0x11c>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622e:	601a      	str	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624a:	2b40      	cmp	r3, #64	; 0x40
 800624c:	d007      	beq.n	800625e <HAL_SPI_Receive+0x13a>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006266:	d867      	bhi.n	8006338 <HAL_SPI_Receive+0x214>
 8006268:	e030      	b.n	80062cc <HAL_SPI_Receive+0x1a8>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d117      	bne.n	80062a8 <HAL_SPI_Receive+0x184>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f103 020c 	add.w	r2, r3, #12
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	7812      	ldrb	r2, [r2, #0]
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	641a      	str	r2, [r3, #64]	; 0x40
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800629a:	b29b      	uxth	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	b29a      	uxth	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062a6:	e011      	b.n	80062cc <HAL_SPI_Receive+0x1a8>
 80062a8:	f7fd fb9c 	bl	80039e4 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d803      	bhi.n	80062c0 <HAL_SPI_Receive+0x19c>
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d102      	bne.n	80062c6 <HAL_SPI_Receive+0x1a2>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <HAL_SPI_Receive+0x1a8>
 80062c6:	2303      	movs	r3, #3
 80062c8:	75fb      	strb	r3, [r7, #23]
 80062ca:	e04e      	b.n	800636a <HAL_SPI_Receive+0x246>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1c8      	bne.n	800626a <HAL_SPI_Receive+0x146>
 80062d8:	e034      	b.n	8006344 <HAL_SPI_Receive+0x220>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d115      	bne.n	8006314 <HAL_SPI_Receive+0x1f0>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f2:	b292      	uxth	r2, r2
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006312:	e011      	b.n	8006338 <HAL_SPI_Receive+0x214>
 8006314:	f7fd fb66 	bl	80039e4 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d803      	bhi.n	800632c <HAL_SPI_Receive+0x208>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d102      	bne.n	8006332 <HAL_SPI_Receive+0x20e>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <HAL_SPI_Receive+0x214>
 8006332:	2303      	movs	r3, #3
 8006334:	75fb      	strb	r3, [r7, #23]
 8006336:	e018      	b.n	800636a <HAL_SPI_Receive+0x246>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1ca      	bne.n	80062da <HAL_SPI_Receive+0x1b6>
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fb4d 	bl	80069e8 <SPI_EndRxTransaction>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <HAL_SPI_Receive+0x236>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	661a      	str	r2, [r3, #96]	; 0x60
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_SPI_Receive+0x244>
 8006362:	2301      	movs	r3, #1
 8006364:	75fb      	strb	r3, [r7, #23]
 8006366:	e000      	b.n	800636a <HAL_SPI_Receive+0x246>
 8006368:	bf00      	nop
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_SPI_TransmitReceive>:
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	; 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	807b      	strh	r3, [r7, #2]
 8006392:	2301      	movs	r3, #1
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
 8006396:	2300      	movs	r3, #0
 8006398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x26>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e1fb      	b.n	80067a2 <HAL_SPI_TransmitReceive+0x41e>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80063b2:	f7fd fb17 	bl	80039e4 <HAL_GetTick>
 80063b6:	61f8      	str	r0, [r7, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063be:	76fb      	strb	r3, [r7, #27]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	827b      	strh	r3, [r7, #18]
 80063ca:	887b      	ldrh	r3, [r7, #2]
 80063cc:	823b      	strh	r3, [r7, #16]
 80063ce:	7efb      	ldrb	r3, [r7, #27]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d00e      	beq.n	80063f2 <HAL_SPI_TransmitReceive+0x6e>
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063da:	d106      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x66>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x66>
 80063e4:	7efb      	ldrb	r3, [r7, #27]
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d003      	beq.n	80063f2 <HAL_SPI_TransmitReceive+0x6e>
 80063ea:	2302      	movs	r3, #2
 80063ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f0:	e1cd      	b.n	800678e <HAL_SPI_TransmitReceive+0x40a>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x80>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <HAL_SPI_TransmitReceive+0x80>
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <HAL_SPI_TransmitReceive+0x88>
 8006404:	2301      	movs	r3, #1
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640a:	e1c0      	b.n	800678e <HAL_SPI_TransmitReceive+0x40a>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b04      	cmp	r3, #4
 8006416:	d003      	beq.n	8006420 <HAL_SPI_TransmitReceive+0x9c>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2205      	movs	r2, #5
 800641c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	661a      	str	r2, [r3, #96]	; 0x60
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	887a      	ldrh	r2, [r7, #2]
 8006430:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	887a      	ldrh	r2, [r7, #2]
 8006438:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	887a      	ldrh	r2, [r7, #2]
 8006446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	887a      	ldrh	r2, [r7, #2]
 800644c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	64da      	str	r2, [r3, #76]	; 0x4c
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	651a      	str	r2, [r3, #80]	; 0x50
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006462:	d802      	bhi.n	800646a <HAL_SPI_TransmitReceive+0xe6>
 8006464:	8a3b      	ldrh	r3, [r7, #16]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d908      	bls.n	800647c <HAL_SPI_TransmitReceive+0xf8>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	e007      	b.n	800648c <HAL_SPI_TransmitReceive+0x108>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800648a:	605a      	str	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d007      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x126>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064b2:	d97c      	bls.n	80065ae <HAL_SPI_TransmitReceive+0x22a>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x13e>
 80064bc:	8a7b      	ldrh	r3, [r7, #18]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d169      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x212>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60da      	str	r2, [r3, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	1c9a      	adds	r2, r3, #2
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064e6:	e056      	b.n	8006596 <HAL_SPI_TransmitReceive+0x212>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d11b      	bne.n	800652e <HAL_SPI_TransmitReceive+0x1aa>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d016      	beq.n	800652e <HAL_SPI_TransmitReceive+0x1aa>
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	2b01      	cmp	r3, #1
 8006504:	d113      	bne.n	800652e <HAL_SPI_TransmitReceive+0x1aa>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	881a      	ldrh	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	1c9a      	adds	r2, r3, #2
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006520:	b29b      	uxth	r3, r3
 8006522:	3b01      	subs	r3, #1
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	87da      	strh	r2, [r3, #62]	; 0x3e
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d11c      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x1f2>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d016      	beq.n	8006576 <HAL_SPI_TransmitReceive+0x1f2>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	b292      	uxth	r2, r2
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	1c9a      	adds	r2, r3, #2
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006572:	2301      	movs	r3, #1
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
 8006576:	f7fd fa35 	bl	80039e4 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	429a      	cmp	r2, r3
 8006584:	d807      	bhi.n	8006596 <HAL_SPI_TransmitReceive+0x212>
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d003      	beq.n	8006596 <HAL_SPI_TransmitReceive+0x212>
 800658e:	2303      	movs	r3, #3
 8006590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006594:	e0fb      	b.n	800678e <HAL_SPI_TransmitReceive+0x40a>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1a3      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x164>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d19d      	bne.n	80064e8 <HAL_SPI_TransmitReceive+0x164>
 80065ac:	e0df      	b.n	800676e <HAL_SPI_TransmitReceive+0x3ea>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_SPI_TransmitReceive+0x23a>
 80065b6:	8a7b      	ldrh	r3, [r7, #18]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	f040 80cb 	bne.w	8006754 <HAL_SPI_TransmitReceive+0x3d0>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d912      	bls.n	80065ee <HAL_SPI_TransmitReceive+0x26a>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	881a      	ldrh	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60da      	str	r2, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	1c9a      	adds	r2, r3, #2
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	639a      	str	r2, [r3, #56]	; 0x38
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	3b02      	subs	r3, #2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065ec:	e0b2      	b.n	8006754 <HAL_SPI_TransmitReceive+0x3d0>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660a:	b29b      	uxth	r3, r3
 800660c:	3b01      	subs	r3, #1
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006614:	e09e      	b.n	8006754 <HAL_SPI_TransmitReceive+0x3d0>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b02      	cmp	r3, #2
 8006622:	d134      	bne.n	800668e <HAL_SPI_TransmitReceive+0x30a>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d02f      	beq.n	800668e <HAL_SPI_TransmitReceive+0x30a>
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	2b01      	cmp	r3, #1
 8006632:	d12c      	bne.n	800668e <HAL_SPI_TransmitReceive+0x30a>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	d912      	bls.n	8006664 <HAL_SPI_TransmitReceive+0x2e0>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	881a      	ldrh	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	1c9a      	adds	r2, r3, #2
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	639a      	str	r2, [r3, #56]	; 0x38
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006658:	b29b      	uxth	r3, r3
 800665a:	3b02      	subs	r3, #2
 800665c:	b29a      	uxth	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006662:	e012      	b.n	800668a <HAL_SPI_TransmitReceive+0x306>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	330c      	adds	r3, #12
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	; 0x38
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800668a:	2300      	movs	r3, #0
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d148      	bne.n	800672e <HAL_SPI_TransmitReceive+0x3aa>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d042      	beq.n	800672e <HAL_SPI_TransmitReceive+0x3aa>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d923      	bls.n	80066fc <HAL_SPI_TransmitReceive+0x378>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	b292      	uxth	r2, r2
 80066c0:	801a      	strh	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	1c9a      	adds	r2, r3, #2
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b02      	subs	r3, #2
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d81f      	bhi.n	800672a <HAL_SPI_TransmitReceive+0x3a6>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	e016      	b.n	800672a <HAL_SPI_TransmitReceive+0x3a6>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f103 020c 	add.w	r2, r3, #12
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	641a      	str	r2, [r3, #64]	; 0x40
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800672a:	2301      	movs	r3, #1
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	f7fd f959 	bl	80039e4 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673a:	429a      	cmp	r2, r3
 800673c:	d803      	bhi.n	8006746 <HAL_SPI_TransmitReceive+0x3c2>
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d102      	bne.n	800674c <HAL_SPI_TransmitReceive+0x3c8>
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <HAL_SPI_TransmitReceive+0x3d0>
 800674c:	2303      	movs	r3, #3
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006752:	e01c      	b.n	800678e <HAL_SPI_TransmitReceive+0x40a>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	f47f af5b 	bne.w	8006616 <HAL_SPI_TransmitReceive+0x292>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006766:	b29b      	uxth	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	f47f af54 	bne.w	8006616 <HAL_SPI_TransmitReceive+0x292>
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f990 	bl	8006a98 <SPI_EndRxTxTransaction>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d006      	beq.n	800678c <HAL_SPI_TransmitReceive+0x408>
 800677e:	2301      	movs	r3, #1
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	661a      	str	r2, [r3, #96]	; 0x60
 800678a:	e000      	b.n	800678e <HAL_SPI_TransmitReceive+0x40a>
 800678c:	bf00      	nop
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800679e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067a2:	4618      	mov	r0, r3
 80067a4:	3728      	adds	r7, #40	; 0x28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <SPI_WaitFlagStateUntilTimeout>:
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
 80067bc:	f7fd f912 	bl	80039e4 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4413      	add	r3, r2
 80067ca:	61fb      	str	r3, [r7, #28]
 80067cc:	f7fd f90a 	bl	80039e4 <HAL_GetTick>
 80067d0:	61b8      	str	r0, [r7, #24]
 80067d2:	4b39      	ldr	r3, [pc, #228]	; (80068b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	015b      	lsls	r3, r3, #5
 80067d8:	0d1b      	lsrs	r3, r3, #20
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	e054      	b.n	800688e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d050      	beq.n	800688e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80067ec:	f7fd f8fa 	bl	80039e4 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d902      	bls.n	8006802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d13d      	bne.n	800687e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800681a:	d111      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006824:	d004      	beq.n	8006830 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682e:	d107      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006848:	d10f      	bne.n	800686a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800687a:	2303      	movs	r3, #3
 800687c:	e017      	b.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x102>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3b01      	subs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d19b      	bne.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0x38>
 80068ac:	2300      	movs	r3, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	2000100c 	.word	0x2000100c

080068bc <SPI_WaitFifoStateUntilTimeout>:
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
 80068ce:	f7fd f889 	bl	80039e4 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	4413      	add	r3, r2
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
 80068de:	f7fd f881 	bl	80039e4 <HAL_GetTick>
 80068e2:	6238      	str	r0, [r7, #32]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	61fb      	str	r3, [r7, #28]
 80068ec:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	00da      	lsls	r2, r3, #3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	0d1b      	lsrs	r3, r3, #20
 80068fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	e060      	b.n	80069c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800690c:	d107      	bne.n	800691e <SPI_WaitFifoStateUntilTimeout+0x62>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	75fb      	strb	r3, [r7, #23]
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d050      	beq.n	80069c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
 8006926:	f7fd f85d 	bl	80039e4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006932:	429a      	cmp	r2, r3
 8006934:	d902      	bls.n	800693c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d13d      	bne.n	80069b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800694a:	605a      	str	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006954:	d111      	bne.n	800697a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695e:	d004      	beq.n	800696a <SPI_WaitFifoStateUntilTimeout+0xae>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006968:	d107      	bne.n	800697a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006982:	d10f      	bne.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80069b4:	2303      	movs	r3, #3
 80069b6:	e010      	b.n	80069da <SPI_WaitFifoStateUntilTimeout+0x11e>
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <SPI_WaitFifoStateUntilTimeout+0x106>
 80069be:	2300      	movs	r3, #0
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4013      	ands	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d196      	bne.n	8006906 <SPI_WaitFifoStateUntilTimeout+0x4a>
 80069d8:	2300      	movs	r3, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	; 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	2000100c 	.word	0x2000100c

080069e8 <SPI_EndRxTransaction>:
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069fc:	d111      	bne.n	8006a22 <SPI_EndRxTransaction+0x3a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a06:	d004      	beq.n	8006a12 <SPI_EndRxTransaction+0x2a>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a10:	d107      	bne.n	8006a22 <SPI_EndRxTransaction+0x3a>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff febd 	bl	80067ac <SPI_WaitFlagStateUntilTimeout>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <SPI_EndRxTransaction+0x60>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a3c:	f043 0220 	orr.w	r2, r3, #32
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60
 8006a44:	2303      	movs	r3, #3
 8006a46:	e023      	b.n	8006a90 <SPI_EndRxTransaction+0xa8>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a50:	d11d      	bne.n	8006a8e <SPI_EndRxTransaction+0xa6>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d004      	beq.n	8006a66 <SPI_EndRxTransaction+0x7e>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a64:	d113      	bne.n	8006a8e <SPI_EndRxTransaction+0xa6>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff ff22 	bl	80068bc <SPI_WaitFifoStateUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <SPI_EndRxTransaction+0xa6>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a82:	f043 0220 	orr.w	r2, r3, #32
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	661a      	str	r2, [r3, #96]	; 0x60
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e000      	b.n	8006a90 <SPI_EndRxTransaction+0xa8>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <SPI_EndRxTxTransaction>:
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff ff03 	bl	80068bc <SPI_WaitFifoStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <SPI_EndRxTxTransaction+0x34>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	661a      	str	r2, [r3, #96]	; 0x60
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e027      	b.n	8006b1c <SPI_EndRxTxTransaction+0x84>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2180      	movs	r1, #128	; 0x80
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f7ff fe68 	bl	80067ac <SPI_WaitFlagStateUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <SPI_EndRxTxTransaction+0x5a>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae6:	f043 0220 	orr.w	r2, r3, #32
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	661a      	str	r2, [r3, #96]	; 0x60
 8006aee:	2303      	movs	r3, #3
 8006af0:	e014      	b.n	8006b1c <SPI_EndRxTxTransaction+0x84>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fedc 	bl	80068bc <SPI_WaitFifoStateUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d007      	beq.n	8006b1a <SPI_EndRxTxTransaction+0x82>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60
 8006b16:	2303      	movs	r3, #3
 8006b18:	e000      	b.n	8006b1c <SPI_EndRxTxTransaction+0x84>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_Base_Init>:
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_TIM_Base_Init+0x12>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e049      	b.n	8006bca <HAL_TIM_Base_Init+0xa6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <HAL_TIM_Base_Init+0x2c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7fb fd88 	bl	8002660 <HAL_TIM_Base_MspInit>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f000 fba4 	bl	80072b0 <TIM_Base_SetConfig>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_TIM_Base_DeInit>:
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6a1a      	ldr	r2, [r3, #32]
 8006be8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <HAL_TIM_Base_DeInit+0x40>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a1a      	ldr	r2, [r3, #32]
 8006bf8:	f240 4344 	movw	r3, #1092	; 0x444
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <HAL_TIM_Base_DeInit+0x40>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0201 	bic.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb fd94 	bl	8002740 <HAL_TIM_Base_MspDeInit>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c80:	2300      	movs	r3, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
	...

08006c8c <HAL_TIM_Base_Start>:
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d001      	beq.n	8006ca4 <HAL_TIM_Base_Start+0x18>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e033      	b.n	8006d0c <HAL_TIM_Base_Start+0x80>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <HAL_TIM_Base_Start+0x8c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d009      	beq.n	8006cca <HAL_TIM_Base_Start+0x3e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbe:	d004      	beq.n	8006cca <HAL_TIM_Base_Start+0x3e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <HAL_TIM_Base_Start+0x90>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d115      	bne.n	8006cf6 <HAL_TIM_Base_Start+0x6a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	4b13      	ldr	r3, [pc, #76]	; (8006d20 <HAL_TIM_Base_Start+0x94>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d015      	beq.n	8006d08 <HAL_TIM_Base_Start+0x7c>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ce2:	d011      	beq.n	8006d08 <HAL_TIM_Base_Start+0x7c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f042 0201 	orr.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e008      	b.n	8006d08 <HAL_TIM_Base_Start+0x7c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e000      	b.n	8006d0a <HAL_TIM_Base_Start+0x7e>
 8006d08:	bf00      	nop
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	00010007 	.word	0x00010007

08006d24 <HAL_TIM_Base_Stop>:
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a1a      	ldr	r2, [r3, #32]
 8006d32:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10f      	bne.n	8006d5c <HAL_TIM_Base_Stop+0x38>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	f240 4344 	movw	r3, #1092	; 0x444
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <HAL_TIM_Base_Stop+0x38>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d64:	2300      	movs	r3, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
	...

08006d74 <HAL_TIM_Base_Start_IT>:
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d001      	beq.n	8006d8c <HAL_TIM_Base_Start_IT+0x18>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e03b      	b.n	8006e04 <HAL_TIM_Base_Start_IT+0x90>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	60da      	str	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <HAL_TIM_Base_Start_IT+0x9c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d009      	beq.n	8006dc2 <HAL_TIM_Base_Start_IT+0x4e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db6:	d004      	beq.n	8006dc2 <HAL_TIM_Base_Start_IT+0x4e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a15      	ldr	r2, [pc, #84]	; (8006e14 <HAL_TIM_Base_Start_IT+0xa0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d115      	bne.n	8006dee <HAL_TIM_Base_Start_IT+0x7a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <HAL_TIM_Base_Start_IT+0xa4>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2b06      	cmp	r3, #6
 8006dd2:	d015      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x8c>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dda:	d011      	beq.n	8006e00 <HAL_TIM_Base_Start_IT+0x8c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	e008      	b.n	8006e00 <HAL_TIM_Base_Start_IT+0x8c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e000      	b.n	8006e02 <HAL_TIM_Base_Start_IT+0x8e>
 8006e00:	bf00      	nop
 8006e02:	2300      	movs	r3, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40014000 	.word	0x40014000
 8006e18:	00010007 	.word	0x00010007

08006e1c <HAL_TIM_Base_Stop_IT>:
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10f      	bne.n	8006e64 <HAL_TIM_Base_Stop_IT+0x48>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	f240 4344 	movw	r3, #1092	; 0x444
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d107      	bne.n	8006e64 <HAL_TIM_Base_Stop_IT+0x48>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0201 	bic.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_TIM_IRQHandler>:
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d122      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x5c>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d11b      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x5c>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f06f 0202 	mvn.w	r2, #2
 8006ea6:	611a      	str	r2, [r3, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	771a      	strb	r2, [r3, #28]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x4a>
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f9d8 	bl	8007272 <HAL_TIM_IC_CaptureCallback>
 8006ec2:	e005      	b.n	8006ed0 <HAL_TIM_IRQHandler+0x56>
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f9ca 	bl	800725e <HAL_TIM_OC_DelayElapsedCallback>
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9db 	bl	8007286 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	771a      	strb	r2, [r3, #28]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d122      	bne.n	8006f2a <HAL_TIM_IRQHandler+0xb0>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d11b      	bne.n	8006f2a <HAL_TIM_IRQHandler+0xb0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f06f 0204 	mvn.w	r2, #4
 8006efa:	611a      	str	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	771a      	strb	r2, [r3, #28]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x9e>
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f9ae 	bl	8007272 <HAL_TIM_IC_CaptureCallback>
 8006f16:	e005      	b.n	8006f24 <HAL_TIM_IRQHandler+0xaa>
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f9a0 	bl	800725e <HAL_TIM_OC_DelayElapsedCallback>
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f9b1 	bl	8007286 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	771a      	strb	r2, [r3, #28]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d122      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x104>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d11b      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x104>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0208 	mvn.w	r2, #8
 8006f4e:	611a      	str	r2, [r3, #16]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2204      	movs	r2, #4
 8006f54:	771a      	strb	r2, [r3, #28]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_IRQHandler+0xf2>
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f984 	bl	8007272 <HAL_TIM_IC_CaptureCallback>
 8006f6a:	e005      	b.n	8006f78 <HAL_TIM_IRQHandler+0xfe>
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f976 	bl	800725e <HAL_TIM_OC_DelayElapsedCallback>
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f987 	bl	8007286 <HAL_TIM_PWM_PulseFinishedCallback>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	771a      	strb	r2, [r3, #28]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d122      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x158>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d11b      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x158>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0210 	mvn.w	r2, #16
 8006fa2:	611a      	str	r2, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	771a      	strb	r2, [r3, #28]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x146>
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f95a 	bl	8007272 <HAL_TIM_IC_CaptureCallback>
 8006fbe:	e005      	b.n	8006fcc <HAL_TIM_IRQHandler+0x152>
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f94c 	bl	800725e <HAL_TIM_OC_DelayElapsedCallback>
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f95d 	bl	8007286 <HAL_TIM_PWM_PulseFinishedCallback>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	771a      	strb	r2, [r3, #28]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10e      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x184>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x184>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0201 	mvn.w	r2, #1
 8006ff6:	611a      	str	r2, [r3, #16]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f926 	bl	800724a <HAL_TIM_PeriodElapsedCallback>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	d10e      	bne.n	800702a <HAL_TIM_IRQHandler+0x1b0>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d107      	bne.n	800702a <HAL_TIM_IRQHandler+0x1b0>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007022:	611a      	str	r2, [r3, #16]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fabb 	bl	80075a0 <HAL_TIMEx_BreakCallback>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007038:	d10e      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1de>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007044:	2b80      	cmp	r3, #128	; 0x80
 8007046:	d107      	bne.n	8007058 <HAL_TIM_IRQHandler+0x1de>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007050:	611a      	str	r2, [r3, #16]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 faae 	bl	80075b4 <HAL_TIMEx_Break2Callback>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b40      	cmp	r3, #64	; 0x40
 8007064:	d10e      	bne.n	8007084 <HAL_TIM_IRQHandler+0x20a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d107      	bne.n	8007084 <HAL_TIM_IRQHandler+0x20a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800707c:	611a      	str	r2, [r3, #16]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f90b 	bl	800729a <HAL_TIM_TriggerCallback>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b20      	cmp	r3, #32
 8007090:	d10e      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x236>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b20      	cmp	r3, #32
 800709e:	d107      	bne.n	80070b0 <HAL_TIM_IRQHandler+0x236>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f06f 0220 	mvn.w	r2, #32
 80070a8:	611a      	str	r2, [r3, #16]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fa6e 	bl	800758c <HAL_TIMEx_CommutCallback>
 80070b0:	bf00      	nop
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_TIM_ConfigClockSource>:
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_TIM_ConfigClockSource+0x1c>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0b6      	b.n	8007242 <HAL_TIM_ConfigClockSource+0x18a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	60bb      	str	r3, [r7, #8]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070f6:	60bb      	str	r3, [r7, #8]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	60bb      	str	r3, [r7, #8]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d03e      	beq.n	8007190 <HAL_TIM_ConfigClockSource+0xd8>
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007116:	f200 8087 	bhi.w	8007228 <HAL_TIM_ConfigClockSource+0x170>
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711e:	f000 8086 	beq.w	800722e <HAL_TIM_ConfigClockSource+0x176>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d87f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d01a      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xaa>
 800712c:	2b70      	cmp	r3, #112	; 0x70
 800712e:	d87b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d050      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x11e>
 8007134:	2b60      	cmp	r3, #96	; 0x60
 8007136:	d877      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d03c      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0xfe>
 800713c:	2b50      	cmp	r3, #80	; 0x50
 800713e:	d873      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d058      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x13e>
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d86f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d064      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d86b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d060      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d867      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d05c      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 800715c:	2b10      	cmp	r3, #16
 800715e:	d05a      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15e>
 8007160:	e062      	b.n	8007228 <HAL_TIM_ConfigClockSource+0x170>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6899      	ldr	r1, [r3, #8]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f000 f985 	bl	8007480 <TIM_ETR_SetConfig>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	609a      	str	r2, [r3, #8]
 800718e:	e04f      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f000 f96e 	bl	8007480 <TIM_ETR_SetConfig>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	e03c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 f8e2 	bl	800738c <TIM_TI1_ConfigInputStage>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2150      	movs	r1, #80	; 0x50
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f93b 	bl	800744a <TIM_ITRx_SetConfig>
 80071d4:	e02c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 f901 	bl	80073ea <TIM_TI2_ConfigInputStage>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2160      	movs	r1, #96	; 0x60
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 f92b 	bl	800744a <TIM_ITRx_SetConfig>
 80071f4:	e01c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	461a      	mov	r2, r3
 8007204:	f000 f8c2 	bl	800738c <TIM_TI1_ConfigInputStage>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f91b 	bl	800744a <TIM_ITRx_SetConfig>
 8007214:	e00c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f000 f912 	bl	800744a <TIM_ITRx_SetConfig>
 8007226:	e003      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
 800722c:	e000      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x178>
 800722e:	bf00      	nop
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_PeriodElapsedCallback>:
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_OC_DelayElapsedCallback>:
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <HAL_TIM_IC_CaptureCallback>:
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HAL_TIM_TriggerCallback>:
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	bf00      	nop
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <TIM_Base_SetConfig>:
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a2e      	ldr	r2, [pc, #184]	; (800737c <TIM_Base_SetConfig+0xcc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d003      	beq.n	80072d0 <TIM_Base_SetConfig+0x20>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ce:	d108      	bne.n	80072e2 <TIM_Base_SetConfig+0x32>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a25      	ldr	r2, [pc, #148]	; (800737c <TIM_Base_SetConfig+0xcc>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00f      	beq.n	800730a <TIM_Base_SetConfig+0x5a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f0:	d00b      	beq.n	800730a <TIM_Base_SetConfig+0x5a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a22      	ldr	r2, [pc, #136]	; (8007380 <TIM_Base_SetConfig+0xd0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_Base_SetConfig+0x5a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a21      	ldr	r2, [pc, #132]	; (8007384 <TIM_Base_SetConfig+0xd4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_Base_SetConfig+0x5a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <TIM_Base_SetConfig+0xd8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d108      	bne.n	800731c <TIM_Base_SetConfig+0x6c>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	629a      	str	r2, [r3, #40]	; 0x28
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a0e      	ldr	r2, [pc, #56]	; (800737c <TIM_Base_SetConfig+0xcc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00b      	beq.n	8007360 <TIM_Base_SetConfig+0xb0>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a0d      	ldr	r2, [pc, #52]	; (8007380 <TIM_Base_SetConfig+0xd0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d007      	beq.n	8007360 <TIM_Base_SetConfig+0xb0>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a0c      	ldr	r2, [pc, #48]	; (8007384 <TIM_Base_SetConfig+0xd4>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d003      	beq.n	8007360 <TIM_Base_SetConfig+0xb0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a0b      	ldr	r2, [pc, #44]	; (8007388 <TIM_Base_SetConfig+0xd8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d103      	bne.n	8007368 <TIM_Base_SetConfig+0xb8>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	691a      	ldr	r2, [r3, #16]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	615a      	str	r2, [r3, #20]
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400
 8007388:	40014800 	.word	0x40014800

0800738c <TIM_TI1_ConfigInputStage>:
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	621a      	str	r2, [r3, #32]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f023 030a 	bic.w	r3, r3, #10
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	619a      	str	r2, [r3, #24]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	621a      	str	r2, [r3, #32]
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <TIM_TI2_ConfigInputStage>:
 80073ea:	b480      	push	{r7}
 80073ec:	b087      	sub	sp, #28
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	60f8      	str	r0, [r7, #12]
 80073f2:	60b9      	str	r1, [r7, #8]
 80073f4:	607a      	str	r2, [r7, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0210 	bic.w	r2, r3, #16
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	621a      	str	r2, [r3, #32]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	031b      	lsls	r3, r3, #12
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	4313      	orrs	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	619a      	str	r2, [r3, #24]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	621a      	str	r2, [r3, #32]
 800743e:	bf00      	nop
 8007440:	371c      	adds	r7, #28
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <TIM_ITRx_SetConfig>:
 800744a:	b480      	push	{r7}
 800744c:	b085      	sub	sp, #20
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	f043 0307 	orr.w	r3, r3, #7
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	609a      	str	r2, [r3, #8]
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <TIM_ETR_SetConfig>:
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	021a      	lsls	r2, r3, #8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	609a      	str	r2, [r3, #8]
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIMEx_MasterConfigSynchronization>:
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e04f      	b.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a21      	ldr	r2, [pc, #132]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007508:	60fb      	str	r3, [r7, #12]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007540:	d004      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a10      	ldr	r2, [pc, #64]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10c      	bne.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	609a      	str	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007576:	2300      	movs	r3, #0
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40014000 	.word	0x40014000

0800758c <HAL_TIMEx_CommutCallback>:
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_TIMEx_BreakCallback>:
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_TIMEx_Break2Callback>:
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_Init>:
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_UART_Init+0x12>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e040      	b.n	800765c <HAL_UART_Init+0x94>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_UART_Init+0x28>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fb f8f0 	bl	80027d0 <HAL_UART_MspInit>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2224      	movs	r2, #36	; 0x24
 80075f4:	679a      	str	r2, [r3, #120]	; 0x78
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f82c 	bl	8007664 <UART_SetConfig>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_UART_Init+0x4e>
 8007612:	2301      	movs	r3, #1
 8007614:	e022      	b.n	800765c <HAL_UART_Init+0x94>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Init+0x5c>
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f956 	bl	80078d0 <UART_AdvFeatureConfig>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007632:	605a      	str	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007642:	609a      	str	r2, [r3, #8]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f042 0201 	orr.w	r2, r2, #1
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f9dd 	bl	8007a14 <UART_CheckIdleState>
 800765a:	4603      	mov	r3, r0
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <UART_SetConfig>:
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	2300      	movs	r3, #0
 800766e:	77bb      	strb	r3, [r7, #30]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	431a      	orrs	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	431a      	orrs	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	4313      	orrs	r3, r2
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b8a      	ldr	r3, [pc, #552]	; (80078b8 <UART_SetConfig+0x254>)
 8007690:	4013      	ands	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6812      	ldr	r2, [r2, #0]
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	430b      	orrs	r3, r1
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	609a      	str	r2, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a78      	ldr	r2, [pc, #480]	; (80078bc <UART_SetConfig+0x258>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d120      	bne.n	8007722 <UART_SetConfig+0xbe>
 80076e0:	4b77      	ldr	r3, [pc, #476]	; (80078c0 <UART_SetConfig+0x25c>)
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d817      	bhi.n	800771c <UART_SetConfig+0xb8>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <UART_SetConfig+0x90>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007705 	.word	0x08007705
 80076f8:	08007711 	.word	0x08007711
 80076fc:	08007717 	.word	0x08007717
 8007700:	0800770b 	.word	0x0800770b
 8007704:	2300      	movs	r3, #0
 8007706:	77fb      	strb	r3, [r7, #31]
 8007708:	e01d      	b.n	8007746 <UART_SetConfig+0xe2>
 800770a:	2302      	movs	r3, #2
 800770c:	77fb      	strb	r3, [r7, #31]
 800770e:	e01a      	b.n	8007746 <UART_SetConfig+0xe2>
 8007710:	2304      	movs	r3, #4
 8007712:	77fb      	strb	r3, [r7, #31]
 8007714:	e017      	b.n	8007746 <UART_SetConfig+0xe2>
 8007716:	2308      	movs	r3, #8
 8007718:	77fb      	strb	r3, [r7, #31]
 800771a:	e014      	b.n	8007746 <UART_SetConfig+0xe2>
 800771c:	2310      	movs	r3, #16
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e011      	b.n	8007746 <UART_SetConfig+0xe2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a67      	ldr	r2, [pc, #412]	; (80078c4 <UART_SetConfig+0x260>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d102      	bne.n	8007732 <UART_SetConfig+0xce>
 800772c:	2300      	movs	r3, #0
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	e009      	b.n	8007746 <UART_SetConfig+0xe2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a64      	ldr	r2, [pc, #400]	; (80078c8 <UART_SetConfig+0x264>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d102      	bne.n	8007742 <UART_SetConfig+0xde>
 800773c:	2300      	movs	r3, #0
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e001      	b.n	8007746 <UART_SetConfig+0xe2>
 8007742:	2310      	movs	r3, #16
 8007744:	77fb      	strb	r3, [r7, #31]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800774e:	d15b      	bne.n	8007808 <UART_SetConfig+0x1a4>
 8007750:	7ffb      	ldrb	r3, [r7, #31]
 8007752:	2b08      	cmp	r3, #8
 8007754:	d827      	bhi.n	80077a6 <UART_SetConfig+0x142>
 8007756:	a201      	add	r2, pc, #4	; (adr r2, 800775c <UART_SetConfig+0xf8>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	080077a7 	.word	0x080077a7
 800776c:	08007797 	.word	0x08007797
 8007770:	080077a7 	.word	0x080077a7
 8007774:	080077a7 	.word	0x080077a7
 8007778:	080077a7 	.word	0x080077a7
 800777c:	0800779f 	.word	0x0800779f
 8007780:	f7fd fe88 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 8007784:	61b8      	str	r0, [r7, #24]
 8007786:	e013      	b.n	80077b0 <UART_SetConfig+0x14c>
 8007788:	f7fd fea6 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 800778c:	61b8      	str	r0, [r7, #24]
 800778e:	e00f      	b.n	80077b0 <UART_SetConfig+0x14c>
 8007790:	4b4e      	ldr	r3, [pc, #312]	; (80078cc <UART_SetConfig+0x268>)
 8007792:	61bb      	str	r3, [r7, #24]
 8007794:	e00c      	b.n	80077b0 <UART_SetConfig+0x14c>
 8007796:	f7fd fe05 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 800779a:	61b8      	str	r0, [r7, #24]
 800779c:	e008      	b.n	80077b0 <UART_SetConfig+0x14c>
 800779e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	e004      	b.n	80077b0 <UART_SetConfig+0x14c>
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	2301      	movs	r3, #1
 80077ac:	77bb      	strb	r3, [r7, #30]
 80077ae:	bf00      	nop
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d074      	beq.n	80078a0 <UART_SetConfig+0x23c>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	005a      	lsls	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	441a      	add	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b0f      	cmp	r3, #15
 80077d2:	d916      	bls.n	8007802 <UART_SetConfig+0x19e>
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077da:	d212      	bcs.n	8007802 <UART_SetConfig+0x19e>
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f023 030f 	bic.w	r3, r3, #15
 80077e4:	81fb      	strh	r3, [r7, #14]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	085b      	lsrs	r3, r3, #1
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	81fb      	strh	r3, [r7, #14]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	89fa      	ldrh	r2, [r7, #14]
 80077fe:	60da      	str	r2, [r3, #12]
 8007800:	e04e      	b.n	80078a0 <UART_SetConfig+0x23c>
 8007802:	2301      	movs	r3, #1
 8007804:	77bb      	strb	r3, [r7, #30]
 8007806:	e04b      	b.n	80078a0 <UART_SetConfig+0x23c>
 8007808:	7ffb      	ldrb	r3, [r7, #31]
 800780a:	2b08      	cmp	r3, #8
 800780c:	d827      	bhi.n	800785e <UART_SetConfig+0x1fa>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <UART_SetConfig+0x1b0>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007839 	.word	0x08007839
 8007818:	08007841 	.word	0x08007841
 800781c:	08007849 	.word	0x08007849
 8007820:	0800785f 	.word	0x0800785f
 8007824:	0800784f 	.word	0x0800784f
 8007828:	0800785f 	.word	0x0800785f
 800782c:	0800785f 	.word	0x0800785f
 8007830:	0800785f 	.word	0x0800785f
 8007834:	08007857 	.word	0x08007857
 8007838:	f7fd fe2c 	bl	8005494 <HAL_RCC_GetPCLK1Freq>
 800783c:	61b8      	str	r0, [r7, #24]
 800783e:	e013      	b.n	8007868 <UART_SetConfig+0x204>
 8007840:	f7fd fe4a 	bl	80054d8 <HAL_RCC_GetPCLK2Freq>
 8007844:	61b8      	str	r0, [r7, #24]
 8007846:	e00f      	b.n	8007868 <UART_SetConfig+0x204>
 8007848:	4b20      	ldr	r3, [pc, #128]	; (80078cc <UART_SetConfig+0x268>)
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	e00c      	b.n	8007868 <UART_SetConfig+0x204>
 800784e:	f7fd fda9 	bl	80053a4 <HAL_RCC_GetSysClockFreq>
 8007852:	61b8      	str	r0, [r7, #24]
 8007854:	e008      	b.n	8007868 <UART_SetConfig+0x204>
 8007856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e004      	b.n	8007868 <UART_SetConfig+0x204>
 800785e:	2300      	movs	r3, #0
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	2301      	movs	r3, #1
 8007864:	77bb      	strb	r3, [r7, #30]
 8007866:	bf00      	nop
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d018      	beq.n	80078a0 <UART_SetConfig+0x23c>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	085a      	lsrs	r2, r3, #1
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	441a      	add	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007880:	b29b      	uxth	r3, r3
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b0f      	cmp	r3, #15
 8007888:	d908      	bls.n	800789c <UART_SetConfig+0x238>
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007890:	d204      	bcs.n	800789c <UART_SetConfig+0x238>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	60da      	str	r2, [r3, #12]
 800789a:	e001      	b.n	80078a0 <UART_SetConfig+0x23c>
 800789c:	2301      	movs	r3, #1
 800789e:	77bb      	strb	r3, [r7, #30]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	665a      	str	r2, [r3, #100]	; 0x64
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	669a      	str	r2, [r3, #104]	; 0x68
 80078ac:	7fbb      	ldrb	r3, [r7, #30]
 80078ae:	4618      	mov	r0, r3
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	efff69f3 	.word	0xefff69f3
 80078bc:	40013800 	.word	0x40013800
 80078c0:	40021000 	.word	0x40021000
 80078c4:	40004400 	.word	0x40004400
 80078c8:	40004800 	.word	0x40004800
 80078cc:	007a1200 	.word	0x007a1200

080078d0 <UART_AdvFeatureConfig>:
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <UART_AdvFeatureConfig+0x2a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x4c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <UART_AdvFeatureConfig+0x6e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0x90>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	f003 0310 	and.w	r3, r3, #16
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <UART_AdvFeatureConfig+0xb2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	609a      	str	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <UART_AdvFeatureConfig+0xd4>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	609a      	str	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01a      	beq.n	80079e6 <UART_AdvFeatureConfig+0x116>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ce:	d10a      	bne.n	80079e6 <UART_AdvFeatureConfig+0x116>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <UART_AdvFeatureConfig+0x138>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	605a      	str	r2, [r3, #4]
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <UART_CheckIdleState>:
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007a24:	f7fb ffde 	bl	80039e4 <HAL_GetTick>
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d10e      	bne.n	8007a56 <UART_CheckIdleState+0x42>
 8007a38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f82d 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <UART_CheckIdleState+0x42>
 8007a52:	2303      	movs	r3, #3
 8007a54:	e023      	b.n	8007a9e <UART_CheckIdleState+0x8a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d10e      	bne.n	8007a82 <UART_CheckIdleState+0x6e>
 8007a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f817 	bl	8007aa6 <UART_WaitOnFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <UART_CheckIdleState+0x6e>
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e00d      	b.n	8007a9e <UART_CheckIdleState+0x8a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	679a      	str	r2, [r3, #120]	; 0x78
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	661a      	str	r2, [r3, #96]	; 0x60
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <UART_WaitOnFlagUntilTimeout>:
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b09c      	sub	sp, #112	; 0x70
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	603b      	str	r3, [r7, #0]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	71fb      	strb	r3, [r7, #7]
 8007ab6:	e0a5      	b.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x15e>
 8007ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	f000 80a1 	beq.w	8007c04 <UART_WaitOnFlagUntilTimeout+0x15e>
 8007ac2:	f7fb ff8f 	bl	80039e4 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d302      	bcc.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d13e      	bne.n	8007b56 <UART_WaitOnFlagUntilTimeout+0xb0>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	653b      	str	r3, [r7, #80]	; 0x50
 8007ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aec:	667b      	str	r3, [r7, #100]	; 0x64
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	657b      	str	r3, [r7, #84]	; 0x54
 8007b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e6      	bne.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	663b      	str	r3, [r7, #96]	; 0x60
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	3308      	adds	r3, #8
 8007b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
 8007b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e5      	bne.n	8007b0a <UART_WaitOnFlagUntilTimeout+0x64>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	679a      	str	r2, [r3, #120]	; 0x78
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	67da      	str	r2, [r3, #124]	; 0x7c
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8007b52:	2303      	movs	r3, #3
 8007b54:	e067      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x180>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d04f      	beq.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x15e>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b72:	d147      	bne.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x15e>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b7c:	621a      	str	r2, [r3, #32]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8007ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_WaitOnFlagUntilTimeout+0xd8>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	f023 0301 	bic.w	r3, r3, #1
 8007bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3308      	adds	r3, #8
 8007bce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bd0:	623a      	str	r2, [r7, #32]
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	69f9      	ldr	r1, [r7, #28]
 8007bd6:	6a3a      	ldr	r2, [r7, #32]
 8007bd8:	e841 2300 	strex	r3, r2, [r1]
 8007bdc:	61bb      	str	r3, [r7, #24]
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1e5      	bne.n	8007bb0 <UART_WaitOnFlagUntilTimeout+0x10a>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2220      	movs	r2, #32
 8007be8:	679a      	str	r2, [r3, #120]	; 0x78
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2220      	movs	r2, #32
 8007bee:	67da      	str	r2, [r3, #124]	; 0x7c
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8007c00:	2303      	movs	r3, #3
 8007c02:	e010      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x180>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69da      	ldr	r2, [r3, #28]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	bf0c      	ite	eq
 8007c14:	2301      	moveq	r3, #1
 8007c16:	2300      	movne	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	f43f af4a 	beq.w	8007ab8 <UART_WaitOnFlagUntilTimeout+0x12>
 8007c24:	2300      	movs	r3, #0
 8007c26:	4618      	mov	r0, r3
 8007c28:	3770      	adds	r7, #112	; 0x70
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <__errno>:
 8007c30:	4b01      	ldr	r3, [pc, #4]	; (8007c38 <__errno+0x8>)
 8007c32:	6818      	ldr	r0, [r3, #0]
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20001044 	.word	0x20001044

08007c3c <__libc_init_array>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	4d0d      	ldr	r5, [pc, #52]	; (8007c74 <__libc_init_array+0x38>)
 8007c40:	4c0d      	ldr	r4, [pc, #52]	; (8007c78 <__libc_init_array+0x3c>)
 8007c42:	1b64      	subs	r4, r4, r5
 8007c44:	10a4      	asrs	r4, r4, #2
 8007c46:	2600      	movs	r6, #0
 8007c48:	42a6      	cmp	r6, r4
 8007c4a:	d109      	bne.n	8007c60 <__libc_init_array+0x24>
 8007c4c:	4d0b      	ldr	r5, [pc, #44]	; (8007c7c <__libc_init_array+0x40>)
 8007c4e:	4c0c      	ldr	r4, [pc, #48]	; (8007c80 <__libc_init_array+0x44>)
 8007c50:	f000 f9a8 	bl	8007fa4 <_init>
 8007c54:	1b64      	subs	r4, r4, r5
 8007c56:	10a4      	asrs	r4, r4, #2
 8007c58:	2600      	movs	r6, #0
 8007c5a:	42a6      	cmp	r6, r4
 8007c5c:	d105      	bne.n	8007c6a <__libc_init_array+0x2e>
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c64:	4798      	blx	r3
 8007c66:	3601      	adds	r6, #1
 8007c68:	e7ee      	b.n	8007c48 <__libc_init_array+0xc>
 8007c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6e:	4798      	blx	r3
 8007c70:	3601      	adds	r6, #1
 8007c72:	e7f2      	b.n	8007c5a <__libc_init_array+0x1e>
 8007c74:	080080dc 	.word	0x080080dc
 8007c78:	080080dc 	.word	0x080080dc
 8007c7c:	080080dc 	.word	0x080080dc
 8007c80:	080080e0 	.word	0x080080e0

08007c84 <__itoa>:
 8007c84:	1e93      	subs	r3, r2, #2
 8007c86:	2b22      	cmp	r3, #34	; 0x22
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	d904      	bls.n	8007c98 <__itoa+0x14>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	700b      	strb	r3, [r1, #0]
 8007c92:	461c      	mov	r4, r3
 8007c94:	4620      	mov	r0, r4
 8007c96:	bd10      	pop	{r4, pc}
 8007c98:	2a0a      	cmp	r2, #10
 8007c9a:	d109      	bne.n	8007cb0 <__itoa+0x2c>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	da07      	bge.n	8007cb0 <__itoa+0x2c>
 8007ca0:	232d      	movs	r3, #45	; 0x2d
 8007ca2:	700b      	strb	r3, [r1, #0]
 8007ca4:	4240      	negs	r0, r0
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	4421      	add	r1, r4
 8007caa:	f000 f92b 	bl	8007f04 <__utoa>
 8007cae:	e7f1      	b.n	8007c94 <__itoa+0x10>
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	e7f9      	b.n	8007ca8 <__itoa+0x24>

08007cb4 <itoa>:
 8007cb4:	f7ff bfe6 	b.w	8007c84 <__itoa>

08007cb8 <malloc>:
 8007cb8:	4b02      	ldr	r3, [pc, #8]	; (8007cc4 <malloc+0xc>)
 8007cba:	4601      	mov	r1, r0
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f000 b88d 	b.w	8007ddc <_malloc_r>
 8007cc2:	bf00      	nop
 8007cc4:	20001044 	.word	0x20001044

08007cc8 <free>:
 8007cc8:	4b02      	ldr	r3, [pc, #8]	; (8007cd4 <free+0xc>)
 8007cca:	4601      	mov	r1, r0
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	f000 b819 	b.w	8007d04 <_free_r>
 8007cd2:	bf00      	nop
 8007cd4:	20001044 	.word	0x20001044

08007cd8 <memcpy>:
 8007cd8:	440a      	add	r2, r1
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ce0:	d100      	bne.n	8007ce4 <memcpy+0xc>
 8007ce2:	4770      	bx	lr
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	d1f9      	bne.n	8007ce6 <memcpy+0xe>
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <memset>:
 8007cf4:	4402      	add	r2, r0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d100      	bne.n	8007cfe <memset+0xa>
 8007cfc:	4770      	bx	lr
 8007cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007d02:	e7f9      	b.n	8007cf8 <memset+0x4>

08007d04 <_free_r>:
 8007d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d06:	2900      	cmp	r1, #0
 8007d08:	d044      	beq.n	8007d94 <_free_r+0x90>
 8007d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d0e:	9001      	str	r0, [sp, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f1a1 0404 	sub.w	r4, r1, #4
 8007d16:	bfb8      	it	lt
 8007d18:	18e4      	addlt	r4, r4, r3
 8007d1a:	f000 f935 	bl	8007f88 <__malloc_lock>
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <_free_r+0x94>)
 8007d20:	9801      	ldr	r0, [sp, #4]
 8007d22:	6813      	ldr	r3, [r2, #0]
 8007d24:	b933      	cbnz	r3, 8007d34 <_free_r+0x30>
 8007d26:	6063      	str	r3, [r4, #4]
 8007d28:	6014      	str	r4, [r2, #0]
 8007d2a:	b003      	add	sp, #12
 8007d2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d30:	f000 b930 	b.w	8007f94 <__malloc_unlock>
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d908      	bls.n	8007d4a <_free_r+0x46>
 8007d38:	6825      	ldr	r5, [r4, #0]
 8007d3a:	1961      	adds	r1, r4, r5
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	bf01      	itttt	eq
 8007d40:	6819      	ldreq	r1, [r3, #0]
 8007d42:	685b      	ldreq	r3, [r3, #4]
 8007d44:	1949      	addeq	r1, r1, r5
 8007d46:	6021      	streq	r1, [r4, #0]
 8007d48:	e7ed      	b.n	8007d26 <_free_r+0x22>
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	b10b      	cbz	r3, 8007d54 <_free_r+0x50>
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d9fa      	bls.n	8007d4a <_free_r+0x46>
 8007d54:	6811      	ldr	r1, [r2, #0]
 8007d56:	1855      	adds	r5, r2, r1
 8007d58:	42a5      	cmp	r5, r4
 8007d5a:	d10b      	bne.n	8007d74 <_free_r+0x70>
 8007d5c:	6824      	ldr	r4, [r4, #0]
 8007d5e:	4421      	add	r1, r4
 8007d60:	1854      	adds	r4, r2, r1
 8007d62:	42a3      	cmp	r3, r4
 8007d64:	6011      	str	r1, [r2, #0]
 8007d66:	d1e0      	bne.n	8007d2a <_free_r+0x26>
 8007d68:	681c      	ldr	r4, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	6053      	str	r3, [r2, #4]
 8007d6e:	4421      	add	r1, r4
 8007d70:	6011      	str	r1, [r2, #0]
 8007d72:	e7da      	b.n	8007d2a <_free_r+0x26>
 8007d74:	d902      	bls.n	8007d7c <_free_r+0x78>
 8007d76:	230c      	movs	r3, #12
 8007d78:	6003      	str	r3, [r0, #0]
 8007d7a:	e7d6      	b.n	8007d2a <_free_r+0x26>
 8007d7c:	6825      	ldr	r5, [r4, #0]
 8007d7e:	1961      	adds	r1, r4, r5
 8007d80:	428b      	cmp	r3, r1
 8007d82:	bf04      	itt	eq
 8007d84:	6819      	ldreq	r1, [r3, #0]
 8007d86:	685b      	ldreq	r3, [r3, #4]
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	bf04      	itt	eq
 8007d8c:	1949      	addeq	r1, r1, r5
 8007d8e:	6021      	streq	r1, [r4, #0]
 8007d90:	6054      	str	r4, [r2, #4]
 8007d92:	e7ca      	b.n	8007d2a <_free_r+0x26>
 8007d94:	b003      	add	sp, #12
 8007d96:	bd30      	pop	{r4, r5, pc}
 8007d98:	20002ee8 	.word	0x20002ee8

08007d9c <sbrk_aligned>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	4e0e      	ldr	r6, [pc, #56]	; (8007dd8 <sbrk_aligned+0x3c>)
 8007da0:	460c      	mov	r4, r1
 8007da2:	6831      	ldr	r1, [r6, #0]
 8007da4:	4605      	mov	r5, r0
 8007da6:	b911      	cbnz	r1, 8007dae <sbrk_aligned+0x12>
 8007da8:	f000 f88c 	bl	8007ec4 <_sbrk_r>
 8007dac:	6030      	str	r0, [r6, #0]
 8007dae:	4621      	mov	r1, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 f887 	bl	8007ec4 <_sbrk_r>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d00a      	beq.n	8007dd0 <sbrk_aligned+0x34>
 8007dba:	1cc4      	adds	r4, r0, #3
 8007dbc:	f024 0403 	bic.w	r4, r4, #3
 8007dc0:	42a0      	cmp	r0, r4
 8007dc2:	d007      	beq.n	8007dd4 <sbrk_aligned+0x38>
 8007dc4:	1a21      	subs	r1, r4, r0
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f87c 	bl	8007ec4 <_sbrk_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d101      	bne.n	8007dd4 <sbrk_aligned+0x38>
 8007dd0:	f04f 34ff 	mov.w	r4, #4294967295
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
 8007dd8:	20002eec 	.word	0x20002eec

08007ddc <_malloc_r>:
 8007ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de0:	1ccd      	adds	r5, r1, #3
 8007de2:	f025 0503 	bic.w	r5, r5, #3
 8007de6:	3508      	adds	r5, #8
 8007de8:	2d0c      	cmp	r5, #12
 8007dea:	bf38      	it	cc
 8007dec:	250c      	movcc	r5, #12
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	4607      	mov	r7, r0
 8007df2:	db01      	blt.n	8007df8 <_malloc_r+0x1c>
 8007df4:	42a9      	cmp	r1, r5
 8007df6:	d905      	bls.n	8007e04 <_malloc_r+0x28>
 8007df8:	230c      	movs	r3, #12
 8007dfa:	603b      	str	r3, [r7, #0]
 8007dfc:	2600      	movs	r6, #0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e04:	4e2e      	ldr	r6, [pc, #184]	; (8007ec0 <_malloc_r+0xe4>)
 8007e06:	f000 f8bf 	bl	8007f88 <__malloc_lock>
 8007e0a:	6833      	ldr	r3, [r6, #0]
 8007e0c:	461c      	mov	r4, r3
 8007e0e:	bb34      	cbnz	r4, 8007e5e <_malloc_r+0x82>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4638      	mov	r0, r7
 8007e14:	f7ff ffc2 	bl	8007d9c <sbrk_aligned>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	d14d      	bne.n	8007eba <_malloc_r+0xde>
 8007e1e:	6834      	ldr	r4, [r6, #0]
 8007e20:	4626      	mov	r6, r4
 8007e22:	2e00      	cmp	r6, #0
 8007e24:	d140      	bne.n	8007ea8 <_malloc_r+0xcc>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4638      	mov	r0, r7
 8007e2c:	eb04 0803 	add.w	r8, r4, r3
 8007e30:	f000 f848 	bl	8007ec4 <_sbrk_r>
 8007e34:	4580      	cmp	r8, r0
 8007e36:	d13a      	bne.n	8007eae <_malloc_r+0xd2>
 8007e38:	6821      	ldr	r1, [r4, #0]
 8007e3a:	3503      	adds	r5, #3
 8007e3c:	1a6d      	subs	r5, r5, r1
 8007e3e:	f025 0503 	bic.w	r5, r5, #3
 8007e42:	3508      	adds	r5, #8
 8007e44:	2d0c      	cmp	r5, #12
 8007e46:	bf38      	it	cc
 8007e48:	250c      	movcc	r5, #12
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	f7ff ffa5 	bl	8007d9c <sbrk_aligned>
 8007e52:	3001      	adds	r0, #1
 8007e54:	d02b      	beq.n	8007eae <_malloc_r+0xd2>
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	442b      	add	r3, r5
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	e00e      	b.n	8007e7c <_malloc_r+0xa0>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	1b52      	subs	r2, r2, r5
 8007e62:	d41e      	bmi.n	8007ea2 <_malloc_r+0xc6>
 8007e64:	2a0b      	cmp	r2, #11
 8007e66:	d916      	bls.n	8007e96 <_malloc_r+0xba>
 8007e68:	1961      	adds	r1, r4, r5
 8007e6a:	42a3      	cmp	r3, r4
 8007e6c:	6025      	str	r5, [r4, #0]
 8007e6e:	bf18      	it	ne
 8007e70:	6059      	strne	r1, [r3, #4]
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	bf08      	it	eq
 8007e76:	6031      	streq	r1, [r6, #0]
 8007e78:	5162      	str	r2, [r4, r5]
 8007e7a:	604b      	str	r3, [r1, #4]
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	f104 060b 	add.w	r6, r4, #11
 8007e82:	f000 f887 	bl	8007f94 <__malloc_unlock>
 8007e86:	f026 0607 	bic.w	r6, r6, #7
 8007e8a:	1d23      	adds	r3, r4, #4
 8007e8c:	1af2      	subs	r2, r6, r3
 8007e8e:	d0b6      	beq.n	8007dfe <_malloc_r+0x22>
 8007e90:	1b9b      	subs	r3, r3, r6
 8007e92:	50a3      	str	r3, [r4, r2]
 8007e94:	e7b3      	b.n	8007dfe <_malloc_r+0x22>
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	bf0c      	ite	eq
 8007e9c:	6032      	streq	r2, [r6, #0]
 8007e9e:	605a      	strne	r2, [r3, #4]
 8007ea0:	e7ec      	b.n	8007e7c <_malloc_r+0xa0>
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	6864      	ldr	r4, [r4, #4]
 8007ea6:	e7b2      	b.n	8007e0e <_malloc_r+0x32>
 8007ea8:	4634      	mov	r4, r6
 8007eaa:	6876      	ldr	r6, [r6, #4]
 8007eac:	e7b9      	b.n	8007e22 <_malloc_r+0x46>
 8007eae:	230c      	movs	r3, #12
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	f000 f86e 	bl	8007f94 <__malloc_unlock>
 8007eb8:	e7a1      	b.n	8007dfe <_malloc_r+0x22>
 8007eba:	6025      	str	r5, [r4, #0]
 8007ebc:	e7de      	b.n	8007e7c <_malloc_r+0xa0>
 8007ebe:	bf00      	nop
 8007ec0:	20002ee8 	.word	0x20002ee8

08007ec4 <_sbrk_r>:
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4d06      	ldr	r5, [pc, #24]	; (8007ee0 <_sbrk_r+0x1c>)
 8007ec8:	2300      	movs	r3, #0
 8007eca:	4604      	mov	r4, r0
 8007ecc:	4608      	mov	r0, r1
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	f7fa fd5e 	bl	8002990 <_sbrk>
 8007ed4:	1c43      	adds	r3, r0, #1
 8007ed6:	d102      	bne.n	8007ede <_sbrk_r+0x1a>
 8007ed8:	682b      	ldr	r3, [r5, #0]
 8007eda:	b103      	cbz	r3, 8007ede <_sbrk_r+0x1a>
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	bd38      	pop	{r3, r4, r5, pc}
 8007ee0:	20002ef0 	.word	0x20002ef0

08007ee4 <strcat>:
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	7814      	ldrb	r4, [r2, #0]
 8007eea:	4613      	mov	r3, r2
 8007eec:	3201      	adds	r2, #1
 8007eee:	2c00      	cmp	r4, #0
 8007ef0:	d1fa      	bne.n	8007ee8 <strcat+0x4>
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ef8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efc:	2a00      	cmp	r2, #0
 8007efe:	d1f9      	bne.n	8007ef4 <strcat+0x10>
 8007f00:	bd10      	pop	{r4, pc}
	...

08007f04 <__utoa>:
 8007f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f06:	4c1f      	ldr	r4, [pc, #124]	; (8007f84 <__utoa+0x80>)
 8007f08:	b08b      	sub	sp, #44	; 0x2c
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	466e      	mov	r6, sp
 8007f10:	f104 0c20 	add.w	ip, r4, #32
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	6861      	ldr	r1, [r4, #4]
 8007f18:	4637      	mov	r7, r6
 8007f1a:	c703      	stmia	r7!, {r0, r1}
 8007f1c:	3408      	adds	r4, #8
 8007f1e:	4564      	cmp	r4, ip
 8007f20:	463e      	mov	r6, r7
 8007f22:	d1f7      	bne.n	8007f14 <__utoa+0x10>
 8007f24:	7921      	ldrb	r1, [r4, #4]
 8007f26:	7139      	strb	r1, [r7, #4]
 8007f28:	1e91      	subs	r1, r2, #2
 8007f2a:	6820      	ldr	r0, [r4, #0]
 8007f2c:	6038      	str	r0, [r7, #0]
 8007f2e:	2922      	cmp	r1, #34	; 0x22
 8007f30:	f04f 0100 	mov.w	r1, #0
 8007f34:	d904      	bls.n	8007f40 <__utoa+0x3c>
 8007f36:	7019      	strb	r1, [r3, #0]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	b00b      	add	sp, #44	; 0x2c
 8007f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f40:	1e58      	subs	r0, r3, #1
 8007f42:	4684      	mov	ip, r0
 8007f44:	fbb5 f7f2 	udiv	r7, r5, r2
 8007f48:	fb02 5617 	mls	r6, r2, r7, r5
 8007f4c:	3628      	adds	r6, #40	; 0x28
 8007f4e:	446e      	add	r6, sp
 8007f50:	460c      	mov	r4, r1
 8007f52:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007f56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007f5a:	462e      	mov	r6, r5
 8007f5c:	42b2      	cmp	r2, r6
 8007f5e:	f101 0101 	add.w	r1, r1, #1
 8007f62:	463d      	mov	r5, r7
 8007f64:	d9ee      	bls.n	8007f44 <__utoa+0x40>
 8007f66:	2200      	movs	r2, #0
 8007f68:	545a      	strb	r2, [r3, r1]
 8007f6a:	1919      	adds	r1, r3, r4
 8007f6c:	1aa5      	subs	r5, r4, r2
 8007f6e:	42aa      	cmp	r2, r5
 8007f70:	dae3      	bge.n	8007f3a <__utoa+0x36>
 8007f72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007f76:	780e      	ldrb	r6, [r1, #0]
 8007f78:	7006      	strb	r6, [r0, #0]
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	f801 5901 	strb.w	r5, [r1], #-1
 8007f80:	e7f4      	b.n	8007f6c <__utoa+0x68>
 8007f82:	bf00      	nop
 8007f84:	080080b4 	.word	0x080080b4

08007f88 <__malloc_lock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__malloc_lock+0x8>)
 8007f8a:	f000 b809 	b.w	8007fa0 <__retarget_lock_acquire_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20002ef4 	.word	0x20002ef4

08007f94 <__malloc_unlock>:
 8007f94:	4801      	ldr	r0, [pc, #4]	; (8007f9c <__malloc_unlock+0x8>)
 8007f96:	f000 b804 	b.w	8007fa2 <__retarget_lock_release_recursive>
 8007f9a:	bf00      	nop
 8007f9c:	20002ef4 	.word	0x20002ef4

08007fa0 <__retarget_lock_acquire_recursive>:
 8007fa0:	4770      	bx	lr

08007fa2 <__retarget_lock_release_recursive>:
 8007fa2:	4770      	bx	lr

08007fa4 <_init>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	bf00      	nop
 8007fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007faa:	bc08      	pop	{r3}
 8007fac:	469e      	mov	lr, r3
 8007fae:	4770      	bx	lr

08007fb0 <_fini>:
 8007fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb2:	bf00      	nop
 8007fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb6:	bc08      	pop	{r3}
 8007fb8:	469e      	mov	lr, r3
 8007fba:	4770      	bx	lr
