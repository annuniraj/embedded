
Basic_State_Machine_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd8  08006dd8  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08006dd8  08006dd8  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dd8  08006dd8  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dd8  08006dd8  00016dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ddc  08006ddc  00016ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08006de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000155c  20000044  08006e24  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015a0  08006e24  000215a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b190  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a7  00000000  00000000  0003b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195b6  00000000  00000000  00040f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e79  00000000  00000000  0005a4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094281  00000000  00000000  0007233f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001065c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  00106614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cb8 	.word	0x08006cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	08006cb8 	.word	0x08006cb8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <Lan_Interrupt_Service>:

	}
}

void Lan_Interrupt_Service(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	if(getSn_IR(0) & (1 << 2))
 80001dc:	f44f 7002 	mov.w	r0, #520	; 0x208
 80001e0:	f001 ff28 	bl	8002034 <WIZCHIP_READ>
 80001e4:	4603      	mov	r3, r0
 80001e6:	f003 0304 	and.w	r3, r3, #4
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d00f      	beq.n	800020e <Lan_Interrupt_Service+0x36>
	{
		recv(0,Receive_Buffer,255);
 80001ee:	22ff      	movs	r2, #255	; 0xff
 80001f0:	4913      	ldr	r1, [pc, #76]	; (8000240 <Lan_Interrupt_Service+0x68>)
 80001f2:	2000      	movs	r0, #0
 80001f4:	f001 fbc0 	bl	8001978 <recv>
		if(Receive_Buffer==PING_ACK_CMD)
		{
			//Set State Idle State
		}

		memset(Receive_Buffer,0,sizeof Receive_Buffer);// clear the receiving buffer
 80001f8:	22ff      	movs	r2, #255	; 0xff
 80001fa:	2100      	movs	r1, #0
 80001fc:	4810      	ldr	r0, [pc, #64]	; (8000240 <Lan_Interrupt_Service+0x68>)
 80001fe:	f006 fd11 	bl	8006c24 <memset>
		setSn_IR(0, 0x04);
 8000202:	2104      	movs	r1, #4
 8000204:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000208:	f001 ff60 	bl	80020cc <WIZCHIP_WRITE>

	else
	{
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
	}
}
 800020c:	e015      	b.n	800023a <Lan_Interrupt_Service+0x62>
	else if(getSn_IR(0) & (1 << 1))
 800020e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000212:	f001 ff0f 	bl	8002034 <WIZCHIP_READ>
 8000216:	4603      	mov	r3, r0
 8000218:	f003 0302 	and.w	r3, r3, #2
 800021c:	2b00      	cmp	r3, #0
 800021e:	d007      	beq.n	8000230 <Lan_Interrupt_Service+0x58>
		Ethernet_Connect();
 8000220:	f000 faf8 	bl	8000814 <Ethernet_Connect>
		setSn_IR(0, 0x02);
 8000224:	2102      	movs	r1, #2
 8000226:	f44f 7002 	mov.w	r0, #520	; 0x208
 800022a:	f001 ff4f 	bl	80020cc <WIZCHIP_WRITE>
}
 800022e:	e004      	b.n	800023a <Lan_Interrupt_Service+0x62>
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
 8000230:	211f      	movs	r1, #31
 8000232:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000236:	f001 ff49 	bl	80020cc <WIZCHIP_WRITE>
}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	20000400 	.word	0x20000400

08000244 <WR_Interrupt_Service>:

void WR_Interrupt_Service(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)"WR ",strlen("WR "));
 8000248:	2203      	movs	r2, #3
 800024a:	491f      	ldr	r1, [pc, #124]	; (80002c8 <WR_Interrupt_Service+0x84>)
 800024c:	2000      	movs	r0, #0
 800024e:	f001 fa99 	bl	8001784 <send>
	WR_Counts++;
 8000252:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <WR_Interrupt_Service+0x88>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <WR_Interrupt_Service+0x88>)
 800025a:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==0)
 800025c:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <WR_Interrupt_Service+0x8c>)
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d11f      	bne.n	80002a4 <WR_Interrupt_Service+0x60>
	{
		switch(WR_Counts)
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <WR_Interrupt_Service+0x88>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d002      	beq.n	8000272 <WR_Interrupt_Service+0x2e>
 800026c:	2b02      	cmp	r3, #2
 800026e:	d00d      	beq.n	800028c <WR_Interrupt_Service+0x48>
 8000270:	e019      	b.n	80002a6 <WR_Interrupt_Service+0x62>
		{
		case(1):
		        Timer2_Start();
 8000272:	f000 fb77 	bl	8000964 <Timer2_Start>
				WR_Instant=Timer2_GetTimer();
 8000276:	f000 fb7f 	bl	8000978 <Timer2_GetTimer>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <WR_Interrupt_Service+0x90>)
 8000280:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WR_Ring,&WR_Instant);
 8000282:	4914      	ldr	r1, [pc, #80]	; (80002d4 <WR_Interrupt_Service+0x90>)
 8000284:	4814      	ldr	r0, [pc, #80]	; (80002d8 <WR_Interrupt_Service+0x94>)
 8000286:	f000 ff89 	bl	800119c <RingWriteElement>
				break;
 800028a:	e00c      	b.n	80002a6 <WR_Interrupt_Service+0x62>
		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 800028c:	2209      	movs	r2, #9
 800028e:	4913      	ldr	r1, [pc, #76]	; (80002dc <WR_Interrupt_Service+0x98>)
 8000290:	2000      	movs	r0, #0
 8000292:	f001 fa77 	bl	8001784 <send>
				Entry_flag=1;
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <WR_Interrupt_Service+0x9c>)
 8000298:	2201      	movs	r2, #1
 800029a:	801a      	strh	r2, [r3, #0]
				Rt_Lt_flag=1;
 800029c:	4b11      	ldr	r3, [pc, #68]	; (80002e4 <WR_Interrupt_Service+0xa0>)
 800029e:	2201      	movs	r2, #1
 80002a0:	801a      	strh	r2, [r3, #0]
				//WR_Instant=__HAL_TIM_GetCounter(&htim2);
				//RingWriteElement(&WR_Ring,&WR_Instant);
				break;
 80002a2:	e000      	b.n	80002a6 <WR_Interrupt_Service+0x62>
		}

	}
 80002a4:	bf00      	nop

	if(Entry_flag==1)
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <WR_Interrupt_Service+0x9c>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d109      	bne.n	80002c2 <WR_Interrupt_Service+0x7e>
	{
		WR_Instant=Timer2_GetTimer();
 80002ae:	f000 fb63 	bl	8000978 <Timer2_GetTimer>
 80002b2:	4603      	mov	r3, r0
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <WR_Interrupt_Service+0x90>)
 80002b8:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WR_Ring,&WR_Instant);
 80002ba:	4906      	ldr	r1, [pc, #24]	; (80002d4 <WR_Interrupt_Service+0x90>)
 80002bc:	4806      	ldr	r0, [pc, #24]	; (80002d8 <WR_Interrupt_Service+0x94>)
 80002be:	f000 ff6d 	bl	800119c <RingWriteElement>
	}
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	08006cd0 	.word	0x08006cd0
 80002cc:	20000878 	.word	0x20000878
 80002d0:	200003d8 	.word	0x200003d8
 80002d4:	20000088 	.word	0x20000088
 80002d8:	20000500 	.word	0x20000500
 80002dc:	08006cd4 	.word	0x08006cd4
 80002e0:	20000bd6 	.word	0x20000bd6
 80002e4:	20000b9c 	.word	0x20000b9c

080002e8 <FCT_Interrupt_Service>:


void FCT_Interrupt_Service(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)"FCT ",strlen("FCT "));
 80002ec:	2204      	movs	r2, #4
 80002ee:	4914      	ldr	r1, [pc, #80]	; (8000340 <FCT_Interrupt_Service+0x58>)
 80002f0:	2000      	movs	r0, #0
 80002f2:	f001 fa47 	bl	8001784 <send>
	FCT_Counts++;
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <FCT_Interrupt_Service+0x5c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <FCT_Interrupt_Service+0x5c>)
 80002fe:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==1)
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <FCT_Interrupt_Service+0x60>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d10a      	bne.n	800031e <FCT_Interrupt_Service+0x36>
	{
		FCT_Instant=Timer2_GetTimer();
 8000308:	f000 fb36 	bl	8000978 <Timer2_GetTimer>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <FCT_Interrupt_Service+0x64>)
 8000312:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 8000314:	490d      	ldr	r1, [pc, #52]	; (800034c <FCT_Interrupt_Service+0x64>)
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <FCT_Interrupt_Service+0x68>)
 8000318:	f000 ff40 	bl	800119c <RingWriteElement>
//		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
		//send(0, (uint8_t *)"TL2 ",strlen("TL2 "));
	}
	//send(0, (uint8_t *)"TLout ",strlen("TLout "));
}
 800031c:	e00d      	b.n	800033a <FCT_Interrupt_Service+0x52>
	else if(Rt_Lt_flag==1)
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <FCT_Interrupt_Service+0x6c>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d109      	bne.n	800033a <FCT_Interrupt_Service+0x52>
		FCT_Instant=Timer2_GetTimer();
 8000326:	f000 fb27 	bl	8000978 <Timer2_GetTimer>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <FCT_Interrupt_Service+0x64>)
 8000330:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 8000332:	4906      	ldr	r1, [pc, #24]	; (800034c <FCT_Interrupt_Service+0x64>)
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <FCT_Interrupt_Service+0x68>)
 8000336:	f000 ff31 	bl	800119c <RingWriteElement>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	08006ce0 	.word	0x08006ce0
 8000344:	20000524 	.word	0x20000524
 8000348:	200003d8 	.word	0x200003d8
 800034c:	200003f4 	.word	0x200003f4
 8000350:	20000858 	.word	0x20000858
 8000354:	20000b9c 	.word	0x20000b9c

08000358 <WL_Interrupt_Service>:

void WL_Interrupt_Service(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	//send(0, (uint8_t *)"WL ",strlen("WL "));
	WL_Counts++;
 800035c:	4b1c      	ldr	r3, [pc, #112]	; (80003d0 <WL_Interrupt_Service+0x78>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	4a1b      	ldr	r2, [pc, #108]	; (80003d0 <WL_Interrupt_Service+0x78>)
 8000364:	6013      	str	r3, [r2, #0]
	if(Rt_Lt_flag==0)
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <WL_Interrupt_Service+0x7c>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d11f      	bne.n	80003ae <WL_Interrupt_Service+0x56>
	{
		switch(WL_Counts)
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <WL_Interrupt_Service+0x78>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d002      	beq.n	800037c <WL_Interrupt_Service+0x24>
 8000376:	2b02      	cmp	r3, #2
 8000378:	d00d      	beq.n	8000396 <WL_Interrupt_Service+0x3e>
 800037a:	e019      	b.n	80003b0 <WL_Interrupt_Service+0x58>
		{
		case(1):
				Timer2_Start();
 800037c:	f000 faf2 	bl	8000964 <Timer2_Start>
				WL_Instant=Timer2_GetTimer();
 8000380:	f000 fafa 	bl	8000978 <Timer2_GetTimer>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <WL_Interrupt_Service+0x80>)
 800038a:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WL_Ring,&WL_Instant);
 800038c:	4912      	ldr	r1, [pc, #72]	; (80003d8 <WL_Interrupt_Service+0x80>)
 800038e:	4813      	ldr	r0, [pc, #76]	; (80003dc <WL_Interrupt_Service+0x84>)
 8000390:	f000 ff04 	bl	800119c <RingWriteElement>
				break;
 8000394:	e00c      	b.n	80003b0 <WL_Interrupt_Service+0x58>

		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 8000396:	2209      	movs	r2, #9
 8000398:	4911      	ldr	r1, [pc, #68]	; (80003e0 <WL_Interrupt_Service+0x88>)
 800039a:	2000      	movs	r0, #0
 800039c:	f001 f9f2 	bl	8001784 <send>
				Entry_flag=1;
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <WL_Interrupt_Service+0x8c>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	801a      	strh	r2, [r3, #0]
				Lt_Rt_flag=1;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <WL_Interrupt_Service+0x90>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	801a      	strh	r2, [r3, #0]
				//WL_Instant=__HAL_TIM_GetCounter(&htim2);
				//RingWriteElement(&WL_Ring,&WL_Instant);
				break;
 80003ac:	e000      	b.n	80003b0 <WL_Interrupt_Service+0x58>
		}

	}
 80003ae:	bf00      	nop

	if(Entry_flag==1)
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <WL_Interrupt_Service+0x8c>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d109      	bne.n	80003cc <WL_Interrupt_Service+0x74>
	{
		WL_Instant=Timer2_GetTimer();
 80003b8:	f000 fade 	bl	8000978 <Timer2_GetTimer>
 80003bc:	4603      	mov	r3, r0
 80003be:	461a      	mov	r2, r3
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <WL_Interrupt_Service+0x80>)
 80003c2:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WL_Ring,&WL_Instant);
 80003c4:	4904      	ldr	r1, [pc, #16]	; (80003d8 <WL_Interrupt_Service+0x80>)
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <WL_Interrupt_Service+0x84>)
 80003c8:	f000 fee8 	bl	800119c <RingWriteElement>
	}
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200003fc 	.word	0x200003fc
 80003d4:	20000b9c 	.word	0x20000b9c
 80003d8:	20000bd8 	.word	0x20000bd8
 80003dc:	2000008c 	.word	0x2000008c
 80003e0:	08006cd4 	.word	0x08006cd4
 80003e4:	20000bd6 	.word	0x20000bd6
 80003e8:	200003d8 	.word	0x200003d8

080003ec <Send_WR_Samples>:
#include "Save_Data.h"

void Send_WR_Samples()
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
	WR_Roller = (BUFFERSIZE-1)-(WR_Ring.place + 1);
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <Send_WR_Samples+0x84>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	f06f 0339 	mvn.w	r3, #57	; 0x39
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <Send_WR_Samples+0x88>)
 8000402:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	e027      	b.n	800045a <Send_WR_Samples+0x6e>
	{
		RingReadElement(&WR_Ring,&WR_Ring_Unit);
 800040a:	491b      	ldr	r1, [pc, #108]	; (8000478 <Send_WR_Samples+0x8c>)
 800040c:	4818      	ldr	r0, [pc, #96]	; (8000470 <Send_WR_Samples+0x84>)
 800040e:	f000 ff15 	bl	800123c <RingReadElement>
		itoa(WR_Ring_Unit,WR_Ring_Bulletin,10);
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <Send_WR_Samples+0x8c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	220a      	movs	r2, #10
 8000418:	4918      	ldr	r1, [pc, #96]	; (800047c <Send_WR_Samples+0x90>)
 800041a:	4618      	mov	r0, r3
 800041c:	f006 fbf2 	bl	8006c04 <itoa>
		send(0, (buff_size *)strcat(WR_Ring_Bulletin,","),strlen(WR_Ring_Bulletin));
 8000420:	4816      	ldr	r0, [pc, #88]	; (800047c <Send_WR_Samples+0x90>)
 8000422:	f7ff fed1 	bl	80001c8 <strlen>
 8000426:	4603      	mov	r3, r0
 8000428:	461a      	mov	r2, r3
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <Send_WR_Samples+0x90>)
 800042c:	4413      	add	r3, r2
 800042e:	4914      	ldr	r1, [pc, #80]	; (8000480 <Send_WR_Samples+0x94>)
 8000430:	461a      	mov	r2, r3
 8000432:	460b      	mov	r3, r1
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	8013      	strh	r3, [r2, #0]
 8000438:	4c10      	ldr	r4, [pc, #64]	; (800047c <Send_WR_Samples+0x90>)
 800043a:	4810      	ldr	r0, [pc, #64]	; (800047c <Send_WR_Samples+0x90>)
 800043c:	f7ff fec4 	bl	80001c8 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	b29b      	uxth	r3, r3
 8000444:	461a      	mov	r2, r3
 8000446:	4621      	mov	r1, r4
 8000448:	2000      	movs	r0, #0
 800044a:	f001 f99b 	bl	8001784 <send>
		//send(0, (buff_size *)",",strlen(","));
		HAL_Delay(100);
 800044e:	2064      	movs	r0, #100	; 0x64
 8000450:	f002 fdde 	bl	8003010 <HAL_Delay>
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3301      	adds	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <Send_WR_Samples+0x88>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	461a      	mov	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4293      	cmp	r3, r2
 8000464:	ddd1      	ble.n	800040a <Send_WR_Samples+0x1e>
	}
}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bd90      	pop	{r4, r7, pc}
 8000470:	20000500 	.word	0x20000500
 8000474:	20000bd4 	.word	0x20000bd4
 8000478:	200003f8 	.word	0x200003f8
 800047c:	20000bac 	.word	0x20000bac
 8000480:	08006ce8 	.word	0x08006ce8

08000484 <Send_FCT_Samples>:

void Send_FCT_Samples()
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
	FCT_Roller = (BUFFERSIZE-1)-(FCT_Ring.place + 1);
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <Send_FCT_Samples+0x84>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	b2da      	uxtb	r2, r3
 8000490:	f06f 0339 	mvn.w	r3, #57	; 0x39
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <Send_FCT_Samples+0x88>)
 800049a:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=FCT_Roller;Iter++)
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e027      	b.n	80004f2 <Send_FCT_Samples+0x6e>
	{
		RingReadElement(&FCT_Ring,&FCT_Ring_Unit);
 80004a2:	491b      	ldr	r1, [pc, #108]	; (8000510 <Send_FCT_Samples+0x8c>)
 80004a4:	4818      	ldr	r0, [pc, #96]	; (8000508 <Send_FCT_Samples+0x84>)
 80004a6:	f000 fec9 	bl	800123c <RingReadElement>
		itoa(FCT_Ring_Unit,FCT_Ring_Bulletin,10);
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <Send_FCT_Samples+0x8c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	220a      	movs	r2, #10
 80004b0:	4918      	ldr	r1, [pc, #96]	; (8000514 <Send_FCT_Samples+0x90>)
 80004b2:	4618      	mov	r0, r3
 80004b4:	f006 fba6 	bl	8006c04 <itoa>
		send(0, (buff_size *)strcat(FCT_Ring_Bulletin,","),strlen(FCT_Ring_Bulletin));
 80004b8:	4816      	ldr	r0, [pc, #88]	; (8000514 <Send_FCT_Samples+0x90>)
 80004ba:	f7ff fe85 	bl	80001c8 <strlen>
 80004be:	4603      	mov	r3, r0
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <Send_FCT_Samples+0x90>)
 80004c4:	4413      	add	r3, r2
 80004c6:	4914      	ldr	r1, [pc, #80]	; (8000518 <Send_FCT_Samples+0x94>)
 80004c8:	461a      	mov	r2, r3
 80004ca:	460b      	mov	r3, r1
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	8013      	strh	r3, [r2, #0]
 80004d0:	4c10      	ldr	r4, [pc, #64]	; (8000514 <Send_FCT_Samples+0x90>)
 80004d2:	4810      	ldr	r0, [pc, #64]	; (8000514 <Send_FCT_Samples+0x90>)
 80004d4:	f7ff fe78 	bl	80001c8 <strlen>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29b      	uxth	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	4621      	mov	r1, r4
 80004e0:	2000      	movs	r0, #0
 80004e2:	f001 f94f 	bl	8001784 <send>
		//send(0, (buff_size *)",",strlen(","));
		HAL_Delay(100);
 80004e6:	2064      	movs	r0, #100	; 0x64
 80004e8:	f002 fd92 	bl	8003010 <HAL_Delay>
	for(int Iter=0;Iter<=FCT_Roller;Iter++)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3301      	adds	r3, #1
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <Send_FCT_Samples+0x88>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4293      	cmp	r3, r2
 80004fc:	ddd1      	ble.n	80004a2 <Send_FCT_Samples+0x1e>
	}
}
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	bd90      	pop	{r4, r7, pc}
 8000508:	20000858 	.word	0x20000858
 800050c:	20000b9e 	.word	0x20000b9e
 8000510:	20000520 	.word	0x20000520
 8000514:	20000848 	.word	0x20000848
 8000518:	08006ce8 	.word	0x08006ce8

0800051c <Send_WL_Samples>:


void Send_WL_Samples()
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	WL_Roller = (BUFFERSIZE-1)-(WL_Ring.place + 1);
 8000522:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <Send_WL_Samples+0x84>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	b2da      	uxtb	r2, r3
 8000528:	f06f 0339 	mvn.w	r3, #57	; 0x39
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <Send_WL_Samples+0x88>)
 8000532:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	e027      	b.n	800058a <Send_WL_Samples+0x6e>
	{
		RingReadElement(&WL_Ring,&WL_Ring_Unit);
 800053a:	491b      	ldr	r1, [pc, #108]	; (80005a8 <Send_WL_Samples+0x8c>)
 800053c:	4818      	ldr	r0, [pc, #96]	; (80005a0 <Send_WL_Samples+0x84>)
 800053e:	f000 fe7d 	bl	800123c <RingReadElement>
		itoa(WL_Ring_Unit,WL_Ring_Bulletin,10);
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <Send_WL_Samples+0x8c>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	220a      	movs	r2, #10
 8000548:	4918      	ldr	r1, [pc, #96]	; (80005ac <Send_WL_Samples+0x90>)
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fb5a 	bl	8006c04 <itoa>
		send(0, (buff_size *)strcat(WL_Ring_Bulletin,","),strlen(WL_Ring_Bulletin));
 8000550:	4816      	ldr	r0, [pc, #88]	; (80005ac <Send_WL_Samples+0x90>)
 8000552:	f7ff fe39 	bl	80001c8 <strlen>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <Send_WL_Samples+0x90>)
 800055c:	4413      	add	r3, r2
 800055e:	4914      	ldr	r1, [pc, #80]	; (80005b0 <Send_WL_Samples+0x94>)
 8000560:	461a      	mov	r2, r3
 8000562:	460b      	mov	r3, r1
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	8013      	strh	r3, [r2, #0]
 8000568:	4c10      	ldr	r4, [pc, #64]	; (80005ac <Send_WL_Samples+0x90>)
 800056a:	4810      	ldr	r0, [pc, #64]	; (80005ac <Send_WL_Samples+0x90>)
 800056c:	f7ff fe2c 	bl	80001c8 <strlen>
 8000570:	4603      	mov	r3, r0
 8000572:	b29b      	uxth	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	4621      	mov	r1, r4
 8000578:	2000      	movs	r0, #0
 800057a:	f001 f903 	bl	8001784 <send>
		//send(0, (buff_size *)",",strlen(","));
		HAL_Delay(100);
 800057e:	2064      	movs	r0, #100	; 0x64
 8000580:	f002 fd46 	bl	8003010 <HAL_Delay>
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3301      	adds	r3, #1
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <Send_WL_Samples+0x88>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	461a      	mov	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4293      	cmp	r3, r2
 8000594:	ddd1      	ble.n	800053a <Send_WL_Samples+0x1e>
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	20000bdc 	.word	0x20000bdc
 80005a8:	20000854 	.word	0x20000854
 80005ac:	20000ba0 	.word	0x20000ba0
 80005b0:	08006ce8 	.word	0x08006ce8

080005b4 <Send_Data>:

void Send_Data()
{
 80005b4:	b598      	push	{r3, r4, r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)GRAB_STOP_CMD,strlen(GRAB_STOP_CMD));
 80005b8:	2208      	movs	r2, #8
 80005ba:	494f      	ldr	r1, [pc, #316]	; (80006f8 <Send_Data+0x144>)
 80005bc:	2000      	movs	r0, #0
 80005be:	f001 f8e1 	bl	8001784 <send>
	HAL_Delay(500);
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f002 fd23 	bl	8003010 <HAL_Delay>
	send(0, (uint8_t *)LOG_START_CMD,strlen(LOG_START_CMD));
 80005ca:	2208      	movs	r2, #8
 80005cc:	494b      	ldr	r1, [pc, #300]	; (80006fc <Send_Data+0x148>)
 80005ce:	2000      	movs	r0, #0
 80005d0:	f001 f8d8 	bl	8001784 <send>

	HAL_Delay(500);
 80005d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d8:	f002 fd1a 	bl	8003010 <HAL_Delay>
	send(0, (buff_size *)" WR,",strlen(" WR,"));
 80005dc:	2204      	movs	r2, #4
 80005de:	4948      	ldr	r1, [pc, #288]	; (8000700 <Send_Data+0x14c>)
 80005e0:	2000      	movs	r0, #0
 80005e2:	f001 f8cf 	bl	8001784 <send>
	Send_WR_Samples();//send WR Samples
 80005e6:	f7ff ff01 	bl	80003ec <Send_WR_Samples>

	HAL_Delay(500);
 80005ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ee:	f002 fd0f 	bl	8003010 <HAL_Delay>
	send(0, (buff_size *)" FCT",strlen(" FCT,"));
 80005f2:	2205      	movs	r2, #5
 80005f4:	4943      	ldr	r1, [pc, #268]	; (8000704 <Send_Data+0x150>)
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 f8c4 	bl	8001784 <send>
	Send_FCT_Samples();//send  Samples
 80005fc:	f7ff ff42 	bl	8000484 <Send_FCT_Samples>

	HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000604:	f002 fd04 	bl	8003010 <HAL_Delay>
	send(0, (buff_size *)" WL,",strlen(" WL,"));
 8000608:	2204      	movs	r2, #4
 800060a:	493f      	ldr	r1, [pc, #252]	; (8000708 <Send_Data+0x154>)
 800060c:	2000      	movs	r0, #0
 800060e:	f001 f8b9 	bl	8001784 <send>
	Send_WL_Samples();//send WL Samples
 8000612:	f7ff ff83 	bl	800051c <Send_WL_Samples>

	HAL_Delay(500);
 8000616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061a:	f002 fcf9 	bl	8003010 <HAL_Delay>
	itoa(WR_Counts,WR_Count_Bulletin,10);
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <Send_Data+0x158>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	220a      	movs	r2, #10
 8000624:	493a      	ldr	r1, [pc, #232]	; (8000710 <Send_Data+0x15c>)
 8000626:	4618      	mov	r0, r3
 8000628:	f006 faec 	bl	8006c04 <itoa>
	send(0, (buff_size *)strcat(WR_Count_Bulletin,","),strlen(WR_Count_Bulletin));
 800062c:	4838      	ldr	r0, [pc, #224]	; (8000710 <Send_Data+0x15c>)
 800062e:	f7ff fdcb 	bl	80001c8 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	461a      	mov	r2, r3
 8000636:	4b36      	ldr	r3, [pc, #216]	; (8000710 <Send_Data+0x15c>)
 8000638:	4413      	add	r3, r2
 800063a:	4936      	ldr	r1, [pc, #216]	; (8000714 <Send_Data+0x160>)
 800063c:	461a      	mov	r2, r3
 800063e:	460b      	mov	r3, r1
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	8013      	strh	r3, [r2, #0]
 8000644:	4c32      	ldr	r4, [pc, #200]	; (8000710 <Send_Data+0x15c>)
 8000646:	4832      	ldr	r0, [pc, #200]	; (8000710 <Send_Data+0x15c>)
 8000648:	f7ff fdbe 	bl	80001c8 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	b29b      	uxth	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	4621      	mov	r1, r4
 8000654:	2000      	movs	r0, #0
 8000656:	f001 f895 	bl	8001784 <send>

	HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800065e:	f002 fcd7 	bl	8003010 <HAL_Delay>
	itoa(FCT_Counts,FCT_Count_Bulletin,10);
 8000662:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <Send_Data+0x164>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	220a      	movs	r2, #10
 8000668:	492c      	ldr	r1, [pc, #176]	; (800071c <Send_Data+0x168>)
 800066a:	4618      	mov	r0, r3
 800066c:	f006 faca 	bl	8006c04 <itoa>
	send(0, (buff_size *)strcat(FCT_Count_Bulletin,","),strlen(FCT_Count_Bulletin));
 8000670:	482a      	ldr	r0, [pc, #168]	; (800071c <Send_Data+0x168>)
 8000672:	f7ff fda9 	bl	80001c8 <strlen>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <Send_Data+0x168>)
 800067c:	4413      	add	r3, r2
 800067e:	4925      	ldr	r1, [pc, #148]	; (8000714 <Send_Data+0x160>)
 8000680:	461a      	mov	r2, r3
 8000682:	460b      	mov	r3, r1
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	8013      	strh	r3, [r2, #0]
 8000688:	4c24      	ldr	r4, [pc, #144]	; (800071c <Send_Data+0x168>)
 800068a:	4824      	ldr	r0, [pc, #144]	; (800071c <Send_Data+0x168>)
 800068c:	f7ff fd9c 	bl	80001c8 <strlen>
 8000690:	4603      	mov	r3, r0
 8000692:	b29b      	uxth	r3, r3
 8000694:	461a      	mov	r2, r3
 8000696:	4621      	mov	r1, r4
 8000698:	2000      	movs	r0, #0
 800069a:	f001 f873 	bl	8001784 <send>

	HAL_Delay(500);
 800069e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a2:	f002 fcb5 	bl	8003010 <HAL_Delay>
	itoa(WL_Counts,WL_Count_Bulletin,10);
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <Send_Data+0x16c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	220a      	movs	r2, #10
 80006ac:	491d      	ldr	r1, [pc, #116]	; (8000724 <Send_Data+0x170>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 faa8 	bl	8006c04 <itoa>
	send(0, (buff_size *)strcat(WL_Count_Bulletin,","),strlen(WL_Count_Bulletin));
 80006b4:	481b      	ldr	r0, [pc, #108]	; (8000724 <Send_Data+0x170>)
 80006b6:	f7ff fd87 	bl	80001c8 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <Send_Data+0x170>)
 80006c0:	4413      	add	r3, r2
 80006c2:	4914      	ldr	r1, [pc, #80]	; (8000714 <Send_Data+0x160>)
 80006c4:	461a      	mov	r2, r3
 80006c6:	460b      	mov	r3, r1
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	8013      	strh	r3, [r2, #0]
 80006cc:	4c15      	ldr	r4, [pc, #84]	; (8000724 <Send_Data+0x170>)
 80006ce:	4815      	ldr	r0, [pc, #84]	; (8000724 <Send_Data+0x170>)
 80006d0:	f7ff fd7a 	bl	80001c8 <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	4621      	mov	r1, r4
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 f851 	bl	8001784 <send>

	HAL_Delay(500);
 80006e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e6:	f002 fc93 	bl	8003010 <HAL_Delay>
	send(0, (uint8_t *)LOG_STOP_CMD,strlen(LOG_STOP_CMD));
 80006ea:	2207      	movs	r2, #7
 80006ec:	490e      	ldr	r1, [pc, #56]	; (8000728 <Send_Data+0x174>)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f001 f848 	bl	8001784 <send>
}
 80006f4:	bf00      	nop
 80006f6:	bd98      	pop	{r3, r4, r7, pc}
 80006f8:	08006cec 	.word	0x08006cec
 80006fc:	08006cf8 	.word	0x08006cf8
 8000700:	08006d04 	.word	0x08006d04
 8000704:	08006d0c 	.word	0x08006d0c
 8000708:	08006d14 	.word	0x08006d14
 800070c:	20000878 	.word	0x20000878
 8000710:	200000ac 	.word	0x200000ac
 8000714:	08006ce8 	.word	0x08006ce8
 8000718:	20000524 	.word	0x20000524
 800071c:	200003dc 	.word	0x200003dc
 8000720:	200003fc 	.word	0x200003fc
 8000724:	200003e8 	.word	0x200003e8
 8000728:	08006d1c 	.word	0x08006d1c

0800072c <cs_sel>:
uint8_t  IntStatus;
uint8_t  Sock_Rx_Flag;
uint8_t  Sock_Disconnect_Flag;

void cs_sel(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <cs_sel+0x14>)
 8000736:	f002 ff13 	bl	8003560 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	48000400 	.word	0x48000400

08000744 <cs_desel>:

void cs_desel(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8000748:	2201      	movs	r2, #1
 800074a:	2101      	movs	r1, #1
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <cs_desel+0x14>)
 800074e:	f002 ff07 	bl	8003560 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	48000400 	.word	0x48000400

0800075c <Init_Ethernet>:


void Init_Ethernet(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
	uint8_t bufSize[] = {2, 2, 2, 2};
 8000762:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8000766:	61fb      	str	r3, [r7, #28]

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000768:	4922      	ldr	r1, [pc, #136]	; (80007f4 <Init_Ethernet+0x98>)
 800076a:	4823      	ldr	r0, [pc, #140]	; (80007f8 <Init_Ethernet+0x9c>)
 800076c:	f001 ff56 	bl	800261c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000770:	4922      	ldr	r1, [pc, #136]	; (80007fc <Init_Ethernet+0xa0>)
 8000772:	4823      	ldr	r0, [pc, #140]	; (8000800 <Init_Ethernet+0xa4>)
 8000774:	f001 ff78 	bl	8002668 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);
 8000778:	f107 021c 	add.w	r2, r7, #28
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f8c6 	bl	8002914 <wizchip_init>
	wiz_NetInfo netInfo = { .mac = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}, // Mac address
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	f8c3 2013 	str.w	r2, [r3, #19]
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <Init_Ethernet+0xa8>)
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a2:	6018      	str	r0, [r3, #0]
 80007a4:	3304      	adds	r3, #4
 80007a6:	8019      	strh	r1, [r3, #0]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <Init_Ethernet+0xac>)
 80007aa:	f107 030a 	add.w	r3, r7, #10
 80007ae:	6810      	ldr	r0, [r2, #0]
 80007b0:	6018      	str	r0, [r3, #0]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <Init_Ethernet+0xb0>)
 80007b4:	f107 030e 	add.w	r3, r7, #14
 80007b8:	6810      	ldr	r0, [r2, #0]
 80007ba:	6018      	str	r0, [r3, #0]
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <Init_Ethernet+0xb4>)
 80007be:	f107 0312 	add.w	r3, r7, #18
 80007c2:	6810      	ldr	r0, [r2, #0]
 80007c4:	6018      	str	r0, [r3, #0]
	 .ip = {192, 168, 1, 204},    // IP address
	 .sn = {255, 255, 255, 0},    // Subnet mask
	 .gw = {192, 168, 1, 1}};    // Gateway address

	wizchip_setnetinfo(&netInfo);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f002 fb11 	bl	8002df0 <wizchip_setnetinfo>
	wizchip_getnetinfo(&netInfo);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fb4d 	bl	8002e70 <wizchip_getnetinfo>

	setSn_IMR(0, 0x06);
 80007d6:	2106      	movs	r1, #6
 80007d8:	f642 4008 	movw	r0, #11272	; 0x2c08
 80007dc:	f001 fc76 	bl	80020cc <WIZCHIP_WRITE>
	WIZCHIP_WRITE(SIMR,0x01);
 80007e0:	2101      	movs	r1, #1
 80007e2:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80007e6:	f001 fc71 	bl	80020cc <WIZCHIP_WRITE>
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	08000745 	.word	0x08000745
 80007f8:	0800072d 	.word	0x0800072d
 80007fc:	08000905 	.word	0x08000905
 8000800:	080008e1 	.word	0x080008e1
 8000804:	08006d24 	.word	0x08006d24
 8000808:	08006d2c 	.word	0x08006d2c
 800080c:	08006d30 	.word	0x08006d30
 8000810:	08006d34 	.word	0x08006d34

08000814 <Ethernet_Connect>:

void Ethernet_Connect(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	Init_Ethernet();
 8000818:	f7ff ffa0 	bl	800075c <Init_Ethernet>


	while(Connect_Reply !=SOCK_OK)
 800081c:	e012      	b.n	8000844 <Ethernet_Connect+0x30>
	{
		socket(0, Sn_MR_TCP, PORT_ADDR, SF_TCP_NODELAY);
 800081e:	2320      	movs	r3, #32
 8000820:	f242 328b 	movw	r2, #9099	; 0x238b
 8000824:	2101      	movs	r1, #1
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fd4c 	bl	80012c4 <socket>
		Refresh_Watchdog();
 800082c:	f000 f822 	bl	8000874 <Refresh_Watchdog>
		Connect_Reply = connect(0,server_Add,PORT_ADDR);
 8000830:	f242 328b 	movw	r2, #9099	; 0x238b
 8000834:	490d      	ldr	r1, [pc, #52]	; (800086c <Ethernet_Connect+0x58>)
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fec8 	bl	80015cc <connect>
 800083c:	4603      	mov	r3, r0
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <Ethernet_Connect+0x5c>)
 8000842:	701a      	strb	r2, [r3, #0]
	while(Connect_Reply !=SOCK_OK)
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <Ethernet_Connect+0x5c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d1e8      	bne.n	800081e <Ethernet_Connect+0xa>
	}

	if(Connect_Reply == 1)
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <Ethernet_Connect+0x5c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d102      	bne.n	800085a <Ethernet_Connect+0x46>
	{
		Connect_Reply = 0;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <Ethernet_Connect+0x5c>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
		//sprintf((char*)msg, IP_MSG, server_IP[0], server_IP[1], server_IP[2], server_IP[3]);
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Connection Established with Server ", 35, 100);
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((const char*)msg), 100);
	}
	HAL_Delay(500);
 800085a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085e:	f002 fbd7 	bl	8003010 <HAL_Delay>
	Refresh_Watchdog();
 8000862:	f000 f807 	bl	8000874 <Refresh_Watchdog>

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	200013e2 	.word	0x200013e2

08000874 <Refresh_Watchdog>:

void Refresh_Watchdog(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	IWDG->KR  = 0x0000AAAA;
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <Refresh_Watchdog+0x18>)
 800087a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40003000 	.word	0x40003000

08000890 <Get_event>:
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <Get_event+0x14>)
 8000896:	785b      	ldrb	r3, [r3, #1]
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000060 	.word	0x20000060

080008a8 <Set_event>:
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <Set_event+0x1c>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	7053      	strb	r3, [r2, #1]
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	20000060 	.word	0x20000060

080008c8 <Reset_event>:
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <Reset_event+0x14>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	705a      	strb	r2, [r3, #1]
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	20000060 	.word	0x20000060

080008e0 <spi_rb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi_rb(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi3, &rbuf, 1, 0xffffffff);
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <spi_rb+0x20>)
 80008f0:	f004 fdba 	bl	8005468 <HAL_SPI_Receive>
	return rbuf;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20001448 	.word	0x20001448

08000904 <spi_wb>:

void spi_wb(uint8_t b)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xffffffff);
 800090e:	1df9      	adds	r1, r7, #7
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	2201      	movs	r2, #1
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <spi_wb+0x20>)
 8000918:	f004 fc38 	bl	800518c <HAL_SPI_Transmit>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20001448 	.word	0x20001448

08000928 <Timer2_Stop>:

void Timer2_Stop()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <Timer2_Stop+0x10>)
 800092e:	f005 fb9b 	bl	8006068 <HAL_TIM_Base_Stop>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200014cc 	.word	0x200014cc

0800093c <Timer2_DeInitilized>:

void Timer2_DeInitilized()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <Timer2_DeInitilized+0x10>)
 8000942:	f005 fae8 	bl	8005f16 <HAL_TIM_Base_DeInit>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200014cc 	.word	0x200014cc

08000950 <Timer2_Initilized>:

void Timer2_Initilized()
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <Timer2_Initilized+0x10>)
 8000956:	f005 fa87 	bl	8005e68 <HAL_TIM_Base_Init>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200014cc 	.word	0x200014cc

08000964 <Timer2_Start>:

void Timer2_Start()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <Timer2_Start+0x10>)
 800096a:	f005 fb31 	bl	8005fd0 <HAL_TIM_Base_Start>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200014cc 	.word	0x200014cc

08000978 <Timer2_GetTimer>:

int Timer2_GetTimer()
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
	uint32_t Tim_val = __HAL_TIM_GetCounter(&htim2);
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <Timer2_GetTimer+0x1c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000984:	607b      	str	r3, [r7, #4]
	return Tim_val;
 8000986:	687b      	ldr	r3, [r7, #4]
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	200014cc 	.word	0x200014cc

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f002 fad2 	bl	8002f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f882 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 fa40 	bl	8000e28 <MX_GPIO_Init>
  MX_RTC_Init();
 80009a8:	f000 f8e6 	bl	8000b78 <MX_RTC_Init>
  MX_SPI2_Init();
 80009ac:	f000 f93e 	bl	8000c2c <MX_SPI2_Init>
  MX_SPI3_Init();
 80009b0:	f000 f97a 	bl	8000ca8 <MX_SPI3_Init>
  MX_TIM2_Init();
 80009b4:	f000 f9b6 	bl	8000d24 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80009b8:	f000 fa02 	bl	8000dc0 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(Get_state())
 80009bc:	f001 f892 	bl	8001ae4 <Get_state>
 80009c0:	4603      	mov	r3, r0
 80009c2:	3b01      	subs	r3, #1
 80009c4:	2b06      	cmp	r3, #6
 80009c6:	d8f9      	bhi.n	80009bc <main+0x24>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <main+0x38>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009ed 	.word	0x080009ed
 80009d4:	08000a01 	.word	0x08000a01
 80009d8:	08000a11 	.word	0x08000a11
 80009dc:	08000a47 	.word	0x08000a47
 80009e0:	08000a57 	.word	0x08000a57
 80009e4:	08000a67 	.word	0x08000a67
 80009e8:	08000a77 	.word	0x08000a77
	  	  {
	  	  case Initilisation_State:
	  		  Initilisation_State_Handler();
 80009ec:	f001 f896 	bl	8001b1c <Initilisation_State_Handler>

	  		  if(Get_event()==Reset_Event)
 80009f0:	f7ff ff4e 	bl	8000890 <Get_event>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d145      	bne.n	8000a86 <main+0xee>
	  		  {
	  			  Reset_State_Handler();
 80009fa:	f001 f8c5 	bl	8001b88 <Reset_State_Handler>
	  		  }
	  		  break;
 80009fe:	e042      	b.n	8000a86 <main+0xee>

	  	  case Reset_State:
	  		  if(Get_event()==Idle_Event)
 8000a00:	f7ff ff46 	bl	8000890 <Get_event>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	d13f      	bne.n	8000a8a <main+0xf2>
	  		  {
	  			  Idle_State_Handler();
 8000a0a:	f001 f903 	bl	8001c14 <Idle_State_Handler>
	  		  }
	  		  break;
 8000a0e:	e03c      	b.n	8000a8a <main+0xf2>

	  	  case Idle_State:
	  		  if(Get_event()==WRSide_Train_Detect_Event)
 8000a10:	f7ff ff3e 	bl	8000890 <Get_event>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d102      	bne.n	8000a20 <main+0x88>
	  			  //Nothing should happen in the idle state! It only polls for a change in state. Event setting and getting and state change happens WRT ISR
	  		  {
	  			  WRSide_Train_Presence_State_Handler();
 8000a1a:	f001 f90b 	bl	8001c34 <WRSide_Train_Presence_State_Handler>
 8000a1e:	e006      	b.n	8000a2e <main+0x96>
	  		  }
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
 8000a20:	f7ff ff36 	bl	8000890 <Get_event>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d101      	bne.n	8000a2e <main+0x96>
	  		  {
	  			  WLSide_Train_Presence_State_Handler();
 8000a2a:	f001 f919 	bl	8001c60 <WLSide_Train_Presence_State_Handler>
	  		  }

	  		  // Check for physical connection.
	  		  ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP); // gets physical status of the TCPIP
 8000a2e:	491d      	ldr	r1, [pc, #116]	; (8000aa4 <main+0x10c>)
 8000a30:	200f      	movs	r0, #15
 8000a32:	f001 fe45 	bl	80026c0 <ctlwizchip>

	  		  //if phy connection NOK, set state to initialization state
	  		  if(Phy_TCP_IP==PHY_LINK_OFF)
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <main+0x10c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d127      	bne.n	8000a8e <main+0xf6>
	  		  {
					//Save the status in the flash memory with date and time stamp+++++++++++++++++++++
	  			  Set_state(Initilisation_State);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f001 f85c 	bl	8001afc <Set_state>
	  		  else if(Phy_TCP_IP==PHY_LINK_ON)
	  		  {
	  			  //
	  		  }

	  		  break;
 8000a44:	e023      	b.n	8000a8e <main+0xf6>

	  	  case WRSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 8000a46:	f7ff ff23 	bl	8000890 <Get_event>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b05      	cmp	r3, #5
 8000a4e:	d120      	bne.n	8000a92 <main+0xfa>
	  		  {
	  			  Train_Exit_State_Handler();
 8000a50:	f001 f91c 	bl	8001c8c <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000a54:	e01d      	b.n	8000a92 <main+0xfa>

	  	  case WLSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 8000a56:	f7ff ff1b 	bl	8000890 <Get_event>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	d11a      	bne.n	8000a96 <main+0xfe>
	  		  {
	  			  Train_Exit_State_Handler();
 8000a60:	f001 f914 	bl	8001c8c <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000a64:	e017      	b.n	8000a96 <main+0xfe>

	  	  case Train_Exit_State:
	  		  if(Get_event()==Log_Data_Event)
 8000a66:	f7ff ff13 	bl	8000890 <Get_event>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d114      	bne.n	8000a9a <main+0x102>
	  		  {
	  			  Log_Data_State_Handler();
 8000a70:	f001 f920 	bl	8001cb4 <Log_Data_State_Handler>
	  		  }
	  		  break;
 8000a74:	e011      	b.n	8000a9a <main+0x102>

	  	  case Log_Data_State:
	  		  if(Get_event()==Reset_Event)
 8000a76:	f7ff ff0b 	bl	8000890 <Get_event>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d10e      	bne.n	8000a9e <main+0x106>
	  		  {
	  			  Reset_State_Handler();
 8000a80:	f001 f882 	bl	8001b88 <Reset_State_Handler>
	  		  }
	  		  break;
 8000a84:	e00b      	b.n	8000a9e <main+0x106>
	  		  break;
 8000a86:	bf00      	nop
 8000a88:	e798      	b.n	80009bc <main+0x24>
	  		  break;
 8000a8a:	bf00      	nop
 8000a8c:	e796      	b.n	80009bc <main+0x24>
	  		  break;
 8000a8e:	bf00      	nop
 8000a90:	e794      	b.n	80009bc <main+0x24>
	  		  break;
 8000a92:	bf00      	nop
 8000a94:	e792      	b.n	80009bc <main+0x24>
	  		  break;
 8000a96:	bf00      	nop
 8000a98:	e790      	b.n	80009bc <main+0x24>
	  		  break;
 8000a9a:	bf00      	nop
 8000a9c:	e78e      	b.n	80009bc <main+0x24>
	  		  break;
 8000a9e:	bf00      	nop
	  switch(Get_state())
 8000aa0:	e78c      	b.n	80009bc <main+0x24>
 8000aa2:	bf00      	nop
 8000aa4:	20000bd5 	.word	0x20000bd5

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09c      	sub	sp, #112	; 0x70
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f006 f8b4 	bl	8006c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f006 f8a6 	bl	8006c24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad8:	f002 fd72 	bl	80035c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000adc:	4b25      	ldr	r3, [pc, #148]	; (8000b74 <SystemClock_Config+0xcc>)
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <SystemClock_Config+0xcc>)
 8000ae2:	f023 0318 	bic.w	r3, r3, #24
 8000ae6:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000af2:	2304      	movs	r3, #4
 8000af4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000af6:	2301      	movs	r3, #1
 8000af8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	2301      	movs	r3, #1
 8000afc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000b08:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fd64 	bl	80035e0 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b1e:	f000 fae9 	bl	80010f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc56 	bl	80043f0 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b4a:	f000 fad3 	bl	80010f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b52:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b58:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fe7f 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b68:	f000 fac4 	bl	80010f4 <Error_Handler>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3770      	adds	r7, #112	; 0x70
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000

08000b78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b90:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <MX_RTC_Init+0xac>)
 8000b92:	4a25      	ldr	r2, [pc, #148]	; (8000c28 <MX_RTC_Init+0xb0>)
 8000b94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_RTC_Init+0xac>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_RTC_Init+0xac>)
 8000b9e:	227f      	movs	r2, #127	; 0x7f
 8000ba0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_RTC_Init+0xac>)
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_RTC_Init+0xac>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_RTC_Init+0xac>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_RTC_Init+0xac>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bba:	481a      	ldr	r0, [pc, #104]	; (8000c24 <MX_RTC_Init+0xac>)
 8000bbc:	f003 ffd4 	bl	8004b68 <HAL_RTC_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 fa95 	bl	80010f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2201      	movs	r2, #1
 8000be2:	4619      	mov	r1, r3
 8000be4:	480f      	ldr	r0, [pc, #60]	; (8000c24 <MX_RTC_Init+0xac>)
 8000be6:	f004 f850 	bl	8004c8a <HAL_RTC_SetTime>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000bf0:	f000 fa80 	bl	80010f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 8000bfc:	2325      	movs	r3, #37	; 0x25
 8000bfe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000c00:	2322      	movs	r3, #34	; 0x22
 8000c02:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	2201      	movs	r2, #1
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <MX_RTC_Init+0xac>)
 8000c0c:	f004 f8fa 	bl	8004e04 <HAL_RTC_SetDate>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000c16:	f000 fa6d 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200014ac 	.word	0x200014ac
 8000c28:	40002800 	.word	0x40002800

08000c2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <MX_SPI2_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c86:	2208      	movs	r2, #8
 8000c88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_SPI2_Init+0x74>)
 8000c8c:	f004 f9d3 	bl	8005036 <HAL_SPI_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 fa2d 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200013e4 	.word	0x200013e4
 8000ca4:	40003800 	.word	0x40003800

08000ca8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_SPI3_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cc6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cda:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000d02:	2208      	movs	r2, #8
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_SPI3_Init+0x74>)
 8000d08:	f004 f995 	bl	8005036 <HAL_SPI_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f9ef 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20001448 	.word	0x20001448
 8000d20:	40003c00 	.word	0x40003c00

08000d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d4c:	2245      	movs	r2, #69	; 0x45
 8000d4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF-1;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d58:	f06f 0201 	mvn.w	r2, #1
 8000d5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d6a:	4814      	ldr	r0, [pc, #80]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d6c:	f005 f87c 	bl	8005e68 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d76:	f000 f9bd 	bl	80010f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4619      	mov	r1, r3
 8000d86:	480d      	ldr	r0, [pc, #52]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000d88:	f005 f995 	bl	80060b6 <HAL_TIM_ConfigClockSource>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d92:	f000 f9af 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <MX_TIM2_Init+0x98>)
 8000da4:	f005 fb58 	bl	8006458 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dae:	f000 f9a1 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200014cc 	.word	0x200014cc

08000dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <MX_USART2_UART_Init+0x64>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000dfe:	2210      	movs	r2, #16
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_USART2_UART_Init+0x60>)
 8000e0c:	f005 fb8a 	bl	8006524 <HAL_UART_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000e16:	f000 f96d 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20001518 	.word	0x20001518
 8000e24:	40004400 	.word	0x40004400

08000e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	4b56      	ldr	r3, [pc, #344]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a55      	ldr	r2, [pc, #340]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e56:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a4f      	ldr	r2, [pc, #316]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	6153      	str	r3, [r2, #20]
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e86:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a43      	ldr	r2, [pc, #268]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <MX_GPIO_Init+0x170>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	483e      	ldr	r0, [pc, #248]	; (8000f9c <MX_GPIO_Init+0x174>)
 8000ea4:	f002 fb5c 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8000eae:	483b      	ldr	r0, [pc, #236]	; (8000f9c <MX_GPIO_Init+0x174>)
 8000eb0:	f002 fb56 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CA_OP1_Pin|LA_OP1_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f002 fb4f 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f002 fb48 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WR_IP_Pin WL_IP_Pin F_IP_Pin */
  GPIO_InitStruct.Pin = WR_IP_Pin|WL_IP_Pin|F_IP_Pin;
 8000ed0:	2323      	movs	r3, #35	; 0x23
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f002 f9c8 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_CS_Pin;
 8000eec:	2301      	movs	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4826      	ldr	r0, [pc, #152]	; (8000f9c <MX_GPIO_Init+0x174>)
 8000f04:	f002 f9ba 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_INT_Pin */
  GPIO_InitStruct.Pin = LAN_INT_Pin;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f0c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_INT_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481f      	ldr	r0, [pc, #124]	; (8000f9c <MX_GPIO_Init+0x174>)
 8000f1e:	f002 f9ad 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 CA_OP_Pin LA_OP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin;
 8000f22:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4818      	ldr	r0, [pc, #96]	; (8000f9c <MX_GPIO_Init+0x174>)
 8000f3c:	f002 f99e 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : CA_OP1_Pin LA_OP1_Pin LAN_RESET_Pin */
  GPIO_InitStruct.Pin = CA_OP1_Pin|LA_OP1_Pin|LAN_RESET_Pin;
 8000f40:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f002 f98e 	bl	800327c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	2006      	movs	r0, #6
 8000f66:	f002 f952 	bl	800320e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f002 f96b 	bl	8003246 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2007      	movs	r0, #7
 8000f76:	f002 f94a 	bl	800320e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f7a:	2007      	movs	r0, #7
 8000f7c:	f002 f963 	bl	8003246 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2017      	movs	r0, #23
 8000f86:	f002 f942 	bl	800320e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f002 f95b 	bl	8003246 <HAL_NVIC_EnableIRQ>

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	48000400 	.word	0x48000400

08000fa0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed
   */

  switch(GPIO_Pin)
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	2b1f      	cmp	r3, #31
 8000fb0:	f200 8097 	bhi.w	80010e2 <HAL_GPIO_EXTI_Callback+0x142>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <HAL_GPIO_EXTI_Callback+0x1c>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	0800103d 	.word	0x0800103d
 8000fc0:	0800107b 	.word	0x0800107b
 8000fc4:	080010e3 	.word	0x080010e3
 8000fc8:	080010d7 	.word	0x080010d7
 8000fcc:	080010e3 	.word	0x080010e3
 8000fd0:	080010e3 	.word	0x080010e3
 8000fd4:	080010e3 	.word	0x080010e3
 8000fd8:	080010e3 	.word	0x080010e3
 8000fdc:	080010e3 	.word	0x080010e3
 8000fe0:	080010e3 	.word	0x080010e3
 8000fe4:	080010e3 	.word	0x080010e3
 8000fe8:	080010e3 	.word	0x080010e3
 8000fec:	080010e3 	.word	0x080010e3
 8000ff0:	080010e3 	.word	0x080010e3
 8000ff4:	080010e3 	.word	0x080010e3
 8000ff8:	080010e3 	.word	0x080010e3
 8000ffc:	080010e3 	.word	0x080010e3
 8001000:	080010e3 	.word	0x080010e3
 8001004:	080010e3 	.word	0x080010e3
 8001008:	080010e3 	.word	0x080010e3
 800100c:	080010e3 	.word	0x080010e3
 8001010:	080010e3 	.word	0x080010e3
 8001014:	080010e3 	.word	0x080010e3
 8001018:	080010e3 	.word	0x080010e3
 800101c:	080010e3 	.word	0x080010e3
 8001020:	080010e3 	.word	0x080010e3
 8001024:	080010e3 	.word	0x080010e3
 8001028:	080010e3 	.word	0x080010e3
 800102c:	080010e3 	.word	0x080010e3
 8001030:	080010e3 	.word	0x080010e3
 8001034:	080010e3 	.word	0x080010e3
 8001038:	080010b9 	.word	0x080010b9
  {
  case WR_IP_Pin:
	  switch(Get_state()){
 800103c:	f000 fd52 	bl	8001ae4 <Get_state>
 8001040:	4603      	mov	r3, r0
 8001042:	2b05      	cmp	r3, #5
 8001044:	d00c      	beq.n	8001060 <HAL_GPIO_EXTI_Callback+0xc0>
 8001046:	2b05      	cmp	r3, #5
 8001048:	dc0d      	bgt.n	8001066 <HAL_GPIO_EXTI_Callback+0xc6>
 800104a:	2b03      	cmp	r3, #3
 800104c:	d002      	beq.n	8001054 <HAL_GPIO_EXTI_Callback+0xb4>
 800104e:	2b04      	cmp	r3, #4
 8001050:	d003      	beq.n	800105a <HAL_GPIO_EXTI_Callback+0xba>
 8001052:	e008      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0xc6>
	  case Idle_State:
		  Set_event(WRSide_Train_Detect_Event);
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff fc27 	bl	80008a8 <Set_event>
	  case WRSide_Train_Presence_State:
		  WR_Interrupt_Service();
 800105a:	f7ff f8f3 	bl	8000244 <WR_Interrupt_Service>
		  break;
 800105e:	e002      	b.n	8001066 <HAL_GPIO_EXTI_Callback+0xc6>
	  case WLSide_Train_Presence_State:
		  WR_Interrupt_Service();
 8001060:	f7ff f8f0 	bl	8000244 <WR_Interrupt_Service>
		  break;
 8001064:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)//(Counts of WL_Counts==WR_Counts)
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_GPIO_EXTI_Callback+0x14c>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x150>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d134      	bne.n	80010dc <HAL_GPIO_EXTI_Callback+0x13c>
	  {
		  Set_event(Train_Exit_Event);
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff fc18 	bl	80008a8 <Set_event>
	  }
	  break;
 8001078:	e030      	b.n	80010dc <HAL_GPIO_EXTI_Callback+0x13c>

  case WL_IP_Pin:

	  switch(Get_state()){
 800107a:	f000 fd33 	bl	8001ae4 <Get_state>
 800107e:	4603      	mov	r3, r0
 8001080:	2b05      	cmp	r3, #5
 8001082:	d00c      	beq.n	800109e <HAL_GPIO_EXTI_Callback+0xfe>
 8001084:	2b05      	cmp	r3, #5
 8001086:	dc0d      	bgt.n	80010a4 <HAL_GPIO_EXTI_Callback+0x104>
 8001088:	2b03      	cmp	r3, #3
 800108a:	d002      	beq.n	8001092 <HAL_GPIO_EXTI_Callback+0xf2>
 800108c:	2b04      	cmp	r3, #4
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_EXTI_Callback+0xf8>
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x104>
	  case Idle_State:
		  Set_event(WLSide_Train_Detect_Event);
 8001092:	2004      	movs	r0, #4
 8001094:	f7ff fc08 	bl	80008a8 <Set_event>
	  case WRSide_Train_Presence_State:
		  WL_Interrupt_Service();
 8001098:	f7ff f95e 	bl	8000358 <WL_Interrupt_Service>
		  break;
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_EXTI_Callback+0x104>
	  case WLSide_Train_Presence_State:
		  WL_Interrupt_Service();
 800109e:	f7ff f95b 	bl	8000358 <WL_Interrupt_Service>
		  break;
 80010a2:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <HAL_GPIO_EXTI_Callback+0x14c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_GPIO_EXTI_Callback+0x150>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d117      	bne.n	80010e0 <HAL_GPIO_EXTI_Callback+0x140>
	  {
		  Set_event(Train_Exit_Event);
 80010b0:	2005      	movs	r0, #5
 80010b2:	f7ff fbf9 	bl	80008a8 <Set_event>
	  }

	  break;
 80010b6:	e013      	b.n	80010e0 <HAL_GPIO_EXTI_Callback+0x140>


  case F_IP_Pin:

	  switch(Get_state())
 80010b8:	f000 fd14 	bl	8001ae4 <Get_state>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d002      	beq.n	80010c8 <HAL_GPIO_EXTI_Callback+0x128>
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_EXTI_Callback+0x12e>
		  break;
	  case WLSide_Train_Presence_State:
		  FCT_Interrupt_Service();
		  break;
	  }
	  break;
 80010c6:	e00c      	b.n	80010e2 <HAL_GPIO_EXTI_Callback+0x142>
		  FCT_Interrupt_Service();
 80010c8:	f7ff f90e 	bl	80002e8 <FCT_Interrupt_Service>
		  break;
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_EXTI_Callback+0x134>
		  FCT_Interrupt_Service();
 80010ce:	f7ff f90b 	bl	80002e8 <FCT_Interrupt_Service>
		  break;
 80010d2:	bf00      	nop
	  break;
 80010d4:	e005      	b.n	80010e2 <HAL_GPIO_EXTI_Callback+0x142>

  case LAN_INT_Pin:

	  Lan_Interrupt_Service();
 80010d6:	f7ff f87f 	bl	80001d8 <Lan_Interrupt_Service>
	  break;
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 80010dc:	bf00      	nop
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 80010e0:	bf00      	nop
  }
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000878 	.word	0x20000878
 80010f0:	200003fc 	.word	0x200003fc

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <RingInit>:
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <RingInit+0x1a>
 8001116:	f06f 0302 	mvn.w	r3, #2
 800111a:	e03b      	b.n	8001194 <RingInit+0x92>
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <RingInit+0x26>
 8001122:	f06f 0302 	mvn.w	r3, #2
 8001126:	e035      	b.n	8001194 <RingInit+0x92>
 8001128:	2220      	movs	r2, #32
 800112a:	2100      	movs	r1, #0
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f005 fd79 	bl	8006c24 <memset>
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <RingInit+0x3c>
 8001138:	f06f 0302 	mvn.w	r3, #2
 800113c:	e02a      	b.n	8001194 <RingInit+0x92>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <RingInit+0x48>
 8001144:	f06f 0301 	mvn.w	r3, #1
 8001148:	e024      	b.n	8001194 <RingInit+0x92>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	61da      	str	r2, [r3, #28]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	619a      	str	r2, [r3, #24]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	fb02 f203 	mul.w	r2, r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	69d8      	ldr	r0, [r3, #28]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	461a      	mov	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f005 fd49 	bl	8006c24 <memset>
 8001192:	2301      	movs	r3, #1
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <RingWriteElement>:
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	77fb      	strb	r3, [r7, #31]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <RingWriteElement+0x1a>
 80011b0:	f06f 0302 	mvn.w	r3, #2
 80011b4:	e03e      	b.n	8001234 <RingWriteElement+0x98>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <RingWriteElement+0x26>
 80011bc:	f06f 0302 	mvn.w	r3, #2
 80011c0:	e038      	b.n	8001234 <RingWriteElement+0x98>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <RingWriteElement+0x34>
 80011ca:	f06f 0302 	mvn.w	r3, #2
 80011ce:	e031      	b.n	8001234 <RingWriteElement+0x98>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69da      	ldr	r2, [r3, #28]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	4413      	add	r3, r2
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80011fe:	68f9      	ldr	r1, [r7, #12]
 8001200:	fb01 f202 	mul.w	r2, r1, r2
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	d00d      	beq.n	800122c <RingWriteElement+0x90>
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	68b8      	ldr	r0, [r7, #8]
 8001216:	f005 fcf7 	bl	8006c08 <memcpy>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
 800122a:	e001      	b.n	8001230 <RingWriteElement+0x94>
 800122c:	23ff      	movs	r3, #255	; 0xff
 800122e:	77fb      	strb	r3, [r7, #31]
 8001230:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001234:	4618      	mov	r0, r3
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <RingReadElement>:
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	2301      	movs	r3, #1
 8001248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	623b      	str	r3, [r7, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69da      	ldr	r2, [r3, #28]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	6a3a      	ldr	r2, [r7, #32]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	429a      	cmp	r2, r3
 800127a:	d019      	beq.n	80012b0 <RingReadElement+0x74>
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f005 fcc1 	bl	8006c08 <memcpy>
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4413      	add	r3, r2
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001292:	6979      	ldr	r1, [r7, #20]
 8001294:	fb01 f202 	mul.w	r2, r1, r2
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	3301      	adds	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	619a      	str	r2, [r3, #24]
 80012ae:	e002      	b.n	80012b6 <RingReadElement+0x7a>
 80012b0:	23fe      	movs	r3, #254	; 0xfe
 80012b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012ba:	4618      	mov	r0, r3
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <socket>:
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4604      	mov	r4, r0
 80012cc:	4608      	mov	r0, r1
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	4623      	mov	r3, r4
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	4603      	mov	r3, r0
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	460b      	mov	r3, r1
 80012dc:	80bb      	strh	r3, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	70fb      	strb	r3, [r7, #3]
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d902      	bls.n	80012ee <socket+0x2a>
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295
 80012ec:	e0f2      	b.n	80014d4 <socket+0x210>
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d005      	beq.n	8001300 <socket+0x3c>
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	dd11      	ble.n	800131c <socket+0x58>
 80012f8:	3b02      	subs	r3, #2
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d80e      	bhi.n	800131c <socket+0x58>
 80012fe:	e011      	b.n	8001324 <socket+0x60>
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2204      	movs	r2, #4
 8001306:	4619      	mov	r1, r3
 8001308:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800130c:	f000 ff2c 	bl	8002168 <WIZCHIP_READ_BUF>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d105      	bne.n	8001322 <socket+0x5e>
 8001316:	f06f 0302 	mvn.w	r3, #2
 800131a:	e0db      	b.n	80014d4 <socket+0x210>
 800131c:	f06f 0304 	mvn.w	r3, #4
 8001320:	e0d8      	b.n	80014d4 <socket+0x210>
 8001322:	bf00      	nop
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <socket+0x70>
 800132e:	f06f 0305 	mvn.w	r3, #5
 8001332:	e0cf      	b.n	80014d4 <socket+0x210>
 8001334:	78fb      	ldrb	r3, [r7, #3]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d025      	beq.n	8001386 <socket+0xc2>
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d002      	beq.n	8001346 <socket+0x82>
 8001340:	2b02      	cmp	r3, #2
 8001342:	d008      	beq.n	8001356 <socket+0x92>
 8001344:	e024      	b.n	8001390 <socket+0xcc>
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800134c:	2b00      	cmp	r3, #0
 800134e:	d11c      	bne.n	800138a <socket+0xc6>
 8001350:	f06f 0305 	mvn.w	r3, #5
 8001354:	e0be      	b.n	80014d4 <socket+0x210>
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	f003 0320 	and.w	r3, r3, #32
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <socket+0xaa>
 8001360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db02      	blt.n	800136e <socket+0xaa>
 8001368:	f06f 0305 	mvn.w	r3, #5
 800136c:	e0b2      	b.n	80014d4 <socket+0x210>
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00a      	beq.n	800138e <socket+0xca>
 8001378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800137c:	2b00      	cmp	r3, #0
 800137e:	db06      	blt.n	800138e <socket+0xca>
 8001380:	f06f 0305 	mvn.w	r3, #5
 8001384:	e0a6      	b.n	80014d4 <socket+0x210>
 8001386:	bf00      	nop
 8001388:	e002      	b.n	8001390 <socket+0xcc>
 800138a:	bf00      	nop
 800138c:	e000      	b.n	8001390 <socket+0xcc>
 800138e:	bf00      	nop
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f8ac 	bl	80014f0 <close>
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	3301      	adds	r3, #1
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013a6:	f023 030f 	bic.w	r3, r3, #15
 80013aa:	b25a      	sxtb	r2, r3
 80013ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	f000 fe88 	bl	80020cc <WIZCHIP_WRITE>
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d110      	bne.n	80013e4 <socket+0x120>
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <socket+0x218>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	b291      	uxth	r1, r2
 80013ca:	4a44      	ldr	r2, [pc, #272]	; (80014dc <socket+0x218>)
 80013cc:	8011      	strh	r1, [r2, #0]
 80013ce:	80bb      	strh	r3, [r7, #4]
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <socket+0x218>)
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80013d8:	4293      	cmp	r3, r2
 80013da:	d103      	bne.n	80013e4 <socket+0x120>
 80013dc:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <socket+0x218>)
 80013de:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80013e2:	801a      	strh	r2, [r3, #0]
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	3301      	adds	r3, #1
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013f0:	461a      	mov	r2, r3
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f000 fe65 	bl	80020cc <WIZCHIP_WRITE>
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3301      	adds	r3, #1
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800140e:	461a      	mov	r2, r3
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f000 fe58 	bl	80020cc <WIZCHIP_WRITE>
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	3301      	adds	r3, #1
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fe4e 	bl	80020cc <WIZCHIP_WRITE>
 8001430:	bf00      	nop
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	3301      	adds	r3, #1
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fdf8 	bl	8002034 <WIZCHIP_READ>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f3      	bne.n	8001432 <socket+0x16e>
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2201      	movs	r2, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	b21b      	sxth	r3, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	b21a      	sxth	r2, r3
 8001458:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <socket+0x21c>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4013      	ands	r3, r2
 8001460:	b21b      	sxth	r3, r3
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <socket+0x21c>)
 8001466:	801a      	strh	r2, [r3, #0]
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	b21a      	sxth	r2, r3
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <socket+0x21c>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <socket+0x21c>)
 8001484:	801a      	strh	r2, [r3, #0]
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2201      	movs	r2, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	b21b      	sxth	r3, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	b21a      	sxth	r2, r3
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <socket+0x220>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b21b      	sxth	r3, r3
 800149a:	4013      	ands	r3, r2
 800149c:	b21b      	sxth	r3, r3
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <socket+0x220>)
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <socket+0x224>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <socket+0x228>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	54d1      	strb	r1, [r2, r3]
 80014b6:	bf00      	nop
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	3301      	adds	r3, #1
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fdb5 	bl	8002034 <WIZCHIP_READ>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f3      	beq.n	80014b8 <socket+0x1f4>
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd90      	pop	{r4, r7, pc}
 80014dc:	20000004 	.word	0x20000004
 80014e0:	20000062 	.word	0x20000062
 80014e4:	20000064 	.word	0x20000064
 80014e8:	20000068 	.word	0x20000068
 80014ec:	20000078 	.word	0x20000078

080014f0 <close>:
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d902      	bls.n	8001506 <close+0x16>
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
 8001504:	e055      	b.n	80015b2 <close+0xc2>
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	3301      	adds	r3, #1
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001512:	2110      	movs	r1, #16
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fdd9 	bl	80020cc <WIZCHIP_WRITE>
 800151a:	bf00      	nop
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	3301      	adds	r3, #1
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fd83 	bl	8002034 <WIZCHIP_READ>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f3      	bne.n	800151c <close+0x2c>
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	3301      	adds	r3, #1
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001540:	211f      	movs	r1, #31
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fdc2 	bl	80020cc <WIZCHIP_WRITE>
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2201      	movs	r2, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	b21b      	sxth	r3, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <close+0xcc>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4013      	ands	r3, r2
 800155e:	b21b      	sxth	r3, r3
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b16      	ldr	r3, [pc, #88]	; (80015bc <close+0xcc>)
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2201      	movs	r2, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	b21b      	sxth	r3, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <close+0xd0>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	b21b      	sxth	r3, r3
 800157a:	4013      	ands	r3, r2
 800157c:	b21b      	sxth	r3, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <close+0xd0>)
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <close+0xd4>)
 8001588:	2100      	movs	r1, #0
 800158a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <close+0xd8>)
 8001592:	2100      	movs	r1, #0
 8001594:	54d1      	strb	r1, [r2, r3]
 8001596:	bf00      	nop
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	3301      	adds	r3, #1
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fd45 	bl	8002034 <WIZCHIP_READ>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f3      	bne.n	8001598 <close+0xa8>
 80015b0:	2301      	movs	r3, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000062 	.word	0x20000062
 80015c0:	20000064 	.word	0x20000064
 80015c4:	20000068 	.word	0x20000068
 80015c8:	20000078 	.word	0x20000078

080015cc <connect>:
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d902      	bls.n	80015e8 <connect+0x1c>
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e0c6      	b.n	8001776 <connect+0x1aa>
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	3301      	adds	r3, #1
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd1f 	bl	8002034 <WIZCHIP_READ>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d002      	beq.n	8001606 <connect+0x3a>
 8001600:	f06f 0304 	mvn.w	r3, #4
 8001604:	e0b7      	b.n	8001776 <connect+0x1aa>
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	3301      	adds	r3, #1
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fd0e 	bl	8002034 <WIZCHIP_READ>
 8001618:	4603      	mov	r3, r0
 800161a:	2b13      	cmp	r3, #19
 800161c:	d002      	beq.n	8001624 <connect+0x58>
 800161e:	f06f 0302 	mvn.w	r3, #2
 8001622:	e0a8      	b.n	8001776 <connect+0x1aa>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	3201      	adds	r2, #1
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	3202      	adds	r2, #2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	3203      	adds	r2, #3
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800165a:	d002      	beq.n	8001662 <connect+0x96>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <connect+0x9c>
 8001662:	f06f 030b 	mvn.w	r3, #11
 8001666:	e086      	b.n	8001776 <connect+0x1aa>
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <connect+0xa8>
 800166e:	f06f 030a 	mvn.w	r3, #10
 8001672:	e080      	b.n	8001776 <connect+0x1aa>
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	3301      	adds	r3, #1
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001680:	2204      	movs	r2, #4
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fdcf 	bl	8002228 <WIZCHIP_WRITE_BUF>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	3301      	adds	r3, #1
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001696:	461a      	mov	r2, r3
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	b29b      	uxth	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f000 fd12 	bl	80020cc <WIZCHIP_WRITE>
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	3301      	adds	r3, #1
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80016b4:	461a      	mov	r2, r3
 80016b6:	88bb      	ldrh	r3, [r7, #4]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	4610      	mov	r0, r2
 80016be:	f000 fd05 	bl	80020cc <WIZCHIP_WRITE>
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	3301      	adds	r3, #1
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016ce:	2104      	movs	r1, #4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fcfb 	bl	80020cc <WIZCHIP_WRITE>
 80016d6:	bf00      	nop
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	3301      	adds	r3, #1
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fca5 	bl	8002034 <WIZCHIP_READ>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f3      	bne.n	80016d8 <connect+0x10c>
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <connect+0x1b4>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	fa42 f303 	asr.w	r3, r2, r3
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02b      	beq.n	800175c <connect+0x190>
 8001704:	2300      	movs	r3, #0
 8001706:	e036      	b.n	8001776 <connect+0x1aa>
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	3301      	adds	r3, #1
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fc8d 	bl	8002034 <WIZCHIP_READ>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00c      	beq.n	800173e <connect+0x172>
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	3301      	adds	r3, #1
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001730:	2108      	movs	r1, #8
 8001732:	4618      	mov	r0, r3
 8001734:	f000 fcca 	bl	80020cc <WIZCHIP_WRITE>
 8001738:	f06f 030c 	mvn.w	r3, #12
 800173c:	e01b      	b.n	8001776 <connect+0x1aa>
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	3301      	adds	r3, #1
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fc72 	bl	8002034 <WIZCHIP_READ>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <connect+0x190>
 8001756:	f06f 0303 	mvn.w	r3, #3
 800175a:	e00c      	b.n	8001776 <connect+0x1aa>
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	3301      	adds	r3, #1
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fc63 	bl	8002034 <WIZCHIP_READ>
 800176e:	4603      	mov	r3, r0
 8001770:	2b17      	cmp	r3, #23
 8001772:	d1c9      	bne.n	8001708 <connect+0x13c>
 8001774:	2301      	movs	r3, #1
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000062 	.word	0x20000062

08001784 <send>:
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
 8001790:	4613      	mov	r3, r2
 8001792:	80bb      	strh	r3, [r7, #4]
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	2300      	movs	r3, #0
 800179a:	81bb      	strh	r3, [r7, #12]
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d902      	bls.n	80017a8 <send+0x24>
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e0de      	b.n	8001966 <send+0x1e2>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	3301      	adds	r3, #1
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fc3f 	bl	8002034 <WIZCHIP_READ>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d002      	beq.n	80017c6 <send+0x42>
 80017c0:	f06f 0304 	mvn.w	r3, #4
 80017c4:	e0cf      	b.n	8001966 <send+0x1e2>
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <send+0x4e>
 80017cc:	f06f 030d 	mvn.w	r3, #13
 80017d0:	e0c9      	b.n	8001966 <send+0x1e2>
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	3301      	adds	r3, #1
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fc28 	bl	8002034 <WIZCHIP_READ>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b17      	cmp	r3, #23
 80017ec:	d005      	beq.n	80017fa <send+0x76>
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b1c      	cmp	r3, #28
 80017f2:	d002      	beq.n	80017fa <send+0x76>
 80017f4:	f06f 0306 	mvn.w	r3, #6
 80017f8:	e0b5      	b.n	8001966 <send+0x1e2>
 80017fa:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <send+0x1ec>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	fa42 f303 	asr.w	r3, r2, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d039      	beq.n	8001882 <send+0xfe>
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	3301      	adds	r3, #1
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fc0a 	bl	8002034 <WIZCHIP_READ>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 031f 	and.w	r3, r3, #31
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <send+0xe2>
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	3301      	adds	r3, #1
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f000 fc43 	bl	80020cc <WIZCHIP_WRITE>
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2201      	movs	r2, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	b21b      	sxth	r3, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	b21a      	sxth	r2, r3
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <send+0x1ec>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4013      	ands	r3, r2
 800185c:	b21b      	sxth	r3, r3
 800185e:	b29a      	uxth	r2, r3
 8001860:	4b43      	ldr	r3, [pc, #268]	; (8001970 <send+0x1ec>)
 8001862:	801a      	strh	r2, [r3, #0]
 8001864:	e00d      	b.n	8001882 <send+0xfe>
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <send+0xfa>
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fe3c 	bl	80014f0 <close>
 8001878:	f06f 030c 	mvn.w	r3, #12
 800187c:	e073      	b.n	8001966 <send+0x1e2>
 800187e:	2300      	movs	r3, #0
 8001880:	e071      	b.n	8001966 <send+0x1e2>
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	3301      	adds	r3, #1
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fbd0 	bl	8002034 <WIZCHIP_READ>
 8001894:	4603      	mov	r3, r0
 8001896:	b29b      	uxth	r3, r3
 8001898:	029b      	lsls	r3, r3, #10
 800189a:	81bb      	strh	r3, [r7, #12]
 800189c:	88ba      	ldrh	r2, [r7, #4]
 800189e:	89bb      	ldrh	r3, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d901      	bls.n	80018a8 <send+0x124>
 80018a4:	89bb      	ldrh	r3, [r7, #12]
 80018a6:	80bb      	strh	r3, [r7, #4]
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fd1c 	bl	80022e8 <getSn_TX_FSR>
 80018b0:	4603      	mov	r3, r0
 80018b2:	81bb      	strh	r3, [r7, #12]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	3301      	adds	r3, #1
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fbb7 	bl	8002034 <WIZCHIP_READ>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b17      	cmp	r3, #23
 80018ce:	d009      	beq.n	80018e4 <send+0x160>
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b1c      	cmp	r3, #28
 80018d4:	d006      	beq.n	80018e4 <send+0x160>
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fe09 	bl	80014f0 <close>
 80018de:	f06f 0306 	mvn.w	r3, #6
 80018e2:	e040      	b.n	8001966 <send+0x1e2>
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <send+0x1f0>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	fa42 f303 	asr.w	r3, r2, r3
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <send+0x180>
 80018f8:	88ba      	ldrh	r2, [r7, #4]
 80018fa:	89bb      	ldrh	r3, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d901      	bls.n	8001904 <send+0x180>
 8001900:	2300      	movs	r3, #0
 8001902:	e030      	b.n	8001966 <send+0x1e2>
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	429a      	cmp	r2, r3
 800190a:	d900      	bls.n	800190e <send+0x18a>
 800190c:	e7cc      	b.n	80018a8 <send+0x124>
 800190e:	bf00      	nop
 8001910:	88ba      	ldrh	r2, [r7, #4]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fd7c 	bl	8002414 <wiz_send_data>
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	3301      	adds	r3, #1
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001928:	2120      	movs	r1, #32
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fbce 	bl	80020cc <WIZCHIP_WRITE>
 8001930:	bf00      	nop
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	3301      	adds	r3, #1
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fb78 	bl	8002034 <WIZCHIP_READ>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f3      	bne.n	8001932 <send+0x1ae>
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2201      	movs	r2, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <send+0x1ec>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b21b      	sxth	r3, r3
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <send+0x1ec>)
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000064 	.word	0x20000064
 8001974:	20000062 	.word	0x20000062

08001978 <recv>:
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
 8001984:	4613      	mov	r3, r2
 8001986:	80bb      	strh	r3, [r7, #4]
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	2300      	movs	r3, #0
 800198e:	81bb      	strh	r3, [r7, #12]
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	2b08      	cmp	r3, #8
 8001994:	d902      	bls.n	800199c <recv+0x24>
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e09c      	b.n	8001ad6 <recv+0x15e>
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	3301      	adds	r3, #1
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fb45 	bl	8002034 <WIZCHIP_READ>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d002      	beq.n	80019ba <recv+0x42>
 80019b4:	f06f 0304 	mvn.w	r3, #4
 80019b8:	e08d      	b.n	8001ad6 <recv+0x15e>
 80019ba:	88bb      	ldrh	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <recv+0x4e>
 80019c0:	f06f 030d 	mvn.w	r3, #13
 80019c4:	e087      	b.n	8001ad6 <recv+0x15e>
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	3301      	adds	r3, #1
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fb2e 	bl	8002034 <WIZCHIP_READ>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29b      	uxth	r3, r3
 80019dc:	029b      	lsls	r3, r3, #10
 80019de:	81bb      	strh	r3, [r7, #12]
 80019e0:	89ba      	ldrh	r2, [r7, #12]
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d201      	bcs.n	80019ec <recv+0x74>
 80019e8:	89bb      	ldrh	r3, [r7, #12]
 80019ea:	80bb      	strh	r3, [r7, #4]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fcc5 	bl	800237e <getSn_RX_RSR>
 80019f4:	4603      	mov	r3, r0
 80019f6:	81bb      	strh	r3, [r7, #12]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	3301      	adds	r3, #1
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fb15 	bl	8002034 <WIZCHIP_READ>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	2b17      	cmp	r3, #23
 8001a12:	d026      	beq.n	8001a62 <recv+0xea>
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b1c      	cmp	r3, #28
 8001a18:	d11c      	bne.n	8001a54 <recv+0xdc>
 8001a1a:	89bb      	ldrh	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d133      	bne.n	8001a88 <recv+0x110>
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc60 	bl	80022e8 <getSn_TX_FSR>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461c      	mov	r4, r3
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	3301      	adds	r3, #1
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fafb 	bl	8002034 <WIZCHIP_READ>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	429c      	cmp	r4, r3
 8001a44:	d10d      	bne.n	8001a62 <recv+0xea>
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fd51 	bl	80014f0 <close>
 8001a4e:	f06f 0306 	mvn.w	r3, #6
 8001a52:	e040      	b.n	8001ad6 <recv+0x15e>
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fd4a 	bl	80014f0 <close>
 8001a5c:	f06f 0306 	mvn.w	r3, #6
 8001a60:	e039      	b.n	8001ad6 <recv+0x15e>
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <recv+0x168>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	fa42 f303 	asr.w	r3, r2, r3
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <recv+0x108>
 8001a76:	89bb      	ldrh	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <recv+0x108>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e02a      	b.n	8001ad6 <recv+0x15e>
 8001a80:	89bb      	ldrh	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <recv+0x114>
 8001a86:	e7b1      	b.n	80019ec <recv+0x74>
 8001a88:	bf00      	nop
 8001a8a:	e000      	b.n	8001a8e <recv+0x116>
 8001a8c:	bf00      	nop
 8001a8e:	89ba      	ldrh	r2, [r7, #12]
 8001a90:	88bb      	ldrh	r3, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d201      	bcs.n	8001a9a <recv+0x122>
 8001a96:	89bb      	ldrh	r3, [r7, #12]
 8001a98:	80bb      	strh	r3, [r7, #4]
 8001a9a:	88ba      	ldrh	r2, [r7, #4]
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 fd13 	bl	80024cc <wiz_recv_data>
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	3301      	adds	r3, #1
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fb09 	bl	80020cc <WIZCHIP_WRITE>
 8001aba:	bf00      	nop
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fab3 	bl	8002034 <WIZCHIP_READ>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f3      	bne.n	8001abc <recv+0x144>
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000062 	.word	0x20000062

08001ae4 <Get_state>:
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <Get_state+0x14>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <Set_state>:
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <Set_state+0x1c>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	7013      	strb	r3, [r2, #0]
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	20000008 	.word	0x20000008

08001b1c <Initilisation_State_Handler>:
#include "state_Handler.h"

void Initilisation_State_Handler()
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	Set_state(Initilisation_State);
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff ffeb 	bl	8001afc <Set_state>
	Reset_event();
 8001b26:	f7fe fecf 	bl	80008c8 <Reset_event>
	//Initialize the TCPIP Connection
	Init_Ethernet();
 8001b2a:	f7fe fe17 	bl	800075c <Init_Ethernet>
	//Check the physical Connection of TCP IP
	ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP); // gets physical status of the TCPIP
 8001b2e:	4914      	ldr	r1, [pc, #80]	; (8001b80 <Initilisation_State_Handler+0x64>)
 8001b30:	200f      	movs	r0, #15
 8001b32:	f000 fdc5 	bl	80026c0 <ctlwizchip>

	if(Phy_TCP_IP==PHY_LINK_OFF)
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <Initilisation_State_Handler+0x64>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <Initilisation_State_Handler+0x2a>
	{
		//Save the status in the flash memory with date and time stamp+++++++++++++++++++++
		Set_state(Initilisation_State);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff ffdc 	bl	8001afc <Set_state>
		HAL_Delay(100);
		send(0, (buff_size *)" Init,",strlen(" Init,"));

		Set_event(Reset_Event);
	}
}
 8001b44:	e019      	b.n	8001b7a <Initilisation_State_Handler+0x5e>
	else if(Phy_TCP_IP==PHY_LINK_ON)
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <Initilisation_State_Handler+0x64>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d115      	bne.n	8001b7a <Initilisation_State_Handler+0x5e>
		HAL_Delay(500);
 8001b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b52:	f001 fa5d 	bl	8003010 <HAL_Delay>
		HAL_Delay(100);
 8001b56:	2064      	movs	r0, #100	; 0x64
 8001b58:	f001 fa5a 	bl	8003010 <HAL_Delay>
		Refresh_Watchdog();
 8001b5c:	f7fe fe8a 	bl	8000874 <Refresh_Watchdog>
		Ethernet_Connect();
 8001b60:	f7fe fe58 	bl	8000814 <Ethernet_Connect>
		HAL_Delay(100);
 8001b64:	2064      	movs	r0, #100	; 0x64
 8001b66:	f001 fa53 	bl	8003010 <HAL_Delay>
		send(0, (buff_size *)" Init,",strlen(" Init,"));
 8001b6a:	2206      	movs	r2, #6
 8001b6c:	4905      	ldr	r1, [pc, #20]	; (8001b84 <Initilisation_State_Handler+0x68>)
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fe08 	bl	8001784 <send>
		Set_event(Reset_Event);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7fe fe97 	bl	80008a8 <Set_event>
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000bd5 	.word	0x20000bd5
 8001b84:	08006d38 	.word	0x08006d38

08001b88 <Reset_State_Handler>:

void Reset_State_Handler()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
	Set_state(Reset_State);
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7ff ffb5 	bl	8001afc <Set_state>
	Reset_event();
 8001b92:	f7fe fe99 	bl	80008c8 <Reset_event>
	//Reset the RingBuffers
	RingInit(&WR_Ring,&WR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8001b96:	2304      	movs	r3, #4
 8001b98:	22c8      	movs	r2, #200	; 0xc8
 8001b9a:	4914      	ldr	r1, [pc, #80]	; (8001bec <Reset_State_Handler+0x64>)
 8001b9c:	4814      	ldr	r0, [pc, #80]	; (8001bf0 <Reset_State_Handler+0x68>)
 8001b9e:	f7ff fab0 	bl	8001102 <RingInit>
	RingInit(&WL_Ring,&WL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	22c8      	movs	r2, #200	; 0xc8
 8001ba6:	4913      	ldr	r1, [pc, #76]	; (8001bf4 <Reset_State_Handler+0x6c>)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <Reset_State_Handler+0x70>)
 8001baa:	f7ff faaa 	bl	8001102 <RingInit>
	RingInit(&FCT_Ring,&FCT_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8001bae:	2304      	movs	r3, #4
 8001bb0:	22c8      	movs	r2, #200	; 0xc8
 8001bb2:	4912      	ldr	r1, [pc, #72]	; (8001bfc <Reset_State_Handler+0x74>)
 8001bb4:	4812      	ldr	r0, [pc, #72]	; (8001c00 <Reset_State_Handler+0x78>)
 8001bb6:	f7ff faa4 	bl	8001102 <RingInit>
	//Reset the Counts
	WR_Counts=0;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <Reset_State_Handler+0x7c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
	WL_Counts=0;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <Reset_State_Handler+0x80>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
	FCT_Counts=0;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <Reset_State_Handler+0x84>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	//Reset the 32 bit timer 2
	Timer2_Stop(); //Timer Stopped
 8001bcc:	f7fe feac 	bl	8000928 <Timer2_Stop>

	Timer2_DeInitilized();//Timer DeInitilized
 8001bd0:	f7fe feb4 	bl	800093c <Timer2_DeInitilized>

	Timer2_Initilized(); //Timer Initialized
 8001bd4:	f7fe febc 	bl	8000950 <Timer2_Initilized>

	send(0, (buff_size *)" Reset,",strlen(" Reset,"));
 8001bd8:	2207      	movs	r2, #7
 8001bda:	490d      	ldr	r1, [pc, #52]	; (8001c10 <Reset_State_Handler+0x88>)
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fdd1 	bl	8001784 <send>

	//set the event to idle
	Set_event(Idle_Event);
 8001be2:	2002      	movs	r0, #2
 8001be4:	f7fe fe60 	bl	80008a8 <Set_event>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200000b8 	.word	0x200000b8
 8001bf0:	20000500 	.word	0x20000500
 8001bf4:	20000528 	.word	0x20000528
 8001bf8:	2000008c 	.word	0x2000008c
 8001bfc:	2000087c 	.word	0x2000087c
 8001c00:	20000858 	.word	0x20000858
 8001c04:	20000878 	.word	0x20000878
 8001c08:	200003fc 	.word	0x200003fc
 8001c0c:	20000524 	.word	0x20000524
 8001c10:	08006d40 	.word	0x08006d40

08001c14 <Idle_State_Handler>:

void Idle_State_Handler()
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
	//Set state to idle state
	Set_state(Idle_State);
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f7ff ff6f 	bl	8001afc <Set_state>


	send(0, (buff_size *)" Idle,",strlen(" Idle,"));
 8001c1e:	2206      	movs	r2, #6
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <Idle_State_Handler+0x1c>)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff fdae 	bl	8001784 <send>
	//reset the event
	Reset_event();
 8001c28:	f7fe fe4e 	bl	80008c8 <Reset_event>
	//
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	08006d48 	.word	0x08006d48

08001c34 <WRSide_Train_Presence_State_Handler>:

void WRSide_Train_Presence_State_Handler()
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	if(Get_state!=WRSide_Train_Presence_State)
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <WRSide_Train_Presence_State_Handler+0x24>)
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d009      	beq.n	8001c52 <WRSide_Train_Presence_State_Handler+0x1e>
	{
		//set state to WRSide Train Presence state
		Set_state(WRSide_Train_Presence_State);
 8001c3e:	2004      	movs	r0, #4
 8001c40:	f7ff ff5c 	bl	8001afc <Set_state>

		send(0, (buff_size *)" WRSide,",strlen(" WRSide,"));
 8001c44:	2208      	movs	r2, #8
 8001c46:	4905      	ldr	r1, [pc, #20]	; (8001c5c <WRSide_Train_Presence_State_Handler+0x28>)
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fd9b 	bl	8001784 <send>
		//reset the event
		Reset_event();
 8001c4e:	f7fe fe3b 	bl	80008c8 <Reset_event>
	}
	//tasks that need to be done on each WR trigger
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08001ae5 	.word	0x08001ae5
 8001c5c:	08006d50 	.word	0x08006d50

08001c60 <WLSide_Train_Presence_State_Handler>:

void WLSide_Train_Presence_State_Handler()
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
	if(Get_state!=WLSide_Train_Presence_State)
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <WLSide_Train_Presence_State_Handler+0x24>)
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d009      	beq.n	8001c7e <WLSide_Train_Presence_State_Handler+0x1e>
	{
		//set state to WLSide Train Presence state
		Set_state(WLSide_Train_Presence_State);
 8001c6a:	2005      	movs	r0, #5
 8001c6c:	f7ff ff46 	bl	8001afc <Set_state>

		send(0, (buff_size *)" WLSide,",strlen(" WLSide,"));
 8001c70:	2208      	movs	r2, #8
 8001c72:	4905      	ldr	r1, [pc, #20]	; (8001c88 <WLSide_Train_Presence_State_Handler+0x28>)
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fd85 	bl	8001784 <send>
		//reset the event
		Reset_event();
 8001c7a:	f7fe fe25 	bl	80008c8 <Reset_event>
	}
	//tasks that need to be done on each WL trigger
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	08001ae5 	.word	0x08001ae5
 8001c88:	08006d5c 	.word	0x08006d5c

08001c8c <Train_Exit_State_Handler>:

void Train_Exit_State_Handler()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	//Set state to Train Exit state
	Set_state(Train_Exit_State);
 8001c90:	2006      	movs	r0, #6
 8001c92:	f7ff ff33 	bl	8001afc <Set_state>

	send(0, (buff_size *)" Exit,",strlen(" Exit,"));
 8001c96:	2206      	movs	r2, #6
 8001c98:	4905      	ldr	r1, [pc, #20]	; (8001cb0 <Train_Exit_State_Handler+0x24>)
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	f7ff fd72 	bl	8001784 <send>
	//reset the event
	Reset_event();
 8001ca0:	f7fe fe12 	bl	80008c8 <Reset_event>
	//shut down the purge and close the shutters
	//set the event to Log Data event
	Set_event(Log_Data_Event);
 8001ca4:	2006      	movs	r0, #6
 8001ca6:	f7fe fdff 	bl	80008a8 <Set_event>
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	08006d68 	.word	0x08006d68

08001cb4 <Log_Data_State_Handler>:

void Log_Data_State_Handler()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	//Set state to Log Data state
	Set_state(Log_Data_State);
 8001cb8:	2007      	movs	r0, #7
 8001cba:	f7ff ff1f 	bl	8001afc <Set_state>

	send(0, (buff_size *)" Log,",strlen(" Log,"));
 8001cbe:	2205      	movs	r2, #5
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <Log_Data_State_Handler+0x28>)
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff fd5e 	bl	8001784 <send>
	//reset the event
	Reset_event();
 8001cc8:	f7fe fdfe 	bl	80008c8 <Reset_event>
	//send the data over TCPIP
	Send_Data();
 8001ccc:	f7fe fc72 	bl	80005b4 <Send_Data>
	//set the event to reset event
	Set_event(Reset_Event);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7fe fde9 	bl	80008a8 <Set_event>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08006d70 	.word	0x08006d70

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_MspInit+0x44>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_MspInit+0x44>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_MspInit+0x44>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_MspInit+0x44>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_MspInit+0x44>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_MspInit+0x44>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_RTC_MspInit+0x44>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d111      	bne.n	8001d5e <HAL_RTC_MspInit+0x36>
 8001d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d48:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <HAL_RTC_MspInit+0x48>)
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40002800 	.word	0x40002800
 8001d70:	10908100 	.word	0x10908100

08001d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a3d      	ldr	r2, [pc, #244]	; (8001e88 <HAL_SPI_MspInit+0x114>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d147      	bne.n	8001e26 <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4a36      	ldr	r2, [pc, #216]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db8:	6153      	str	r3, [r2, #20]
 8001dba:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	6153      	str	r3, [r2, #20]
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001dde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df0:	2305      	movs	r3, #5
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4825      	ldr	r0, [pc, #148]	; (8001e90 <HAL_SPI_MspInit+0x11c>)
 8001dfc:	f001 fa3e 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e12:	2305      	movs	r3, #5
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e20:	f001 fa2c 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e24:	e02c      	b.n	8001e80 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_SPI_MspInit+0x120>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d127      	bne.n	8001e80 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3a:	61d3      	str	r3, [r2, #28]
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e52:	6153      	str	r3, [r2, #20]
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_SPI_MspInit+0x118>)
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001e60:	2338      	movs	r3, #56	; 0x38
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e70:	2306      	movs	r3, #6
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_SPI_MspInit+0x11c>)
 8001e7c:	f001 f9fe 	bl	800327c <HAL_GPIO_Init>
}
 8001e80:	bf00      	nop
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40003800 	.word	0x40003800
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000400 	.word	0x48000400
 8001e94:	40003c00 	.word	0x40003c00

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea8:	d10b      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_TIM_Base_MspInit+0x38>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_TIM_Base_MspInit+0x38>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_TIM_Base_MspInit+0x38>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000

08001ed4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d105      	bne.n	8001ef2 <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a17      	ldr	r2, [pc, #92]	; (8001f80 <HAL_UART_MspInit+0x7c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d128      	bne.n	8001f78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0x80>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_UART_MspInit+0x80>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <HAL_UART_MspInit+0x80>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0x80>)
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_UART_MspInit+0x80>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	6153      	str	r3, [r2, #20]
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_UART_MspInit+0x80>)
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f56:	230c      	movs	r3, #12
 8001f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f66:	2307      	movs	r3, #7
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6a:	f107 0314 	add.w	r3, r7, #20
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f74:	f001 f982 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40004400 	.word	0x40004400
 8001f84:	40021000 	.word	0x40021000

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <HardFault_Handler+0x4>

08001f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <MemManage_Handler+0x4>

08001fa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa6:	e7fe      	b.n	8001fa6 <BusFault_Handler+0x4>

08001fa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler+0x4>

08001fae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fdc:	f000 fff8 	bl	8002fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f001 fad1 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f001 faca 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002004:	2020      	movs	r0, #32
 8002006:	f001 fac3 	bl	8003590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <WIZCHIP_READ>:
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <WIZCHIP_READ+0x94>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4798      	blx	r3
 8002042:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <WIZCHIP_READ+0x94>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4798      	blx	r3
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <WIZCHIP_READ+0x94>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <WIZCHIP_READ+0x24>
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <WIZCHIP_READ+0x94>)
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d114      	bne.n	8002082 <WIZCHIP_READ+0x4e>
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <WIZCHIP_READ+0x94>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	0c12      	lsrs	r2, r2, #16
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	4610      	mov	r0, r2
 8002064:	4798      	blx	r3
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <WIZCHIP_READ+0x94>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	0a12      	lsrs	r2, r2, #8
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	4610      	mov	r0, r2
 8002072:	4798      	blx	r3
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <WIZCHIP_READ+0x94>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	4610      	mov	r0, r2
 800207e:	4798      	blx	r3
 8002080:	e011      	b.n	80020a6 <WIZCHIP_READ+0x72>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0c1b      	lsrs	r3, r3, #16
 8002086:	b2db      	uxtb	r3, r3
 8002088:	733b      	strb	r3, [r7, #12]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	b2db      	uxtb	r3, r3
 8002090:	737b      	strb	r3, [r7, #13]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	73bb      	strb	r3, [r7, #14]
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <WIZCHIP_READ+0x94>)
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	f107 020c 	add.w	r2, r7, #12
 80020a0:	2103      	movs	r1, #3
 80020a2:	4610      	mov	r0, r2
 80020a4:	4798      	blx	r3
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <WIZCHIP_READ+0x94>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4798      	blx	r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	73fb      	strb	r3, [r7, #15]
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <WIZCHIP_READ+0x94>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4798      	blx	r3
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <WIZCHIP_READ+0x94>)
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4798      	blx	r3
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000010 	.word	0x20000010

080020cc <WIZCHIP_WRITE>:
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <WIZCHIP_WRITE+0x98>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4798      	blx	r3
 80020de:	4b21      	ldr	r3, [pc, #132]	; (8002164 <WIZCHIP_WRITE+0x98>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4798      	blx	r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <WIZCHIP_WRITE+0x98>)
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d119      	bne.n	8002128 <WIZCHIP_WRITE+0x5c>
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <WIZCHIP_WRITE+0x98>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	0c12      	lsrs	r2, r2, #16
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	4610      	mov	r0, r2
 8002100:	4798      	blx	r3
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <WIZCHIP_WRITE+0x98>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	0a12      	lsrs	r2, r2, #8
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	4610      	mov	r0, r2
 800210e:	4798      	blx	r3
 8002110:	4b14      	ldr	r3, [pc, #80]	; (8002164 <WIZCHIP_WRITE+0x98>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	4610      	mov	r0, r2
 800211a:	4798      	blx	r3
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <WIZCHIP_WRITE+0x98>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	4610      	mov	r0, r2
 8002124:	4798      	blx	r3
 8002126:	e013      	b.n	8002150 <WIZCHIP_WRITE+0x84>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0c1b      	lsrs	r3, r3, #16
 800212c:	b2db      	uxtb	r3, r3
 800212e:	733b      	strb	r3, [r7, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b2db      	uxtb	r3, r3
 8002136:	737b      	strb	r3, [r7, #13]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73bb      	strb	r3, [r7, #14]
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <WIZCHIP_WRITE+0x98>)
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f107 020c 	add.w	r2, r7, #12
 800214a:	2104      	movs	r1, #4
 800214c:	4610      	mov	r0, r2
 800214e:	4798      	blx	r3
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <WIZCHIP_WRITE+0x98>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	4798      	blx	r3
 8002156:	4b03      	ldr	r3, [pc, #12]	; (8002164 <WIZCHIP_WRITE+0x98>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	4798      	blx	r3
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000010 	.word	0x20000010

08002168 <WIZCHIP_READ_BUF>:
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	4613      	mov	r3, r2
 8002174:	80fb      	strh	r3, [r7, #6]
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4798      	blx	r3
 800217c:	4b29      	ldr	r3, [pc, #164]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	4798      	blx	r3
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <WIZCHIP_READ_BUF+0x2a>
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d126      	bne.n	80021e0 <WIZCHIP_READ_BUF+0x78>
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	0c12      	lsrs	r2, r2, #16
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	4610      	mov	r0, r2
 800219e:	4798      	blx	r3
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	0a12      	lsrs	r2, r2, #8
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	4610      	mov	r0, r2
 80021ac:	4798      	blx	r3
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	4610      	mov	r0, r2
 80021b8:	4798      	blx	r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	82fb      	strh	r3, [r7, #22]
 80021be:	e00a      	b.n	80021d6 <WIZCHIP_READ_BUF+0x6e>
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	8afa      	ldrh	r2, [r7, #22]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	188c      	adds	r4, r1, r2
 80021ca:	4798      	blx	r3
 80021cc:	4603      	mov	r3, r0
 80021ce:	7023      	strb	r3, [r4, #0]
 80021d0:	8afb      	ldrh	r3, [r7, #22]
 80021d2:	3301      	adds	r3, #1
 80021d4:	82fb      	strh	r3, [r7, #22]
 80021d6:	8afa      	ldrh	r2, [r7, #22]
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3f0      	bcc.n	80021c0 <WIZCHIP_READ_BUF+0x58>
 80021de:	e017      	b.n	8002210 <WIZCHIP_READ_BUF+0xa8>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	743b      	strb	r3, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	747b      	strb	r3, [r7, #17]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	74bb      	strb	r3, [r7, #18]
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	f107 0210 	add.w	r2, r7, #16
 80021fe:	2103      	movs	r1, #3
 8002200:	4610      	mov	r0, r2
 8002202:	4798      	blx	r3
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	88fa      	ldrh	r2, [r7, #6]
 800220a:	4611      	mov	r1, r2
 800220c:	68b8      	ldr	r0, [r7, #8]
 800220e:	4798      	blx	r3
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4798      	blx	r3
 8002216:	4b03      	ldr	r3, [pc, #12]	; (8002224 <WIZCHIP_READ_BUF+0xbc>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	4798      	blx	r3
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	20000010 	.word	0x20000010

08002228 <WIZCHIP_WRITE_BUF>:
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4798      	blx	r3
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	4798      	blx	r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	2b00      	cmp	r3, #0
 8002250:	d126      	bne.n	80022a0 <WIZCHIP_WRITE_BUF+0x78>
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	0c12      	lsrs	r2, r2, #16
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	4610      	mov	r0, r2
 800225e:	4798      	blx	r3
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	0a12      	lsrs	r2, r2, #8
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	4610      	mov	r0, r2
 800226c:	4798      	blx	r3
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	4610      	mov	r0, r2
 8002278:	4798      	blx	r3
 800227a:	2300      	movs	r3, #0
 800227c:	82fb      	strh	r3, [r7, #22]
 800227e:	e00a      	b.n	8002296 <WIZCHIP_WRITE_BUF+0x6e>
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	8afa      	ldrh	r2, [r7, #22]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	440a      	add	r2, r1
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	4610      	mov	r0, r2
 800228e:	4798      	blx	r3
 8002290:	8afb      	ldrh	r3, [r7, #22]
 8002292:	3301      	adds	r3, #1
 8002294:	82fb      	strh	r3, [r7, #22]
 8002296:	8afa      	ldrh	r2, [r7, #22]
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	429a      	cmp	r2, r3
 800229c:	d3f0      	bcc.n	8002280 <WIZCHIP_WRITE_BUF+0x58>
 800229e:	e017      	b.n	80022d0 <WIZCHIP_WRITE_BUF+0xa8>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	743b      	strb	r3, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	747b      	strb	r3, [r7, #17]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	74bb      	strb	r3, [r7, #18]
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f107 0210 	add.w	r2, r7, #16
 80022be:	2103      	movs	r1, #3
 80022c0:	4610      	mov	r0, r2
 80022c2:	4798      	blx	r3
 80022c4:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	88fa      	ldrh	r2, [r7, #6]
 80022ca:	4611      	mov	r1, r2
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	4798      	blx	r3
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	4798      	blx	r3
 80022d6:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	4798      	blx	r3
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000010 	.word	0x20000010

080022e8 <getSn_TX_FSR>:
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	2300      	movs	r3, #0
 80022f4:	81fb      	strh	r3, [r7, #14]
 80022f6:	2300      	movs	r3, #0
 80022f8:	81bb      	strh	r3, [r7, #12]
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	3301      	adds	r3, #1
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fe94 	bl	8002034 <WIZCHIP_READ>
 800230c:	4603      	mov	r3, r0
 800230e:	81bb      	strh	r3, [r7, #12]
 8002310:	89bb      	ldrh	r3, [r7, #12]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	b29c      	uxth	r4, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	3301      	adds	r3, #1
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fe86 	bl	8002034 <WIZCHIP_READ>
 8002328:	4603      	mov	r3, r0
 800232a:	b29b      	uxth	r3, r3
 800232c:	4423      	add	r3, r4
 800232e:	81bb      	strh	r3, [r7, #12]
 8002330:	89bb      	ldrh	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01a      	beq.n	800236c <getSn_TX_FSR+0x84>
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	3301      	adds	r3, #1
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fe76 	bl	8002034 <WIZCHIP_READ>
 8002348:	4603      	mov	r3, r0
 800234a:	81fb      	strh	r3, [r7, #14]
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b29c      	uxth	r4, r3
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	3301      	adds	r3, #1
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe68 	bl	8002034 <WIZCHIP_READ>
 8002364:	4603      	mov	r3, r0
 8002366:	b29b      	uxth	r3, r3
 8002368:	4423      	add	r3, r4
 800236a:	81fb      	strh	r3, [r7, #14]
 800236c:	89fa      	ldrh	r2, [r7, #14]
 800236e:	89bb      	ldrh	r3, [r7, #12]
 8002370:	429a      	cmp	r2, r3
 8002372:	d1c2      	bne.n	80022fa <getSn_TX_FSR+0x12>
 8002374:	89fb      	ldrh	r3, [r7, #14]
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bd90      	pop	{r4, r7, pc}

0800237e <getSn_RX_RSR>:
 800237e:	b590      	push	{r4, r7, lr}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	2300      	movs	r3, #0
 800238a:	81fb      	strh	r3, [r7, #14]
 800238c:	2300      	movs	r3, #0
 800238e:	81bb      	strh	r3, [r7, #12]
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	3301      	adds	r3, #1
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fe49 	bl	8002034 <WIZCHIP_READ>
 80023a2:	4603      	mov	r3, r0
 80023a4:	81bb      	strh	r3, [r7, #12]
 80023a6:	89bb      	ldrh	r3, [r7, #12]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b29c      	uxth	r4, r3
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	3301      	adds	r3, #1
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fe3b 	bl	8002034 <WIZCHIP_READ>
 80023be:	4603      	mov	r3, r0
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	4423      	add	r3, r4
 80023c4:	81bb      	strh	r3, [r7, #12]
 80023c6:	89bb      	ldrh	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01a      	beq.n	8002402 <getSn_RX_RSR+0x84>
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	3301      	adds	r3, #1
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe2b 	bl	8002034 <WIZCHIP_READ>
 80023de:	4603      	mov	r3, r0
 80023e0:	81fb      	strh	r3, [r7, #14]
 80023e2:	89fb      	ldrh	r3, [r7, #14]
 80023e4:	021b      	lsls	r3, r3, #8
 80023e6:	b29c      	uxth	r4, r3
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	3301      	adds	r3, #1
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe1d 	bl	8002034 <WIZCHIP_READ>
 80023fa:	4603      	mov	r3, r0
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	4423      	add	r3, r4
 8002400:	81fb      	strh	r3, [r7, #14]
 8002402:	89fa      	ldrh	r2, [r7, #14]
 8002404:	89bb      	ldrh	r3, [r7, #12]
 8002406:	429a      	cmp	r2, r3
 8002408:	d1c2      	bne.n	8002390 <getSn_RX_RSR+0x12>
 800240a:	89fb      	ldrh	r3, [r7, #14]
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}

08002414 <wiz_send_data>:
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
 8002420:	4613      	mov	r3, r2
 8002422:	80bb      	strh	r3, [r7, #4]
 8002424:	2300      	movs	r3, #0
 8002426:	81fb      	strh	r3, [r7, #14]
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	88bb      	ldrh	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d048      	beq.n	80024c4 <wiz_send_data+0xb0>
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	3301      	adds	r3, #1
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fdf8 	bl	8002034 <WIZCHIP_READ>
 8002444:	4603      	mov	r3, r0
 8002446:	b29b      	uxth	r3, r3
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b29c      	uxth	r4, r3
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3301      	adds	r3, #1
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fdeb 	bl	8002034 <WIZCHIP_READ>
 800245e:	4603      	mov	r3, r0
 8002460:	b29b      	uxth	r3, r3
 8002462:	4423      	add	r3, r4
 8002464:	81fb      	strh	r3, [r7, #14]
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	3202      	adds	r2, #2
 8002470:	00d2      	lsls	r2, r2, #3
 8002472:	4413      	add	r3, r2
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	461a      	mov	r2, r3
 800247a:	6839      	ldr	r1, [r7, #0]
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f7ff fed3 	bl	8002228 <WIZCHIP_WRITE_BUF>
 8002482:	89fa      	ldrh	r2, [r7, #14]
 8002484:	88bb      	ldrh	r3, [r7, #4]
 8002486:	4413      	add	r3, r2
 8002488:	81fb      	strh	r3, [r7, #14]
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	3301      	adds	r3, #1
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002496:	461a      	mov	r2, r3
 8002498:	89fb      	ldrh	r3, [r7, #14]
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	b29b      	uxth	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7ff fe12 	bl	80020cc <WIZCHIP_WRITE>
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	3301      	adds	r3, #1
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80024b4:	461a      	mov	r2, r3
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f7ff fe05 	bl	80020cc <WIZCHIP_WRITE>
 80024c2:	e000      	b.n	80024c6 <wiz_send_data+0xb2>
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <wiz_recv_data>:
 80024cc:	b590      	push	{r4, r7, lr}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	80bb      	strh	r3, [r7, #4]
 80024dc:	2300      	movs	r3, #0
 80024de:	81fb      	strh	r3, [r7, #14]
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	88bb      	ldrh	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d048      	beq.n	800257c <wiz_recv_data+0xb0>
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	3301      	adds	r3, #1
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fd9c 	bl	8002034 <WIZCHIP_READ>
 80024fc:	4603      	mov	r3, r0
 80024fe:	b29b      	uxth	r3, r3
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b29c      	uxth	r4, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	3301      	adds	r3, #1
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fd8f 	bl	8002034 <WIZCHIP_READ>
 8002516:	4603      	mov	r3, r0
 8002518:	b29b      	uxth	r3, r3
 800251a:	4423      	add	r3, r4
 800251c:	81fb      	strh	r3, [r7, #14]
 800251e:	89fb      	ldrh	r3, [r7, #14]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	79fa      	ldrb	r2, [r7, #7]
 8002524:	0092      	lsls	r2, r2, #2
 8002526:	3203      	adds	r2, #3
 8002528:	00d2      	lsls	r2, r2, #3
 800252a:	4413      	add	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	88bb      	ldrh	r3, [r7, #4]
 8002530:	461a      	mov	r2, r3
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	68b8      	ldr	r0, [r7, #8]
 8002536:	f7ff fe17 	bl	8002168 <WIZCHIP_READ_BUF>
 800253a:	89fa      	ldrh	r2, [r7, #14]
 800253c:	88bb      	ldrh	r3, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	81fb      	strh	r3, [r7, #14]
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	3301      	adds	r3, #1
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800254e:	461a      	mov	r2, r3
 8002550:	89fb      	ldrh	r3, [r7, #14]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	b29b      	uxth	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f7ff fdb6 	bl	80020cc <WIZCHIP_WRITE>
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	3301      	adds	r3, #1
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800256c:	461a      	mov	r2, r3
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff fda9 	bl	80020cc <WIZCHIP_WRITE>
 800257a:	e000      	b.n	800257e <wiz_recv_data+0xb2>
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}

08002584 <wizchip_cris_enter>:
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <wizchip_cris_exit>:
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <wizchip_cs_select>:
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <wizchip_cs_deselect>:
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <wizchip_bus_readdata>:
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <wizchip_bus_writedata>:
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	70fb      	strb	r3, [r7, #3]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <wizchip_spi_readbyte>:
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	2300      	movs	r3, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <wizchip_spi_writebyte>:
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <reg_wizchip_cs_cbfunc>:
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <reg_wizchip_cs_cbfunc+0x16>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <reg_wizchip_cs_cbfunc+0x24>
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <reg_wizchip_cs_cbfunc+0x40>)
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <reg_wizchip_cs_cbfunc+0x44>)
 8002636:	615a      	str	r2, [r3, #20]
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <reg_wizchip_cs_cbfunc+0x40>)
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <reg_wizchip_cs_cbfunc+0x48>)
 800263c:	619a      	str	r2, [r3, #24]
 800263e:	e006      	b.n	800264e <reg_wizchip_cs_cbfunc+0x32>
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <reg_wizchip_cs_cbfunc+0x40>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6153      	str	r3, [r2, #20]
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <reg_wizchip_cs_cbfunc+0x40>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000010 	.word	0x20000010
 8002660:	080025a1 	.word	0x080025a1
 8002664:	080025af 	.word	0x080025af

08002668 <reg_wizchip_spi_cbfunc>:
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	bf00      	nop
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f9      	beq.n	8002674 <reg_wizchip_spi_cbfunc+0xc>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <reg_wizchip_spi_cbfunc+0x24>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <reg_wizchip_spi_cbfunc+0x32>
 800268c:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <reg_wizchip_spi_cbfunc+0x50>)
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8002694:	4a09      	ldr	r2, [pc, #36]	; (80026bc <reg_wizchip_spi_cbfunc+0x54>)
 8002696:	621a      	str	r2, [r3, #32]
 8002698:	e006      	b.n	80026a8 <reg_wizchip_spi_cbfunc+0x40>
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	61d3      	str	r3, [r2, #28]
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <reg_wizchip_spi_cbfunc+0x4c>)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	20000010 	.word	0x20000010
 80026b8:	080025f5 	.word	0x080025f5
 80026bc:	08002605 	.word	0x08002605

080026c0 <ctlwizchip>:
 80026c0:	b590      	push	{r4, r7, lr}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	6039      	str	r1, [r7, #0]
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	2300      	movs	r3, #0
 80026ce:	75fb      	strb	r3, [r7, #23]
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f200 80c2 	bhi.w	8002864 <ctlwizchip+0x1a4>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <ctlwizchip+0x28>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	08002729 	.word	0x08002729
 80026ec:	0800272f 	.word	0x0800272f
 80026f0:	0800275b 	.word	0x0800275b
 80026f4:	0800274f 	.word	0x0800274f
 80026f8:	08002769 	.word	0x08002769
 80026fc:	08002775 	.word	0x08002775
 8002700:	08002783 	.word	0x08002783
 8002704:	080027a9 	.word	0x080027a9
 8002708:	080027cf 	.word	0x080027cf
 800270c:	08002809 	.word	0x08002809
 8002710:	0800280f 	.word	0x0800280f
 8002714:	08002817 	.word	0x08002817
 8002718:	0800286b 	.word	0x0800286b
 800271c:	0800281f 	.word	0x0800281f
 8002720:	0800282d 	.word	0x0800282d
 8002724:	08002849 	.word	0x08002849
 8002728:	f000 f8a8 	bl	800287c <wizchip_sw_reset>
 800272c:	e09e      	b.n	800286c <ctlwizchip+0x1ac>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <ctlwizchip+0x7e>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3308      	adds	r3, #8
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f8e5 	bl	8002914 <wizchip_init>
 800274a:	4603      	mov	r3, r0
 800274c:	e08f      	b.n	800286e <ctlwizchip+0x1ae>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f96a 	bl	8002a2c <wizchip_clrinterrupt>
 8002758:	e088      	b.n	800286c <ctlwizchip+0x1ac>
 800275a:	f000 f99b 	bl	8002a94 <wizchip_getinterrupt>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	801a      	strh	r2, [r3, #0]
 8002766:	e081      	b.n	800286c <ctlwizchip+0x1ac>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f9b6 	bl	8002ade <wizchip_setinterruptmask>
 8002772:	e07b      	b.n	800286c <ctlwizchip+0x1ac>
 8002774:	f000 f9ce 	bl	8002b14 <wizchip_getinterruptmask>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	801a      	strh	r2, [r3, #0]
 8002780:	e074      	b.n	800286c <ctlwizchip+0x1ac>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	b29b      	uxth	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	4619      	mov	r1, r3
 800278e:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002792:	f7ff fc9b 	bl	80020cc <WIZCHIP_WRITE>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80027a2:	f7ff fc93 	bl	80020cc <WIZCHIP_WRITE>
 80027a6:	e061      	b.n	800286c <ctlwizchip+0x1ac>
 80027a8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80027ac:	f7ff fc42 	bl	8002034 <WIZCHIP_READ>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b29c      	uxth	r4, r3
 80027b8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80027bc:	f7ff fc3a 	bl	8002034 <WIZCHIP_READ>
 80027c0:	4603      	mov	r3, r0
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4423      	add	r3, r4
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e04e      	b.n	800286c <ctlwizchip+0x1ac>
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <ctlwizchip+0x1b8>)
 80027d0:	789a      	ldrb	r2, [r3, #2]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	4a27      	ldr	r2, [pc, #156]	; (8002878 <ctlwizchip+0x1b8>)
 80027dc:	78d2      	ldrb	r2, [r2, #3]
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	3302      	adds	r3, #2
 80027e4:	4a24      	ldr	r2, [pc, #144]	; (8002878 <ctlwizchip+0x1b8>)
 80027e6:	7912      	ldrb	r2, [r2, #4]
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3303      	adds	r3, #3
 80027ee:	4a22      	ldr	r2, [pc, #136]	; (8002878 <ctlwizchip+0x1b8>)
 80027f0:	7952      	ldrb	r2, [r2, #5]
 80027f2:	701a      	strb	r2, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <ctlwizchip+0x1b8>)
 80027fa:	7992      	ldrb	r2, [r2, #6]
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3305      	adds	r3, #5
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e031      	b.n	800286c <ctlwizchip+0x1ac>
 8002808:	f000 f9d6 	bl	8002bb8 <wizphy_reset>
 800280c:	e02e      	b.n	800286c <ctlwizchip+0x1ac>
 800280e:	6838      	ldr	r0, [r7, #0]
 8002810:	f000 f9f9 	bl	8002c06 <wizphy_setphyconf>
 8002814:	e02a      	b.n	800286c <ctlwizchip+0x1ac>
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f000 fa37 	bl	8002c8a <wizphy_getphyconf>
 800281c:	e026      	b.n	800286c <ctlwizchip+0x1ac>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fa9a 	bl	8002d5c <wizphy_setphypmode>
 8002828:	4603      	mov	r3, r0
 800282a:	e020      	b.n	800286e <ctlwizchip+0x1ae>
 800282c:	f000 f9ab 	bl	8002b86 <wizphy_getphypmode>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d102      	bne.n	8002840 <ctlwizchip+0x180>
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	e016      	b.n	800286e <ctlwizchip+0x1ae>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7dfa      	ldrb	r2, [r7, #23]
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e011      	b.n	800286c <ctlwizchip+0x1ac>
 8002848:	f000 f987 	bl	8002b5a <wizphy_getphylink>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2bff      	cmp	r3, #255	; 0xff
 8002854:	d102      	bne.n	800285c <ctlwizchip+0x19c>
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	e008      	b.n	800286e <ctlwizchip+0x1ae>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	7dfa      	ldrb	r2, [r7, #23]
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e003      	b.n	800286c <ctlwizchip+0x1ac>
 8002864:	f04f 33ff 	mov.w	r3, #4294967295
 8002868:	e001      	b.n	800286e <ctlwizchip+0x1ae>
 800286a:	bf00      	nop
 800286c:	2300      	movs	r3, #0
 800286e:	4618      	mov	r0, r3
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
 8002876:	bf00      	nop
 8002878:	20000010 	.word	0x20000010

0800287c <wizchip_sw_reset>:
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2206      	movs	r2, #6
 8002886:	4619      	mov	r1, r3
 8002888:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800288c:	f7ff fc6c 	bl	8002168 <WIZCHIP_READ_BUF>
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	2204      	movs	r2, #4
 8002896:	4619      	mov	r1, r3
 8002898:	f44f 7080 	mov.w	r0, #256	; 0x100
 800289c:	f7ff fc64 	bl	8002168 <WIZCHIP_READ_BUF>
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	2204      	movs	r2, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80028ac:	f7ff fc5c 	bl	8002168 <WIZCHIP_READ_BUF>
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	2204      	movs	r2, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80028bc:	f7ff fc54 	bl	8002168 <WIZCHIP_READ_BUF>
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7ff fc02 	bl	80020cc <WIZCHIP_WRITE>
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff fbb3 	bl	8002034 <WIZCHIP_READ>
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2206      	movs	r2, #6
 80028d2:	4619      	mov	r1, r3
 80028d4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80028d8:	f7ff fca6 	bl	8002228 <WIZCHIP_WRITE_BUF>
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2204      	movs	r2, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028e8:	f7ff fc9e 	bl	8002228 <WIZCHIP_WRITE_BUF>
 80028ec:	f107 0310 	add.w	r3, r7, #16
 80028f0:	2204      	movs	r2, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80028f8:	f7ff fc96 	bl	8002228 <WIZCHIP_WRITE_BUF>
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	2204      	movs	r2, #4
 8002902:	4619      	mov	r1, r3
 8002904:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002908:	f7ff fc8e 	bl	8002228 <WIZCHIP_WRITE_BUF>
 800290c:	bf00      	nop
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <wizchip_init>:
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	73bb      	strb	r3, [r7, #14]
 8002922:	f7ff ffab 	bl	800287c <wizchip_sw_reset>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d03b      	beq.n	80029a4 <wizchip_init+0x90>
 800292c:	2300      	movs	r3, #0
 800292e:	73bb      	strb	r3, [r7, #14]
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e015      	b.n	8002962 <wizchip_init+0x4e>
 8002936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	4413      	add	r3, r2
 8002944:	b2db      	uxtb	r3, r3
 8002946:	73bb      	strb	r3, [r7, #14]
 8002948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800294c:	2b10      	cmp	r3, #16
 800294e:	dd02      	ble.n	8002956 <wizchip_init+0x42>
 8002950:	f04f 33ff 	mov.w	r3, #4294967295
 8002954:	e066      	b.n	8002a24 <wizchip_init+0x110>
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002966:	2b07      	cmp	r3, #7
 8002968:	dde5      	ble.n	8002936 <wizchip_init+0x22>
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
 800296e:	e015      	b.n	800299c <wizchip_init+0x88>
 8002970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	3301      	adds	r3, #1
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800297e:	4618      	mov	r0, r3
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4619      	mov	r1, r3
 800298c:	f7ff fb9e 	bl	80020cc <WIZCHIP_WRITE>
 8002990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	dde5      	ble.n	8002970 <wizchip_init+0x5c>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d03b      	beq.n	8002a22 <wizchip_init+0x10e>
 80029aa:	2300      	movs	r3, #0
 80029ac:	73bb      	strb	r3, [r7, #14]
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e015      	b.n	80029e0 <wizchip_init+0xcc>
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	7bbb      	ldrb	r3, [r7, #14]
 80029c0:	4413      	add	r3, r2
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	73bb      	strb	r3, [r7, #14]
 80029c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	dd02      	ble.n	80029d4 <wizchip_init+0xc0>
 80029ce:	f04f 33ff 	mov.w	r3, #4294967295
 80029d2:	e027      	b.n	8002a24 <wizchip_init+0x110>
 80029d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3301      	adds	r3, #1
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e4:	2b07      	cmp	r3, #7
 80029e6:	dde5      	ble.n	80029b4 <wizchip_init+0xa0>
 80029e8:	2300      	movs	r3, #0
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	e015      	b.n	8002a1a <wizchip_init+0x106>
 80029ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3301      	adds	r3, #1
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80029fc:	4618      	mov	r0, r3
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	4413      	add	r3, r2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7ff fb5f 	bl	80020cc <WIZCHIP_WRITE>
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	2b07      	cmp	r3, #7
 8002a20:	dde5      	ble.n	80029ee <wizchip_init+0xda>
 8002a22:	2300      	movs	r3, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <wizchip_clrinterrupt>:
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	73fb      	strb	r3, [r7, #15]
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	73bb      	strb	r3, [r7, #14]
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	f023 030f 	bic.w	r3, r3, #15
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002a50:	f7ff fb3c 	bl	80020cc <WIZCHIP_WRITE>
 8002a54:	2300      	movs	r3, #0
 8002a56:	73fb      	strb	r3, [r7, #15]
 8002a58:	e014      	b.n	8002a84 <wizchip_clrinterrupt+0x58>
 8002a5a:	7bba      	ldrb	r2, [r7, #14]
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	fa42 f303 	asr.w	r3, r2, r3
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d009      	beq.n	8002a7e <wizchip_clrinterrupt+0x52>
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	3301      	adds	r3, #1
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002a76:	211f      	movs	r1, #31
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fb27 	bl	80020cc <WIZCHIP_WRITE>
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	3301      	adds	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b07      	cmp	r3, #7
 8002a88:	d9e7      	bls.n	8002a5a <wizchip_clrinterrupt+0x2e>
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <wizchip_getinterrupt>:
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	71fb      	strb	r3, [r7, #7]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	71bb      	strb	r3, [r7, #6]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	80bb      	strh	r3, [r7, #4]
 8002aa6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002aaa:	f7ff fac3 	bl	8002034 <WIZCHIP_READ>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f023 030f 	bic.w	r3, r3, #15
 8002ab4:	71fb      	strb	r3, [r7, #7]
 8002ab6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002aba:	f7ff fabb 	bl	8002034 <WIZCHIP_READ>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71bb      	strb	r3, [r7, #6]
 8002ac2:	79bb      	ldrb	r3, [r7, #6]
 8002ac4:	80bb      	strh	r3, [r7, #4]
 8002ac6:	88bb      	ldrh	r3, [r7, #4]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	80bb      	strh	r3, [r7, #4]
 8002ad4:	88bb      	ldrh	r3, [r7, #4]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <wizchip_setinterruptmask>:
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	80fb      	strh	r3, [r7, #6]
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	73bb      	strb	r3, [r7, #14]
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002afc:	f7ff fae6 	bl	80020cc <WIZCHIP_WRITE>
 8002b00:	7bbb      	ldrb	r3, [r7, #14]
 8002b02:	4619      	mov	r1, r3
 8002b04:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002b08:	f7ff fae0 	bl	80020cc <WIZCHIP_WRITE>
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <wizchip_getinterruptmask>:
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	71fb      	strb	r3, [r7, #7]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	71bb      	strb	r3, [r7, #6]
 8002b22:	2300      	movs	r3, #0
 8002b24:	80bb      	strh	r3, [r7, #4]
 8002b26:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002b2a:	f7ff fa83 	bl	8002034 <WIZCHIP_READ>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
 8002b32:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002b36:	f7ff fa7d 	bl	8002034 <WIZCHIP_READ>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	71bb      	strb	r3, [r7, #6]
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	80bb      	strh	r3, [r7, #4]
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	80bb      	strh	r3, [r7, #4]
 8002b50:	88bb      	ldrh	r3, [r7, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <wizphy_getphylink>:
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	2300      	movs	r3, #0
 8002b62:	71fb      	strb	r3, [r7, #7]
 8002b64:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b68:	f7ff fa64 	bl	8002034 <WIZCHIP_READ>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <wizphy_getphylink+0x20>
 8002b76:	2301      	movs	r3, #1
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <wizphy_getphypmode>:
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	71fb      	strb	r3, [r7, #7]
 8002b90:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002b94:	f7ff fa4e 	bl	8002034 <WIZCHIP_READ>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9e:	2b30      	cmp	r3, #48	; 0x30
 8002ba0:	d102      	bne.n	8002ba8 <wizphy_getphypmode+0x22>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	71fb      	strb	r3, [r7, #7]
 8002ba6:	e001      	b.n	8002bac <wizphy_getphypmode+0x26>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	71fb      	strb	r3, [r7, #7]
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <wizphy_reset>:
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002bc2:	f7ff fa37 	bl	8002034 <WIZCHIP_READ>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd0:	71fb      	strb	r3, [r7, #7]
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002bda:	f7ff fa77 	bl	80020cc <WIZCHIP_WRITE>
 8002bde:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002be2:	f7ff fa27 	bl	8002034 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bf0:	71fb      	strb	r3, [r7, #7]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002bfa:	f7ff fa67 	bl	80020cc <WIZCHIP_WRITE>
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <wizphy_setphyconf>:
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d104      	bne.n	8002c24 <wizphy_setphyconf+0x1e>
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c20:	73fb      	strb	r3, [r7, #15]
 8002c22:	e003      	b.n	8002c2c <wizphy_setphyconf+0x26>
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d104      	bne.n	8002c3e <wizphy_setphyconf+0x38>
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	e019      	b.n	8002c72 <wizphy_setphyconf+0x6c>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	78db      	ldrb	r3, [r3, #3]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10d      	bne.n	8002c62 <wizphy_setphyconf+0x5c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	789b      	ldrb	r3, [r3, #2]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d104      	bne.n	8002c58 <wizphy_setphyconf+0x52>
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	f043 0318 	orr.w	r3, r3, #24
 8002c54:	73fb      	strb	r3, [r7, #15]
 8002c56:	e00c      	b.n	8002c72 <wizphy_setphyconf+0x6c>
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	e007      	b.n	8002c72 <wizphy_setphyconf+0x6c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	789b      	ldrb	r3, [r3, #2]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d103      	bne.n	8002c72 <wizphy_setphyconf+0x6c>
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	f043 0310 	orr.w	r3, r3, #16
 8002c70:	73fb      	strb	r3, [r7, #15]
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c7a:	f7ff fa27 	bl	80020cc <WIZCHIP_WRITE>
 8002c7e:	f7ff ff9b 	bl	8002bb8 <wizphy_reset>
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <wizphy_getphyconf>:
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002c9a:	f7ff f9cb 	bl	8002034 <WIZCHIP_READ>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	73fb      	strb	r3, [r7, #15]
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	119b      	asrs	r3, r3, #6
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d001      	beq.n	8002cc0 <wizphy_getphyconf+0x36>
 8002cbc:	2b38      	cmp	r3, #56	; 0x38
 8002cbe:	d103      	bne.n	8002cc8 <wizphy_getphyconf+0x3e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e003      	b.n	8002cd0 <wizphy_getphyconf+0x46>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
 8002cce:	bf00      	nop
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd6:	3b10      	subs	r3, #16
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	bf8c      	ite	hi
 8002cdc:	2201      	movhi	r2, #1
 8002cde:	2200      	movls	r2, #0
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	2a00      	cmp	r2, #0
 8002ce4:	d111      	bne.n	8002d0a <wizphy_getphyconf+0x80>
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf14      	ite	ne
 8002cf8:	2301      	movne	r3, #1
 8002cfa:	2300      	moveq	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <wizphy_getphyconf+0x80>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	709a      	strb	r2, [r3, #2]
 8002d08:	e003      	b.n	8002d12 <wizphy_getphyconf+0x88>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	709a      	strb	r2, [r3, #2]
 8002d10:	bf00      	nop
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d18:	3b08      	subs	r3, #8
 8002d1a:	2b18      	cmp	r3, #24
 8002d1c:	bf8c      	ite	hi
 8002d1e:	2201      	movhi	r2, #1
 8002d20:	2200      	movls	r2, #0
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	2a00      	cmp	r2, #0
 8002d26:	d111      	bne.n	8002d4c <wizphy_getphyconf+0xc2>
 8002d28:	2201      	movs	r2, #1
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bf14      	ite	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	2300      	moveq	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <wizphy_getphyconf+0xc2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	70da      	strb	r2, [r3, #3]
 8002d4a:	e003      	b.n	8002d54 <wizphy_getphyconf+0xca>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	70da      	strb	r2, [r3, #3]
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <wizphy_setphypmode>:
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d6e:	f7ff f961 	bl	8002034 <WIZCHIP_READ>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <wizphy_setphypmode+0x2a>
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	e030      	b.n	8002de8 <wizphy_setphypmode+0x8c>
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d104      	bne.n	8002d9e <wizphy_setphypmode+0x42>
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e003      	b.n	8002da6 <wizphy_setphypmode+0x4a>
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002dae:	f7ff f98d 	bl	80020cc <WIZCHIP_WRITE>
 8002db2:	f7ff ff01 	bl	8002bb8 <wizphy_reset>
 8002db6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002dba:	f7ff f93b 	bl	8002034 <WIZCHIP_READ>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <wizphy_setphypmode+0x7a>
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <wizphy_setphypmode+0x88>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e008      	b.n	8002de8 <wizphy_setphypmode+0x8c>
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <wizphy_setphypmode+0x88>
 8002de0:	2300      	movs	r3, #0
 8002de2:	e001      	b.n	8002de8 <wizphy_setphypmode+0x8c>
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <wizchip_setnetinfo>:
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2206      	movs	r2, #6
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002e02:	f7ff fa11 	bl	8002228 <WIZCHIP_WRITE_BUF>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	330e      	adds	r3, #14
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e12:	f7ff fa09 	bl	8002228 <WIZCHIP_WRITE_BUF>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	330a      	adds	r3, #10
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002e22:	f7ff fa01 	bl	8002228 <WIZCHIP_WRITE_BUF>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3306      	adds	r3, #6
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002e32:	f7ff f9f9 	bl	8002228 <WIZCHIP_WRITE_BUF>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7c9a      	ldrb	r2, [r3, #18]
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <wizchip_setnetinfo+0x78>)
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7cda      	ldrb	r2, [r3, #19]
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <wizchip_setnetinfo+0x78>)
 8002e44:	705a      	strb	r2, [r3, #1]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	7d1a      	ldrb	r2, [r3, #20]
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <wizchip_setnetinfo+0x78>)
 8002e4c:	709a      	strb	r2, [r3, #2]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7d5a      	ldrb	r2, [r3, #21]
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <wizchip_setnetinfo+0x78>)
 8002e54:	70da      	strb	r2, [r3, #3]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7d9a      	ldrb	r2, [r3, #22]
 8002e5a:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <wizchip_setnetinfo+0x7c>)
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000080 	.word	0x20000080
 8002e6c:	20000084 	.word	0x20000084

08002e70 <wizchip_getnetinfo>:
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002e82:	f7ff f971 	bl	8002168 <WIZCHIP_READ_BUF>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	330e      	adds	r3, #14
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e92:	f7ff f969 	bl	8002168 <WIZCHIP_READ_BUF>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	330a      	adds	r3, #10
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002ea2:	f7ff f961 	bl	8002168 <WIZCHIP_READ_BUF>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3306      	adds	r3, #6
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002eb2:	f7ff f959 	bl	8002168 <WIZCHIP_READ_BUF>
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <wizchip_getnetinfo+0x78>)
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	749a      	strb	r2, [r3, #18]
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <wizchip_getnetinfo+0x78>)
 8002ec0:	785a      	ldrb	r2, [r3, #1]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	74da      	strb	r2, [r3, #19]
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <wizchip_getnetinfo+0x78>)
 8002ec8:	789a      	ldrb	r2, [r3, #2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	751a      	strb	r2, [r3, #20]
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <wizchip_getnetinfo+0x78>)
 8002ed0:	78da      	ldrb	r2, [r3, #3]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	755a      	strb	r2, [r3, #21]
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <wizchip_getnetinfo+0x7c>)
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	759a      	strb	r2, [r3, #22]
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000080 	.word	0x20000080
 8002eec:	20000084 	.word	0x20000084

08002ef0 <Reset_Handler>:
 8002ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f28 <LoopForever+0x2>
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <LoopForever+0x6>)
 8002ef6:	490e      	ldr	r1, [pc, #56]	; (8002f30 <LoopForever+0xa>)
 8002ef8:	4a0e      	ldr	r2, [pc, #56]	; (8002f34 <LoopForever+0xe>)
 8002efa:	2300      	movs	r3, #0
 8002efc:	e002      	b.n	8002f04 <LoopCopyDataInit>

08002efe <CopyDataInit>:
 8002efe:	58d4      	ldr	r4, [r2, r3]
 8002f00:	50c4      	str	r4, [r0, r3]
 8002f02:	3304      	adds	r3, #4

08002f04 <LoopCopyDataInit>:
 8002f04:	18c4      	adds	r4, r0, r3
 8002f06:	428c      	cmp	r4, r1
 8002f08:	d3f9      	bcc.n	8002efe <CopyDataInit>
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <LoopForever+0x12>)
 8002f0c:	4c0b      	ldr	r4, [pc, #44]	; (8002f3c <LoopForever+0x16>)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e001      	b.n	8002f16 <LoopFillZerobss>

08002f12 <FillZerobss>:
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	3204      	adds	r2, #4

08002f16 <LoopFillZerobss>:
 8002f16:	42a2      	cmp	r2, r4
 8002f18:	d3fb      	bcc.n	8002f12 <FillZerobss>
 8002f1a:	f7ff f879 	bl	8002010 <SystemInit>
 8002f1e:	f003 fe35 	bl	8006b8c <__libc_init_array>
 8002f22:	f7fd fd39 	bl	8000998 <main>

08002f26 <LoopForever>:
 8002f26:	e7fe      	b.n	8002f26 <LoopForever>
 8002f28:	20004000 	.word	0x20004000
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000044 	.word	0x20000044
 8002f34:	08006de0 	.word	0x08006de0
 8002f38:	20000044 	.word	0x20000044
 8002f3c:	200015a0 	.word	0x200015a0

08002f40 <ADC1_IRQHandler>:
 8002f40:	e7fe      	b.n	8002f40 <ADC1_IRQHandler>
	...

08002f44 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_Init+0x28>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <HAL_Init+0x28>)
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 f94f 	bl	80031f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f808 	bl	8002f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f60:	f7fe febe 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40022000 	.word	0x40022000

08002f70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f78:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_InitTick+0x54>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <HAL_InitTick+0x58>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f967 	bl	8003262 <HAL_SYSTICK_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00e      	b.n	8002fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d80a      	bhi.n	8002fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	f000 f92f 	bl	800320e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb0:	4a06      	ldr	r2, [pc, #24]	; (8002fcc <HAL_InitTick+0x5c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	2000000c 	.word	0x2000000c
 8002fc8:	20000040 	.word	0x20000040
 8002fcc:	2000003c 	.word	0x2000003c

08002fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_IncTick+0x20>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_IncTick+0x24>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_IncTick+0x24>)
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000040 	.word	0x20000040
 8002ff4:	2000159c 	.word	0x2000159c

08002ff8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return uwTick;  
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_GetTick+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	2000159c 	.word	0x2000159c

08003010 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff ffee 	bl	8002ff8 <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d005      	beq.n	8003036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_Delay+0x44>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003036:	bf00      	nop
 8003038:	f7ff ffde 	bl	8002ff8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	429a      	cmp	r2, r3
 8003046:	d8f7      	bhi.n	8003038 <HAL_Delay+0x28>
  {
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000040 	.word	0x20000040

08003058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003074:	4013      	ands	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003080:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308a:	4a04      	ldr	r2, [pc, #16]	; (800309c <__NVIC_SetPriorityGrouping+0x44>)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	60d3      	str	r3, [r2, #12]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <__NVIC_GetPriorityGrouping+0x18>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	f003 0307 	and.w	r3, r3, #7
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	db0b      	blt.n	80030e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ce:	79fb      	ldrb	r3, [r7, #7]
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <__NVIC_EnableIRQ+0x38>)
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2001      	movs	r0, #1
 80030de:	fa00 f202 	lsl.w	r2, r0, r2
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	; (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	; (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
         );
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	; 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c4:	d301      	bcc.n	80031ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00f      	b.n	80031ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ca:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <SysTick_Config+0x40>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031d2:	210f      	movs	r1, #15
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f7ff ff8e 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <SysTick_Config+0x40>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031e2:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <SysTick_Config+0x40>)
 80031e4:	2207      	movs	r2, #7
 80031e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	e000e010 	.word	0xe000e010

080031f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff29 	bl	8003058 <__NVIC_SetPriorityGrouping>
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af00      	add	r7, sp, #0
 8003214:	4603      	mov	r3, r0
 8003216:	60b9      	str	r1, [r7, #8]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003220:	f7ff ff3e 	bl	80030a0 <__NVIC_GetPriorityGrouping>
 8003224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	6978      	ldr	r0, [r7, #20]
 800322c:	f7ff ff8e 	bl	800314c <NVIC_EncodePriority>
 8003230:	4602      	mov	r2, r0
 8003232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff5d 	bl	80030f8 <__NVIC_SetPriority>
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b082      	sub	sp, #8
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff31 	bl	80030bc <__NVIC_EnableIRQ>
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff ffa2 	bl	80031b4 <SysTick_Config>
 8003270:	4603      	mov	r3, r0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328a:	e14e      	b.n	800352a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8140 	beq.w	8003524 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d005      	beq.n	80032bc <HAL_GPIO_Init+0x40>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d130      	bne.n	800331e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f2:	2201      	movs	r2, #1
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	f003 0201 	and.w	r2, r3, #1
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b03      	cmp	r3, #3
 8003328:	d017      	beq.n	800335a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d123      	bne.n	80033ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	08da      	lsrs	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3208      	adds	r2, #8
 800336e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	220f      	movs	r2, #15
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	6939      	ldr	r1, [r7, #16]
 80033aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 809a 	beq.w	8003524 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f0:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_GPIO_Init+0x2cc>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	4a54      	ldr	r2, [pc, #336]	; (8003548 <HAL_GPIO_Init+0x2cc>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6193      	str	r3, [r2, #24]
 80033fc:	4b52      	ldr	r3, [pc, #328]	; (8003548 <HAL_GPIO_Init+0x2cc>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003408:	4a50      	ldr	r2, [pc, #320]	; (800354c <HAL_GPIO_Init+0x2d0>)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	089b      	lsrs	r3, r3, #2
 800340e:	3302      	adds	r3, #2
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003432:	d013      	beq.n	800345c <HAL_GPIO_Init+0x1e0>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_GPIO_Init+0x2d4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00d      	beq.n	8003458 <HAL_GPIO_Init+0x1dc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a45      	ldr	r2, [pc, #276]	; (8003554 <HAL_GPIO_Init+0x2d8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x1d8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a44      	ldr	r2, [pc, #272]	; (8003558 <HAL_GPIO_Init+0x2dc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_GPIO_Init+0x1d4>
 800344c:	2303      	movs	r3, #3
 800344e:	e006      	b.n	800345e <HAL_GPIO_Init+0x1e2>
 8003450:	2305      	movs	r3, #5
 8003452:	e004      	b.n	800345e <HAL_GPIO_Init+0x1e2>
 8003454:	2302      	movs	r3, #2
 8003456:	e002      	b.n	800345e <HAL_GPIO_Init+0x1e2>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_GPIO_Init+0x1e2>
 800345c:	2300      	movs	r3, #0
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	4093      	lsls	r3, r2
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800346e:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_GPIO_Init+0x2d0>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800347c:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_GPIO_Init+0x2e0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034a0:	4a2e      	ldr	r2, [pc, #184]	; (800355c <HAL_GPIO_Init+0x2e0>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_GPIO_Init+0x2e0>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034ca:	4a24      	ldr	r2, [pc, #144]	; (800355c <HAL_GPIO_Init+0x2e0>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034d0:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_GPIO_Init+0x2e0>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034f4:	4a19      	ldr	r2, [pc, #100]	; (800355c <HAL_GPIO_Init+0x2e0>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <HAL_GPIO_Init+0x2e0>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800351e:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_GPIO_Init+0x2e0>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f aea9 	bne.w	800328c <HAL_GPIO_Init+0x10>
  }
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	40010000 	.word	0x40010000
 8003550:	48000400 	.word	0x48000400
 8003554:	48000800 	.word	0x48000800
 8003558:	48000c00 	.word	0x48000c00
 800355c:	40010400 	.word	0x40010400

08003560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
 800356c:	4613      	mov	r3, r2
 800356e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003570:	787b      	ldrb	r3, [r7, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800357c:	e002      	b.n	8003584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d006      	beq.n	80035b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035ac:	88fb      	ldrh	r3, [r7, #6]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fcf6 	bl	8000fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40010400 	.word	0x40010400

080035c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ec:	1d3b      	adds	r3, r7, #4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f000 bef4 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	1d3b      	adds	r3, r7, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 816a 	beq.w	80038de <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800360a:	4bb3      	ldr	r3, [pc, #716]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b04      	cmp	r3, #4
 8003614:	d00c      	beq.n	8003630 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003616:	4bb0      	ldr	r3, [pc, #704]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b08      	cmp	r3, #8
 8003620:	d159      	bne.n	80036d6 <HAL_RCC_OscConfig+0xf6>
 8003622:	4bad      	ldr	r3, [pc, #692]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d152      	bne.n	80036d6 <HAL_RCC_OscConfig+0xf6>
 8003630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003634:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8003644:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d102      	bne.n	8003662 <HAL_RCC_OscConfig+0x82>
 800365c:	4b9e      	ldr	r3, [pc, #632]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0xae>
 8003662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003666:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003676:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800367a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800367e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800368a:	4b93      	ldr	r3, [pc, #588]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003692:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003696:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800369a:	fa92 f2a2 	rbit	r2, r2
 800369e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80036a2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80036a6:	fab2 f282 	clz	r2, r2
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	f042 0220 	orr.w	r2, r2, #32
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	f002 021f 	and.w	r2, r2, #31
 80036b6:	2101      	movs	r1, #1
 80036b8:	fa01 f202 	lsl.w	r2, r1, r2
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 810c 	beq.w	80038dc <HAL_RCC_OscConfig+0x2fc>
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8106 	bne.w	80038dc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f000 be86 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x110>
 80036e2:	4b7d      	ldr	r3, [pc, #500]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7c      	ldr	r2, [pc, #496]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e030      	b.n	8003752 <HAL_RCC_OscConfig+0x172>
 80036f0:	1d3b      	adds	r3, r7, #4
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x134>
 80036fa:	4b77      	ldr	r3, [pc, #476]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a76      	ldr	r2, [pc, #472]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b74      	ldr	r3, [pc, #464]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a73      	ldr	r2, [pc, #460]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800370c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01e      	b.n	8003752 <HAL_RCC_OscConfig+0x172>
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x15a>
 8003720:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a6c      	ldr	r2, [pc, #432]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a69      	ldr	r2, [pc, #420]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	e00b      	b.n	8003752 <HAL_RCC_OscConfig+0x172>
 800373a:	4b67      	ldr	r3, [pc, #412]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a66      	ldr	r2, [pc, #408]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 800374c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003752:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	f023 020f 	bic.w	r2, r3, #15
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	495d      	ldr	r1, [pc, #372]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d059      	beq.n	8003824 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7ff fc42 	bl	8002ff8 <HAL_GetTick>
 8003774:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800377a:	f7ff fc3d 	bl	8002ff8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d902      	bls.n	8003790 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	f000 be29 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003790:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003794:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800379c:	fa93 f3a3 	rbit	r3, r3
 80037a0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80037a4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_RCC_OscConfig+0x1e2>
 80037bc:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	e015      	b.n	80037ee <HAL_RCC_OscConfig+0x20e>
 80037c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80037ce:	fa93 f3a3 	rbit	r3, r3
 80037d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80037d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80037de:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80037ea:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80037f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80037fa:	fa92 f2a2 	rbit	r2, r2
 80037fe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003802:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003806:	fab2 f282 	clz	r2, r2
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	f002 021f 	and.w	r2, r2, #31
 8003816:	2101      	movs	r1, #1
 8003818:	fa01 f202 	lsl.w	r2, r1, r2
 800381c:	4013      	ands	r3, r2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ab      	beq.n	800377a <HAL_RCC_OscConfig+0x19a>
 8003822:	e05c      	b.n	80038de <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7ff fbe8 	bl	8002ff8 <HAL_GetTick>
 8003828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800382e:	f7ff fbe3 	bl	8002ff8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d902      	bls.n	8003844 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	f000 bdcf 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003848:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003858:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <HAL_RCC_OscConfig+0x296>
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x2c2>
 8003876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800388a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003892:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_RCC_OscConfig+0x2f8>)
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80038aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80038ae:	fa92 f2a2 	rbit	r2, r2
 80038b2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80038b6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0220 	orr.w	r2, r2, #32
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ab      	bne.n	800382e <HAL_RCC_OscConfig+0x24e>
 80038d6:	e002      	b.n	80038de <HAL_RCC_OscConfig+0x2fe>
 80038d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 816f 	beq.w	8003bcc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038ee:	4bd0      	ldr	r3, [pc, #832]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038fa:	4bcd      	ldr	r3, [pc, #820]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d16c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x400>
 8003906:	4bca      	ldr	r3, [pc, #808]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d166      	bne.n	80039e0 <HAL_RCC_OscConfig+0x400>
 8003912:	2302      	movs	r3, #2
 8003914:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800391c:	fa93 f3a3 	rbit	r3, r3
 8003920:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003924:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_RCC_OscConfig+0x362>
 800393c:	4bbc      	ldr	r3, [pc, #752]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e013      	b.n	800396a <HAL_RCC_OscConfig+0x38a>
 8003942:	2302      	movs	r3, #2
 8003944:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003954:	2302      	movs	r3, #2
 8003956:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800395a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800395e:	fa93 f3a3 	rbit	r3, r3
 8003962:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003966:	4bb2      	ldr	r3, [pc, #712]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	2202      	movs	r2, #2
 800396c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003970:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003974:	fa92 f2a2 	rbit	r2, r2
 8003978:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800397c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003980:	fab2 f282 	clz	r2, r2
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	f042 0220 	orr.w	r2, r2, #32
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f002 021f 	and.w	r2, r2, #31
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f202 	lsl.w	r2, r1, r2
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <HAL_RCC_OscConfig+0x3cc>
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d002      	beq.n	80039ac <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f000 bd1b 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4ba0      	ldr	r3, [pc, #640]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b4:	1d3b      	adds	r3, r7, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	21f8      	movs	r1, #248	; 0xf8
 80039bc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80039c4:	fa91 f1a1 	rbit	r1, r1
 80039c8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80039cc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80039d0:	fab1 f181 	clz	r1, r1
 80039d4:	b2c9      	uxtb	r1, r1
 80039d6:	408b      	lsls	r3, r1
 80039d8:	4995      	ldr	r1, [pc, #596]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	e0f5      	b.n	8003bcc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e0:	1d3b      	adds	r3, r7, #4
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8085 	beq.w	8003af6 <HAL_RCC_OscConfig+0x516>
 80039ec:	2301      	movs	r3, #1
 80039ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80039fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	461a      	mov	r2, r3
 8003a14:	2301      	movs	r3, #1
 8003a16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7ff faee 	bl	8002ff8 <HAL_GetTick>
 8003a1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a22:	f7ff fae9 	bl	8002ff8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d902      	bls.n	8003a38 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	f000 bcd5 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003a4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_RCC_OscConfig+0x488>
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e013      	b.n	8003a90 <HAL_RCC_OscConfig+0x4b0>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a72:	fa93 f3a3 	rbit	r3, r3
 8003a76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003a84:	fa93 f3a3 	rbit	r3, r3
 8003a88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003a8c:	4b68      	ldr	r3, [pc, #416]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2202      	movs	r2, #2
 8003a92:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a9a:	fa92 f2a2 	rbit	r2, r2
 8003a9e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003aa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003aa6:	fab2 f282 	clz	r2, r2
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	f042 0220 	orr.w	r2, r2, #32
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	f002 021f 	and.w	r2, r2, #31
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0af      	beq.n	8003a22 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac2:	4b5b      	ldr	r3, [pc, #364]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	21f8      	movs	r1, #248	; 0xf8
 8003ad2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ada:	fa91 f1a1 	rbit	r1, r1
 8003ade:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003ae2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003ae6:	fab1 f181 	clz	r1, r1
 8003aea:	b2c9      	uxtb	r1, r1
 8003aec:	408b      	lsls	r3, r1
 8003aee:	4950      	ldr	r1, [pc, #320]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e06a      	b.n	8003bcc <HAL_RCC_OscConfig+0x5ec>
 8003af6:	2301      	movs	r3, #1
 8003af8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b00:	fa93 f3a3 	rbit	r3, r3
 8003b04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7ff fa69 	bl	8002ff8 <HAL_GetTick>
 8003b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7ff fa64 	bl	8002ff8 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d902      	bls.n	8003b42 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f000 bc50 	b.w	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003b42:	2302      	movs	r3, #2
 8003b44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_OscConfig+0x592>
 8003b6c:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	e013      	b.n	8003b9a <HAL_RCC_OscConfig+0x5ba>
 8003b72:	2302      	movs	r3, #2
 8003b74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b84:	2302      	movs	r3, #2
 8003b86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b96:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <HAL_RCC_OscConfig+0x650>)
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003ba0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ba4:	fa92 f2a2 	rbit	r2, r2
 8003ba8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003bac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003bb0:	fab2 f282 	clz	r2, r2
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	f042 0220 	orr.w	r2, r2, #32
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	f002 021f 	and.w	r2, r2, #31
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1af      	bne.n	8003b2c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80da 	beq.w	8003d90 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bdc:	1d3b      	adds	r3, r7, #4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d069      	beq.n	8003cba <HAL_RCC_OscConfig+0x6da>
 8003be6:	2301      	movs	r3, #1
 8003be8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfc:	fab3 f383 	clz	r3, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_OscConfig+0x654>)
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c10:	f7ff f9f2 	bl	8002ff8 <HAL_GetTick>
 8003c14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c18:	e00e      	b.n	8003c38 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1a:	f7ff f9ed 	bl	8002ff8 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d906      	bls.n	8003c38 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e3d9      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	10908120 	.word	0x10908120
 8003c38:	2302      	movs	r3, #2
 8003c3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c42:	fa93 f3a3 	rbit	r3, r3
 8003c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c4e:	2202      	movs	r2, #2
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	fa93 f2a3 	rbit	r2, r3
 8003c5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c66:	2202      	movs	r2, #2
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	fa93 f2a3 	rbit	r2, r3
 8003c74:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	4ba5      	ldr	r3, [pc, #660]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c82:	2102      	movs	r1, #2
 8003c84:	6019      	str	r1, [r3, #0]
 8003c86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	fa93 f1a3 	rbit	r1, r3
 8003c90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c94:	6019      	str	r1, [r3, #0]
  return result;
 8003c96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2101      	movs	r1, #1
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0b0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x63a>
 8003cb8:	e06a      	b.n	8003d90 <HAL_RCC_OscConfig+0x7b0>
 8003cba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003cd0:	601a      	str	r2, [r3, #0]
  return result;
 8003cd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003cd6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd8:	fab3 f383 	clz	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b8c      	ldr	r3, [pc, #560]	; (8003f14 <HAL_RCC_OscConfig+0x934>)
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2300      	movs	r3, #0
 8003cea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7ff f984 	bl	8002ff8 <HAL_GetTick>
 8003cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf4:	e009      	b.n	8003d0a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7ff f97f 	bl	8002ff8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e36b      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003d0a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d0e:	2202      	movs	r2, #2
 8003d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	fa93 f2a3 	rbit	r2, r3
 8003d1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d26:	2202      	movs	r2, #2
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	fa93 f2a3 	rbit	r2, r3
 8003d34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d3e:	2202      	movs	r2, #2
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d52:	4b6f      	ldr	r3, [pc, #444]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d56:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	6019      	str	r1, [r3, #0]
 8003d5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f1a3 	rbit	r1, r3
 8003d68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d6c:	6019      	str	r1, [r3, #0]
  return result;
 8003d6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 031f 	and.w	r3, r3, #31
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1b2      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	1d3b      	adds	r3, r7, #4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8158 	beq.w	8004050 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b5a      	ldr	r3, [pc, #360]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b57      	ldr	r3, [pc, #348]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	4a56      	ldr	r2, [pc, #344]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	61d3      	str	r3, [r2, #28]
 8003dbe:	4b54      	ldr	r3, [pc, #336]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003dc6:	f107 0308 	add.w	r3, r7, #8
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b4f      	ldr	r3, [pc, #316]	; (8003f18 <HAL_RCC_OscConfig+0x938>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11a      	bne.n	8003e1a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de4:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <HAL_RCC_OscConfig+0x938>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a4b      	ldr	r2, [pc, #300]	; (8003f18 <HAL_RCC_OscConfig+0x938>)
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df0:	f7ff f902 	bl	8002ff8 <HAL_GetTick>
 8003df4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	e009      	b.n	8003e0e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfa:	f7ff f8fd 	bl	8002ff8 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e2e9      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <HAL_RCC_OscConfig+0x938>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ef      	beq.n	8003dfa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x852>
 8003e24:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4a39      	ldr	r2, [pc, #228]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6213      	str	r3, [r2, #32]
 8003e30:	e02f      	b.n	8003e92 <HAL_RCC_OscConfig+0x8b2>
 8003e32:	1d3b      	adds	r3, r7, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RCC_OscConfig+0x876>
 8003e3c:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a33      	ldr	r2, [pc, #204]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	4a30      	ldr	r2, [pc, #192]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e4e:	f023 0304 	bic.w	r3, r3, #4
 8003e52:	6213      	str	r3, [r2, #32]
 8003e54:	e01d      	b.n	8003e92 <HAL_RCC_OscConfig+0x8b2>
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x89a>
 8003e60:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4a27      	ldr	r2, [pc, #156]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6213      	str	r3, [r2, #32]
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0x8b2>
 8003e7a:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6213      	str	r3, [r2, #32]
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d06b      	beq.n	8003f74 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9c:	f7ff f8ac 	bl	8002ff8 <HAL_GetTick>
 8003ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7ff f8a7 	bl	8002ff8 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e291      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003ebe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	fa93 f2a3 	rbit	r2, r3
 8003ed0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003eda:	2202      	movs	r2, #2
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	fa93 f2a3 	rbit	r2, r3
 8003ee8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003eec:	601a      	str	r2, [r3, #0]
  return result;
 8003eee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ef2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d109      	bne.n	8003f1c <HAL_RCC_OscConfig+0x93c>
 8003f08:	4b01      	ldr	r3, [pc, #4]	; (8003f10 <HAL_RCC_OscConfig+0x930>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	e014      	b.n	8003f38 <HAL_RCC_OscConfig+0x958>
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	10908120 	.word	0x10908120
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f20:	2202      	movs	r2, #2
 8003f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	fa93 f2a3 	rbit	r2, r3
 8003f2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	4bbb      	ldr	r3, [pc, #748]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	6011      	str	r1, [r2, #0]
 8003f40:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	fa92 f1a2 	rbit	r1, r2
 8003f4a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f4e:	6011      	str	r1, [r2, #0]
  return result;
 8003f50:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	fab2 f282 	clz	r2, r2
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	f002 021f 	and.w	r2, r2, #31
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d099      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x8c6>
 8003f72:	e063      	b.n	800403c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7ff f840 	bl	8002ff8 <HAL_GetTick>
 8003f78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	e00b      	b.n	8003f96 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7ff f83b 	bl	8002ff8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e225      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 8003f96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	fa93 f2a3 	rbit	r2, r3
 8003fa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	fa93 f2a3 	rbit	r2, r3
 8003fc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003fc4:	601a      	str	r2, [r3, #0]
  return result;
 8003fc6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003fca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fcc:	fab3 f383 	clz	r3, r3
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f043 0302 	orr.w	r3, r3, #2
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_OscConfig+0xa06>
 8003fe0:	4b90      	ldr	r3, [pc, #576]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	e00d      	b.n	8004002 <HAL_RCC_OscConfig+0xa22>
 8003fe6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003fea:	2202      	movs	r2, #2
 8003fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	4b89      	ldr	r3, [pc, #548]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004006:	2102      	movs	r1, #2
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	fa92 f1a2 	rbit	r1, r2
 8004014:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004018:	6011      	str	r1, [r2, #0]
  return result;
 800401a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	fab2 f282 	clz	r2, r2
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	f002 021f 	and.w	r2, r2, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f202 	lsl.w	r2, r1, r2
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1a0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800403c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b77      	ldr	r3, [pc, #476]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a76      	ldr	r2, [pc, #472]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004050:	1d3b      	adds	r3, r7, #4
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 81c2 	beq.w	80043e0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800405c:	4b71      	ldr	r3, [pc, #452]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 030c 	and.w	r3, r3, #12
 8004064:	2b08      	cmp	r3, #8
 8004066:	f000 819c 	beq.w	80043a2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	2b02      	cmp	r3, #2
 8004072:	f040 8114 	bne.w	800429e <HAL_RCC_OscConfig+0xcbe>
 8004076:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800407a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800407e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800408e:	601a      	str	r2, [r3, #0]
  return result;
 8004090:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004094:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ac:	f7fe ffa4 	bl	8002ff8 <HAL_GetTick>
 80040b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b4:	e009      	b.n	80040ca <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b6:	f7fe ff9f 	bl	8002ff8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e18b      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 80040ca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80040ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	fa93 f2a3 	rbit	r2, r3
 80040de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040e2:	601a      	str	r2, [r3, #0]
  return result;
 80040e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0xb24>
 80040fe:	4b49      	ldr	r3, [pc, #292]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	e01b      	b.n	800413c <HAL_RCC_OscConfig+0xb5c>
 8004104:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004108:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800410c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	fa93 f2a3 	rbit	r2, r3
 8004118:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004122:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	fa93 f2a3 	rbit	r2, r3
 8004132:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	4b3a      	ldr	r3, [pc, #232]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004140:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004144:	6011      	str	r1, [r2, #0]
 8004146:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	fa92 f1a2 	rbit	r1, r2
 8004150:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004154:	6011      	str	r1, [r2, #0]
  return result;
 8004156:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	fab2 f282 	clz	r2, r2
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	f042 0220 	orr.w	r2, r2, #32
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	f002 021f 	and.w	r2, r2, #31
 800416c:	2101      	movs	r1, #1
 800416e:	fa01 f202 	lsl.w	r2, r1, r2
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d19e      	bne.n	80040b6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	430b      	orrs	r3, r1
 800418e:	4925      	ldr	r1, [pc, #148]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
 8004194:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004198:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800419c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	fa93 f2a3 	rbit	r2, r3
 80041a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041ac:	601a      	str	r2, [r3, #0]
  return result;
 80041ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	461a      	mov	r2, r3
 80041c6:	2301      	movs	r3, #1
 80041c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ca:	f7fe ff15 	bl	8002ff8 <HAL_GetTick>
 80041ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d2:	e009      	b.n	80041e8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fe ff10 	bl	8002ff8 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0fc      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 80041e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004200:	601a      	str	r2, [r3, #0]
  return result;
 8004202:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004206:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004208:	fab3 f383 	clz	r3, r3
 800420c:	b2db      	uxtb	r3, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	b2db      	uxtb	r3, r3
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b01      	cmp	r3, #1
 800421a:	d105      	bne.n	8004228 <HAL_RCC_OscConfig+0xc48>
 800421c:	4b01      	ldr	r3, [pc, #4]	; (8004224 <HAL_RCC_OscConfig+0xc44>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	e01e      	b.n	8004260 <HAL_RCC_OscConfig+0xc80>
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800422c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	fa93 f2a3 	rbit	r2, r3
 800423c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	fa93 f2a3 	rbit	r2, r3
 8004256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_RCC_OscConfig+0xe0c>)
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004264:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004268:	6011      	str	r1, [r2, #0]
 800426a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	fa92 f1a2 	rbit	r1, r2
 8004274:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004278:	6011      	str	r1, [r2, #0]
  return result;
 800427a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	fab2 f282 	clz	r2, r2
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f042 0220 	orr.w	r2, r2, #32
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	f002 021f 	and.w	r2, r2, #31
 8004290:	2101      	movs	r1, #1
 8004292:	fa01 f202 	lsl.w	r2, r1, r2
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d09b      	beq.n	80041d4 <HAL_RCC_OscConfig+0xbf4>
 800429c:	e0a0      	b.n	80043e0 <HAL_RCC_OscConfig+0xe00>
 800429e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b6:	601a      	str	r2, [r3, #0]
  return result;
 80042b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	461a      	mov	r2, r3
 80042d0:	2300      	movs	r3, #0
 80042d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d4:	f7fe fe90 	bl	8002ff8 <HAL_GetTick>
 80042d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042dc:	e009      	b.n	80042f2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042de:	f7fe fe8b 	bl	8002ff8 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e077      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
 80042f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	fa93 f2a3 	rbit	r2, r3
 8004306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800430a:	601a      	str	r2, [r3, #0]
  return result;
 800430c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004310:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_RCC_OscConfig+0xd4c>
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_OscConfig+0xe0c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e01b      	b.n	8004364 <HAL_RCC_OscConfig+0xd84>
 800432c:	f107 0320 	add.w	r3, r7, #32
 8004330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	f107 0320 	add.w	r3, r7, #32
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	fa93 f2a3 	rbit	r2, r3
 8004340:	f107 031c 	add.w	r3, r7, #28
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f107 0318 	add.w	r3, r7, #24
 800434a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	f107 0318 	add.w	r3, r7, #24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	fa93 f2a3 	rbit	r2, r3
 800435a:	f107 0314 	add.w	r3, r7, #20
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	4b22      	ldr	r3, [pc, #136]	; (80043ec <HAL_RCC_OscConfig+0xe0c>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	f107 0210 	add.w	r2, r7, #16
 8004368:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	f107 0210 	add.w	r2, r7, #16
 8004372:	6812      	ldr	r2, [r2, #0]
 8004374:	fa92 f1a2 	rbit	r1, r2
 8004378:	f107 020c 	add.w	r2, r7, #12
 800437c:	6011      	str	r1, [r2, #0]
  return result;
 800437e:	f107 020c 	add.w	r2, r7, #12
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	fab2 f282 	clz	r2, r2
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	f042 0220 	orr.w	r2, r2, #32
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	f002 021f 	and.w	r2, r2, #31
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f202 	lsl.w	r2, r1, r2
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d19e      	bne.n	80042de <HAL_RCC_OscConfig+0xcfe>
 80043a0:	e01e      	b.n	80043e0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a2:	1d3b      	adds	r3, r7, #4
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e018      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <HAL_RCC_OscConfig+0xe0c>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d108      	bne.n	80043dc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40021000 	.word	0x40021000

080043f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b09e      	sub	sp, #120	; 0x78
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e162      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b90      	ldr	r3, [pc, #576]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d910      	bls.n	8004438 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b8d      	ldr	r3, [pc, #564]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 0207 	bic.w	r2, r3, #7
 800441e:	498b      	ldr	r1, [pc, #556]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e14a      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b82      	ldr	r3, [pc, #520]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	497f      	ldr	r1, [pc, #508]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80dc 	beq.w	800461c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d13c      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xf6>
 800446c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004470:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004474:	fa93 f3a3 	rbit	r3, r3
 8004478:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800447a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447c:	fab3 f383 	clz	r3, r3
 8004480:	b2db      	uxtb	r3, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d102      	bne.n	8004496 <HAL_RCC_ClockConfig+0xa6>
 8004490:	4b6f      	ldr	r3, [pc, #444]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	e00f      	b.n	80044b6 <HAL_RCC_ClockConfig+0xc6>
 8004496:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800449a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	667b      	str	r3, [r7, #100]	; 0x64
 80044a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a8:	663b      	str	r3, [r7, #96]	; 0x60
 80044aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044ac:	fa93 f3a3 	rbit	r3, r3
 80044b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b2:	4b67      	ldr	r3, [pc, #412]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80044bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044be:	fa92 f2a2 	rbit	r2, r2
 80044c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80044c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044c6:	fab2 f282 	clz	r2, r2
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	f042 0220 	orr.w	r2, r2, #32
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	f002 021f 	and.w	r2, r2, #31
 80044d6:	2101      	movs	r1, #1
 80044d8:	fa01 f202 	lsl.w	r2, r1, r2
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d17b      	bne.n	80045da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0f3      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d13c      	bne.n	8004568 <HAL_RCC_ClockConfig+0x178>
 80044ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <HAL_RCC_ClockConfig+0x128>
 8004512:	4b4f      	ldr	r3, [pc, #316]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	e00f      	b.n	8004538 <HAL_RCC_ClockConfig+0x148>
 8004518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800451c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	647b      	str	r3, [r7, #68]	; 0x44
 8004526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800452a:	643b      	str	r3, [r7, #64]	; 0x40
 800452c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004534:	4b46      	ldr	r3, [pc, #280]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800453c:	63ba      	str	r2, [r7, #56]	; 0x38
 800453e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004540:	fa92 f2a2 	rbit	r2, r2
 8004544:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004548:	fab2 f282 	clz	r2, r2
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	f042 0220 	orr.w	r2, r2, #32
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	f002 021f 	and.w	r2, r2, #31
 8004558:	2101      	movs	r1, #1
 800455a:	fa01 f202 	lsl.w	r2, r1, r2
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d13a      	bne.n	80045da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0b2      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
 8004568:	2302      	movs	r3, #2
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	fa93 f3a3 	rbit	r3, r3
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	b2db      	uxtb	r3, r3
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b01      	cmp	r3, #1
 8004588:	d102      	bne.n	8004590 <HAL_RCC_ClockConfig+0x1a0>
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	e00d      	b.n	80045ac <HAL_RCC_ClockConfig+0x1bc>
 8004590:	2302      	movs	r3, #2
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	2302      	movs	r3, #2
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	4b29      	ldr	r3, [pc, #164]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2202      	movs	r2, #2
 80045ae:	61ba      	str	r2, [r7, #24]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	fa92 f2a2 	rbit	r2, r2
 80045b6:	617a      	str	r2, [r7, #20]
  return result;
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	fab2 f282 	clz	r2, r2
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	f042 0220 	orr.w	r2, r2, #32
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	f002 021f 	and.w	r2, r2, #31
 80045ca:	2101      	movs	r1, #1
 80045cc:	fa01 f202 	lsl.w	r2, r1, r2
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e079      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	491a      	ldr	r1, [pc, #104]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fd04 	bl	8002ff8 <HAL_GetTick>
 80045f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fe fd00 	bl	8002ff8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e061      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <HAL_RCC_ClockConfig+0x260>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 020c 	and.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	429a      	cmp	r2, r3
 800461a:	d1eb      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d214      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	4906      	ldr	r1, [pc, #24]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b04      	ldr	r3, [pc, #16]	; (800464c <HAL_RCC_ClockConfig+0x25c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e040      	b.n	80046ce <HAL_RCC_ClockConfig+0x2de>
 800464c:	40022000 	.word	0x40022000
 8004650:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	491a      	ldr	r1, [pc, #104]	; (80046d8 <HAL_RCC_ClockConfig+0x2e8>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467e:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4912      	ldr	r1, [pc, #72]	; (80046d8 <HAL_RCC_ClockConfig+0x2e8>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004692:	f000 f829 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 8004696:	4601      	mov	r1, r0
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_RCC_ClockConfig+0x2e8>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a0:	22f0      	movs	r2, #240	; 0xf0
 80046a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	fa92 f2a2 	rbit	r2, r2
 80046aa:	60fa      	str	r2, [r7, #12]
  return result;
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	fab2 f282 	clz	r2, r2
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	40d3      	lsrs	r3, r2
 80046b6:	4a09      	ldr	r2, [pc, #36]	; (80046dc <HAL_RCC_ClockConfig+0x2ec>)
 80046b8:	5cd3      	ldrb	r3, [r2, r3]
 80046ba:	fa21 f303 	lsr.w	r3, r1, r3
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_ClockConfig+0x2f0>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_RCC_ClockConfig+0x2f4>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fc52 	bl	8002f70 <HAL_InitTick>
  
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3778      	adds	r7, #120	; 0x78
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	08006d78 	.word	0x08006d78
 80046e0:	2000000c 	.word	0x2000000c
 80046e4:	2000003c 	.word	0x2000003c

080046e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b04      	cmp	r3, #4
 8004710:	d002      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x30>
 8004712:	2b08      	cmp	r3, #8
 8004714:	d003      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x36>
 8004716:	e03c      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800471a:	623b      	str	r3, [r7, #32]
      break;
 800471c:	e03c      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004724:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004728:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	fa92 f2a2 	rbit	r2, r2
 8004730:	607a      	str	r2, [r7, #4]
  return result;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	fab2 f282 	clz	r2, r2
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	40d3      	lsrs	r3, r2
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	220f      	movs	r2, #15
 800474c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	fa92 f2a2 	rbit	r2, r2
 8004754:	60fa      	str	r2, [r7, #12]
  return result;
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	fab2 f282 	clz	r2, r2
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	40d3      	lsrs	r3, r2
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004762:	5cd3      	ldrb	r3, [r2, r3]
 8004764:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004770:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	fbb2 f2f3 	udiv	r2, r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	e004      	b.n	800478c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	623b      	str	r3, [r7, #32]
      break;
 8004790:	e002      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004792:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004794:	623b      	str	r3, [r7, #32]
      break;
 8004796:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004798:	6a3b      	ldr	r3, [r7, #32]
}
 800479a:	4618      	mov	r0, r3
 800479c:	372c      	adds	r7, #44	; 0x2c
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	017d7840 	.word	0x017d7840
 80047b0:	08006d90 	.word	0x08006d90
 80047b4:	08006da0 	.word	0x08006da0
 80047b8:	003d0900 	.word	0x003d0900
 80047bc:	007a1200 	.word	0x007a1200

080047c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80047de:	f7ff ffef 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e2:	4601      	mov	r1, r0
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80047f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	fa92 f2a2 	rbit	r2, r2
 80047f8:	603a      	str	r2, [r7, #0]
  return result;
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	fab2 f282 	clz	r2, r2
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	40d3      	lsrs	r3, r2
 8004804:	4a04      	ldr	r2, [pc, #16]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004806:	5cd3      	ldrb	r3, [r2, r3]
 8004808:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40021000 	.word	0x40021000
 8004818:	08006d88 	.word	0x08006d88

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004822:	f7ff ffcd 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8004826:	4601      	mov	r1, r0
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004830:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004834:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	fa92 f2a2 	rbit	r2, r2
 800483c:	603a      	str	r2, [r7, #0]
  return result;
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	fab2 f282 	clz	r2, r2
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	40d3      	lsrs	r3, r2
 8004848:	4a04      	ldr	r2, [pc, #16]	; (800485c <HAL_RCC_GetPCLK2Freq+0x40>)
 800484a:	5cd3      	ldrb	r3, [r2, r3]
 800484c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000
 800485c:	08006d88 	.word	0x08006d88

08004860 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b092      	sub	sp, #72	; 0x48
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80d4 	beq.w	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004884:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10e      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004890:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	61d3      	str	r3, [r2, #28]
 800489c:	4b48      	ldr	r3, [pc, #288]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ae:	4b45      	ldr	r3, [pc, #276]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d118      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ba:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a41      	ldr	r2, [pc, #260]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048c6:	f7fe fb97 	bl	8002ff8 <HAL_GetTick>
 80048ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	e008      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fe fb93 	bl	8002ff8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b64      	cmp	r3, #100	; 0x64
 80048da:	d901      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e13c      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e0:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ec:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8084 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004908:	429a      	cmp	r2, r3
 800490a:	d07c      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800491a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	fa93 f3a3 	rbit	r3, r3
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004926:	fab3 f383 	clz	r3, r3
 800492a:	b2db      	uxtb	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	461a      	mov	r2, r3
 8004936:	2301      	movs	r3, #1
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800493e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800494a:	fab3 f383 	clz	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	461a      	mov	r2, r3
 800495a:	2300      	movs	r3, #0
 800495c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d04b      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496e:	f7fe fb43 	bl	8002ff8 <HAL_GetTick>
 8004972:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004974:	e00a      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004976:	f7fe fb3f 	bl	8002ff8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f241 3288 	movw	r2, #5000	; 0x1388
 8004984:	4293      	cmp	r3, r2
 8004986:	d901      	bls.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0e6      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800498c:	2302      	movs	r3, #2
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	627b      	str	r3, [r7, #36]	; 0x24
 8004998:	2302      	movs	r3, #2
 800499a:	623b      	str	r3, [r7, #32]
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	61fb      	str	r3, [r7, #28]
  return result;
 80049a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f043 0302 	orr.w	r3, r3, #2
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d108      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049ba:	4b01      	ldr	r3, [pc, #4]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	e00d      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40007000 	.word	0x40007000
 80049c8:	10908100 	.word	0x10908100
 80049cc:	2302      	movs	r3, #2
 80049ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	4b62      	ldr	r3, [pc, #392]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2202      	movs	r2, #2
 80049de:	613a      	str	r2, [r7, #16]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	fa92 f2a2 	rbit	r2, r2
 80049e6:	60fa      	str	r2, [r7, #12]
  return result;
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	fab2 f282 	clz	r2, r2
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	f002 021f 	and.w	r2, r2, #31
 80049fa:	2101      	movs	r1, #1
 80049fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0b7      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a06:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4954      	ldr	r1, [pc, #336]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a20:	4b50      	ldr	r3, [pc, #320]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	4a4f      	ldr	r2, [pc, #316]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a38:	4b4a      	ldr	r3, [pc, #296]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	f023 0203 	bic.w	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	4947      	ldr	r1, [pc, #284]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a56:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	f023 0210 	bic.w	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	4940      	ldr	r1, [pc, #256]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a74:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f023 0220 	bic.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	4938      	ldr	r1, [pc, #224]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a92:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	4931      	ldr	r1, [pc, #196]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ab0:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4929      	ldr	r1, [pc, #164]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004ace:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	4922      	ldr	r1, [pc, #136]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d008      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	491a      	ldr	r1, [pc, #104]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d008      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	4913      	ldr	r1, [pc, #76]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	490b      	ldr	r1, [pc, #44]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b46:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	4904      	ldr	r1, [pc, #16]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3748      	adds	r7, #72	; 0x48
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000

08004b68 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e083      	b.n	8004c82 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7f5b      	ldrb	r3, [r3, #29]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd f8cc 	bl	8001d28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	22ca      	movs	r2, #202	; 0xca
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2253      	movs	r2, #83	; 0x53
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f9fb 	bl	8004fa2 <RTC_EnterInitMode>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	22ff      	movs	r2, #255	; 0xff
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e05e      	b.n	8004c82 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6899      	ldr	r1, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6919      	ldr	r1, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	041a      	lsls	r2, r3, #16
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c22:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10e      	bne.n	8004c50 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f98d 	bl	8004f52 <HAL_RTC_WaitForSynchro>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	22ff      	movs	r2, #255	; 0xff
 8004c44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e018      	b.n	8004c82 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699a      	ldr	r2, [r3, #24]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	22ff      	movs	r2, #255	; 0xff
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c8a:	b590      	push	{r4, r7, lr}
 8004c8c:	b087      	sub	sp, #28
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	7f1b      	ldrb	r3, [r3, #28]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RTC_SetTime+0x1c>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e0aa      	b.n	8004dfc <HAL_RTC_SetTime+0x172>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d126      	bne.n	8004d06 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f992 	bl	8004ffa <RTC_ByteToBcd2>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f98b 	bl	8004ffa <RTC_ByteToBcd2>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004ce8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	789b      	ldrb	r3, [r3, #2]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f983 	bl	8004ffa <RTC_ByteToBcd2>
 8004cf4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004cf6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e018      	b.n	8004d38 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d102      	bne.n	8004d1a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d26:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d2c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	22ca      	movs	r2, #202	; 0xca
 8004d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2253      	movs	r2, #83	; 0x53
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f92a 	bl	8004fa2 <RTC_EnterInitMode>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e047      	b.n	8004dfc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d76:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d8a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6899      	ldr	r1, [r3, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d111      	bne.n	8004de6 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8c5 	bl	8004f52 <HAL_RTC_WaitForSynchro>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	22ff      	movs	r2, #255	; 0xff
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00a      	b.n	8004dfc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	22ff      	movs	r2, #255	; 0xff
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd90      	pop	{r4, r7, pc}

08004e04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	7f1b      	ldrb	r3, [r3, #28]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_RTC_SetDate+0x1c>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e094      	b.n	8004f4a <HAL_RTC_SetDate+0x146>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10e      	bne.n	8004e50 <HAL_RTC_SetDate+0x4c>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	785b      	ldrb	r3, [r3, #1]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	f023 0310 	bic.w	r3, r3, #16
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	330a      	adds	r3, #10
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11c      	bne.n	8004e90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	78db      	ldrb	r3, [r3, #3]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f8cd 	bl	8004ffa <RTC_ByteToBcd2>
 8004e60:	4603      	mov	r3, r0
 8004e62:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	785b      	ldrb	r3, [r3, #1]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 f8c6 	bl	8004ffa <RTC_ByteToBcd2>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e72:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	789b      	ldrb	r3, [r3, #2]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 f8be 	bl	8004ffa <RTC_ByteToBcd2>
 8004e7e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e80:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	e00e      	b.n	8004eae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	78db      	ldrb	r3, [r3, #3]
 8004e94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e9c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ea2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	22ca      	movs	r2, #202	; 0xca
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2253      	movs	r2, #83	; 0x53
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f86f 	bl	8004fa2 <RTC_EnterInitMode>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00b      	beq.n	8004ee2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	22ff      	movs	r2, #255	; 0xff
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e033      	b.n	8004f4a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004eec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ef0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d111      	bne.n	8004f34 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f81e 	bl	8004f52 <HAL_RTC_WaitForSynchro>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	22ff      	movs	r2, #255	; 0xff
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2204      	movs	r2, #4
 8004f28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e00a      	b.n	8004f4a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	22ff      	movs	r2, #255	; 0xff
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}

08004f52 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f6c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004f6e:	f7fe f843 	bl	8002ff8 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f74:	e009      	b.n	8004f8a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f76:	f7fe f83f 	bl	8002ff8 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f84:	d901      	bls.n	8004f8a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e007      	b.n	8004f9a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0ee      	beq.n	8004f76 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d119      	bne.n	8004ff0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fc6:	f7fe f817 	bl	8002ff8 <HAL_GetTick>
 8004fca:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004fcc:	e009      	b.n	8004fe2 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004fce:	f7fe f813 	bl	8002ff8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fdc:	d901      	bls.n	8004fe2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e007      	b.n	8004ff2 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0ee      	beq.n	8004fce <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	4603      	mov	r3, r0
 8005002:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005008:	e005      	b.n	8005016 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3301      	adds	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	3b0a      	subs	r3, #10
 8005014:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b09      	cmp	r3, #9
 800501a:	d8f6      	bhi.n	800500a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	b2da      	uxtb	r2, r3
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	4313      	orrs	r3, r2
 8005028:	b2db      	uxtb	r3, r3
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e09d      	b.n	8005184 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005058:	d009      	beq.n	800506e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	61da      	str	r2, [r3, #28]
 8005060:	e005      	b.n	800506e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fc fe73 	bl	8001d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ae:	d902      	bls.n	80050b6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e002      	b.n	80050bc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050c4:	d007      	beq.n	80050d6 <HAL_SPI_Init+0xa0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ce:	d002      	beq.n	80050d6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005118:	ea42 0103 	orr.w	r1, r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0204 	and.w	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005152:	ea42 0103 	orr.w	r1, r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69da      	ldr	r2, [r3, #28]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005172:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_SPI_Transmit+0x22>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e158      	b.n	8005460 <HAL_SPI_Transmit+0x2d4>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051b6:	f7fd ff1f 	bl	8002ff8 <HAL_GetTick>
 80051ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051bc:	88fb      	ldrh	r3, [r7, #6]
 80051be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d002      	beq.n	80051d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
 80051ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051d0:	e13d      	b.n	800544e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_SPI_Transmit+0x52>
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051e2:	e134      	b.n	800544e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2203      	movs	r2, #3
 80051e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	88fa      	ldrh	r2, [r7, #6]
 80051fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d10f      	bne.n	8005250 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800524e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d007      	beq.n	800526e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005276:	d94b      	bls.n	8005310 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_SPI_Transmit+0xfa>
 8005280:	8afb      	ldrh	r3, [r7, #22]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d13e      	bne.n	8005304 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	1c9a      	adds	r2, r3, #2
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052aa:	e02b      	b.n	8005304 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d112      	bne.n	80052e0 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	881a      	ldrh	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	1c9a      	adds	r2, r3, #2
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052de:	e011      	b.n	8005304 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e0:	f7fd fe8a 	bl	8002ff8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d803      	bhi.n	80052f8 <HAL_SPI_Transmit+0x16c>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f6:	d102      	bne.n	80052fe <HAL_SPI_Transmit+0x172>
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005302:	e0a4      	b.n	800544e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ce      	bne.n	80052ac <HAL_SPI_Transmit+0x120>
 800530e:	e07c      	b.n	800540a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_SPI_Transmit+0x192>
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d170      	bne.n	8005400 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	d912      	bls.n	800534e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	881a      	ldrh	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b02      	subs	r3, #2
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800534c:	e058      	b.n	8005400 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005374:	e044      	b.n	8005400 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b02      	cmp	r3, #2
 8005382:	d12b      	bne.n	80053dc <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d912      	bls.n	80053b4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005392:	881a      	ldrh	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	1c9a      	adds	r2, r3, #2
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b02      	subs	r3, #2
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053b2:	e025      	b.n	8005400 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053da:	e011      	b.n	8005400 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053dc:	f7fd fe0c 	bl	8002ff8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d803      	bhi.n	80053f4 <HAL_SPI_Transmit+0x268>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d102      	bne.n	80053fa <HAL_SPI_Transmit+0x26e>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d102      	bne.n	8005400 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053fe:	e026      	b.n	800544e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1b5      	bne.n	8005376 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	6839      	ldr	r1, [r7, #0]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fce4 	bl	8005ddc <SPI_EndRxTxTransaction>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e000      	b.n	800544e <HAL_SPI_Transmit+0x2c2>
  }

error:
 800544c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800545e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005484:	d112      	bne.n	80054ac <HAL_SPI_Receive+0x44>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10e      	bne.n	80054ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2204      	movs	r2, #4
 8005492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f910 	bl	80056c8 <HAL_SPI_TransmitReceive>
 80054a8:	4603      	mov	r3, r0
 80054aa:	e109      	b.n	80056c0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <HAL_SPI_Receive+0x52>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e102      	b.n	80056c0 <HAL_SPI_Receive+0x258>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c2:	f7fd fd99 	bl	8002ff8 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054d8:	e0e9      	b.n	80056ae <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_Receive+0x7e>
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054ea:	e0e0      	b.n	80056ae <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2204      	movs	r2, #4
 80054f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	88fa      	ldrh	r2, [r7, #6]
 800550c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005536:	d908      	bls.n	800554a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005546:	605a      	str	r2, [r3, #4]
 8005548:	e007      	b.n	800555a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005562:	d10f      	bne.n	8005584 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005582:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d007      	beq.n	80055a2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055a0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055aa:	d867      	bhi.n	800567c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055ac:	e030      	b.n	8005610 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d117      	bne.n	80055ec <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f103 020c 	add.w	r2, r3, #12
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	7812      	ldrb	r2, [r2, #0]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80055ea:	e011      	b.n	8005610 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ec:	f7fd fd04 	bl	8002ff8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d803      	bhi.n	8005604 <HAL_SPI_Receive+0x19c>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005602:	d102      	bne.n	800560a <HAL_SPI_Receive+0x1a2>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800560e:	e04e      	b.n	80056ae <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005616:	b29b      	uxth	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1c8      	bne.n	80055ae <HAL_SPI_Receive+0x146>
 800561c:	e034      	b.n	8005688 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b01      	cmp	r3, #1
 800562a:	d115      	bne.n	8005658 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	b292      	uxth	r2, r2
 8005638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005656:	e011      	b.n	800567c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005658:	f7fd fcce 	bl	8002ff8 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d803      	bhi.n	8005670 <HAL_SPI_Receive+0x208>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d102      	bne.n	8005676 <HAL_SPI_Receive+0x20e>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	75fb      	strb	r3, [r7, #23]
          goto error;
 800567a:	e018      	b.n	80056ae <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1ca      	bne.n	800561e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fb4d 	bl	8005d2c <SPI_EndRxTransaction>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
 80056aa:	e000      	b.n	80056ae <HAL_SPI_Receive+0x246>
  }

error :
 80056ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80056be:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056d6:	2301      	movs	r3, #1
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x26>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e1fb      	b.n	8005ae6 <HAL_SPI_TransmitReceive+0x41e>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f6:	f7fd fc7f 	bl	8002ff8 <HAL_GetTick>
 80056fa:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005702:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800570a:	887b      	ldrh	r3, [r7, #2]
 800570c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005712:	7efb      	ldrb	r3, [r7, #27]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d00e      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x6e>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d106      	bne.n	800572e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <HAL_SPI_TransmitReceive+0x66>
 8005728:	7efb      	ldrb	r3, [r7, #27]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d003      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005734:	e1cd      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_SPI_TransmitReceive+0x80>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_SPI_TransmitReceive+0x80>
 8005742:	887b      	ldrh	r3, [r7, #2]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d103      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800574e:	e1c0      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b04      	cmp	r3, #4
 800575a:	d003      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2205      	movs	r2, #5
 8005760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	887a      	ldrh	r2, [r7, #2]
 8005774:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	887a      	ldrh	r2, [r7, #2]
 800577c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	887a      	ldrh	r2, [r7, #2]
 800578a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a6:	d802      	bhi.n	80057ae <HAL_SPI_TransmitReceive+0xe6>
 80057a8:	8a3b      	ldrh	r3, [r7, #16]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d908      	bls.n	80057c0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	e007      	b.n	80057d0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057da:	2b40      	cmp	r3, #64	; 0x40
 80057dc:	d007      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057f6:	d97c      	bls.n	80058f2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_SPI_TransmitReceive+0x13e>
 8005800:	8a7b      	ldrh	r3, [r7, #18]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d169      	bne.n	80058da <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582a:	e056      	b.n	80058da <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b02      	cmp	r3, #2
 8005838:	d11b      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x1aa>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d016      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x1aa>
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	2b01      	cmp	r3, #1
 8005848:	d113      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	d11c      	bne.n	80058ba <HAL_SPI_TransmitReceive+0x1f2>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d016      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	b292      	uxth	r2, r2
 8005898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	1c9a      	adds	r2, r3, #2
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058b6:	2301      	movs	r3, #1
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058ba:	f7fd fb9d 	bl	8002ff8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d807      	bhi.n	80058da <HAL_SPI_TransmitReceive+0x212>
 80058ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d0:	d003      	beq.n	80058da <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80058d8:	e0fb      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1a3      	bne.n	800582c <HAL_SPI_TransmitReceive+0x164>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d19d      	bne.n	800582c <HAL_SPI_TransmitReceive+0x164>
 80058f0:	e0df      	b.n	8005ab2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_SPI_TransmitReceive+0x23a>
 80058fa:	8a7b      	ldrh	r3, [r7, #18]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	f040 80cb 	bne.w	8005a98 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d912      	bls.n	8005932 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	1c9a      	adds	r2, r3, #2
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b02      	subs	r3, #2
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005930:	e0b2      	b.n	8005a98 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	7812      	ldrb	r2, [r2, #0]
 800593e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005958:	e09e      	b.n	8005a98 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d134      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x30a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d02f      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x30a>
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	2b01      	cmp	r3, #1
 8005976:	d12c      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d912      	bls.n	80059a8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	881a      	ldrh	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	1c9a      	adds	r2, r3, #2
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599c:	b29b      	uxth	r3, r3
 800599e:	3b02      	subs	r3, #2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059a6:	e012      	b.n	80059ce <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d148      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x3aa>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d042      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d923      	bls.n	8005a40 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	b292      	uxth	r2, r2
 8005a04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b02      	subs	r3, #2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d81f      	bhi.n	8005a6e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e016      	b.n	8005a6e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f103 020c 	add.w	r2, r3, #12
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a72:	f7fd fac1 	bl	8002ff8 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d803      	bhi.n	8005a8a <HAL_SPI_TransmitReceive+0x3c2>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d102      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x3c8>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a96:	e01c      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f47f af5b 	bne.w	800595a <HAL_SPI_TransmitReceive+0x292>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f47f af54 	bne.w	800595a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f990 	bl	8005ddc <SPI_EndRxTxTransaction>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d006      	beq.n	8005ad0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	661a      	str	r2, [r3, #96]	; 0x60
 8005ace:	e000      	b.n	8005ad2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005ad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3728      	adds	r7, #40	; 0x28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b088      	sub	sp, #32
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	603b      	str	r3, [r7, #0]
 8005afc:	4613      	mov	r3, r2
 8005afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b00:	f7fd fa7a 	bl	8002ff8 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b10:	f7fd fa72 	bl	8002ff8 <HAL_GetTick>
 8005b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	015b      	lsls	r3, r3, #5
 8005b1c:	0d1b      	lsrs	r3, r3, #20
 8005b1e:	69fa      	ldr	r2, [r7, #28]
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
 8005b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b26:	e054      	b.n	8005bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d050      	beq.n	8005bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b30:	f7fd fa62 	bl	8002ff8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d902      	bls.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d13d      	bne.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5e:	d111      	bne.n	8005b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b68:	d004      	beq.n	8005b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b72:	d107      	bne.n	8005b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8c:	d10f      	bne.n	8005bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e017      	b.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d19b      	bne.n	8005b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	2000000c 	.word	0x2000000c

08005c00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c12:	f7fd f9f1 	bl	8002ff8 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	4413      	add	r3, r2
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c22:	f7fd f9e9 	bl	8002ff8 <HAL_GetTick>
 8005c26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c30:	4b3d      	ldr	r3, [pc, #244]	; (8005d28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	00da      	lsls	r2, r3, #3
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	0d1b      	lsrs	r3, r3, #20
 8005c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c42:	fb02 f303 	mul.w	r3, r2, r3
 8005c46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c48:	e060      	b.n	8005d0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c50:	d107      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d104      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d050      	beq.n	8005d0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c6a:	f7fd f9c5 	bl	8002ff8 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d902      	bls.n	8005c80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d13d      	bne.n	8005cfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c98:	d111      	bne.n	8005cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca2:	d004      	beq.n	8005cae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cac:	d107      	bne.n	8005cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc6:	d10f      	bne.n	8005ce8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ce6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e010      	b.n	8005d1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4013      	ands	r3, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d196      	bne.n	8005c4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3728      	adds	r7, #40	; 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	2000000c 	.word	0x2000000c

08005d2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d40:	d111      	bne.n	8005d66 <SPI_EndRxTransaction+0x3a>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d4a:	d004      	beq.n	8005d56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d54:	d107      	bne.n	8005d66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2180      	movs	r1, #128	; 0x80
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff febd 	bl	8005af0 <SPI_WaitFlagStateUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e023      	b.n	8005dd4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d94:	d11d      	bne.n	8005dd2 <SPI_EndRxTransaction+0xa6>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9e:	d004      	beq.n	8005daa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	d113      	bne.n	8005dd2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff ff22 	bl	8005c00 <SPI_WaitFifoStateUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e000      	b.n	8005dd4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f7ff ff03 	bl	8005c00 <SPI_WaitFifoStateUntilTimeout>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e027      	b.n	8005e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fe68 	bl	8005af0 <SPI_WaitFlagStateUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e014      	b.n	8005e60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff fedc 	bl	8005c00 <SPI_WaitFifoStateUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e000      	b.n	8005e60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e049      	b.n	8005f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc f802 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f000 f9ce 	bl	8006248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10f      	bne.n	8005f56 <HAL_TIM_Base_DeInit+0x40>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	f240 4344 	movw	r3, #1092	; 0x444
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d107      	bne.n	8005f56 <HAL_TIM_Base_DeInit+0x40>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fb ffbc 	bl	8001ed4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d001      	beq.n	8005fe8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e033      	b.n	8006050 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	; (800605c <HAL_TIM_Base_Start+0x8c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d009      	beq.n	800600e <HAL_TIM_Base_Start+0x3e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006002:	d004      	beq.n	800600e <HAL_TIM_Base_Start+0x3e>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a15      	ldr	r2, [pc, #84]	; (8006060 <HAL_TIM_Base_Start+0x90>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d115      	bne.n	800603a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_TIM_Base_Start+0x94>)
 8006016:	4013      	ands	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b06      	cmp	r3, #6
 800601e:	d015      	beq.n	800604c <HAL_TIM_Base_Start+0x7c>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006026:	d011      	beq.n	800604c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	e008      	b.n	800604c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0201 	orr.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	e000      	b.n	800604e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40014000 	.word	0x40014000
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6a1a      	ldr	r2, [r3, #32]
 8006076:	f241 1311 	movw	r3, #4369	; 0x1111
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <HAL_TIM_Base_Stop+0x38>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	f240 4344 	movw	r3, #1092	; 0x444
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_Base_Stop+0x38>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0201 	bic.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_ConfigClockSource+0x1c>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0b6      	b.n	8006240 <HAL_TIM_ConfigClockSource+0x18a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d03e      	beq.n	800618e <HAL_TIM_ConfigClockSource+0xd8>
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006114:	f200 8087 	bhi.w	8006226 <HAL_TIM_ConfigClockSource+0x170>
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	f000 8086 	beq.w	800622c <HAL_TIM_ConfigClockSource+0x176>
 8006120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006124:	d87f      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 8006126:	2b70      	cmp	r3, #112	; 0x70
 8006128:	d01a      	beq.n	8006160 <HAL_TIM_ConfigClockSource+0xaa>
 800612a:	2b70      	cmp	r3, #112	; 0x70
 800612c:	d87b      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 800612e:	2b60      	cmp	r3, #96	; 0x60
 8006130:	d050      	beq.n	80061d4 <HAL_TIM_ConfigClockSource+0x11e>
 8006132:	2b60      	cmp	r3, #96	; 0x60
 8006134:	d877      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 8006136:	2b50      	cmp	r3, #80	; 0x50
 8006138:	d03c      	beq.n	80061b4 <HAL_TIM_ConfigClockSource+0xfe>
 800613a:	2b50      	cmp	r3, #80	; 0x50
 800613c:	d873      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d058      	beq.n	80061f4 <HAL_TIM_ConfigClockSource+0x13e>
 8006142:	2b40      	cmp	r3, #64	; 0x40
 8006144:	d86f      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 8006146:	2b30      	cmp	r3, #48	; 0x30
 8006148:	d064      	beq.n	8006214 <HAL_TIM_ConfigClockSource+0x15e>
 800614a:	2b30      	cmp	r3, #48	; 0x30
 800614c:	d86b      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 800614e:	2b20      	cmp	r3, #32
 8006150:	d060      	beq.n	8006214 <HAL_TIM_ConfigClockSource+0x15e>
 8006152:	2b20      	cmp	r3, #32
 8006154:	d867      	bhi.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d05c      	beq.n	8006214 <HAL_TIM_ConfigClockSource+0x15e>
 800615a:	2b10      	cmp	r3, #16
 800615c:	d05a      	beq.n	8006214 <HAL_TIM_ConfigClockSource+0x15e>
 800615e:	e062      	b.n	8006226 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6818      	ldr	r0, [r3, #0]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6899      	ldr	r1, [r3, #8]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f000 f952 	bl	8006418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006182:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	609a      	str	r2, [r3, #8]
      break;
 800618c:	e04f      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6899      	ldr	r1, [r3, #8]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f000 f93b 	bl	8006418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b0:	609a      	str	r2, [r3, #8]
      break;
 80061b2:	e03c      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	6859      	ldr	r1, [r3, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	461a      	mov	r2, r3
 80061c2:	f000 f8af 	bl	8006324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2150      	movs	r1, #80	; 0x50
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 f908 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 80061d2:	e02c      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6859      	ldr	r1, [r3, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	461a      	mov	r2, r3
 80061e2:	f000 f8ce 	bl	8006382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2160      	movs	r1, #96	; 0x60
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f8f8 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 80061f2:	e01c      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	461a      	mov	r2, r3
 8006202:	f000 f88f 	bl	8006324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2140      	movs	r1, #64	; 0x40
 800620c:	4618      	mov	r0, r3
 800620e:	f000 f8e8 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8006212:	e00c      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f000 f8df 	bl	80063e2 <TIM_ITRx_SetConfig>
      break;
 8006224:	e003      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
      break;
 800622a:	e000      	b.n	800622e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800622c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800623e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a2e      	ldr	r2, [pc, #184]	; (8006314 <TIM_Base_SetConfig+0xcc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d003      	beq.n	8006268 <TIM_Base_SetConfig+0x20>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006266:	d108      	bne.n	800627a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a25      	ldr	r2, [pc, #148]	; (8006314 <TIM_Base_SetConfig+0xcc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00f      	beq.n	80062a2 <TIM_Base_SetConfig+0x5a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006288:	d00b      	beq.n	80062a2 <TIM_Base_SetConfig+0x5a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a22      	ldr	r2, [pc, #136]	; (8006318 <TIM_Base_SetConfig+0xd0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_Base_SetConfig+0x5a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <TIM_Base_SetConfig+0xd4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_Base_SetConfig+0x5a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <TIM_Base_SetConfig+0xd8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <TIM_Base_SetConfig+0xcc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_Base_SetConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <TIM_Base_SetConfig+0xd0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_Base_SetConfig+0xb0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a0c      	ldr	r2, [pc, #48]	; (800631c <TIM_Base_SetConfig+0xd4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_Base_SetConfig+0xb0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <TIM_Base_SetConfig+0xd8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d103      	bne.n	8006300 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	615a      	str	r2, [r3, #20]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40012c00 	.word	0x40012c00
 8006318:	40014000 	.word	0x40014000
 800631c:	40014400 	.word	0x40014400
 8006320:	40014800 	.word	0x40014800

08006324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	f023 0201 	bic.w	r2, r3, #1
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 030a 	bic.w	r3, r3, #10
 8006360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	621a      	str	r2, [r3, #32]
}
 8006376:	bf00      	nop
 8006378:	371c      	adds	r7, #28
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006382:	b480      	push	{r7}
 8006384:	b087      	sub	sp, #28
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f023 0210 	bic.w	r2, r3, #16
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	031b      	lsls	r3, r3, #12
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	621a      	str	r2, [r3, #32]
}
 80063d6:	bf00      	nop
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	f043 0307 	orr.w	r3, r3, #7
 8006404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	021a      	lsls	r2, r3, #8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	431a      	orrs	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4313      	orrs	r3, r2
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800646c:	2302      	movs	r3, #2
 800646e:	e04f      	b.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d108      	bne.n	80064ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a14      	ldr	r2, [pc, #80]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d009      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d004      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a10      	ldr	r2, [pc, #64]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d10c      	bne.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40012c00 	.word	0x40012c00
 8006520:	40014000 	.word	0x40014000

08006524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e040      	b.n	80065b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb fcdc 	bl	8001f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2224      	movs	r2, #36	; 0x24
 8006550:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f82c 	bl	80065c0 <UART_SetConfig>
 8006568:	4603      	mov	r3, r0
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e022      	b.n	80065b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f956 	bl	800682c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800658e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800659e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f9dd 	bl	8006970 <UART_CheckIdleState>
 80065b6:	4603      	mov	r3, r0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3708      	adds	r7, #8
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b8a      	ldr	r3, [pc, #552]	; (8006814 <UART_SetConfig+0x254>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	6979      	ldr	r1, [r7, #20]
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a78      	ldr	r2, [pc, #480]	; (8006818 <UART_SetConfig+0x258>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d120      	bne.n	800667e <UART_SetConfig+0xbe>
 800663c:	4b77      	ldr	r3, [pc, #476]	; (800681c <UART_SetConfig+0x25c>)
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	f003 0303 	and.w	r3, r3, #3
 8006644:	2b03      	cmp	r3, #3
 8006646:	d817      	bhi.n	8006678 <UART_SetConfig+0xb8>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x90>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006661 	.word	0x08006661
 8006654:	0800666d 	.word	0x0800666d
 8006658:	08006673 	.word	0x08006673
 800665c:	08006667 	.word	0x08006667
 8006660:	2300      	movs	r3, #0
 8006662:	77fb      	strb	r3, [r7, #31]
 8006664:	e01d      	b.n	80066a2 <UART_SetConfig+0xe2>
 8006666:	2302      	movs	r3, #2
 8006668:	77fb      	strb	r3, [r7, #31]
 800666a:	e01a      	b.n	80066a2 <UART_SetConfig+0xe2>
 800666c:	2304      	movs	r3, #4
 800666e:	77fb      	strb	r3, [r7, #31]
 8006670:	e017      	b.n	80066a2 <UART_SetConfig+0xe2>
 8006672:	2308      	movs	r3, #8
 8006674:	77fb      	strb	r3, [r7, #31]
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0xe2>
 8006678:	2310      	movs	r3, #16
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e011      	b.n	80066a2 <UART_SetConfig+0xe2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a67      	ldr	r2, [pc, #412]	; (8006820 <UART_SetConfig+0x260>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d102      	bne.n	800668e <UART_SetConfig+0xce>
 8006688:	2300      	movs	r3, #0
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0xe2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a64      	ldr	r2, [pc, #400]	; (8006824 <UART_SetConfig+0x264>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d102      	bne.n	800669e <UART_SetConfig+0xde>
 8006698:	2300      	movs	r3, #0
 800669a:	77fb      	strb	r3, [r7, #31]
 800669c:	e001      	b.n	80066a2 <UART_SetConfig+0xe2>
 800669e:	2310      	movs	r3, #16
 80066a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d15b      	bne.n	8006764 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80066ac:	7ffb      	ldrb	r3, [r7, #31]
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d827      	bhi.n	8006702 <UART_SetConfig+0x142>
 80066b2:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0xf8>)
 80066b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	08006703 	.word	0x08006703
 80066c8:	080066f3 	.word	0x080066f3
 80066cc:	08006703 	.word	0x08006703
 80066d0:	08006703 	.word	0x08006703
 80066d4:	08006703 	.word	0x08006703
 80066d8:	080066fb 	.word	0x080066fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fe f87c 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80066e0:	61b8      	str	r0, [r7, #24]
        break;
 80066e2:	e013      	b.n	800670c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e4:	f7fe f89a 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 80066e8:	61b8      	str	r0, [r7, #24]
        break;
 80066ea:	e00f      	b.n	800670c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066ec:	4b4e      	ldr	r3, [pc, #312]	; (8006828 <UART_SetConfig+0x268>)
 80066ee:	61bb      	str	r3, [r7, #24]
        break;
 80066f0:	e00c      	b.n	800670c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f2:	f7fd fff9 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80066f6:	61b8      	str	r0, [r7, #24]
        break;
 80066f8:	e008      	b.n	800670c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066fe:	61bb      	str	r3, [r7, #24]
        break;
 8006700:	e004      	b.n	800670c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	77bb      	strb	r3, [r7, #30]
        break;
 800670a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d074      	beq.n	80067fc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	005a      	lsls	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	441a      	add	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	b29b      	uxth	r3, r3
 8006728:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	2b0f      	cmp	r3, #15
 800672e:	d916      	bls.n	800675e <UART_SetConfig+0x19e>
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006736:	d212      	bcs.n	800675e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f023 030f 	bic.w	r3, r3, #15
 8006740:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	b29b      	uxth	r3, r3
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	b29a      	uxth	r2, r3
 800674e:	89fb      	ldrh	r3, [r7, #14]
 8006750:	4313      	orrs	r3, r2
 8006752:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	89fa      	ldrh	r2, [r7, #14]
 800675a:	60da      	str	r2, [r3, #12]
 800675c:	e04e      	b.n	80067fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	77bb      	strb	r3, [r7, #30]
 8006762:	e04b      	b.n	80067fc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006764:	7ffb      	ldrb	r3, [r7, #31]
 8006766:	2b08      	cmp	r3, #8
 8006768:	d827      	bhi.n	80067ba <UART_SetConfig+0x1fa>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0x1b0>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006795 	.word	0x08006795
 8006774:	0800679d 	.word	0x0800679d
 8006778:	080067a5 	.word	0x080067a5
 800677c:	080067bb 	.word	0x080067bb
 8006780:	080067ab 	.word	0x080067ab
 8006784:	080067bb 	.word	0x080067bb
 8006788:	080067bb 	.word	0x080067bb
 800678c:	080067bb 	.word	0x080067bb
 8006790:	080067b3 	.word	0x080067b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006794:	f7fe f820 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8006798:	61b8      	str	r0, [r7, #24]
        break;
 800679a:	e013      	b.n	80067c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fe f83e 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 80067a0:	61b8      	str	r0, [r7, #24]
        break;
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a4:	4b20      	ldr	r3, [pc, #128]	; (8006828 <UART_SetConfig+0x268>)
 80067a6:	61bb      	str	r3, [r7, #24]
        break;
 80067a8:	e00c      	b.n	80067c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067aa:	f7fd ff9d 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 80067ae:	61b8      	str	r0, [r7, #24]
        break;
 80067b0:	e008      	b.n	80067c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b6:	61bb      	str	r3, [r7, #24]
        break;
 80067b8:	e004      	b.n	80067c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	77bb      	strb	r3, [r7, #30]
        break;
 80067c2:	bf00      	nop
    }

    if (pclk != 0U)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	085a      	lsrs	r2, r3, #1
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	441a      	add	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	b29b      	uxth	r3, r3
 80067de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d908      	bls.n	80067f8 <UART_SetConfig+0x238>
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d204      	bcs.n	80067f8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	60da      	str	r2, [r3, #12]
 80067f6:	e001      	b.n	80067fc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006808:	7fbb      	ldrb	r3, [r7, #30]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3720      	adds	r7, #32
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	efff69f3 	.word	0xefff69f3
 8006818:	40013800 	.word	0x40013800
 800681c:	40021000 	.word	0x40021000
 8006820:	40004400 	.word	0x40004400
 8006824:	40004800 	.word	0x40004800
 8006828:	007a1200 	.word	0x007a1200

0800682c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00a      	beq.n	80068de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01a      	beq.n	8006942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800692a:	d10a      	bne.n	8006942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af02      	add	r7, sp, #8
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006980:	f7fc fb3a 	bl	8002ff8 <HAL_GetTick>
 8006984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b08      	cmp	r3, #8
 8006992:	d10e      	bne.n	80069b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f82d 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e023      	b.n	80069fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d10e      	bne.n	80069de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f817 	bl	8006a02 <UART_WaitOnFlagUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e00d      	b.n	80069fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2220      	movs	r2, #32
 80069e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b09c      	sub	sp, #112	; 0x70
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a12:	e0a5      	b.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	f000 80a1 	beq.w	8006b60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a1e:	f7fc faeb 	bl	8002ff8 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d302      	bcc.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d13e      	bne.n	8006ab2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a48:	667b      	str	r3, [r7, #100]	; 0x64
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a5a:	e841 2300 	strex	r3, r2, [r1]
 8006a5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1e6      	bne.n	8006a34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f023 0301 	bic.w	r3, r3, #1
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3308      	adds	r3, #8
 8006a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a86:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e067      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d04f      	beq.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ace:	d147      	bne.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af8:	637b      	str	r3, [r7, #52]	; 0x34
 8006afa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b2c:	623a      	str	r2, [r7, #32]
 8006b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69f9      	ldr	r1, [r7, #28]
 8006b32:	6a3a      	ldr	r2, [r7, #32]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e010      	b.n	8006b82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	f43f af4a 	beq.w	8006a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3770      	adds	r7, #112	; 0x70
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	; (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	; (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	; (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	; (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 f88a 	bl	8006cb8 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	08006dd8 	.word	0x08006dd8
 8006bc8:	08006dd8 	.word	0x08006dd8
 8006bcc:	08006dd8 	.word	0x08006dd8
 8006bd0:	08006ddc 	.word	0x08006ddc

08006bd4 <__itoa>:
 8006bd4:	1e93      	subs	r3, r2, #2
 8006bd6:	2b22      	cmp	r3, #34	; 0x22
 8006bd8:	b510      	push	{r4, lr}
 8006bda:	460c      	mov	r4, r1
 8006bdc:	d904      	bls.n	8006be8 <__itoa+0x14>
 8006bde:	2300      	movs	r3, #0
 8006be0:	700b      	strb	r3, [r1, #0]
 8006be2:	461c      	mov	r4, r3
 8006be4:	4620      	mov	r0, r4
 8006be6:	bd10      	pop	{r4, pc}
 8006be8:	2a0a      	cmp	r2, #10
 8006bea:	d109      	bne.n	8006c00 <__itoa+0x2c>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	da07      	bge.n	8006c00 <__itoa+0x2c>
 8006bf0:	232d      	movs	r3, #45	; 0x2d
 8006bf2:	700b      	strb	r3, [r1, #0]
 8006bf4:	4240      	negs	r0, r0
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4421      	add	r1, r4
 8006bfa:	f000 f81b 	bl	8006c34 <__utoa>
 8006bfe:	e7f1      	b.n	8006be4 <__itoa+0x10>
 8006c00:	2100      	movs	r1, #0
 8006c02:	e7f9      	b.n	8006bf8 <__itoa+0x24>

08006c04 <itoa>:
 8006c04:	f7ff bfe6 	b.w	8006bd4 <__itoa>

08006c08 <memcpy>:
 8006c08:	440a      	add	r2, r1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c10:	d100      	bne.n	8006c14 <memcpy+0xc>
 8006c12:	4770      	bx	lr
 8006c14:	b510      	push	{r4, lr}
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	d1f9      	bne.n	8006c16 <memcpy+0xe>
 8006c22:	bd10      	pop	{r4, pc}

08006c24 <memset>:
 8006c24:	4402      	add	r2, r0
 8006c26:	4603      	mov	r3, r0
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d100      	bne.n	8006c2e <memset+0xa>
 8006c2c:	4770      	bx	lr
 8006c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c32:	e7f9      	b.n	8006c28 <memset+0x4>

08006c34 <__utoa>:
 8006c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c36:	4c1f      	ldr	r4, [pc, #124]	; (8006cb4 <__utoa+0x80>)
 8006c38:	b08b      	sub	sp, #44	; 0x2c
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	466e      	mov	r6, sp
 8006c40:	f104 0c20 	add.w	ip, r4, #32
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	6861      	ldr	r1, [r4, #4]
 8006c48:	4637      	mov	r7, r6
 8006c4a:	c703      	stmia	r7!, {r0, r1}
 8006c4c:	3408      	adds	r4, #8
 8006c4e:	4564      	cmp	r4, ip
 8006c50:	463e      	mov	r6, r7
 8006c52:	d1f7      	bne.n	8006c44 <__utoa+0x10>
 8006c54:	7921      	ldrb	r1, [r4, #4]
 8006c56:	7139      	strb	r1, [r7, #4]
 8006c58:	1e91      	subs	r1, r2, #2
 8006c5a:	6820      	ldr	r0, [r4, #0]
 8006c5c:	6038      	str	r0, [r7, #0]
 8006c5e:	2922      	cmp	r1, #34	; 0x22
 8006c60:	f04f 0100 	mov.w	r1, #0
 8006c64:	d904      	bls.n	8006c70 <__utoa+0x3c>
 8006c66:	7019      	strb	r1, [r3, #0]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	b00b      	add	sp, #44	; 0x2c
 8006c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c70:	1e58      	subs	r0, r3, #1
 8006c72:	4684      	mov	ip, r0
 8006c74:	fbb5 f7f2 	udiv	r7, r5, r2
 8006c78:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006c7c:	fb02 5617 	mls	r6, r2, r7, r5
 8006c80:	4476      	add	r6, lr
 8006c82:	460c      	mov	r4, r1
 8006c84:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006c88:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006c8c:	462e      	mov	r6, r5
 8006c8e:	42b2      	cmp	r2, r6
 8006c90:	f101 0101 	add.w	r1, r1, #1
 8006c94:	463d      	mov	r5, r7
 8006c96:	d9ed      	bls.n	8006c74 <__utoa+0x40>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	545a      	strb	r2, [r3, r1]
 8006c9c:	1919      	adds	r1, r3, r4
 8006c9e:	1aa5      	subs	r5, r4, r2
 8006ca0:	42aa      	cmp	r2, r5
 8006ca2:	dae2      	bge.n	8006c6a <__utoa+0x36>
 8006ca4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006ca8:	780e      	ldrb	r6, [r1, #0]
 8006caa:	7006      	strb	r6, [r0, #0]
 8006cac:	3201      	adds	r2, #1
 8006cae:	f801 5901 	strb.w	r5, [r1], #-1
 8006cb2:	e7f4      	b.n	8006c9e <__utoa+0x6a>
 8006cb4:	08006db0 	.word	0x08006db0

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
