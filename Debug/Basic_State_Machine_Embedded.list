
Basic_State_Machine_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008204  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800838c  0800838c  0001838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a0  080084a0  000218a8  2**0
                  CONTENTS
  4 .ARM          00000000  080084a0  080084a0  000218a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084a0  080084a0  000218a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a0  080084a0  000184a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000018a8  20000000  080084a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e54  200018a8  08009d50  000218a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200036fc  08009d50  000236fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000218a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c40  00000000  00000000  000218d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359c  00000000  00000000  00038518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0003cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001974e  00000000  00000000  0003e368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ad9  00000000  00000000  00057ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094ca9  00000000  00000000  0007158f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005904  00000000  00000000  00106288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200018a8 	.word	0x200018a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008374 	.word	0x08008374

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200018ac 	.word	0x200018ac
 80001c4:	08008374 	.word	0x08008374

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <Manual_delay>:
 					Entry_flag;

 uint8_t Receive_Buffer[255];

void Manual_delay(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	for(int i=0;i<=500;i++)
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	e002      	b.n	80001fe <Manual_delay+0x12>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000204:	ddf8      	ble.n	80001f8 <Manual_delay+0xc>
	{

	}
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <Lan_Interrupt_Service>:

void Lan_Interrupt_Service(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	if(getSn_IR(0) & (1 << 2))
 8000218:	f44f 7002 	mov.w	r0, #520	; 0x208
 800021c:	f002 fc48 	bl	8002ab0 <WIZCHIP_READ>
 8000220:	4603      	mov	r3, r0
 8000222:	f003 0304 	and.w	r3, r3, #4
 8000226:	2b00      	cmp	r3, #0
 8000228:	d00f      	beq.n	800024a <Lan_Interrupt_Service+0x36>
	{
		recv(0,Receive_Buffer,255);
 800022a:	22ff      	movs	r2, #255	; 0xff
 800022c:	4913      	ldr	r1, [pc, #76]	; (800027c <Lan_Interrupt_Service+0x68>)
 800022e:	2000      	movs	r0, #0
 8000230:	f001 fe6e 	bl	8001f10 <recv>
//		if(Receive_Buffer==PING_ACK_CMD)
//		{
//			//Set State Idle State
//		}

		memset(Receive_Buffer,0,sizeof Receive_Buffer);// clear the receiving buffer
 8000234:	22ff      	movs	r2, #255	; 0xff
 8000236:	2100      	movs	r1, #0
 8000238:	4810      	ldr	r0, [pc, #64]	; (800027c <Lan_Interrupt_Service+0x68>)
 800023a:	f007 ff43 	bl	80080c4 <memset>
		setSn_IR(0, 0x04);
 800023e:	2104      	movs	r1, #4
 8000240:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000244:	f002 fc80 	bl	8002b48 <WIZCHIP_WRITE>

	else
	{
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
	}
}
 8000248:	e015      	b.n	8000276 <Lan_Interrupt_Service+0x62>
	else if(getSn_IR(0) & (1 << 1))
 800024a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800024e:	f002 fc2f 	bl	8002ab0 <WIZCHIP_READ>
 8000252:	4603      	mov	r3, r0
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d007      	beq.n	800026c <Lan_Interrupt_Service+0x58>
		Ethernet_Connect();
 800025c:	f000 fba2 	bl	80009a4 <Ethernet_Connect>
		setSn_IR(0, 0x02);
 8000260:	2102      	movs	r1, #2
 8000262:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000266:	f002 fc6f 	bl	8002b48 <WIZCHIP_WRITE>
}
 800026a:	e004      	b.n	8000276 <Lan_Interrupt_Service+0x62>
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
 800026c:	211f      	movs	r1, #31
 800026e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000272:	f002 fc69 	bl	8002b48 <WIZCHIP_WRITE>
}
 8000276:	bf00      	nop
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	200018e4 	.word	0x200018e4

08000280 <WR_Interrupt_Service>:

void WR_Interrupt_Service(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,WR_TRIG_LED_Pin,GPIO_PIN_SET);
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f003 fed7 	bl	8004040 <HAL_GPIO_WritePin>
	Manual_delay();
 8000292:	f7ff ffab 	bl	80001ec <Manual_delay>
	HAL_GPIO_WritePin(GPIOA,WR_TRIG_LED_Pin,GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f003 fece 	bl	8004040 <HAL_GPIO_WritePin>
	WR_Counts++;
 80002a4:	4b27      	ldr	r3, [pc, #156]	; (8000344 <WR_Interrupt_Service+0xc4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a26      	ldr	r2, [pc, #152]	; (8000344 <WR_Interrupt_Service+0xc4>)
 80002ac:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==0)
 80002ae:	4b26      	ldr	r3, [pc, #152]	; (8000348 <WR_Interrupt_Service+0xc8>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d126      	bne.n	8000304 <WR_Interrupt_Service+0x84>
	{
		switch(WR_Counts)
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <WR_Interrupt_Service+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d002      	beq.n	80002c4 <WR_Interrupt_Service+0x44>
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d012      	beq.n	80002e8 <WR_Interrupt_Service+0x68>
 80002c2:	e020      	b.n	8000306 <WR_Interrupt_Service+0x86>
		{
		case(1):
				send(0, (uint8_t *)INIT_CMD,strlen(INIT_CMD));
 80002c4:	2206      	movs	r2, #6
 80002c6:	4921      	ldr	r1, [pc, #132]	; (800034c <WR_Interrupt_Service+0xcc>)
 80002c8:	2000      	movs	r0, #0
 80002ca:	f001 fd27 	bl	8001d1c <send>
		        Timer2_Start();
 80002ce:	f000 fc2d 	bl	8000b2c <Timer2_Start>
				WR_Instant=Timer2_GetTimer();
 80002d2:	f000 fc79 	bl	8000bc8 <Timer2_GetTimer>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <WR_Interrupt_Service+0xd0>)
 80002dc:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WR_Ring,&WR_Instant);
 80002de:	491c      	ldr	r1, [pc, #112]	; (8000350 <WR_Interrupt_Service+0xd0>)
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <WR_Interrupt_Service+0xd4>)
 80002e2:	f001 fa27 	bl	8001734 <RingWriteElement>
				break;
 80002e6:	e00e      	b.n	8000306 <WR_Interrupt_Service+0x86>
		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 80002e8:	220b      	movs	r2, #11
 80002ea:	491b      	ldr	r1, [pc, #108]	; (8000358 <WR_Interrupt_Service+0xd8>)
 80002ec:	2000      	movs	r0, #0
 80002ee:	f001 fd15 	bl	8001d1c <send>
				Entry_flag=1;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <WR_Interrupt_Service+0xdc>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	801a      	strh	r2, [r3, #0]
				Rt_Lt_flag=1;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <WR_Interrupt_Service+0xe0>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	801a      	strh	r2, [r3, #0]
				Timer6_Start();
 80002fe:	f000 fc1f 	bl	8000b40 <Timer6_Start>
				break;
 8000302:	e000      	b.n	8000306 <WR_Interrupt_Service+0x86>
		}
	}
 8000304:	bf00      	nop

	if(Entry_flag==1)
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <WR_Interrupt_Service+0xdc>)
 8000308:	881b      	ldrh	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d109      	bne.n	8000322 <WR_Interrupt_Service+0xa2>
	{
		WR_Instant=Timer2_GetTimer();
 800030e:	f000 fc5b 	bl	8000bc8 <Timer2_GetTimer>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <WR_Interrupt_Service+0xd0>)
 8000318:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WR_Ring,&WR_Instant);
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <WR_Interrupt_Service+0xd0>)
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <WR_Interrupt_Service+0xd4>)
 800031e:	f001 fa09 	bl	8001734 <RingWriteElement>
	}

	if(count<=TIMEOOUTPERIOD  || WR_Counts>=2 )
 8000322:	4b10      	ldr	r3, [pc, #64]	; (8000364 <WR_Interrupt_Service+0xe4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b14      	cmp	r3, #20
 8000328:	d903      	bls.n	8000332 <WR_Interrupt_Service+0xb2>
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <WR_Interrupt_Service+0xc4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d906      	bls.n	8000340 <WR_Interrupt_Service+0xc0>
	{
		Timer6_Stop();
 8000332:	f000 fc0f 	bl	8000b54 <Timer6_Stop>
		count=0;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <WR_Interrupt_Service+0xe4>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
		Timer6_Start();
 800033c:	f000 fc00 	bl	8000b40 <Timer6_Start>
	}
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200018c4 	.word	0x200018c4
 8000348:	200018dc 	.word	0x200018dc
 800034c:	0800838c 	.word	0x0800838c
 8000350:	200018d0 	.word	0x200018d0
 8000354:	20002e7c 	.word	0x20002e7c
 8000358:	08008394 	.word	0x08008394
 800035c:	200018e0 	.word	0x200018e0
 8000360:	200018de 	.word	0x200018de
 8000364:	20001ce8 	.word	0x20001ce8

08000368 <FCT_Interrupt_Service>:


void FCT_Interrupt_Service(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC,FCT_TRIG_LED_Pin,GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000372:	4849      	ldr	r0, [pc, #292]	; (8000498 <FCT_Interrupt_Service+0x130>)
 8000374:	f003 fe64 	bl	8004040 <HAL_GPIO_WritePin>
	Manual_delay();
 8000378:	f7ff ff38 	bl	80001ec <Manual_delay>
	HAL_GPIO_WritePin(GPIOC,FCT_TRIG_LED_Pin,GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000382:	4845      	ldr	r0, [pc, #276]	; (8000498 <FCT_Interrupt_Service+0x130>)
 8000384:	f003 fe5c 	bl	8004040 <HAL_GPIO_WritePin>
	FCT_Counts++;
 8000388:	4b44      	ldr	r3, [pc, #272]	; (800049c <FCT_Interrupt_Service+0x134>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	4a43      	ldr	r2, [pc, #268]	; (800049c <FCT_Interrupt_Service+0x134>)
 8000390:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==1)
 8000392:	4b43      	ldr	r3, [pc, #268]	; (80004a0 <FCT_Interrupt_Service+0x138>)
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d10a      	bne.n	80003b0 <FCT_Interrupt_Service+0x48>
	{
		FCT_Instant=Timer2_GetTimer();
 800039a:	f000 fc15 	bl	8000bc8 <Timer2_GetTimer>
 800039e:	4603      	mov	r3, r0
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b40      	ldr	r3, [pc, #256]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003a4:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 80003a6:	493f      	ldr	r1, [pc, #252]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003a8:	483f      	ldr	r0, [pc, #252]	; (80004a8 <FCT_Interrupt_Service+0x140>)
 80003aa:	f001 f9c3 	bl	8001734 <RingWriteElement>
 80003ae:	e061      	b.n	8000474 <FCT_Interrupt_Service+0x10c>
	}
	else if(Rt_Lt_flag==1)
 80003b0:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <FCT_Interrupt_Service+0x144>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d15d      	bne.n	8000474 <FCT_Interrupt_Service+0x10c>
	{
		FCT_Instant=Timer2_GetTimer();
 80003b8:	f000 fc06 	bl	8000bc8 <Timer2_GetTimer>
 80003bc:	4603      	mov	r3, r0
 80003be:	461a      	mov	r2, r3
 80003c0:	4b38      	ldr	r3, [pc, #224]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003c2:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 80003c4:	4937      	ldr	r1, [pc, #220]	; (80004a4 <FCT_Interrupt_Service+0x13c>)
 80003c6:	4838      	ldr	r0, [pc, #224]	; (80004a8 <FCT_Interrupt_Service+0x140>)
 80003c8:	f001 f9b4 	bl	8001734 <RingWriteElement>

		//HAL_GPIO_WritePin(GPIOA,CA_TRIG_LED_Pin,GPIO_PIN_RESET);//test
		//Laser ON
		HAL_GPIO_WritePin(GPIOA,LA_TRIG_LED_Pin,GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003d4:	f003 fe34 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,LA_OP_Pin,GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	4834      	ldr	r0, [pc, #208]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 80003e0:	f003 fe2e 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LA_OP1_Pin,GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ee:	f003 fe27 	bl	8004040 <HAL_GPIO_WritePin>
		Manual_delay();
 80003f2:	f7ff fefb 	bl	80001ec <Manual_delay>

		//Camera ON
		HAL_GPIO_WritePin(GPIOA,CA_TRIG_LED_Pin,GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003fe:	f003 fe1f 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000408:	4829      	ldr	r0, [pc, #164]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 800040a:	f003 fe19 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 fe12 	bl	8004040 <HAL_GPIO_WritePin>
		//HAL_Delay(200);

		//Camera OFF
		Manual_delay();
 800041c:	f7ff fee6 	bl	80001ec <Manual_delay>
		Manual_delay();
 8000420:	f7ff fee4 	bl	80001ec <Manual_delay>
		HAL_GPIO_WritePin(GPIOA,CA_TRIG_LED_Pin,GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f003 fe08 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000436:	481e      	ldr	r0, [pc, #120]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 8000438:	f003 fe02 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f003 fdfb 	bl	8004040 <HAL_GPIO_WritePin>
		Manual_delay();
 800044a:	f7ff fecf 	bl	80001ec <Manual_delay>

		//Laser OFF
		HAL_GPIO_WritePin(GPIOA,LA_TRIG_LED_Pin,GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f003 fdf3 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,LA_OP_Pin,GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4813      	ldr	r0, [pc, #76]	; (80004b0 <FCT_Interrupt_Service+0x148>)
 8000462:	f003 fded 	bl	8004040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,LA_OP1_Pin,GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f003 fde6 	bl	8004040 <HAL_GPIO_WritePin>
	}

	if(count<=TIMEOOUTPERIOD  || FCT_Counts>=2 )
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <FCT_Interrupt_Service+0x14c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b14      	cmp	r3, #20
 800047a:	d903      	bls.n	8000484 <FCT_Interrupt_Service+0x11c>
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <FCT_Interrupt_Service+0x134>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d906      	bls.n	8000492 <FCT_Interrupt_Service+0x12a>
	{
		Timer6_Stop();
 8000484:	f000 fb66 	bl	8000b54 <Timer6_Stop>
		count=0;
 8000488:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <FCT_Interrupt_Service+0x14c>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		Timer6_Start();
 800048e:	f000 fb57 	bl	8000b40 <Timer6_Start>
	}

}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	48000800 	.word	0x48000800
 800049c:	200018c8 	.word	0x200018c8
 80004a0:	200018dc 	.word	0x200018dc
 80004a4:	200018d8 	.word	0x200018d8
 80004a8:	20002e9c 	.word	0x20002e9c
 80004ac:	200018de 	.word	0x200018de
 80004b0:	48000400 	.word	0x48000400
 80004b4:	20001ce8 	.word	0x20001ce8

080004b8 <WL_Interrupt_Service>:

void WL_Interrupt_Service(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,WL_TRIG_LED_Pin,GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c2:	482d      	ldr	r0, [pc, #180]	; (8000578 <WL_Interrupt_Service+0xc0>)
 80004c4:	f003 fdbc 	bl	8004040 <HAL_GPIO_WritePin>
	Manual_delay();
 80004c8:	f7ff fe90 	bl	80001ec <Manual_delay>
	HAL_GPIO_WritePin(GPIOB,WL_TRIG_LED_Pin,GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d2:	4829      	ldr	r0, [pc, #164]	; (8000578 <WL_Interrupt_Service+0xc0>)
 80004d4:	f003 fdb4 	bl	8004040 <HAL_GPIO_WritePin>
	WL_Counts++;
 80004d8:	4b28      	ldr	r3, [pc, #160]	; (800057c <WL_Interrupt_Service+0xc4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a27      	ldr	r2, [pc, #156]	; (800057c <WL_Interrupt_Service+0xc4>)
 80004e0:	6013      	str	r3, [r2, #0]
	if(Rt_Lt_flag==0)
 80004e2:	4b27      	ldr	r3, [pc, #156]	; (8000580 <WL_Interrupt_Service+0xc8>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d126      	bne.n	8000538 <WL_Interrupt_Service+0x80>
	{
		switch(WL_Counts)
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <WL_Interrupt_Service+0xc4>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d002      	beq.n	80004f8 <WL_Interrupt_Service+0x40>
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d012      	beq.n	800051c <WL_Interrupt_Service+0x64>
 80004f6:	e020      	b.n	800053a <WL_Interrupt_Service+0x82>
		{
		case(1):
				send(0, (uint8_t *)INIT_CMD,strlen(INIT_CMD));
 80004f8:	2206      	movs	r2, #6
 80004fa:	4922      	ldr	r1, [pc, #136]	; (8000584 <WL_Interrupt_Service+0xcc>)
 80004fc:	2000      	movs	r0, #0
 80004fe:	f001 fc0d 	bl	8001d1c <send>
				Timer2_Start();
 8000502:	f000 fb13 	bl	8000b2c <Timer2_Start>
				WL_Instant=Timer2_GetTimer();
 8000506:	f000 fb5f 	bl	8000bc8 <Timer2_GetTimer>
 800050a:	4603      	mov	r3, r0
 800050c:	461a      	mov	r2, r3
 800050e:	4b1e      	ldr	r3, [pc, #120]	; (8000588 <WL_Interrupt_Service+0xd0>)
 8000510:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WL_Ring,&WL_Instant);
 8000512:	491d      	ldr	r1, [pc, #116]	; (8000588 <WL_Interrupt_Service+0xd0>)
 8000514:	481d      	ldr	r0, [pc, #116]	; (800058c <WL_Interrupt_Service+0xd4>)
 8000516:	f001 f90d 	bl	8001734 <RingWriteElement>
				break;
 800051a:	e00e      	b.n	800053a <WL_Interrupt_Service+0x82>

		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 800051c:	220b      	movs	r2, #11
 800051e:	491c      	ldr	r1, [pc, #112]	; (8000590 <WL_Interrupt_Service+0xd8>)
 8000520:	2000      	movs	r0, #0
 8000522:	f001 fbfb 	bl	8001d1c <send>
				Entry_flag=1;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <WL_Interrupt_Service+0xdc>)
 8000528:	2201      	movs	r2, #1
 800052a:	801a      	strh	r2, [r3, #0]
				Lt_Rt_flag=1;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <WL_Interrupt_Service+0xe0>)
 800052e:	2201      	movs	r2, #1
 8000530:	801a      	strh	r2, [r3, #0]
				Timer6_Start();
 8000532:	f000 fb05 	bl	8000b40 <Timer6_Start>
				break;
 8000536:	e000      	b.n	800053a <WL_Interrupt_Service+0x82>
		}
	}
 8000538:	bf00      	nop

	if(Entry_flag==1)
 800053a:	4b16      	ldr	r3, [pc, #88]	; (8000594 <WL_Interrupt_Service+0xdc>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d109      	bne.n	8000556 <WL_Interrupt_Service+0x9e>
	{
		WL_Instant=Timer2_GetTimer();
 8000542:	f000 fb41 	bl	8000bc8 <Timer2_GetTimer>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <WL_Interrupt_Service+0xd0>)
 800054c:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WL_Ring,&WL_Instant);
 800054e:	490e      	ldr	r1, [pc, #56]	; (8000588 <WL_Interrupt_Service+0xd0>)
 8000550:	480e      	ldr	r0, [pc, #56]	; (800058c <WL_Interrupt_Service+0xd4>)
 8000552:	f001 f8ef 	bl	8001734 <RingWriteElement>
	}

	if(count<=TIMEOOUTPERIOD  || WL_Counts>=2 )
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <WL_Interrupt_Service+0xe4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b14      	cmp	r3, #20
 800055c:	d903      	bls.n	8000566 <WL_Interrupt_Service+0xae>
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <WL_Interrupt_Service+0xc4>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d906      	bls.n	8000574 <WL_Interrupt_Service+0xbc>
	{
		Timer6_Stop();
 8000566:	f000 faf5 	bl	8000b54 <Timer6_Stop>
		count=0;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <WL_Interrupt_Service+0xe4>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
		Timer6_Start();
 8000570:	f000 fae6 	bl	8000b40 <Timer6_Start>
	}
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	48000400 	.word	0x48000400
 800057c:	200018cc 	.word	0x200018cc
 8000580:	200018de 	.word	0x200018de
 8000584:	0800838c 	.word	0x0800838c
 8000588:	200018d4 	.word	0x200018d4
 800058c:	20002ebc 	.word	0x20002ebc
 8000590:	08008394 	.word	0x08008394
 8000594:	200018e0 	.word	0x200018e0
 8000598:	200018dc 	.word	0x200018dc
 800059c:	20001ce8 	.word	0x20001ce8

080005a0 <Send_WR_Samples>:
 buff_size	WR_Ring_Unit,
 			WL_Ring_Unit,
 			FCT_Ring_Unit;

void Send_WR_Samples()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	WR_Roller = (BUFFERSIZE-1)-(WR_Ring.place + 1);
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <Send_WR_Samples+0xa4>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	f06f 0339 	mvn.w	r3, #57	; 0x39
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b24      	ldr	r3, [pc, #144]	; (8000648 <Send_WR_Samples+0xa8>)
 80005b6:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e036      	b.n	800062c <Send_WR_Samples+0x8c>
	{
		RingReadElement(&WR_Ring,&WR_Ring_Unit);
 80005be:	4923      	ldr	r1, [pc, #140]	; (800064c <Send_WR_Samples+0xac>)
 80005c0:	4820      	ldr	r0, [pc, #128]	; (8000644 <Send_WR_Samples+0xa4>)
 80005c2:	f001 f907 	bl	80017d4 <RingReadElement>
		itoa(WR_Ring_Unit,WR_Ring_Bulletin,10);
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <Send_WR_Samples+0xac>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	220a      	movs	r2, #10
 80005cc:	4920      	ldr	r1, [pc, #128]	; (8000650 <Send_WR_Samples+0xb0>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 fd58 	bl	8008084 <itoa>
		unsigned char* WR_Packet;
		WR_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(WR_Ring_Bulletin));
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <Send_WR_Samples+0xb0>)
 80005d6:	f7ff fe01 	bl	80001dc <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	3309      	adds	r3, #9
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 fd52 	bl	8008088 <malloc>
 80005e4:	4603      	mov	r3, r0
 80005e6:	603b      	str	r3, [r7, #0]
		strcpy(WR_Packet,LOG_WRITE_CMD);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	491a      	ldr	r1, [pc, #104]	; (8000654 <Send_WR_Samples+0xb4>)
 80005ec:	461a      	mov	r2, r3
 80005ee:	460b      	mov	r3, r1
 80005f0:	cb03      	ldmia	r3!, {r0, r1}
 80005f2:	6010      	str	r0, [r2, #0]
 80005f4:	6051      	str	r1, [r2, #4]
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	8113      	strh	r3, [r2, #8]
		strcat(WR_Packet,WR_Ring_Bulletin);
 80005fa:	4915      	ldr	r1, [pc, #84]	; (8000650 <Send_WR_Samples+0xb0>)
 80005fc:	6838      	ldr	r0, [r7, #0]
 80005fe:	f007 fe59 	bl	80082b4 <strcat>

		send(0, (buff_size *)WR_Packet,strlen(WR_Packet));
 8000602:	6838      	ldr	r0, [r7, #0]
 8000604:	f7ff fdea 	bl	80001dc <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29b      	uxth	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	2000      	movs	r0, #0
 8000612:	f001 fb83 	bl	8001d1c <send>
		free(WR_Packet);
 8000616:	6838      	ldr	r0, [r7, #0]
 8000618:	f007 fd3e 	bl	8008098 <free>
		WR_Packet=NULL;
 800061c:	2300      	movs	r3, #0
 800061e:	603b      	str	r3, [r7, #0]

		HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f003 fa33 	bl	8003a8c <HAL_Delay>
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3301      	adds	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <Send_WR_Samples+0xa8>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4293      	cmp	r3, r2
 8000636:	ddc2      	ble.n	80005be <Send_WR_Samples+0x1e>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20002e7c 	.word	0x20002e7c
 8000648:	20001a3a 	.word	0x20001a3a
 800064c:	20001a3c 	.word	0x20001a3c
 8000650:	200019e4 	.word	0x200019e4
 8000654:	080083a0 	.word	0x080083a0

08000658 <Send_WL_Samples>:
	}
}


void Send_WL_Samples()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	WL_Roller = (BUFFERSIZE-1)-(WL_Ring.place + 1);
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <Send_WL_Samples+0xa4>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f06f 0339 	mvn.w	r3, #57	; 0x39
 8000668:	1a9b      	subs	r3, r3, r2
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <Send_WL_Samples+0xa8>)
 800066e:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	e036      	b.n	80006e4 <Send_WL_Samples+0x8c>
	{
		RingReadElement(&WL_Ring,&WL_Ring_Unit);
 8000676:	4923      	ldr	r1, [pc, #140]	; (8000704 <Send_WL_Samples+0xac>)
 8000678:	4820      	ldr	r0, [pc, #128]	; (80006fc <Send_WL_Samples+0xa4>)
 800067a:	f001 f8ab 	bl	80017d4 <RingReadElement>
		itoa(WL_Ring_Unit,WL_Ring_Bulletin,10);
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <Send_WL_Samples+0xac>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	220a      	movs	r2, #10
 8000684:	4920      	ldr	r1, [pc, #128]	; (8000708 <Send_WL_Samples+0xb0>)
 8000686:	4618      	mov	r0, r3
 8000688:	f007 fcfc 	bl	8008084 <itoa>
		unsigned char* WL_Packet;
		WL_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(WL_Ring_Bulletin));
 800068c:	481e      	ldr	r0, [pc, #120]	; (8000708 <Send_WL_Samples+0xb0>)
 800068e:	f7ff fda5 	bl	80001dc <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	3309      	adds	r3, #9
 8000696:	4618      	mov	r0, r3
 8000698:	f007 fcf6 	bl	8008088 <malloc>
 800069c:	4603      	mov	r3, r0
 800069e:	603b      	str	r3, [r7, #0]
		strcpy(WL_Packet,LOG_WRITE_CMD);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	491a      	ldr	r1, [pc, #104]	; (800070c <Send_WL_Samples+0xb4>)
 80006a4:	461a      	mov	r2, r3
 80006a6:	460b      	mov	r3, r1
 80006a8:	cb03      	ldmia	r3!, {r0, r1}
 80006aa:	6010      	str	r0, [r2, #0]
 80006ac:	6051      	str	r1, [r2, #4]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	8113      	strh	r3, [r2, #8]
		strcat(WL_Packet,WL_Ring_Bulletin);
 80006b2:	4915      	ldr	r1, [pc, #84]	; (8000708 <Send_WL_Samples+0xb0>)
 80006b4:	6838      	ldr	r0, [r7, #0]
 80006b6:	f007 fdfd 	bl	80082b4 <strcat>

		send(0, (buff_size *)WL_Packet,strlen(WL_Packet));
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	f7ff fd8e 	bl	80001dc <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	461a      	mov	r2, r3
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	2000      	movs	r0, #0
 80006ca:	f001 fb27 	bl	8001d1c <send>
		free(WL_Packet);
 80006ce:	6838      	ldr	r0, [r7, #0]
 80006d0:	f007 fce2 	bl	8008098 <free>
		WL_Packet=NULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	603b      	str	r3, [r7, #0]
		HAL_Delay(100);
 80006d8:	2064      	movs	r0, #100	; 0x64
 80006da:	f003 f9d7 	bl	8003a8c <HAL_Delay>
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <Send_WL_Samples+0xa8>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	ddc2      	ble.n	8000676 <Send_WL_Samples+0x1e>
	}
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20002ebc 	.word	0x20002ebc
 8000700:	20001a3b 	.word	0x20001a3b
 8000704:	20001a40 	.word	0x20001a40
 8000708:	20001a0c 	.word	0x20001a0c
 800070c:	080083a0 	.word	0x080083a0

08000710 <Send_Data>:

void Send_Data()
{
 8000710:	b598      	push	{r3, r4, r7, lr}
 8000712:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)GRAB_STOP_CMD,strlen(GRAB_STOP_CMD));
 8000714:	220a      	movs	r2, #10
 8000716:	495b      	ldr	r1, [pc, #364]	; (8000884 <Send_Data+0x174>)
 8000718:	2000      	movs	r0, #0
 800071a:	f001 faff 	bl	8001d1c <send>
	HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	; 0x64
 8000720:	f003 f9b4 	bl	8003a8c <HAL_Delay>
	send(0, (uint8_t *)LOG_START_CMD,strlen(LOG_START_CMD));
 8000724:	220a      	movs	r2, #10
 8000726:	4958      	ldr	r1, [pc, #352]	; (8000888 <Send_Data+0x178>)
 8000728:	2000      	movs	r0, #0
 800072a:	f001 faf7 	bl	8001d1c <send>
	HAL_Delay(100);
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f003 f9ac 	bl	8003a8c <HAL_Delay>

	send(0, (uint8_t *)LOG_WR_CMD,strlen(LOG_WR_CMD));
 8000734:	220d      	movs	r2, #13
 8000736:	4955      	ldr	r1, [pc, #340]	; (800088c <Send_Data+0x17c>)
 8000738:	2000      	movs	r0, #0
 800073a:	f001 faef 	bl	8001d1c <send>
	HAL_Delay(100);
 800073e:	2064      	movs	r0, #100	; 0x64
 8000740:	f003 f9a4 	bl	8003a8c <HAL_Delay>

	Send_WR_Samples();//send WR Samples
 8000744:	f7ff ff2c 	bl	80005a0 <Send_WR_Samples>
	HAL_Delay(100);
 8000748:	2064      	movs	r0, #100	; 0x64
 800074a:	f003 f99f 	bl	8003a8c <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 800074e:	220c      	movs	r2, #12
 8000750:	494f      	ldr	r1, [pc, #316]	; (8000890 <Send_Data+0x180>)
 8000752:	2000      	movs	r0, #0
 8000754:	f001 fae2 	bl	8001d1c <send>
	HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f003 f997 	bl	8003a8c <HAL_Delay>

	send(0, (uint8_t *)LOG_FCT_CMD,strlen(LOG_FCT_CMD));
 800075e:	220e      	movs	r2, #14
 8000760:	494c      	ldr	r1, [pc, #304]	; (8000894 <Send_Data+0x184>)
 8000762:	2000      	movs	r0, #0
 8000764:	f001 fada 	bl	8001d1c <send>
	HAL_Delay(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f003 f98f 	bl	8003a8c <HAL_Delay>

	//Send_FCT_Samples();//send  Samples
	HAL_Delay(100);
 800076e:	2064      	movs	r0, #100	; 0x64
 8000770:	f003 f98c 	bl	8003a8c <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 8000774:	220c      	movs	r2, #12
 8000776:	4946      	ldr	r1, [pc, #280]	; (8000890 <Send_Data+0x180>)
 8000778:	2000      	movs	r0, #0
 800077a:	f001 facf 	bl	8001d1c <send>
	HAL_Delay(100);
 800077e:	2064      	movs	r0, #100	; 0x64
 8000780:	f003 f984 	bl	8003a8c <HAL_Delay>

	send(0, (uint8_t *)LOG_WL_CMD,strlen(LOG_WL_CMD));
 8000784:	220d      	movs	r2, #13
 8000786:	4944      	ldr	r1, [pc, #272]	; (8000898 <Send_Data+0x188>)
 8000788:	2000      	movs	r0, #0
 800078a:	f001 fac7 	bl	8001d1c <send>
	HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f003 f97c 	bl	8003a8c <HAL_Delay>

	Send_WL_Samples();
 8000794:	f7ff ff60 	bl	8000658 <Send_WL_Samples>
	HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f003 f977 	bl	8003a8c <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 800079e:	220c      	movs	r2, #12
 80007a0:	493b      	ldr	r1, [pc, #236]	; (8000890 <Send_Data+0x180>)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f001 faba 	bl	8001d1c <send>
	HAL_Delay(100);
 80007a8:	2064      	movs	r0, #100	; 0x64
 80007aa:	f003 f96f 	bl	8003a8c <HAL_Delay>

	itoa(WR_Counts,WR_Count_Bulletin,10);
 80007ae:	4b3b      	ldr	r3, [pc, #236]	; (800089c <Send_Data+0x18c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	220a      	movs	r2, #10
 80007b4:	493a      	ldr	r1, [pc, #232]	; (80008a0 <Send_Data+0x190>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f007 fc64 	bl	8008084 <itoa>
	send(0, (buff_size *)strcat(WR_Count_Bulletin,","),strlen(WR_Count_Bulletin));
 80007bc:	4838      	ldr	r0, [pc, #224]	; (80008a0 <Send_Data+0x190>)
 80007be:	f7ff fd0d 	bl	80001dc <strlen>
 80007c2:	4603      	mov	r3, r0
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <Send_Data+0x190>)
 80007c8:	4413      	add	r3, r2
 80007ca:	4936      	ldr	r1, [pc, #216]	; (80008a4 <Send_Data+0x194>)
 80007cc:	461a      	mov	r2, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	8013      	strh	r3, [r2, #0]
 80007d4:	4c32      	ldr	r4, [pc, #200]	; (80008a0 <Send_Data+0x190>)
 80007d6:	4832      	ldr	r0, [pc, #200]	; (80008a0 <Send_Data+0x190>)
 80007d8:	f7ff fd00 	bl	80001dc <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	b29b      	uxth	r3, r3
 80007e0:	461a      	mov	r2, r3
 80007e2:	4621      	mov	r1, r4
 80007e4:	2000      	movs	r0, #0
 80007e6:	f001 fa99 	bl	8001d1c <send>

	HAL_Delay(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f003 f94e 	bl	8003a8c <HAL_Delay>
	itoa(FCT_Counts,FCT_Count_Bulletin,10);
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <Send_Data+0x198>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	220a      	movs	r2, #10
 80007f6:	492d      	ldr	r1, [pc, #180]	; (80008ac <Send_Data+0x19c>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f007 fc43 	bl	8008084 <itoa>
	send(0, (buff_size *)strcat(FCT_Count_Bulletin,","),strlen(FCT_Count_Bulletin));
 80007fe:	482b      	ldr	r0, [pc, #172]	; (80008ac <Send_Data+0x19c>)
 8000800:	f7ff fcec 	bl	80001dc <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <Send_Data+0x19c>)
 800080a:	4413      	add	r3, r2
 800080c:	4925      	ldr	r1, [pc, #148]	; (80008a4 <Send_Data+0x194>)
 800080e:	461a      	mov	r2, r3
 8000810:	460b      	mov	r3, r1
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	8013      	strh	r3, [r2, #0]
 8000816:	4c25      	ldr	r4, [pc, #148]	; (80008ac <Send_Data+0x19c>)
 8000818:	4824      	ldr	r0, [pc, #144]	; (80008ac <Send_Data+0x19c>)
 800081a:	f7ff fcdf 	bl	80001dc <strlen>
 800081e:	4603      	mov	r3, r0
 8000820:	b29b      	uxth	r3, r3
 8000822:	461a      	mov	r2, r3
 8000824:	4621      	mov	r1, r4
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fa78 	bl	8001d1c <send>

	HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f003 f92d 	bl	8003a8c <HAL_Delay>
	itoa(WL_Counts,WL_Count_Bulletin,10);
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <Send_Data+0x1a0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	220a      	movs	r2, #10
 8000838:	491e      	ldr	r1, [pc, #120]	; (80008b4 <Send_Data+0x1a4>)
 800083a:	4618      	mov	r0, r3
 800083c:	f007 fc22 	bl	8008084 <itoa>
	send(0, (buff_size *)strcat(WL_Count_Bulletin,","),strlen(WL_Count_Bulletin));
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <Send_Data+0x1a4>)
 8000842:	f7ff fccb 	bl	80001dc <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <Send_Data+0x1a4>)
 800084c:	4413      	add	r3, r2
 800084e:	4915      	ldr	r1, [pc, #84]	; (80008a4 <Send_Data+0x194>)
 8000850:	461a      	mov	r2, r3
 8000852:	460b      	mov	r3, r1
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	8013      	strh	r3, [r2, #0]
 8000858:	4c16      	ldr	r4, [pc, #88]	; (80008b4 <Send_Data+0x1a4>)
 800085a:	4816      	ldr	r0, [pc, #88]	; (80008b4 <Send_Data+0x1a4>)
 800085c:	f7ff fcbe 	bl	80001dc <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b29b      	uxth	r3, r3
 8000864:	461a      	mov	r2, r3
 8000866:	4621      	mov	r1, r4
 8000868:	2000      	movs	r0, #0
 800086a:	f001 fa57 	bl	8001d1c <send>

	HAL_Delay(100);
 800086e:	2064      	movs	r0, #100	; 0x64
 8000870:	f003 f90c 	bl	8003a8c <HAL_Delay>
	send(0, (uint8_t *)LOG_STOP_CMD,strlen(LOG_STOP_CMD));
 8000874:	2209      	movs	r2, #9
 8000876:	4910      	ldr	r1, [pc, #64]	; (80008b8 <Send_Data+0x1a8>)
 8000878:	2000      	movs	r0, #0
 800087a:	f001 fa4f 	bl	8001d1c <send>
}
 800087e:	bf00      	nop
 8000880:	bd98      	pop	{r3, r4, r7, pc}
 8000882:	bf00      	nop
 8000884:	080083ac 	.word	0x080083ac
 8000888:	080083b8 	.word	0x080083b8
 800088c:	080083c4 	.word	0x080083c4
 8000890:	080083d4 	.word	0x080083d4
 8000894:	080083e4 	.word	0x080083e4
 8000898:	080083f4 	.word	0x080083f4
 800089c:	200018c4 	.word	0x200018c4
 80008a0:	20001a18 	.word	0x20001a18
 80008a4:	08008404 	.word	0x08008404
 80008a8:	200018c8 	.word	0x200018c8
 80008ac:	20001a30 	.word	0x20001a30
 80008b0:	200018cc 	.word	0x200018cc
 80008b4:	20001a24 	.word	0x20001a24
 80008b8:	08008408 	.word	0x08008408

080008bc <cs_sel>:
uint8_t  IntStatus;
uint8_t  Sock_Rx_Flag;
uint8_t  Sock_Disconnect_Flag;

void cs_sel(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_RESET); //CS LOW
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <cs_sel+0x14>)
 80008c6:	f003 fbbb 	bl	8004040 <HAL_GPIO_WritePin>
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400

080008d4 <cs_desel>:

void cs_desel(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET); //CS HIGH
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <cs_desel+0x14>)
 80008de:	f003 fbaf 	bl	8004040 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	48000400 	.word	0x48000400

080008ec <Init_Ethernet>:


void Init_Ethernet(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
	uint8_t bufSize[] = {2, 2, 2, 2};
 80008f2:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 80008f6:	61fb      	str	r3, [r7, #28]

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80008f8:	4922      	ldr	r1, [pc, #136]	; (8000984 <Init_Ethernet+0x98>)
 80008fa:	4823      	ldr	r0, [pc, #140]	; (8000988 <Init_Ethernet+0x9c>)
 80008fc:	f002 fbcc 	bl	8003098 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000900:	4922      	ldr	r1, [pc, #136]	; (800098c <Init_Ethernet+0xa0>)
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <Init_Ethernet+0xa4>)
 8000904:	f002 fbee 	bl	80030e4 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);
 8000908:	f107 021c 	add.w	r2, r7, #28
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fd3c 	bl	8003390 <wizchip_init>
	wiz_NetInfo netInfo = { .mac = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}, // Mac address
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	f8c3 2013 	str.w	r2, [r3, #19]
 800092a:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <Init_Ethernet+0xa8>)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000932:	6018      	str	r0, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	8019      	strh	r1, [r3, #0]
 8000938:	4a17      	ldr	r2, [pc, #92]	; (8000998 <Init_Ethernet+0xac>)
 800093a:	f107 030a 	add.w	r3, r7, #10
 800093e:	6810      	ldr	r0, [r2, #0]
 8000940:	6018      	str	r0, [r3, #0]
 8000942:	4a16      	ldr	r2, [pc, #88]	; (800099c <Init_Ethernet+0xb0>)
 8000944:	f107 030e 	add.w	r3, r7, #14
 8000948:	6810      	ldr	r0, [r2, #0]
 800094a:	6018      	str	r0, [r3, #0]
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <Init_Ethernet+0xb4>)
 800094e:	f107 0312 	add.w	r3, r7, #18
 8000952:	6810      	ldr	r0, [r2, #0]
 8000954:	6018      	str	r0, [r3, #0]
	 .ip = {192, 168, 1, 204},    // IP address
	 .sn = {255, 255, 255, 0},    // Subnet mask
	 .gw = {192, 168, 1, 1}};    // Gateway address

	wizchip_setnetinfo(&netInfo);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f002 ff87 	bl	800386c <wizchip_setnetinfo>
	wizchip_getnetinfo(&netInfo);
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4618      	mov	r0, r3
 8000962:	f002 ffc3 	bl	80038ec <wizchip_getnetinfo>

	setSn_IMR(0, 0x06);
 8000966:	2106      	movs	r1, #6
 8000968:	f642 4008 	movw	r0, #11272	; 0x2c08
 800096c:	f002 f8ec 	bl	8002b48 <WIZCHIP_WRITE>
	WIZCHIP_WRITE(SIMR,0x01);
 8000970:	2101      	movs	r1, #1
 8000972:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8000976:	f002 f8e7 	bl	8002b48 <WIZCHIP_WRITE>
}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	080008d5 	.word	0x080008d5
 8000988:	080008bd 	.word	0x080008bd
 800098c:	08000a95 	.word	0x08000a95
 8000990:	08000a71 	.word	0x08000a71
 8000994:	08008414 	.word	0x08008414
 8000998:	0800841c 	.word	0x0800841c
 800099c:	08008420 	.word	0x08008420
 80009a0:	08008424 	.word	0x08008424

080009a4 <Ethernet_Connect>:

void Ethernet_Connect(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	Init_Ethernet();
 80009a8:	f7ff ffa0 	bl	80008ec <Init_Ethernet>


	while(Connect_Reply !=SOCK_OK)
 80009ac:	e012      	b.n	80009d4 <Ethernet_Connect+0x30>
	{
		socket(0, Sn_MR_TCP, PORT_ADDR, SF_TCP_NODELAY);
 80009ae:	2320      	movs	r3, #32
 80009b0:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 80009b4:	2101      	movs	r1, #1
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 ff50 	bl	800185c <socket>
		Refresh_Watchdog();
 80009bc:	f000 f822 	bl	8000a04 <Refresh_Watchdog>
		Connect_Reply = connect(0,server_Add,PORT_ADDR);
 80009c0:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 80009c4:	490d      	ldr	r1, [pc, #52]	; (80009fc <Ethernet_Connect+0x58>)
 80009c6:	2000      	movs	r0, #0
 80009c8:	f001 f8cc 	bl	8001b64 <connect>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009d2:	701a      	strb	r2, [r3, #0]
	while(Connect_Reply !=SOCK_OK)
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d1e8      	bne.n	80009ae <Ethernet_Connect+0xa>
	}

	if(Connect_Reply == 1)
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d102      	bne.n	80009ea <Ethernet_Connect+0x46>
	{
		Connect_Reply = 0;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <Ethernet_Connect+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(500);
 80009ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ee:	f003 f84d 	bl	8003a8c <HAL_Delay>
	Refresh_Watchdog();
 80009f2:	f000 f807 	bl	8000a04 <Refresh_Watchdog>

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20001a44 	.word	0x20001a44

08000a04 <Refresh_Watchdog>:

void Refresh_Watchdog(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	IWDG->KR  = 0x0000AAAA;
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <Refresh_Watchdog+0x18>)
 8000a0a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000a0e:	601a      	str	r2, [r3, #0]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40003000 	.word	0x40003000

08000a20 <Get_event>:
#include"event.h"

struct EventStruct test_Events = {NULL_Event,NULL_Event};

myEvents Get_event()
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

	return test_Events.Next_Event;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <Get_event+0x14>)
 8000a26:	785b      	ldrb	r3, [r3, #1]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20001a48 	.word	0x20001a48

08000a38 <Set_event>:

void Set_event(myEvents N_E)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	test_Events.Next_Event = N_E;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <Set_event+0x1c>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	7053      	strb	r3, [r2, #1]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	20001a48 	.word	0x20001a48

08000a58 <Reset_event>:



void Reset_event()
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	test_Events.Next_Event=NULL_Event;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <Reset_event+0x14>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	705a      	strb	r2, [r3, #1]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	20001a48 	.word	0x20001a48

08000a70 <spi_rb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi_rb(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi3, &rbuf, 1, 0xffffffff);
 8000a76:	1df9      	adds	r1, r7, #7
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <spi_rb+0x20>)
 8000a80:	f005 fd39 	bl	80064f6 <HAL_SPI_Receive>
	return rbuf;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20001ad0 	.word	0x20001ad0

08000a94 <spi_wb>:

void spi_wb(uint8_t b)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xffffffff);
 8000a9e:	1df9      	adds	r1, r7, #7
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <spi_wb+0x20>)
 8000aa8:	f005 fbb7 	bl	800621a <HAL_SPI_Transmit>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20001ad0 	.word	0x20001ad0

08000ab8 <Timer2_Stop>:

void Timer2_Stop()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8000abc:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <Timer2_Stop+0x10>)
 8000abe:	f006 fb19 	bl	80070f4 <HAL_TIM_Base_Stop>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20001b34 	.word	0x20001b34

08000acc <Timer2_DeInitilized>:

void Timer2_DeInitilized()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <Timer2_DeInitilized+0x20>)
 8000ad2:	f006 fa66 	bl	8006fa2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim6);
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <Timer2_DeInitilized+0x24>)
 8000ad8:	f006 fa63 	bl	8006fa2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim16);
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <Timer2_DeInitilized+0x28>)
 8000ade:	f006 fa60 	bl	8006fa2 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim17);
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <Timer2_DeInitilized+0x2c>)
 8000ae4:	f006 fa5d 	bl	8006fa2 <HAL_TIM_Base_DeInit>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20001b34 	.word	0x20001b34
 8000af0:	20001b80 	.word	0x20001b80
 8000af4:	20001bcc 	.word	0x20001bcc
 8000af8:	20001c18 	.word	0x20001c18

08000afc <Timer2_Initilized>:

void Timer2_Initilized()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <Timer2_Initilized+0x20>)
 8000b02:	f006 f9f7 	bl	8006ef4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim6);
 8000b06:	4806      	ldr	r0, [pc, #24]	; (8000b20 <Timer2_Initilized+0x24>)
 8000b08:	f006 f9f4 	bl	8006ef4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim16);
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <Timer2_Initilized+0x28>)
 8000b0e:	f006 f9f1 	bl	8006ef4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim17);
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <Timer2_Initilized+0x2c>)
 8000b14:	f006 f9ee 	bl	8006ef4 <HAL_TIM_Base_Init>
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20001b34 	.word	0x20001b34
 8000b20:	20001b80 	.word	0x20001b80
 8000b24:	20001bcc 	.word	0x20001bcc
 8000b28:	20001c18 	.word	0x20001c18

08000b2c <Timer2_Start>:

void Timer2_Start()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <Timer2_Start+0x10>)
 8000b32:	f006 fa93 	bl	800705c <HAL_TIM_Base_Start>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20001b34 	.word	0x20001b34

08000b40 <Timer6_Start>:

void Timer6_Start()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <Timer6_Start+0x10>)
 8000b46:	f006 fafd 	bl	8007144 <HAL_TIM_Base_Start_IT>
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20001b80 	.word	0x20001b80

08000b54 <Timer6_Stop>:

void Timer6_Stop()
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <Timer6_Stop+0x10>)
 8000b5a:	f006 fb47 	bl	80071ec <HAL_TIM_Base_Stop_IT>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20001b80 	.word	0x20001b80

08000b68 <Timer16_Start>:

void Timer16_Start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim16);
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Timer16_Start+0x14>)
 8000b6e:	f006 f9c1 	bl	8006ef4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim16);
 8000b72:	4802      	ldr	r0, [pc, #8]	; (8000b7c <Timer16_Start+0x14>)
 8000b74:	f006 fae6 	bl	8007144 <HAL_TIM_Base_Start_IT>
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20001bcc 	.word	0x20001bcc

08000b80 <Timer16_Stop>:

void Timer16_Stop()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim16);
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <Timer16_Stop+0x14>)
 8000b86:	f006 fb31 	bl	80071ec <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_DeInit(&htim16);
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <Timer16_Stop+0x14>)
 8000b8c:	f006 fa09 	bl	8006fa2 <HAL_TIM_Base_DeInit>
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20001bcc 	.word	0x20001bcc

08000b98 <Timer17_Start>:

void Timer17_Start()
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim17);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <Timer17_Start+0x14>)
 8000b9e:	f006 f9a9 	bl	8006ef4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim17);
 8000ba2:	4802      	ldr	r0, [pc, #8]	; (8000bac <Timer17_Start+0x14>)
 8000ba4:	f006 face 	bl	8007144 <HAL_TIM_Base_Start_IT>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20001c18 	.word	0x20001c18

08000bb0 <Timer17_Stop>:

void Timer17_Stop()
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim17);
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <Timer17_Stop+0x14>)
 8000bb6:	f006 fb19 	bl	80071ec <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_DeInit(&htim17);
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <Timer17_Stop+0x14>)
 8000bbc:	f006 f9f1 	bl	8006fa2 <HAL_TIM_Base_DeInit>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20001c18 	.word	0x20001c18

08000bc8 <Timer2_GetTimer>:

int Timer2_GetTimer()
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
	uint32_t Tim_val = __HAL_TIM_GetCounter(&htim2);
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <Timer2_GetTimer+0x1c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	607b      	str	r3, [r7, #4]
	return Tim_val;
 8000bd6:	687b      	ldr	r3, [r7, #4]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	20001b34 	.word	0x20001b34

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09a      	sub	sp, #104	; 0x68
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f002 fee7 	bl	80039c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f945 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 fbad 	bl	8001354 <MX_GPIO_Init>
  MX_RTC_Init();
 8000bfa:	f000 f9ad 	bl	8000f58 <MX_RTC_Init>
  MX_SPI2_Init();
 8000bfe:	f000 fa23 	bl	8001048 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c02:	f000 fa5f 	bl	80010c4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000c06:	f000 fa9b 	bl	8001140 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000c0a:	f000 fb6f 	bl	80012ec <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000c0e:	f000 fae5 	bl	80011dc <MX_TIM6_Init>
  MX_TIM16_Init();
 8000c12:	f000 fb1b 	bl	800124c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000c16:	f000 fb41 	bl	800129c <MX_TIM17_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(RtcHandle, &sTime, RTC_FORMAT_BIN);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	488a      	ldr	r0, [pc, #552]	; (8000e4c <main+0x264>)
 8000c24:	f004 ffa4 	bl	8005b70 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(RtcHandle, &sDate, RTC_FORMAT_BIN);
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4886      	ldr	r0, [pc, #536]	; (8000e4c <main+0x264>)
 8000c32:	f005 f8a2 	bl	8005d7a <HAL_RTC_GetDate>
	  //mseconds = (sTime.SubSeconds * 1000) / (sTime.SecondFraction + 1);

	  switch(Get_state())
 8000c36:	f001 fb6b 	bl	8002310 <Get_state>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d8eb      	bhi.n	8000c1a <main+0x32>
 8000c42:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <main+0x60>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c65 	.word	0x08000c65
 8000c4c:	08000c9d 	.word	0x08000c9d
 8000c50:	08000cbd 	.word	0x08000cbd
 8000c54:	08000dd3 	.word	0x08000dd3
 8000c58:	08000df1 	.word	0x08000df1
 8000c5c:	08000e0f 	.word	0x08000e0f
 8000c60:	08000e1f 	.word	0x08000e1f
	  	  {
	  	  case Initilisation_State:
	  		  Initilisation_State_Handler();
 8000c64:	f001 fb70 	bl	8002348 <Initilisation_State_Handler>

	  		  if(Get_event()==Reset_Event)
 8000c68:	f7ff feda 	bl	8000a20 <Get_event>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	f040 80dd 	bne.w	8000e2e <main+0x246>
	  		  {
		  		  ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP);
 8000c74:	4976      	ldr	r1, [pc, #472]	; (8000e50 <main+0x268>)
 8000c76:	200f      	movs	r0, #15
 8000c78:	f002 fa60 	bl	800313c <ctlwizchip>
		  		  if((Phy_TCP_IP==PHY_LINK_OFF) || (PortStatus==SOCKERR_SOCKSTATUS))
 8000c7c:	4b74      	ldr	r3, [pc, #464]	; (8000e50 <main+0x268>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d004      	beq.n	8000c8e <main+0xa6>
 8000c84:	4b73      	ldr	r3, [pc, #460]	; (8000e54 <main+0x26c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f113 0f07 	cmn.w	r3, #7
 8000c8c:	d103      	bne.n	8000c96 <main+0xae>
		  		  {
		  			  Set_state(Initilisation_State);
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f001 fb4a 	bl	8002328 <Set_state>
		  		  else
		  		  {
		  			Reset_State_Handler();
		  		  }
	  		  }
	  		  break;
 8000c94:	e0cb      	b.n	8000e2e <main+0x246>
		  			Reset_State_Handler();
 8000c96:	f001 fbb7 	bl	8002408 <Reset_State_Handler>
	  		  break;
 8000c9a:	e0c8      	b.n	8000e2e <main+0x246>

	  	  case Reset_State:
	  		  if(Get_event()==Idle_Event)
 8000c9c:	f7ff fec0 	bl	8000a20 <Get_event>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	f040 80c5 	bne.w	8000e32 <main+0x24a>
	  		  {
	  			  Idle_State_Handler();
 8000ca8:	f001 fc06 	bl	80024b8 <Idle_State_Handler>
	  			  Timer16_Stop();
 8000cac:	f7ff ff68 	bl	8000b80 <Timer16_Stop>
	  			  tim16_count=0;
 8000cb0:	4b69      	ldr	r3, [pc, #420]	; (8000e58 <main+0x270>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
	  			  Timer16_Start();
 8000cb6:	f7ff ff57 	bl	8000b68 <Timer16_Start>
	  		  }
	  		  break;
 8000cba:	e0ba      	b.n	8000e32 <main+0x24a>

	  	  case Idle_State:
	  		  if(Get_event()==WRSide_Train_Detect_Event)
 8000cbc:	f7ff feb0 	bl	8000a20 <Get_event>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d102      	bne.n	8000ccc <main+0xe4>
	  		  {
	  			  WRSide_Train_Presence_State_Handler();
 8000cc6:	f001 fc01 	bl	80024cc <WRSide_Train_Presence_State_Handler>
 8000cca:	e006      	b.n	8000cda <main+0xf2>
	  		  }
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
 8000ccc:	f7ff fea8 	bl	8000a20 <Get_event>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	d101      	bne.n	8000cda <main+0xf2>
	  		  {
	  			  WLSide_Train_Presence_State_Handler();
 8000cd6:	f001 fc07 	bl	80024e8 <WLSide_Train_Presence_State_Handler>
	  		  }

	  		  uint8_t  server_Address[4] = {192,168,1,111};
 8000cda:	4b60      	ldr	r3, [pc, #384]	; (8000e5c <main+0x274>)
 8000cdc:	607b      	str	r3, [r7, #4]
	  		  Refresh_Watchdog();
 8000cde:	f7ff fe91 	bl	8000a04 <Refresh_Watchdog>
	  		  connect(0,server_Address,PORT_ADDR);
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 8000ce8:	4619      	mov	r1, r3
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 ff3a 	bl	8001b64 <connect>
	  		  remote = getsockopt(0,SO_STATUS, &remotePort);
 8000cf0:	4a5b      	ldr	r2, [pc, #364]	; (8000e60 <main+0x278>)
 8000cf2:	210a      	movs	r1, #10
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f001 f9f3 	bl	80020e0 <getsockopt>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4b59      	ldr	r3, [pc, #356]	; (8000e64 <main+0x27c>)
 8000d00:	701a      	strb	r2, [r3, #0]
	  		  if(remotePort==28)
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <main+0x278>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b1c      	cmp	r3, #28
 8000d08:	d102      	bne.n	8000d10 <main+0x128>
	  		  {
	  			  Set_state(Initilisation_State);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f001 fb0c 	bl	8002328 <Set_state>
	  		  }

	  		   //Check for physical connection.
	  		  ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP);
 8000d10:	494f      	ldr	r1, [pc, #316]	; (8000e50 <main+0x268>)
 8000d12:	200f      	movs	r0, #15
 8000d14:	f002 fa12 	bl	800313c <ctlwizchip>
	  		  if(Phy_TCP_IP==PHY_LINK_OFF)
 8000d18:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <main+0x268>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <main+0x140>
	  		  {
	  			  Set_state(Initilisation_State);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f001 fb01 	bl	8002328 <Set_state>
  					}
	  				Timer17_Stop();
	  				tim17_count=0;
	  			  }
	  		  }
	  		  break;
 8000d26:	e086      	b.n	8000e36 <main+0x24e>
	  		  else if(Phy_TCP_IP==PHY_LINK_ON)
 8000d28:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <main+0x268>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	f040 8082 	bne.w	8000e36 <main+0x24e>
	  			  if (tim16_count>TIM16TIMEOOUTPERIOD)
 8000d32:	4b49      	ldr	r3, [pc, #292]	; (8000e58 <main+0x270>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d97d      	bls.n	8000e36 <main+0x24e>
	  				send(0, (uint8_t *)PING_CMD,strlen(PING_CMD));
 8000d3a:	2209      	movs	r2, #9
 8000d3c:	494a      	ldr	r1, [pc, #296]	; (8000e68 <main+0x280>)
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 ffec 	bl	8001d1c <send>
	  				Timer16_Stop();
 8000d44:	f7ff ff1c 	bl	8000b80 <Timer16_Stop>
	  				tim16_count=0;
 8000d48:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <main+0x270>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
	  				Timer16_Start();
 8000d4e:	f7ff ff0b 	bl	8000b68 <Timer16_Start>
	  				Timer17_Start();
 8000d52:	f7ff ff21 	bl	8000b98 <Timer17_Start>
	  				memset(Recv_Ping,0,sizeof Recv_Ping);
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4843      	ldr	r0, [pc, #268]	; (8000e6c <main+0x284>)
 8000d5e:	f007 f9b1 	bl	80080c4 <memset>
	  				while(tim17_count<TIM17TIMEOOUTPERIOD)
 8000d62:	e015      	b.n	8000d90 <main+0x1a8>
	  					recv(0, Recv_Ping,2048);
 8000d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d68:	4940      	ldr	r1, [pc, #256]	; (8000e6c <main+0x284>)
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 f8d0 	bl	8001f10 <recv>
	  					if(Get_event()==WRSide_Train_Detect_Event)
 8000d70:	f7ff fe56 	bl	8000a20 <Get_event>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d102      	bne.n	8000d80 <main+0x198>
	  						WRSide_Train_Presence_State_Handler();
 8000d7a:	f001 fba7 	bl	80024cc <WRSide_Train_Presence_State_Handler>
	  						break;
 8000d7e:	e00b      	b.n	8000d98 <main+0x1b0>
	  					else if (Get_event()==WLSide_Train_Detect_Event)
 8000d80:	f7ff fe4e 	bl	8000a20 <Get_event>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d102      	bne.n	8000d90 <main+0x1a8>
	  						WLSide_Train_Presence_State_Handler();
 8000d8a:	f001 fbad 	bl	80024e8 <WLSide_Train_Presence_State_Handler>
	  						break;
 8000d8e:	e003      	b.n	8000d98 <main+0x1b0>
	  				while(tim17_count<TIM17TIMEOOUTPERIOD)
 8000d90:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <main+0x288>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d9e5      	bls.n	8000d64 <main+0x17c>
  					if((strcmp(Ping_ack,Recv_Ping)!=0) || (strcmp(Abox_not_ready,Recv_Ping)==0))
 8000d98:	4934      	ldr	r1, [pc, #208]	; (8000e6c <main+0x284>)
 8000d9a:	4836      	ldr	r0, [pc, #216]	; (8000e74 <main+0x28c>)
 8000d9c:	f7ff fa14 	bl	80001c8 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <main+0x1cc>
 8000da6:	4931      	ldr	r1, [pc, #196]	; (8000e6c <main+0x284>)
 8000da8:	4833      	ldr	r0, [pc, #204]	; (8000e78 <main+0x290>)
 8000daa:	f7ff fa0d 	bl	80001c8 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d108      	bne.n	8000dc6 <main+0x1de>
  						Timer17_Stop();
 8000db4:	f7ff fefc 	bl	8000bb0 <Timer17_Stop>
  						tim17_count=0;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <main+0x288>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
  						Set_state(Initilisation_State);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f001 fab2 	bl	8002328 <Set_state>
  						break;
 8000dc4:	e040      	b.n	8000e48 <main+0x260>
	  				Timer17_Stop();
 8000dc6:	f7ff fef3 	bl	8000bb0 <Timer17_Stop>
	  				tim17_count=0;
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <main+0x288>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
	  		  break;
 8000dd0:	e031      	b.n	8000e36 <main+0x24e>

//			  itoa(count,Count_Bulletin,10);
//			  send(0, (uint32_t *)strcat(Count_Bulletin,","), strlen(Count_Bulletin));
//			  HAL_Delay(1000);

			  if (count>TIMEOOUTPERIOD)
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <main+0x294>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b14      	cmp	r3, #20
 8000dd8:	d902      	bls.n	8000de0 <main+0x1f8>
			  {
				  Set_event(Train_Exit_Event);
 8000dda:	2005      	movs	r0, #5
 8000ddc:	f7ff fe2c 	bl	8000a38 <Set_event>
			  }

	  		  if(Get_event()==Train_Exit_Event)
 8000de0:	f7ff fe1e 	bl	8000a20 <Get_event>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d127      	bne.n	8000e3a <main+0x252>
	  		  {
	  			  Train_Exit_State_Handler();
 8000dea:	f001 fb8b 	bl	8002504 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000dee:	e024      	b.n	8000e3a <main+0x252>

//			  itoa(count,Count_Bulletin1,10);
//			  send(0, (uint32_t *)strcat(Count_Bulletin1,","), strlen(Count_Bulletin1));
//			  HAL_Delay(1000);

			  if (count>TIMEOOUTPERIOD)
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <main+0x294>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b14      	cmp	r3, #20
 8000df6:	d902      	bls.n	8000dfe <main+0x216>
			  {
				  Set_event(Train_Exit_Event);
 8000df8:	2005      	movs	r0, #5
 8000dfa:	f7ff fe1d 	bl	8000a38 <Set_event>
			  }

	  		  if(Get_event()==Train_Exit_Event)
 8000dfe:	f7ff fe0f 	bl	8000a20 <Get_event>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d11a      	bne.n	8000e3e <main+0x256>
	  		  {
	  			  Train_Exit_State_Handler();
 8000e08:	f001 fb7c 	bl	8002504 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000e0c:	e017      	b.n	8000e3e <main+0x256>

	  	  case Train_Exit_State:
	  		  if(Get_event()==Log_Data_Event)
 8000e0e:	f7ff fe07 	bl	8000a20 <Get_event>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d114      	bne.n	8000e42 <main+0x25a>
	  		  {
	  			  Log_Data_State_Handler();
 8000e18:	f001 fb80 	bl	800251c <Log_Data_State_Handler>
	  		  }
	  		  break;
 8000e1c:	e011      	b.n	8000e42 <main+0x25a>

	  	  case Log_Data_State:
	  		  if(Get_event()==Reset_Event)
 8000e1e:	f7ff fdff 	bl	8000a20 <Get_event>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d10e      	bne.n	8000e46 <main+0x25e>
	  		  {
	  			  Reset_State_Handler();
 8000e28:	f001 faee 	bl	8002408 <Reset_State_Handler>
	  		  }
	  		  break;
 8000e2c:	e00b      	b.n	8000e46 <main+0x25e>
	  		  break;
 8000e2e:	bf00      	nop
 8000e30:	e6f3      	b.n	8000c1a <main+0x32>
	  		  break;
 8000e32:	bf00      	nop
 8000e34:	e6f1      	b.n	8000c1a <main+0x32>
	  		  break;
 8000e36:	bf00      	nop
 8000e38:	e6ef      	b.n	8000c1a <main+0x32>
	  		  break;
 8000e3a:	bf00      	nop
 8000e3c:	e6ed      	b.n	8000c1a <main+0x32>
	  		  break;
 8000e3e:	bf00      	nop
 8000e40:	e6eb      	b.n	8000c1a <main+0x32>
	  		  break;
 8000e42:	bf00      	nop
 8000e44:	e6e9      	b.n	8000c1a <main+0x32>
	  		  break;
 8000e46:	bf00      	nop
	  HAL_RTC_GetTime(RtcHandle, &sTime, RTC_FORMAT_BIN);
 8000e48:	e6e7      	b.n	8000c1a <main+0x32>
 8000e4a:	bf00      	nop
 8000e4c:	20001a4c 	.word	0x20001a4c
 8000e50:	20001a45 	.word	0x20001a45
 8000e54:	20001cf4 	.word	0x20001cf4
 8000e58:	20001cec 	.word	0x20001cec
 8000e5c:	6f01a8c0 	.word	0x6f01a8c0
 8000e60:	20001cf8 	.word	0x20001cf8
 8000e64:	20001cf9 	.word	0x20001cf9
 8000e68:	08008428 	.word	0x08008428
 8000e6c:	20001cfc 	.word	0x20001cfc
 8000e70:	20001cf0 	.word	0x20001cf0
 8000e74:	20000004 	.word	0x20000004
 8000e78:	20000804 	.word	0x20000804
 8000e7c:	20001ce8 	.word	0x20001ce8

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09c      	sub	sp, #112	; 0x70
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e8a:	2228      	movs	r2, #40	; 0x28
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 f918 	bl	80080c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2230      	movs	r2, #48	; 0x30
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f007 f90a 	bl	80080c4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eb0:	f003 f8f6 	bl	80040a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <SystemClock_Config+0xd4>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <SystemClock_Config+0xd4>)
 8000eba:	f023 0318 	bic.w	r3, r3, #24
 8000ebe:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000ec0:	2305      	movs	r3, #5
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ede:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000ee0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 f8f8 	bl	80040e0 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ef6:	f000 fbc9 	bl	800168c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f14:	2102      	movs	r1, #2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 f920 	bl	800515c <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000f22:	f000 fbb3 	bl	800168c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_TIM16
 8000f26:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8000f2a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM17;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f30:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fb45 	bl	80055cc <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000f48:	f000 fba0 	bl	800168c <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3770      	adds	r7, #112	; 0x70
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000

08000f58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f70:	4b33      	ldr	r3, [pc, #204]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f72:	4a34      	ldr	r2, [pc, #208]	; (8001044 <MX_RTC_Init+0xec>)
 8000f74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f7e:	227f      	movs	r2, #127	; 0x7f
 8000f80:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f84:	22ff      	movs	r2, #255	; 0xff
 8000f86:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f9a:	4829      	ldr	r0, [pc, #164]	; (8001040 <MX_RTC_Init+0xe8>)
 8000f9c:	f004 fc9a 	bl	80058d4 <HAL_RTC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000fa6:	f000 fb71 	bl	800168c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE)
 8000faa:	2101      	movs	r1, #1
 8000fac:	4824      	ldr	r0, [pc, #144]	; (8001040 <MX_RTC_Init+0xe8>)
 8000fae:	f005 f871 	bl	8006094 <HAL_RTCEx_BKUPRead>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d03c      	beq.n	8001036 <MX_RTC_Init+0xde>
     {
     // Write Back Up Register 1 Data
     HAL_PWR_EnableBkUpAccess();
 8000fbc:	f003 f870 	bl	80040a0 <HAL_PWR_EnableBkUpAccess>
     // Writes a data in a RTC Backup data Register 1
     HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 8000fc0:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	481e      	ldr	r0, [pc, #120]	; (8001040 <MX_RTC_Init+0xe8>)
 8000fc8:	f005 f84a 	bl	8006060 <HAL_RTCEx_BKUPWrite>
     HAL_PWR_DisableBkUpAccess();
 8000fcc:	f003 f878 	bl	80040c0 <HAL_PWR_DisableBkUpAccess>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 16;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4815      	ldr	r0, [pc, #84]	; (8001040 <MX_RTC_Init+0xe8>)
 8000fec:	f004 fd03 	bl	80059f6 <HAL_RTC_SetTime>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000ff6:	f000 fb49 	bl	800168c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8000ffe:	2303      	movs	r3, #3
 8001000:	707b      	strb	r3, [r7, #1]
  sDate.Date = 30;
 8001002:	231e      	movs	r3, #30
 8001004:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 23;
 8001006:	2317      	movs	r3, #23
 8001008:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <MX_RTC_Init+0xe8>)
 8001012:	f004 fe0b 	bl	8005c2c <HAL_RTC_SetDate>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 800101c:	f000 fb36 	bl	800168c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_RTC_Init+0xe8>)
 8001026:	f004 ff87 	bl	8005f38 <HAL_RTCEx_SetWakeUpTimer>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 8001030:	f000 fb2c 	bl	800168c <Error_Handler>
 8001034:	e000      	b.n	8001038 <MX_RTC_Init+0xe0>
        return;
 8001036:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20001a4c 	.word	0x20001a4c
 8001044:	40002800 	.word	0x40002800

08001048 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_SPI2_Init+0x74>)
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <MX_SPI2_Init+0x78>)
 8001050:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_SPI2_Init+0x74>)
 8001054:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001058:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_SPI2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_SPI2_Init+0x74>)
 8001062:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001066:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_SPI2_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_SPI2_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_SPI2_Init+0x74>)
 8001076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_SPI2_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_SPI2_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_SPI2_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_SPI2_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_SPI2_Init+0x74>)
 8001096:	2207      	movs	r2, #7
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_SPI2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_SPI2_Init+0x74>)
 80010a2:	2208      	movs	r2, #8
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_SPI2_Init+0x74>)
 80010a8:	f005 f80c 	bl	80060c4 <HAL_SPI_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010b2:	f000 faeb 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20001a6c 	.word	0x20001a6c
 80010c0:	40003800 	.word	0x40003800

080010c4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_SPI3_Init+0x74>)
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <MX_SPI3_Init+0x78>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_SPI3_Init+0x74>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_SPI3_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_SPI3_Init+0x74>)
 80010de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_SPI3_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_SPI3_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_SPI3_Init+0x74>)
 80010f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_SPI3_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SPI3_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SPI3_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_SPI3_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_SPI3_Init+0x74>)
 8001112:	2207      	movs	r2, #7
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_SPI3_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_SPI3_Init+0x74>)
 800111e:	2208      	movs	r2, #8
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_SPI3_Init+0x74>)
 8001124:	f004 ffce 	bl	80060c4 <HAL_SPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 faad 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20001ad0 	.word	0x20001ad0
 800113c:	40003c00 	.word	0x40003c00

08001140 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_TIM2_Init+0x98>)
 8001160:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001164:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_TIM2_Init+0x98>)
 8001168:	2245      	movs	r2, #69	; 0x45
 800116a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_TIM2_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF-1;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_TIM2_Init+0x98>)
 8001174:	f06f 0201 	mvn.w	r2, #1
 8001178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_TIM2_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_TIM2_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001186:	4814      	ldr	r0, [pc, #80]	; (80011d8 <MX_TIM2_Init+0x98>)
 8001188:	f005 feb4 	bl	8006ef4 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001192:	f000 fa7b 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_TIM2_Init+0x98>)
 80011a4:	f006 f970 	bl	8007488 <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011ae:	f000 fa6d 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_TIM2_Init+0x98>)
 80011c0:	f006 fb66 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011ca:	f000 fa5f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20001b34 	.word	0x20001b34

080011dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <MX_TIM6_Init+0x68>)
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <MX_TIM6_Init+0x6c>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 6999;
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_TIM6_Init+0x68>)
 80011f4:	f641 3257 	movw	r2, #6999	; 0x1b57
 80011f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <MX_TIM6_Init+0x68>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_TIM6_Init+0x68>)
 8001202:	f242 720f 	movw	r2, #9999	; 0x270f
 8001206:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_TIM6_Init+0x68>)
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800120e:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_TIM6_Init+0x68>)
 8001210:	f005 fe70 	bl	8006ef4 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800121a:	f000 fa37 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <MX_TIM6_Init+0x68>)
 800122c:	f006 fb30 	bl	8007890 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001236:	f000 fa29 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20001b80 	.word	0x20001b80
 8001248:	40001000 	.word	0x40001000

0800124c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_TIM16_Init+0x48>)
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <MX_TIM16_Init+0x4c>)
 8001254:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6999;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_TIM16_Init+0x48>)
 8001258:	f641 3257 	movw	r2, #6999	; 0x1b57
 800125c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MX_TIM16_Init+0x48>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_TIM16_Init+0x48>)
 8001266:	f242 720f 	movw	r2, #9999	; 0x270f
 800126a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_TIM16_Init+0x48>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_TIM16_Init+0x48>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_TIM16_Init+0x48>)
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_TIM16_Init+0x48>)
 8001280:	f005 fe38 	bl	8006ef4 <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800128a:	f000 f9ff 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20001bcc 	.word	0x20001bcc
 8001298:	40014400 	.word	0x40014400

0800129c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <MX_TIM17_Init+0x4c>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 6999;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012a8:	f641 3257 	movw	r2, #6999	; 0x1b57
 80012ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80012ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_TIM17_Init+0x48>)
 80012d0:	f005 fe10 	bl	8006ef4 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80012da:	f000 f9d7 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20001c18 	.word	0x20001c18
 80012e8:	40014800 	.word	0x40014800

080012ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f0:	4b16      	ldr	r3, [pc, #88]	; (800134c <MX_USART2_UART_Init+0x60>)
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <MX_USART2_UART_Init+0x64>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_USART2_UART_Init+0x60>)
 80012f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART2_UART_Init+0x60>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART2_UART_Init+0x60>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x60>)
 800132a:	2210      	movs	r2, #16
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001334:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART2_UART_Init+0x60>)
 8001338:	f006 fb2e 	bl	8007998 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001342:	f000 f9a3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20001c64 	.word	0x20001c64
 8001350:	40004400 	.word	0x40004400

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b70      	ldr	r3, [pc, #448]	; (800152c <MX_GPIO_Init+0x1d8>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a6f      	ldr	r2, [pc, #444]	; (800152c <MX_GPIO_Init+0x1d8>)
 8001370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b6d      	ldr	r3, [pc, #436]	; (800152c <MX_GPIO_Init+0x1d8>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	4b6a      	ldr	r3, [pc, #424]	; (800152c <MX_GPIO_Init+0x1d8>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a69      	ldr	r2, [pc, #420]	; (800152c <MX_GPIO_Init+0x1d8>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b67      	ldr	r3, [pc, #412]	; (800152c <MX_GPIO_Init+0x1d8>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	4b64      	ldr	r3, [pc, #400]	; (800152c <MX_GPIO_Init+0x1d8>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a63      	ldr	r2, [pc, #396]	; (800152c <MX_GPIO_Init+0x1d8>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	6153      	str	r3, [r2, #20]
 80013a6:	4b61      	ldr	r3, [pc, #388]	; (800152c <MX_GPIO_Init+0x1d8>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b5e      	ldr	r3, [pc, #376]	; (800152c <MX_GPIO_Init+0x1d8>)
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4a5d      	ldr	r2, [pc, #372]	; (800152c <MX_GPIO_Init+0x1d8>)
 80013b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013bc:	6153      	str	r3, [r2, #20]
 80013be:	4b5b      	ldr	r3, [pc, #364]	; (800152c <MX_GPIO_Init+0x1d8>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FCT_TRIG_LED_GPIO_Port, FCT_TRIG_LED_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013d0:	4857      	ldr	r0, [pc, #348]	; (8001530 <MX_GPIO_Init+0x1dc>)
 80013d2:	f002 fe35 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LA_TRIG_LED_Pin|CA_TRIG_LED_Pin|WR_TRIG_LED_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f241 0190 	movw	r1, #4240	; 0x1090
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f002 fe2e 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LAN_CS_Pin|CA_OP_Pin|LA_OP_Pin, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f240 3101 	movw	r1, #769	; 0x301
 80013ea:	4852      	ldr	r0, [pc, #328]	; (8001534 <MX_GPIO_Init+0x1e0>)
 80013ec:	f002 fe28 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|WL_TRIG_LED_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 80013f6:	484f      	ldr	r0, [pc, #316]	; (8001534 <MX_GPIO_Init+0x1e0>)
 80013f8:	f002 fe22 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CA_OP1_Pin|LA_OP1_Pin|LAN_RESET_Pin, GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f002 fe1b 	bl	8004040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FCT_TRIG_LED_Pin */
  GPIO_InitStruct.Pin = FCT_TRIG_LED_Pin;
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001414:	2302      	movs	r3, #2
 8001416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FCT_TRIG_LED_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4843      	ldr	r0, [pc, #268]	; (8001530 <MX_GPIO_Init+0x1dc>)
 8001424:	f002 fc9a 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : WR_IP_Pin WL_IP_Pin F_IP_Pin */
  GPIO_InitStruct.Pin = WR_IP_Pin|WL_IP_Pin|F_IP_Pin;
 8001428:	2323      	movs	r3, #35	; 0x23
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f002 fc8c 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LA_TRIG_LED_Pin CA_TRIG_LED_Pin CA_OP1_Pin LA_OP1_Pin
                           LAN_RESET_Pin */
  GPIO_InitStruct.Pin = LA_TRIG_LED_Pin|CA_TRIG_LED_Pin|CA_OP1_Pin|LA_OP1_Pin
 8001444:	f248 3390 	movw	r3, #33680	; 0x8390
 8001448:	617b      	str	r3, [r7, #20]
                          |LAN_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f002 fc7c 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_CS_Pin;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800146c:	2301      	movs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	482e      	ldr	r0, [pc, #184]	; (8001534 <MX_GPIO_Init+0x1e0>)
 800147c:	f002 fc6e 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_INT_Pin */
  GPIO_InitStruct.Pin = LAN_INT_Pin;
 8001480:	2304      	movs	r3, #4
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_INT_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <MX_GPIO_Init+0x1e0>)
 8001494:	f002 fc62 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 CA_OP_Pin LA_OP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin;
 8001498:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4820      	ldr	r0, [pc, #128]	; (8001534 <MX_GPIO_Init+0x1e0>)
 80014b2:	f002 fc53 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : WL_TRIG_LED_Pin */
  GPIO_InitStruct.Pin = WL_TRIG_LED_Pin;
 80014b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WL_TRIG_LED_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4819      	ldr	r0, [pc, #100]	; (8001534 <MX_GPIO_Init+0x1e0>)
 80014d0:	f002 fc44 	bl	8003d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : WR_TRIG_LED_Pin */
  GPIO_InitStruct.Pin = WR_TRIG_LED_Pin;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WR_TRIG_LED_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f0:	f002 fc34 	bl	8003d5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2006      	movs	r0, #6
 80014fa:	f002 fbea 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014fe:	2006      	movs	r0, #6
 8001500:	f002 fc03 	bl	8003d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2007      	movs	r0, #7
 800150a:	f002 fbe2 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800150e:	2007      	movs	r0, #7
 8001510:	f002 fbfb 	bl	8003d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2017      	movs	r0, #23
 800151a:	f002 fbda 	bl	8003cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800151e:	2017      	movs	r0, #23
 8001520:	f002 fbf3 	bl	8003d0a <HAL_NVIC_EnableIRQ>

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	48000800 	.word	0x48000800
 8001534:	48000400 	.word	0x48000400

08001538 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed
   */

  switch(GPIO_Pin)
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	3b01      	subs	r3, #1
 8001546:	2b1f      	cmp	r3, #31
 8001548:	f200 8097 	bhi.w	800167a <HAL_GPIO_EXTI_Callback+0x142>
 800154c:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <HAL_GPIO_EXTI_Callback+0x1c>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	080015d5 	.word	0x080015d5
 8001558:	08001613 	.word	0x08001613
 800155c:	0800167b 	.word	0x0800167b
 8001560:	0800166f 	.word	0x0800166f
 8001564:	0800167b 	.word	0x0800167b
 8001568:	0800167b 	.word	0x0800167b
 800156c:	0800167b 	.word	0x0800167b
 8001570:	0800167b 	.word	0x0800167b
 8001574:	0800167b 	.word	0x0800167b
 8001578:	0800167b 	.word	0x0800167b
 800157c:	0800167b 	.word	0x0800167b
 8001580:	0800167b 	.word	0x0800167b
 8001584:	0800167b 	.word	0x0800167b
 8001588:	0800167b 	.word	0x0800167b
 800158c:	0800167b 	.word	0x0800167b
 8001590:	0800167b 	.word	0x0800167b
 8001594:	0800167b 	.word	0x0800167b
 8001598:	0800167b 	.word	0x0800167b
 800159c:	0800167b 	.word	0x0800167b
 80015a0:	0800167b 	.word	0x0800167b
 80015a4:	0800167b 	.word	0x0800167b
 80015a8:	0800167b 	.word	0x0800167b
 80015ac:	0800167b 	.word	0x0800167b
 80015b0:	0800167b 	.word	0x0800167b
 80015b4:	0800167b 	.word	0x0800167b
 80015b8:	0800167b 	.word	0x0800167b
 80015bc:	0800167b 	.word	0x0800167b
 80015c0:	0800167b 	.word	0x0800167b
 80015c4:	0800167b 	.word	0x0800167b
 80015c8:	0800167b 	.word	0x0800167b
 80015cc:	0800167b 	.word	0x0800167b
 80015d0:	08001651 	.word	0x08001651
  {
  case WR_IP_Pin:
	  switch(Get_state()){
 80015d4:	f000 fe9c 	bl	8002310 <Get_state>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d00c      	beq.n	80015f8 <HAL_GPIO_EXTI_Callback+0xc0>
 80015de:	2b05      	cmp	r3, #5
 80015e0:	dc0d      	bgt.n	80015fe <HAL_GPIO_EXTI_Callback+0xc6>
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d002      	beq.n	80015ec <HAL_GPIO_EXTI_Callback+0xb4>
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_EXTI_Callback+0xba>
 80015ea:	e008      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0xc6>
	  case Idle_State:
		  Set_event(WRSide_Train_Detect_Event);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f7ff fa23 	bl	8000a38 <Set_event>
	  case WRSide_Train_Presence_State:
		  WR_Interrupt_Service();
 80015f2:	f7fe fe45 	bl	8000280 <WR_Interrupt_Service>
		  break;
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_EXTI_Callback+0xc6>
	  case WLSide_Train_Presence_State:
		  WR_Interrupt_Service();
 80015f8:	f7fe fe42 	bl	8000280 <WR_Interrupt_Service>
		  break;
 80015fc:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)//(Counts of WL_Counts==WR_Counts)
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_GPIO_EXTI_Callback+0x150>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d134      	bne.n	8001674 <HAL_GPIO_EXTI_Callback+0x13c>
	  {
		  Set_event(Train_Exit_Event);
 800160a:	2005      	movs	r0, #5
 800160c:	f7ff fa14 	bl	8000a38 <Set_event>
	  }
	  break;
 8001610:	e030      	b.n	8001674 <HAL_GPIO_EXTI_Callback+0x13c>

  case WL_IP_Pin:

	  switch(Get_state()){
 8001612:	f000 fe7d 	bl	8002310 <Get_state>
 8001616:	4603      	mov	r3, r0
 8001618:	2b05      	cmp	r3, #5
 800161a:	d00c      	beq.n	8001636 <HAL_GPIO_EXTI_Callback+0xfe>
 800161c:	2b05      	cmp	r3, #5
 800161e:	dc0d      	bgt.n	800163c <HAL_GPIO_EXTI_Callback+0x104>
 8001620:	2b03      	cmp	r3, #3
 8001622:	d002      	beq.n	800162a <HAL_GPIO_EXTI_Callback+0xf2>
 8001624:	2b04      	cmp	r3, #4
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_EXTI_Callback+0xf8>
 8001628:	e008      	b.n	800163c <HAL_GPIO_EXTI_Callback+0x104>
	  case Idle_State:
		  Set_event(WLSide_Train_Detect_Event);
 800162a:	2004      	movs	r0, #4
 800162c:	f7ff fa04 	bl	8000a38 <Set_event>
	  case WRSide_Train_Presence_State:
		  WL_Interrupt_Service();
 8001630:	f7fe ff42 	bl	80004b8 <WL_Interrupt_Service>
		  break;
 8001634:	e002      	b.n	800163c <HAL_GPIO_EXTI_Callback+0x104>
	  case WLSide_Train_Presence_State:
		  WL_Interrupt_Service();
 8001636:	f7fe ff3f 	bl	80004b8 <WL_Interrupt_Service>
		  break;
 800163a:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_GPIO_EXTI_Callback+0x14c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_GPIO_EXTI_Callback+0x150>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d117      	bne.n	8001678 <HAL_GPIO_EXTI_Callback+0x140>
	  {
		  Set_event(Train_Exit_Event);
 8001648:	2005      	movs	r0, #5
 800164a:	f7ff f9f5 	bl	8000a38 <Set_event>
	  }

	  break;
 800164e:	e013      	b.n	8001678 <HAL_GPIO_EXTI_Callback+0x140>


  case F_IP_Pin:


	  switch(Get_state())
 8001650:	f000 fe5e 	bl	8002310 <Get_state>
 8001654:	4603      	mov	r3, r0
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_GPIO_EXTI_Callback+0x128>
 800165a:	2b05      	cmp	r3, #5
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_EXTI_Callback+0x12e>
		  break;
	  case WLSide_Train_Presence_State:
		  FCT_Interrupt_Service();
		  break;
	  }
	  break;
 800165e:	e00c      	b.n	800167a <HAL_GPIO_EXTI_Callback+0x142>
		  FCT_Interrupt_Service();
 8001660:	f7fe fe82 	bl	8000368 <FCT_Interrupt_Service>
		  break;
 8001664:	e002      	b.n	800166c <HAL_GPIO_EXTI_Callback+0x134>
		  FCT_Interrupt_Service();
 8001666:	f7fe fe7f 	bl	8000368 <FCT_Interrupt_Service>
		  break;
 800166a:	bf00      	nop
	  break;
 800166c:	e005      	b.n	800167a <HAL_GPIO_EXTI_Callback+0x142>

  case LAN_INT_Pin:

	  Lan_Interrupt_Service();
 800166e:	f7fe fdd1 	bl	8000214 <Lan_Interrupt_Service>
	  break;
 8001672:	e002      	b.n	800167a <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 8001674:	bf00      	nop
 8001676:	e000      	b.n	800167a <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 8001678:	bf00      	nop
  }
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200018c4 	.word	0x200018c4
 8001688:	200018cc 	.word	0x200018cc

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <RingInit>:
uint32_t RingGetDataCnt (RingBuffer_t* buffer){
	return buffer -> size - RingGetSpace(buffer);
}

/* DONE: Add null pointer exceptions. */
RingStatus_t RingInit (RingBuffer_t* buffer, void* arrayBuffer, size_t bufferSize, size_t elementSize){
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	603b      	str	r3, [r7, #0]
	if(NULL == buffer) return NO_PTR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <RingInit+0x1a>
 80016ae:	f06f 0302 	mvn.w	r3, #2
 80016b2:	e03b      	b.n	800172c <RingInit+0x92>
	if(NULL == arrayBuffer) return NO_PTR;
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d102      	bne.n	80016c0 <RingInit+0x26>
 80016ba:	f06f 0302 	mvn.w	r3, #2
 80016be:	e035      	b.n	800172c <RingInit+0x92>

	memset(buffer, 0, sizeof(RingBuffer_t));
 80016c0:	2220      	movs	r2, #32
 80016c2:	2100      	movs	r1, #0
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f006 fcfd 	bl	80080c4 <memset>

	if(arrayBuffer == NULL) return NO_PTR;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <RingInit+0x3c>
 80016d0:	f06f 0302 	mvn.w	r3, #2
 80016d4:	e02a      	b.n	800172c <RingInit+0x92>
	if(bufferSize <= 0) return NO_DATA;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <RingInit+0x48>
 80016dc:	f06f 0301 	mvn.w	r3, #1
 80016e0:	e024      	b.n	800172c <RingInit+0x92>

	buffer -> buffer = arrayBuffer;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	61da      	str	r2, [r3, #28]
	buffer -> size = bufferSize;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	601a      	str	r2, [r3, #0]
	buffer -> place = buffer -> size - 1;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1e5a      	subs	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	619a      	str	r2, [r3, #24]
	buffer -> writePtr = 0;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
	buffer -> readPtr = 0;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
	buffer -> elementSize = elementSize;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]
	buffer -> sizeB = buffer -> elementSize * buffer -> size;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	fb03 f202 	mul.w	r2, r3, r2
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	609a      	str	r2, [r3, #8]

	memset(buffer -> buffer, 0, buffer -> sizeB);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	69d8      	ldr	r0, [r3, #28]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	461a      	mov	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	f006 fccd 	bl	80080c4 <memset>
	return OK;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <RingWriteElement>:
		return NO_PTR;
	}
	return RingInit(buffer, ptr, bufferSize, elementSize);
}

RingStatus_t RingWriteElement (RingBuffer_t* buffer, void* data){
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 800173e:	2301      	movs	r3, #1
 8001740:	77fb      	strb	r3, [r7, #31]

	if(buffer == NULL) return NO_PTR;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <RingWriteElement+0x1a>
 8001748:	f06f 0302 	mvn.w	r3, #2
 800174c:	e03e      	b.n	80017cc <RingWriteElement+0x98>
	if(data == NULL) return NO_PTR;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <RingWriteElement+0x26>
 8001754:	f06f 0302 	mvn.w	r3, #2
 8001758:	e038      	b.n	80017cc <RingWriteElement+0x98>
	if(buffer -> buffer == NULL) return NO_PTR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <RingWriteElement+0x34>
 8001762:	f06f 0302 	mvn.w	r3, #2
 8001766:	e031      	b.n	80017cc <RingWriteElement+0x98>

	uint32_t tempHead = buffer -> writePtr;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	61bb      	str	r3, [r7, #24]
	uint32_t tempTail = buffer -> readPtr;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
	size_t bufferSize = buffer -> sizeB;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	60fb      	str	r3, [r7, #12]

	void* wrPtr;
	wrPtr = buffer -> buffer + tempHead;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69da      	ldr	r2, [r3, #28]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4413      	add	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]

	tempHead = MODULO_BUF(tempHead + elSize, bufferSize);
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	fbb3 f2f2 	udiv	r2, r3, r2
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	fb01 f202 	mul.w	r2, r1, r2
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
	if(tempHead != tempTail){
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d00d      	beq.n	80017c4 <RingWriteElement+0x90>
		memcpy(wrPtr, data, elSize);
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	68b8      	ldr	r0, [r7, #8]
 80017ae:	f006 fc7b 	bl	80080a8 <memcpy>
		buffer -> writePtr = tempHead;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	611a      	str	r2, [r3, #16]
		buffer -> place --;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	1e5a      	subs	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	619a      	str	r2, [r3, #24]
 80017c2:	e001      	b.n	80017c8 <RingWriteElement+0x94>
	}else{
		retval = NO_PLACE;
 80017c4:	23ff      	movs	r3, #255	; 0xff
 80017c6:	77fb      	strb	r3, [r7, #31]
	}
	return retval;
 80017c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <RingReadElement>:
	}

	return retval;
}

RingStatus_t RingReadElement (RingBuffer_t* buffer, void* data){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tempHead = buffer -> writePtr;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	623b      	str	r3, [r7, #32]
	uint32_t tempTail = buffer -> readPtr;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	61fb      	str	r3, [r7, #28]
	uint32_t tempPlace = buffer -> place;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	61bb      	str	r3, [r7, #24]
	size_t bufferSize = buffer -> sizeB;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	613b      	str	r3, [r7, #16]
	void* wrPtr;
	wrPtr = buffer -> buffer + tempTail;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

	if(tempHead != tempTail){
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	d019      	beq.n	8001848 <RingReadElement+0x74>
		memcpy(data, wrPtr, elSize);
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f006 fc45 	bl	80080a8 <memcpy>
		tempTail = MODULO_BUF(tempTail + elSize, bufferSize);
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4413      	add	r3, r2
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	fbb3 f2f2 	udiv	r2, r3, r2
 800182a:	6979      	ldr	r1, [r7, #20]
 800182c:	fb01 f202 	mul.w	r2, r1, r2
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	61fb      	str	r3, [r7, #28]
		tempPlace++;
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	3301      	adds	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
		buffer -> readPtr = tempTail;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	615a      	str	r2, [r3, #20]
		buffer -> place = tempPlace;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	619a      	str	r2, [r3, #24]
 8001846:	e002      	b.n	800184e <RingReadElement+0x7a>
	}else{
		retval = NO_DATA;
 8001848:	23fe      	movs	r3, #254	; 0xfe
 800184a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return retval;
 800184e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001852:	4618      	mov	r0, r3
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	4604      	mov	r4, r0
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4623      	mov	r3, r4
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4603      	mov	r3, r0
 8001870:	71bb      	strb	r3, [r7, #6]
 8001872:	460b      	mov	r3, r1
 8001874:	80bb      	strh	r3, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d902      	bls.n	8001886 <socket+0x2a>
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	e0f2      	b.n	8001a6c <socket+0x210>
	switch(protocol)
 8001886:	79bb      	ldrb	r3, [r7, #6]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d005      	beq.n	8001898 <socket+0x3c>
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd11      	ble.n	80018b4 <socket+0x58>
 8001890:	3b02      	subs	r3, #2
 8001892:	2b02      	cmp	r3, #2
 8001894:	d80e      	bhi.n	80018b4 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001896:	e011      	b.n	80018bc <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	2204      	movs	r2, #4
 800189e:	4619      	mov	r1, r3
 80018a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80018a4:	f001 f99e 	bl	8002be4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d105      	bne.n	80018ba <socket+0x5e>
 80018ae:	f06f 0302 	mvn.w	r3, #2
 80018b2:	e0db      	b.n	8001a6c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80018b4:	f06f 0304 	mvn.w	r3, #4
 80018b8:	e0d8      	b.n	8001a6c <socket+0x210>
	    break;
 80018ba:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <socket+0x70>
 80018c6:	f06f 0305 	mvn.w	r3, #5
 80018ca:	e0cf      	b.n	8001a6c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d025      	beq.n	800191e <socket+0xc2>
	{
   	switch(protocol)
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d002      	beq.n	80018de <socket+0x82>
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d008      	beq.n	80018ee <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80018dc:	e024      	b.n	8001928 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11c      	bne.n	8001922 <socket+0xc6>
 80018e8:	f06f 0305 	mvn.w	r3, #5
 80018ec:	e0be      	b.n	8001a6c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80018f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db02      	blt.n	8001906 <socket+0xaa>
 8001900:	f06f 0305 	mvn.w	r3, #5
 8001904:	e0b2      	b.n	8001a6c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00a      	beq.n	8001926 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db06      	blt.n	8001926 <socket+0xca>
 8001918:	f06f 0305 	mvn.w	r3, #5
 800191c:	e0a6      	b.n	8001a6c <socket+0x210>
   	}
   }
 800191e:	bf00      	nop
 8001920:	e002      	b.n	8001928 <socket+0xcc>
   	      break;
 8001922:	bf00      	nop
 8001924:	e000      	b.n	8001928 <socket+0xcc>
   	      break;
 8001926:	bf00      	nop
	close(sn);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f8ac 	bl	8001a88 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3301      	adds	r3, #1
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4618      	mov	r0, r3
 800193a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800193e:	f023 030f 	bic.w	r3, r3, #15
 8001942:	b25a      	sxtb	r2, r3
 8001944:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001948:	4313      	orrs	r3, r2
 800194a:	b25b      	sxtb	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	f001 f8fa 	bl	8002b48 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d110      	bne.n	800197c <socket+0x120>
	{
	   port = sock_any_port++;
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <socket+0x218>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	b291      	uxth	r1, r2
 8001962:	4a44      	ldr	r2, [pc, #272]	; (8001a74 <socket+0x218>)
 8001964:	8011      	strh	r1, [r2, #0]
 8001966:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <socket+0x218>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001970:	4293      	cmp	r3, r2
 8001972:	d103      	bne.n	800197c <socket+0x120>
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <socket+0x218>)
 8001976:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800197a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	3301      	adds	r3, #1
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001988:	461a      	mov	r2, r3
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f001 f8d7 	bl	8002b48 <WIZCHIP_WRITE>
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	3301      	adds	r3, #1
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a6:	461a      	mov	r2, r3
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	4610      	mov	r0, r2
 80019b0:	f001 f8ca 	bl	8002b48 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	3301      	adds	r3, #1
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019c0:	2101      	movs	r1, #1
 80019c2:	4618      	mov	r0, r3
 80019c4:	f001 f8c0 	bl	8002b48 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80019c8:	bf00      	nop
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3301      	adds	r3, #1
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 f86a 	bl	8002ab0 <WIZCHIP_READ>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f3      	bne.n	80019ca <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2201      	movs	r2, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	b21a      	sxth	r2, r3
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <socket+0x21c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	4013      	ands	r3, r2
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <socket+0x21c>)
 80019fe:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 0201 	and.w	r2, r3, #1
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <socket+0x21c>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	4313      	orrs	r3, r2
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <socket+0x21c>)
 8001a1c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2201      	movs	r2, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <socket+0x220>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	4013      	ands	r3, r2
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <socket+0x220>)
 8001a3a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <socket+0x224>)
 8001a40:	2100      	movs	r1, #0
 8001a42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <socket+0x228>)
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001a4e:	bf00      	nop
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	3301      	adds	r3, #1
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 f827 	bl	8002ab0 <WIZCHIP_READ>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f3      	beq.n	8001a50 <socket+0x1f4>
   return (int8_t)sn;
 8001a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	20001004 	.word	0x20001004
 8001a78:	200024fc 	.word	0x200024fc
 8001a7c:	200024fe 	.word	0x200024fe
 8001a80:	20002500 	.word	0x20002500
 8001a84:	20002514 	.word	0x20002514

08001a88 <close>:

int8_t close(uint8_t sn)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d902      	bls.n	8001a9e <close+0x16>
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	e055      	b.n	8001b4a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4618      	mov	r0, r3
 8001aae:	f001 f84b 	bl	8002b48 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001ab2:	bf00      	nop
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	3301      	adds	r3, #1
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fff5 	bl	8002ab0 <WIZCHIP_READ>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f3      	bne.n	8001ab4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ad8:	211f      	movs	r1, #31
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 f834 	bl	8002b48 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <close+0xcc>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4013      	ands	r3, r2
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <close+0xcc>)
 8001afc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2201      	movs	r2, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	b21a      	sxth	r2, r3
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <close+0xd0>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4013      	ands	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <close+0xd0>)
 8001b1a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <close+0xd4>)
 8001b20:	2100      	movs	r1, #0
 8001b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <close+0xd8>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001b2e:	bf00      	nop
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	3301      	adds	r3, #1
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 ffb7 	bl	8002ab0 <WIZCHIP_READ>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f3      	bne.n	8001b30 <close+0xa8>
	return SOCK_OK;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200024fc 	.word	0x200024fc
 8001b58:	200024fe 	.word	0x200024fe
 8001b5c:	20002500 	.word	0x20002500
 8001b60:	20002514 	.word	0x20002514

08001b64 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d902      	bls.n	8001b80 <connect+0x1c>
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e0c6      	b.n	8001d0e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	3301      	adds	r3, #1
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 ff91 	bl	8002ab0 <WIZCHIP_READ>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d002      	beq.n	8001b9e <connect+0x3a>
 8001b98:	f06f 0304 	mvn.w	r3, #4
 8001b9c:	e0b7      	b.n	8001d0e <connect+0x1aa>
   CHECK_SOCKINIT();
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 ff80 	bl	8002ab0 <WIZCHIP_READ>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b13      	cmp	r3, #19
 8001bb4:	d002      	beq.n	8001bbc <connect+0x58>
 8001bb6:	f06f 0302 	mvn.w	r3, #2
 8001bba:	e0a8      	b.n	8001d0e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	3201      	adds	r2, #1
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	3202      	adds	r2, #2
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	3203      	adds	r2, #3
 8001be6:	7812      	ldrb	r2, [r2, #0]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d002      	beq.n	8001bfa <connect+0x96>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <connect+0x9c>
 8001bfa:	f06f 030b 	mvn.w	r3, #11
 8001bfe:	e086      	b.n	8001d0e <connect+0x1aa>
   }

	if(port == 0) return SOCKERR_PORTZERO;
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <connect+0xa8>
 8001c06:	f06f 030a 	mvn.w	r3, #10
 8001c0a:	e080      	b.n	8001d0e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3301      	adds	r3, #1
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001c18:	2204      	movs	r2, #4
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 f841 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	3301      	adds	r3, #1
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	461a      	mov	r2, r3
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 ff84 	bl	8002b48 <WIZCHIP_WRITE>
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	3301      	adds	r3, #1
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f000 ff77 	bl	8002b48 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3301      	adds	r3, #1
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c66:	2104      	movs	r1, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 ff6d 	bl	8002b48 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c6e:	bf00      	nop
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	3301      	adds	r3, #1
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 ff17 	bl	8002ab0 <WIZCHIP_READ>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f3      	bne.n	8001c70 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <connect+0x1b4>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	fa42 f303 	asr.w	r3, r2, r3
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d02b      	beq.n	8001cf4 <connect+0x190>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e036      	b.n	8001d0e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
//	    Refresh_Watchdog();
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 feff 	bl	8002ab0 <WIZCHIP_READ>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00c      	beq.n	8001cd6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 ff3c 	bl	8002b48 <WIZCHIP_WRITE>
			return SOCKERR_TIMEOUT;
 8001cd0:	f06f 030c 	mvn.w	r3, #12
 8001cd4:	e01b      	b.n	8001d0e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3301      	adds	r3, #1
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fee4 	bl	8002ab0 <WIZCHIP_READ>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8001cee:	f06f 0303 	mvn.w	r3, #3
 8001cf2:	e00c      	b.n	8001d0e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fed5 	bl	8002ab0 <WIZCHIP_READ>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b17      	cmp	r3, #23
 8001d0a:	d1c9      	bne.n	8001ca0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200024fc 	.word	0x200024fc

08001d1c <send>:
	return SOCK_OK;
}


int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d902      	bls.n	8001d40 <send+0x24>
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e0de      	b.n	8001efe <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	3301      	adds	r3, #1
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 feb1 	bl	8002ab0 <WIZCHIP_READ>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d002      	beq.n	8001d5e <send+0x42>
 8001d58:	f06f 0304 	mvn.w	r3, #4
 8001d5c:	e0cf      	b.n	8001efe <send+0x1e2>
   CHECK_SOCKDATA();
 8001d5e:	88bb      	ldrh	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <send+0x4e>
 8001d64:	f06f 030d 	mvn.w	r3, #13
 8001d68:	e0c9      	b.n	8001efe <send+0x1e2>
   tmp = getSn_SR(sn);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3301      	adds	r3, #1
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fe9a 	bl	8002ab0 <WIZCHIP_READ>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b17      	cmp	r3, #23
 8001d84:	d005      	beq.n	8001d92 <send+0x76>
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b1c      	cmp	r3, #28
 8001d8a:	d002      	beq.n	8001d92 <send+0x76>
 8001d8c:	f06f 0306 	mvn.w	r3, #6
 8001d90:	e0b5      	b.n	8001efe <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <send+0x1ec>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	fa42 f303 	asr.w	r3, r2, r3
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d039      	beq.n	8001e1a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	3301      	adds	r3, #1
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fe7c 	bl	8002ab0 <WIZCHIP_READ>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3301      	adds	r3, #1
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001dd6:	2110      	movs	r1, #16
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 feb5 	bl	8002b48 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	2201      	movs	r2, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	b21b      	sxth	r3, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <send+0x1ec>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	4013      	ands	r3, r2
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <send+0x1ec>)
 8001dfa:	801a      	strh	r2, [r3, #0]
 8001dfc:	e00d      	b.n	8001e1a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <send+0xfa>
      {
         close(sn);
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe3c 	bl	8001a88 <close>
         return SOCKERR_TIMEOUT;
 8001e10:	f06f 030c 	mvn.w	r3, #12
 8001e14:	e073      	b.n	8001efe <send+0x1e2>
      }
      else return SOCK_BUSY;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e071      	b.n	8001efe <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	3301      	adds	r3, #1
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fe42 	bl	8002ab0 <WIZCHIP_READ>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001e34:	88ba      	ldrh	r2, [r7, #4]
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d901      	bls.n	8001e40 <send+0x124>
 8001e3c:	89bb      	ldrh	r3, [r7, #12]
 8001e3e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 ff8e 	bl	8002d64 <getSn_TX_FSR>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	3301      	adds	r3, #1
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fe29 	bl	8002ab0 <WIZCHIP_READ>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b17      	cmp	r3, #23
 8001e66:	d009      	beq.n	8001e7c <send+0x160>
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	2b1c      	cmp	r3, #28
 8001e6c:	d006      	beq.n	8001e7c <send+0x160>
      {
         close(sn);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fe09 	bl	8001a88 <close>
         return SOCKERR_SOCKSTATUS;
 8001e76:	f06f 0306 	mvn.w	r3, #6
 8001e7a:	e040      	b.n	8001efe <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <send+0x1f0>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	fa42 f303 	asr.w	r3, r2, r3
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <send+0x180>
 8001e90:	88ba      	ldrh	r2, [r7, #4]
 8001e92:	89bb      	ldrh	r3, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d901      	bls.n	8001e9c <send+0x180>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e030      	b.n	8001efe <send+0x1e2>
      if(len <= freesize) break;
 8001e9c:	88ba      	ldrh	r2, [r7, #4]
 8001e9e:	89bb      	ldrh	r3, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d900      	bls.n	8001ea6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001ea4:	e7cc      	b.n	8001e40 <send+0x124>
      if(len <= freesize) break;
 8001ea6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001ea8:	88ba      	ldrh	r2, [r7, #4]
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 ffee 	bl	8002e90 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	3301      	adds	r3, #1
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fe40 	bl	8002b48 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001ec8:	bf00      	nop
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	3301      	adds	r3, #1
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 fdea 	bl	8002ab0 <WIZCHIP_READ>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f3      	bne.n	8001eca <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <send+0x1ec>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <send+0x1ec>)
 8001efa:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001efc:	88bb      	ldrh	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200024fe 	.word	0x200024fe
 8001f0c:	200024fc 	.word	0x200024fc

08001f10 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d902      	bls.n	8001f34 <recv+0x24>
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e0c6      	b.n	80020c2 <recv+0x1b2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	3301      	adds	r3, #1
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fdb7 	bl	8002ab0 <WIZCHIP_READ>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d002      	beq.n	8001f52 <recv+0x42>
 8001f4c:	f06f 0304 	mvn.w	r3, #4
 8001f50:	e0b7      	b.n	80020c2 <recv+0x1b2>
   CHECK_SOCKDATA();
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <recv+0x4e>
 8001f58:	f06f 030d 	mvn.w	r3, #13
 8001f5c:	e0b1      	b.n	80020c2 <recv+0x1b2>
   
   recvsize = getSn_RxMAX(sn);
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	3301      	adds	r3, #1
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fda0 	bl	8002ab0 <WIZCHIP_READ>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001f78:	89ba      	ldrh	r2, [r7, #12]
 8001f7a:	88bb      	ldrh	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d201      	bcs.n	8001f84 <recv+0x74>
 8001f80:	89bb      	ldrh	r3, [r7, #12]
 8001f82:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 ff37 	bl	8002dfa <getSn_RX_RSR>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	3301      	adds	r3, #1
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fd87 	bl	8002ab0 <WIZCHIP_READ>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b17      	cmp	r3, #23
 8001faa:	d026      	beq.n	8001ffa <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b1c      	cmp	r3, #28
 8001fb0:	d11c      	bne.n	8001fec <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001fb2:	89bb      	ldrh	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d157      	bne.n	8002068 <recv+0x158>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 fed2 	bl	8002d64 <getSn_TX_FSR>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	3301      	adds	r3, #1
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fd6d 	bl	8002ab0 <WIZCHIP_READ>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	029b      	lsls	r3, r3, #10
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	d10d      	bne.n	8001ffa <recv+0xea>
               {
                  close(sn);
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fd51 	bl	8001a88 <close>
                  return SOCKERR_SOCKSTATUS;
 8001fe6:	f06f 0306 	mvn.w	r3, #6
 8001fea:	e06a      	b.n	80020c2 <recv+0x1b2>
               }
            }
            else
            {
               close(sn);
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd4a 	bl	8001a88 <close>
               return SOCKERR_SOCKSTATUS;
 8001ff4:	f06f 0306 	mvn.w	r3, #6
 8001ff8:	e063      	b.n	80020c2 <recv+0x1b2>
            }
         }
        if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001ffa:	4b34      	ldr	r3, [pc, #208]	; (80020cc <recv+0x1bc>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	fa42 f303 	asr.w	r3, r2, r3
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <recv+0x108>
 800200e:	89bb      	ldrh	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <recv+0x108>
 8002014:	2300      	movs	r3, #0
 8002016:	e054      	b.n	80020c2 <recv+0x1b2>
     	ctlwizchip(CW_GET_PHYLINK, (void*) &Physical_Connection); // gets physical status of the TCPIP
 8002018:	492d      	ldr	r1, [pc, #180]	; (80020d0 <recv+0x1c0>)
 800201a:	200f      	movs	r0, #15
 800201c:	f001 f88e 	bl	800313c <ctlwizchip>

     	if(Physical_Connection==PHY_LINK_OFF)
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <recv+0x1c0>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d021      	beq.n	800206c <recv+0x15c>
     	{
     		break;
     	}

         if(recvsize != 0) break;
 8002028:	89bb      	ldrh	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d120      	bne.n	8002070 <recv+0x160>
         if(recvsize == 0) break;
 800202e:	89bb      	ldrh	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01f      	beq.n	8002074 <recv+0x164>

 		  uint8_t  server_Address[4] = {192,168,1,111};
 8002034:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <recv+0x1c4>)
 8002036:	60bb      	str	r3, [r7, #8]
 		  Refresh_Watchdog();
 8002038:	f7fe fce4 	bl	8000a04 <Refresh_Watchdog>
 		  connect(0,server_Address,9099);
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	f242 328b 	movw	r2, #9099	; 0x238b
 8002044:	4619      	mov	r1, r3
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff fd8c 	bl	8001b64 <connect>
 		  remote1 = getsockopt(0,SO_STATUS, &remotePort1);
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <recv+0x1c8>)
 800204e:	210a      	movs	r1, #10
 8002050:	2000      	movs	r0, #0
 8002052:	f000 f845 	bl	80020e0 <getsockopt>
 8002056:	4603      	mov	r3, r0
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <recv+0x1cc>)
 800205c:	701a      	strb	r2, [r3, #0]
 		  if(remotePort1==28)
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <recv+0x1c8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b1c      	cmp	r3, #28
 8002064:	d008      	beq.n	8002078 <recv+0x168>
      {
 8002066:	e78d      	b.n	8001f84 <recv+0x74>
               if(recvsize != 0) break;
 8002068:	bf00      	nop
 800206a:	e006      	b.n	800207a <recv+0x16a>
     		break;
 800206c:	bf00      	nop
 800206e:	e004      	b.n	800207a <recv+0x16a>
         if(recvsize != 0) break;
 8002070:	bf00      	nop
 8002072:	e002      	b.n	800207a <recv+0x16a>
         if(recvsize == 0) break;
 8002074:	bf00      	nop
 8002076:	e000      	b.n	800207a <recv+0x16a>
 		  {
 			  break;
 8002078:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800207a:	89ba      	ldrh	r2, [r7, #12]
 800207c:	88bb      	ldrh	r3, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	d201      	bcs.n	8002086 <recv+0x176>
 8002082:	89bb      	ldrh	r3, [r7, #12]
 8002084:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8002086:	88ba      	ldrh	r2, [r7, #4]
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 ff5b 	bl	8002f48 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);    //Sn_CR_RECV - Update RX buffer pointer and receive data
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3301      	adds	r3, #1
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd51 	bl	8002b48 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80020a6:	bf00      	nop
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	3301      	adds	r3, #1
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fcfb 	bl	8002ab0 <WIZCHIP_READ>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f3      	bne.n	80020a8 <recv+0x198>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80020c0:	88bb      	ldrh	r3, [r7, #4]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200024fc 	.word	0x200024fc
 80020d0:	20002510 	.word	0x20002510
 80020d4:	6f01a8c0 	.word	0x6f01a8c0
 80020d8:	20002512 	.word	0x20002512
 80020dc:	20002511 	.word	0x20002511

080020e0 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	603a      	str	r2, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	460b      	mov	r3, r1
 80020ee:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d902      	bls.n	80020fc <getsockopt+0x1c>
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e101      	b.n	8002300 <getsockopt+0x220>
   switch(sotype)
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	f200 80fa 	bhi.w	80022f8 <getsockopt+0x218>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <getsockopt+0x2c>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002141 	.word	0x08002141
 8002110:	0800215d 	.word	0x0800215d
 8002114:	08002179 	.word	0x08002179
 8002118:	08002195 	.word	0x08002195
 800211c:	080021cf 	.word	0x080021cf
 8002120:	080021e7 	.word	0x080021e7
 8002124:	080022f9 	.word	0x080022f9
 8002128:	08002221 	.word	0x08002221
 800212c:	0800225b 	.word	0x0800225b
 8002130:	0800226d 	.word	0x0800226d
 8002134:	0800227f 	.word	0x0800227f
 8002138:	0800229b 	.word	0x0800229b
 800213c:	080022d3 	.word	0x080022d3
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3301      	adds	r3, #1
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fcb1 	bl	8002ab0 <WIZCHIP_READ>
 800214e:	4603      	mov	r3, r0
 8002150:	f023 030f 	bic.w	r3, r3, #15
 8002154:	b2da      	uxtb	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	701a      	strb	r2, [r3, #0]
         break;
 800215a:	e0d0      	b.n	80022fe <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3301      	adds	r3, #1
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fca1 	bl	8002ab0 <WIZCHIP_READ>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	701a      	strb	r2, [r3, #0]
         break;
 8002176:	e0c2      	b.n	80022fe <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	3301      	adds	r3, #1
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fc93 	bl	8002ab0 <WIZCHIP_READ>
 800218a:	4603      	mov	r3, r0
 800218c:	461a      	mov	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	701a      	strb	r2, [r3, #0]
         break;
 8002192:	e0b4      	b.n	80022fe <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	3301      	adds	r3, #1
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fc85 	bl	8002ab0 <WIZCHIP_READ>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	b29c      	uxth	r4, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3301      	adds	r3, #1
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fc78 	bl	8002ab0 <WIZCHIP_READ>
 80021c0:	4603      	mov	r3, r0
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4423      	add	r3, r4
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	801a      	strh	r2, [r3, #0]
         break;
 80021cc:	e097      	b.n	80022fe <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	3301      	adds	r3, #1
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80021da:	2204      	movs	r2, #4
 80021dc:	6839      	ldr	r1, [r7, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fd00 	bl	8002be4 <WIZCHIP_READ_BUF>
         break;
 80021e4:	e08b      	b.n	80022fe <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3301      	adds	r3, #1
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fc5c 	bl	8002ab0 <WIZCHIP_READ>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	b29c      	uxth	r4, r3
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3301      	adds	r3, #1
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fc4f 	bl	8002ab0 <WIZCHIP_READ>
 8002212:	4603      	mov	r3, r0
 8002214:	b29b      	uxth	r3, r3
 8002216:	4423      	add	r3, r4
 8002218:	b29a      	uxth	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	801a      	strh	r2, [r3, #0]
         break;
 800221e:	e06e      	b.n	80022fe <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	3301      	adds	r3, #1
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fc41 	bl	8002ab0 <WIZCHIP_READ>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	2b01      	cmp	r3, #1
 8002236:	d002      	beq.n	800223e <getsockopt+0x15e>
 8002238:	f06f 0304 	mvn.w	r3, #4
 800223c:	e060      	b.n	8002300 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	3301      	adds	r3, #1
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fc30 	bl	8002ab0 <WIZCHIP_READ>
 8002250:	4603      	mov	r3, r0
 8002252:	b29a      	uxth	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	801a      	strh	r2, [r3, #0]
         break;
 8002258:	e051      	b.n	80022fe <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fd81 	bl	8002d64 <getSn_TX_FSR>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	801a      	strh	r2, [r3, #0]
         break;
 800226a:	e048      	b.n	80022fe <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fdc3 	bl	8002dfa <getSn_RX_RSR>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	801a      	strh	r2, [r3, #0]
         break;
 800227c:	e03f      	b.n	80022fe <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	3301      	adds	r3, #1
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fc10 	bl	8002ab0 <WIZCHIP_READ>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	701a      	strb	r2, [r3, #0]
         break;
 8002298:	e031      	b.n	80022fe <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	3301      	adds	r3, #1
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fc04 	bl	8002ab0 <WIZCHIP_READ>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 fda0 	bl	8002dfa <getSn_RX_RSR>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 80022c2:	e01c      	b.n	80022fe <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <getsockopt+0x228>)
 80022c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	801a      	strh	r2, [r3, #0]
         break;
 80022d0:	e015      	b.n	80022fe <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	3301      	adds	r3, #1
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fbe8 	bl	8002ab0 <WIZCHIP_READ>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 80022e6:	f06f 0304 	mvn.w	r3, #4
 80022ea:	e009      	b.n	8002300 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <getsockopt+0x22c>)
 80022f0:	5cd2      	ldrb	r2, [r2, r3]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	701a      	strb	r2, [r3, #0]
         break;
 80022f6:	e002      	b.n	80022fe <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 80022f8:	f06f 0301 	mvn.w	r3, #1
 80022fc:	e000      	b.n	8002300 <getsockopt+0x220>
   }
   return SOCK_OK;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	20002500 	.word	0x20002500
 800230c:	20002514 	.word	0x20002514

08002310 <Get_state>:


struct StatesStruct test_states={Initilisation_State, NULL_State}; // current state defined as initilisation state, next state defined as NULL state

myStates Get_state()
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
	return	 test_states.Current_State;
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <Get_state+0x14>)
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20001008 	.word	0x20001008

08002328 <Set_state>:

void Set_state(myStates N_S)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
test_states.Current_State = N_S;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <Set_state+0x1c>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	7013      	strb	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20001008 	.word	0x20001008

08002348 <Initilisation_State_Handler>:
 extern uint8_t remotePort;
 extern uint32_t PortStatus;
 extern uint8_t remote;

void Initilisation_State_Handler()
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	Set_state(Initilisation_State);
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff ffeb 	bl	8002328 <Set_state>
	Reset_event();
 8002352:	f7fe fb81 	bl	8000a58 <Reset_event>
	Init_Ethernet();
 8002356:	f7fe fac9 	bl	80008ec <Init_Ethernet>
	ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP); // gets physical status of the TCPIP
 800235a:	4926      	ldr	r1, [pc, #152]	; (80023f4 <Initilisation_State_Handler+0xac>)
 800235c:	200f      	movs	r0, #15
 800235e:	f000 feed 	bl	800313c <ctlwizchip>

	if(Phy_TCP_IP==PHY_LINK_OFF)
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <Initilisation_State_Handler+0xac>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <Initilisation_State_Handler+0x2a>
	{
		Set_state(Initilisation_State);
 800236a:	2001      	movs	r0, #1
 800236c:	f7ff ffdc 	bl	8002328 <Set_state>
	  			break;
	  		}
		}
		Set_event(Reset_Event);
	}
}
 8002370:	e03e      	b.n	80023f0 <Initilisation_State_Handler+0xa8>
	else if(Phy_TCP_IP==PHY_LINK_ON)
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <Initilisation_State_Handler+0xac>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d13a      	bne.n	80023f0 <Initilisation_State_Handler+0xa8>
		Refresh_Watchdog();
 800237a:	f7fe fb43 	bl	8000a04 <Refresh_Watchdog>
		Ethernet_Connect();
 800237e:	f7fe fb11 	bl	80009a4 <Ethernet_Connect>
		send(0, (uint8_t *)SYS_INIT_CMD,strlen(SYS_INIT_CMD));
 8002382:	2209      	movs	r2, #9
 8002384:	491c      	ldr	r1, [pc, #112]	; (80023f8 <Initilisation_State_Handler+0xb0>)
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff fcc8 	bl	8001d1c <send>
		memset(Recv_Cmd,0,sizeof Recv_Cmd);
 800238c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002390:	2100      	movs	r1, #0
 8002392:	481a      	ldr	r0, [pc, #104]	; (80023fc <Initilisation_State_Handler+0xb4>)
 8002394:	f005 fe96 	bl	80080c4 <memset>
		while(strcmp(Recv_Cmd,Abox_Ready)!=0)
 8002398:	e01c      	b.n	80023d4 <Initilisation_State_Handler+0x8c>
			memset(Recv_Cmd,0,sizeof Recv_Cmd);
 800239a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800239e:	2100      	movs	r1, #0
 80023a0:	4816      	ldr	r0, [pc, #88]	; (80023fc <Initilisation_State_Handler+0xb4>)
 80023a2:	f005 fe8f 	bl	80080c4 <memset>
			PortStatus=recv(0, Recv_Cmd,2048);
 80023a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023aa:	4914      	ldr	r1, [pc, #80]	; (80023fc <Initilisation_State_Handler+0xb4>)
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fdaf 	bl	8001f10 <recv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <Initilisation_State_Handler+0xb8>)
 80023b8:	601a      	str	r2, [r3, #0]
	  		ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP);
 80023ba:	490e      	ldr	r1, [pc, #56]	; (80023f4 <Initilisation_State_Handler+0xac>)
 80023bc:	200f      	movs	r0, #15
 80023be:	f000 febd 	bl	800313c <ctlwizchip>
	  		if(PortStatus==SOCKERR_SOCKSTATUS)
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <Initilisation_State_Handler+0xb8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f113 0f07 	cmn.w	r3, #7
 80023ca:	d00b      	beq.n	80023e4 <Initilisation_State_Handler+0x9c>
	  		if(Phy_TCP_IP==PHY_LINK_OFF)
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <Initilisation_State_Handler+0xac>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <Initilisation_State_Handler+0xa0>
		while(strcmp(Recv_Cmd,Abox_Ready)!=0)
 80023d4:	490b      	ldr	r1, [pc, #44]	; (8002404 <Initilisation_State_Handler+0xbc>)
 80023d6:	4809      	ldr	r0, [pc, #36]	; (80023fc <Initilisation_State_Handler+0xb4>)
 80023d8:	f7fd fef6 	bl	80001c8 <strcmp>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1db      	bne.n	800239a <Initilisation_State_Handler+0x52>
 80023e2:	e002      	b.n	80023ea <Initilisation_State_Handler+0xa2>
	  			break;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <Initilisation_State_Handler+0xa2>
	  			break;
 80023e8:	bf00      	nop
		Set_event(Reset_Event);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7fe fb24 	bl	8000a38 <Set_event>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20001a45 	.word	0x20001a45
 80023f8:	08008434 	.word	0x08008434
 80023fc:	20002edc 	.word	0x20002edc
 8002400:	20001cf4 	.word	0x20001cf4
 8002404:	2000100c 	.word	0x2000100c

08002408 <Reset_State_Handler>:

void Reset_State_Handler()
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	Set_state(Reset_State);
 800240c:	2002      	movs	r0, #2
 800240e:	f7ff ff8b 	bl	8002328 <Set_state>
	Reset_event();
 8002412:	f7fe fb21 	bl	8000a58 <Reset_event>
	//Reset the RingBuffers
	RingInit(&WR_Ring,&WR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8002416:	2304      	movs	r3, #4
 8002418:	22c8      	movs	r2, #200	; 0xc8
 800241a:	491a      	ldr	r1, [pc, #104]	; (8002484 <Reset_State_Handler+0x7c>)
 800241c:	481a      	ldr	r0, [pc, #104]	; (8002488 <Reset_State_Handler+0x80>)
 800241e:	f7ff f93c 	bl	800169a <RingInit>
	RingInit(&WL_Ring,&WL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8002422:	2304      	movs	r3, #4
 8002424:	22c8      	movs	r2, #200	; 0xc8
 8002426:	4919      	ldr	r1, [pc, #100]	; (800248c <Reset_State_Handler+0x84>)
 8002428:	4819      	ldr	r0, [pc, #100]	; (8002490 <Reset_State_Handler+0x88>)
 800242a:	f7ff f936 	bl	800169a <RingInit>
	RingInit(&FCT_Ring,&FCT_Samples[0],BUFFERSIZE,sizeof(buff_size));
 800242e:	2304      	movs	r3, #4
 8002430:	22c8      	movs	r2, #200	; 0xc8
 8002432:	4918      	ldr	r1, [pc, #96]	; (8002494 <Reset_State_Handler+0x8c>)
 8002434:	4818      	ldr	r0, [pc, #96]	; (8002498 <Reset_State_Handler+0x90>)
 8002436:	f7ff f930 	bl	800169a <RingInit>
	//Reset the Counts
	WR_Counts=0;
 800243a:	4b18      	ldr	r3, [pc, #96]	; (800249c <Reset_State_Handler+0x94>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
	WL_Counts=0;
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <Reset_State_Handler+0x98>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
	FCT_Counts=0;
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <Reset_State_Handler+0x9c>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
	//Reset the 32 bit timer 2
	Timer2_Stop(); //Timer Stopped
 800244c:	f7fe fb34 	bl	8000ab8 <Timer2_Stop>
	Timer6_Stop();
 8002450:	f7fe fb80 	bl	8000b54 <Timer6_Stop>

	Timer2_DeInitilized();//Timer DeInitilized
 8002454:	f7fe fb3a 	bl	8000acc <Timer2_DeInitilized>

	Timer2_Initilized(); //Timer Initialized
 8002458:	f7fe fb50 	bl	8000afc <Timer2_Initilized>
	Entry_flag=0;
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <Reset_State_Handler+0xa0>)
 800245e:	2200      	movs	r2, #0
 8002460:	801a      	strh	r2, [r3, #0]
	Lt_Rt_flag=0;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <Reset_State_Handler+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	801a      	strh	r2, [r3, #0]
	Rt_Lt_flag=0;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <Reset_State_Handler+0xa8>)
 800246a:	2200      	movs	r2, #0
 800246c:	801a      	strh	r2, [r3, #0]
	memset(Recv_Cmd,0,sizeof Recv_Cmd);
 800246e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002472:	2100      	movs	r1, #0
 8002474:	480f      	ldr	r0, [pc, #60]	; (80024b4 <Reset_State_Handler+0xac>)
 8002476:	f005 fe25 	bl	80080c4 <memset>
	//send(0, (uint8_t *)"RESET",strlen("RESET"));
	//set the event to idle
	Set_event(Idle_Event);
 800247a:	2002      	movs	r0, #2
 800247c:	f7fe fadc 	bl	8000a38 <Set_event>
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000251c 	.word	0x2000251c
 8002488:	20002e7c 	.word	0x20002e7c
 800248c:	20002b5c 	.word	0x20002b5c
 8002490:	20002ebc 	.word	0x20002ebc
 8002494:	2000283c 	.word	0x2000283c
 8002498:	20002e9c 	.word	0x20002e9c
 800249c:	200018c4 	.word	0x200018c4
 80024a0:	200018cc 	.word	0x200018cc
 80024a4:	200018c8 	.word	0x200018c8
 80024a8:	200018e0 	.word	0x200018e0
 80024ac:	200018dc 	.word	0x200018dc
 80024b0:	200018de 	.word	0x200018de
 80024b4:	20002edc 	.word	0x20002edc

080024b8 <Idle_State_Handler>:

void Idle_State_Handler()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	//Set state to idle state
	Set_state(Idle_State);
 80024bc:	2003      	movs	r0, #3
 80024be:	f7ff ff33 	bl	8002328 <Set_state>


	//send(0, (buff_size *)" Idle,",strlen(" Idle,"));
	//reset the event
	Reset_event();
 80024c2:	f7fe fac9 	bl	8000a58 <Reset_event>
	//
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <WRSide_Train_Presence_State_Handler>:

void WRSide_Train_Presence_State_Handler()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	if(Get_state!=WRSide_Train_Presence_State)
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <WRSide_Train_Presence_State_Handler+0x18>)
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d004      	beq.n	80024e0 <WRSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WRSide Train Presence state
		Set_state(WRSide_Train_Presence_State);
 80024d6:	2004      	movs	r0, #4
 80024d8:	f7ff ff26 	bl	8002328 <Set_state>

		//send(0, (buff_size *)" WRSide,",strlen(" WRSide,"));
		//reset the event
		Reset_event();
 80024dc:	f7fe fabc 	bl	8000a58 <Reset_event>
	}
	//tasks that need to be done on each WR trigger
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	08002311 	.word	0x08002311

080024e8 <WLSide_Train_Presence_State_Handler>:

void WLSide_Train_Presence_State_Handler()
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	if(Get_state!=WLSide_Train_Presence_State)
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <WLSide_Train_Presence_State_Handler+0x18>)
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d004      	beq.n	80024fc <WLSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WLSide Train Presence state
		Set_state(WLSide_Train_Presence_State);
 80024f2:	2005      	movs	r0, #5
 80024f4:	f7ff ff18 	bl	8002328 <Set_state>

		//send(0, (buff_size *)" WLSide,",strlen(" WLSide,"));
		//reset the event
		Reset_event();
 80024f8:	f7fe faae 	bl	8000a58 <Reset_event>
	}
	//tasks that need to be done on each WL trigger
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	08002311 	.word	0x08002311

08002504 <Train_Exit_State_Handler>:

void Train_Exit_State_Handler()
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	//Set state to Train Exit state
	Set_state(Train_Exit_State);
 8002508:	2006      	movs	r0, #6
 800250a:	f7ff ff0d 	bl	8002328 <Set_state>

	//send(0, (buff_size *)" Exit,",strlen(" Exit,"));
	//reset the event
	Reset_event();
 800250e:	f7fe faa3 	bl	8000a58 <Reset_event>
	//shut down the purge and close the shutters
	//set the event to Log Data event
	Set_event(Log_Data_Event);
 8002512:	2006      	movs	r0, #6
 8002514:	f7fe fa90 	bl	8000a38 <Set_event>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}

0800251c <Log_Data_State_Handler>:

void Log_Data_State_Handler()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	//Set state to Log Data state
	Set_state(Log_Data_State);
 8002520:	2007      	movs	r0, #7
 8002522:	f7ff ff01 	bl	8002328 <Set_state>

	//send(0, (buff_size *)" Log,",strlen(" Log,"));
	//reset the event
	Reset_event();
 8002526:	f7fe fa97 	bl	8000a58 <Reset_event>
	//send the data over TCPIP
	Send_Data();
 800252a:	f7fe f8f1 	bl	8000710 <Send_Data>
	//set the event to reset event
	Set_event(Reset_Event);
 800252e:	2001      	movs	r0, #1
 8002530:	f7fe fa82 	bl	8000a38 <Set_event>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_MspInit+0x44>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_MspInit+0x44>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6193      	str	r3, [r2, #24]
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_MspInit+0x44>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_MspInit+0x44>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a08      	ldr	r2, [pc, #32]	; (800257c <HAL_MspInit+0x44>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_MspInit+0x44>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_RTC_MspInit+0x44>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d111      	bne.n	80025b6 <HAL_RTC_MspInit+0x36>
 8002592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002596:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <HAL_RTC_MspInit+0x48>)
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	2301      	movs	r3, #1
 80025b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40002800 	.word	0x40002800
 80025c8:	10908100 	.word	0x10908100

080025cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a3d      	ldr	r2, [pc, #244]	; (80026e0 <HAL_SPI_MspInit+0x114>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d147      	bne.n	800267e <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4a36      	ldr	r2, [pc, #216]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6153      	str	r3, [r2, #20]
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	4a30      	ldr	r2, [pc, #192]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 8002624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002628:	6153      	str	r3, [r2, #20]
 800262a:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002648:	2305      	movs	r3, #5
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4825      	ldr	r0, [pc, #148]	; (80026e8 <HAL_SPI_MspInit+0x11c>)
 8002654:	f001 fb82 	bl	8003d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002658:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265e:	2302      	movs	r3, #2
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002666:	2303      	movs	r3, #3
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266a:	2305      	movs	r3, #5
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002678:	f001 fb70 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800267c:	e02c      	b.n	80026d8 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_SPI_MspInit+0x120>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d127      	bne.n	80026d8 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 800268e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002692:	61d3      	str	r3, [r2, #28]
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 80026a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026aa:	6153      	str	r3, [r2, #20]
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_SPI_MspInit+0x118>)
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80026b8:	2338      	movs	r3, #56	; 0x38
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026c8:	2306      	movs	r3, #6
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <HAL_SPI_MspInit+0x11c>)
 80026d4:	f001 fb42 	bl	8003d5c <HAL_GPIO_Init>
}
 80026d8:	bf00      	nop
 80026da:	3730      	adds	r7, #48	; 0x30
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40003800 	.word	0x40003800
 80026e4:	40021000 	.word	0x40021000
 80026e8:	48000400 	.word	0x48000400
 80026ec:	40003c00 	.word	0x40003c00

080026f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d10c      	bne.n	800271c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002702:	4b2f      	ldr	r3, [pc, #188]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a2e      	ldr	r2, [pc, #184]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	61d3      	str	r3, [r2, #28]
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800271a:	e04c      	b.n	80027b6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d114      	bne.n	8002750 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 800272c:	f043 0310 	orr.w	r3, r3, #16
 8002730:	61d3      	str	r3, [r2, #28]
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2036      	movs	r0, #54	; 0x36
 8002744:	f001 fac5 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002748:	2036      	movs	r0, #54	; 0x36
 800274a:	f001 fade 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 800274e:	e032      	b.n	80027b6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_TIM_Base_MspInit+0xd8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d114      	bne.n	8002784 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800275a:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	6193      	str	r3, [r2, #24]
 8002766:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2019      	movs	r0, #25
 8002778:	f001 faab 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800277c:	2019      	movs	r0, #25
 800277e:	f001 fac4 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 8002782:	e018      	b.n	80027b6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM17)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_TIM_Base_MspInit+0xdc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 8002794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002798:	6193      	str	r3, [r2, #24]
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_TIM_Base_MspInit+0xd0>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	201a      	movs	r0, #26
 80027ac:	f001 fa91 	bl	8003cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80027b0:	201a      	movs	r0, #26
 80027b2:	f001 faaa 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40001000 	.word	0x40001000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800

080027d0 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d106      	bne.n	80027f0 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM17_MspDeInit 1 */

  /* USER CODE END TIM17_MspDeInit 1 */
  }

}
 80027ee:	e02b      	b.n	8002848 <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM6)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_TIM_Base_MspDeInit+0x84>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d109      	bne.n	800280e <HAL_TIM_Base_MspDeInit+0x3e>
    __HAL_RCC_TIM6_CLK_DISABLE();
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 8002800:	f023 0310 	bic.w	r3, r3, #16
 8002804:	61d3      	str	r3, [r2, #28]
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8002806:	2036      	movs	r0, #54	; 0x36
 8002808:	f001 fa8d 	bl	8003d26 <HAL_NVIC_DisableIRQ>
}
 800280c:	e01c      	b.n	8002848 <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM16)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a11      	ldr	r2, [pc, #68]	; (8002858 <HAL_TIM_Base_MspDeInit+0x88>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d109      	bne.n	800282c <HAL_TIM_Base_MspDeInit+0x5c>
    __HAL_RCC_TIM16_CLK_DISABLE();
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 800281e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002822:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(TIM1_UP_TIM16_IRQn);
 8002824:	2019      	movs	r0, #25
 8002826:	f001 fa7e 	bl	8003d26 <HAL_NVIC_DisableIRQ>
}
 800282a:	e00d      	b.n	8002848 <HAL_TIM_Base_MspDeInit+0x78>
  else if(htim_base->Instance==TIM17)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	; (800285c <HAL_TIM_Base_MspDeInit+0x8c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d108      	bne.n	8002848 <HAL_TIM_Base_MspDeInit+0x78>
    __HAL_RCC_TIM17_CLK_DISABLE();
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	4a05      	ldr	r2, [pc, #20]	; (8002850 <HAL_TIM_Base_MspDeInit+0x80>)
 800283c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002840:	6193      	str	r3, [r2, #24]
    HAL_NVIC_DisableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002842:	201a      	movs	r0, #26
 8002844:	f001 fa6f 	bl	8003d26 <HAL_NVIC_DisableIRQ>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40001000 	.word	0x40001000
 8002858:	40014400 	.word	0x40014400
 800285c:	40014800 	.word	0x40014800

08002860 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <HAL_UART_MspInit+0x7c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d128      	bne.n	80028d4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <HAL_UART_MspInit+0x80>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <HAL_UART_MspInit+0x80>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_UART_MspInit+0x80>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_UART_MspInit+0x80>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4a10      	ldr	r2, [pc, #64]	; (80028e0 <HAL_UART_MspInit+0x80>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	6153      	str	r3, [r2, #20]
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_UART_MspInit+0x80>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028b2:	230c      	movs	r3, #12
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b6:	2302      	movs	r3, #2
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028be:	2303      	movs	r3, #3
 80028c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c2:	2307      	movs	r3, #7
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d0:	f001 fa44 	bl	8003d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	; 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40004400 	.word	0x40004400
 80028e0:	40021000 	.word	0x40021000

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <HardFault_Handler+0x4>

080028f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <MemManage_Handler+0x4>

080028fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002902:	e7fe      	b.n	8002902 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	e7fe      	b.n	8002908 <UsageFault_Handler+0x4>

0800290a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290e:	bf00      	nop
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002938:	f001 f888 	bl	8003a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002944:	2001      	movs	r0, #1
 8002946:	f001 fb93 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	bd80      	pop	{r7, pc}

0800294e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002952:	2002      	movs	r0, #2
 8002954:	f001 fb8c 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002960:	2020      	movs	r0, #32
 8002962:	f001 fb85 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if ((TIM16->SR & 0x0001))
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <TIM1_UP_TIM16_IRQHandler+0x30>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <TIM1_UP_TIM16_IRQHandler+0x26>
	{
		TIM16->SR &= ~(1 << 0);		           //Reset the update interrupt flag
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <TIM1_UP_TIM16_IRQHandler+0x30>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <TIM1_UP_TIM16_IRQHandler+0x30>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6113      	str	r3, [r2, #16]
		tim16_count++;
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <TIM1_UP_TIM16_IRQHandler+0x34>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a04      	ldr	r2, [pc, #16]	; (80029a0 <TIM1_UP_TIM16_IRQHandler+0x34>)
 8002990:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002992:	4804      	ldr	r0, [pc, #16]	; (80029a4 <TIM1_UP_TIM16_IRQHandler+0x38>)
 8002994:	f004 fc59 	bl	800724a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40014400 	.word	0x40014400
 80029a0:	20001cec 	.word	0x20001cec
 80029a4:	20001bcc 	.word	0x20001bcc

080029a8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if ((TIM17->SR & 0x0001))
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <TIM1_TRG_COM_TIM17_IRQHandler+0x26>
	{
		TIM17->SR &= ~(1 << 0);		           //Reset the update interrupt flag
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6113      	str	r3, [r2, #16]
		tim17_count++;
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	4a04      	ldr	r2, [pc, #16]	; (80029dc <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 80029cc:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80029ce:	4804      	ldr	r0, [pc, #16]	; (80029e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x38>)
 80029d0:	f004 fc3b 	bl	800724a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40014800 	.word	0x40014800
 80029dc:	20001cf0 	.word	0x20001cf0
 80029e0:	20001c18 	.word	0x20001c18

080029e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if ((TIM6->SR & 0x0001))
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <TIM6_DAC_IRQHandler+0x30>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <TIM6_DAC_IRQHandler+0x26>
	{
		TIM6->SR &= ~(1 << 0);		           //Reset the update interrupt flag
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <TIM6_DAC_IRQHandler+0x30>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <TIM6_DAC_IRQHandler+0x30>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6113      	str	r3, [r2, #16]
		count++;
 8002a00:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <TIM6_DAC_IRQHandler+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <TIM6_DAC_IRQHandler+0x34>)
 8002a08:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a0a:	4804      	ldr	r0, [pc, #16]	; (8002a1c <TIM6_DAC_IRQHandler+0x38>)
 8002a0c:	f004 fc1d 	bl	800724a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40001000 	.word	0x40001000
 8002a18:	20001ce8 	.word	0x20001ce8
 8002a1c:	20001b80 	.word	0x20001b80

08002a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a50:	f005 fad6 	bl	8008000 <__errno>
 8002a54:	4603      	mov	r3, r0
 8002a56:	220c      	movs	r2, #12
 8002a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e009      	b.n	8002a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <_sbrk+0x64>)
 8002a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20004000 	.word	0x20004000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	200036dc 	.word	0x200036dc
 8002a88:	20003700 	.word	0x20003700

08002a8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <SystemInit+0x20>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <SystemInit+0x20>)
 8002a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <WIZCHIP_READ+0x24>
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	0c12      	lsrs	r2, r2, #16
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	0a12      	lsrs	r2, r2, #8
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	4610      	mov	r0, r2
 8002afa:	4798      	blx	r3
 8002afc:	e011      	b.n	8002b22 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	f107 020c 	add.w	r2, r7, #12
 8002b1c:	2103      	movs	r1, #3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4798      	blx	r3
 8002b28:	4603      	mov	r3, r0
 8002b2a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <WIZCHIP_READ+0x94>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	4798      	blx	r3
   return ret;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20001810 	.word	0x20001810

08002b48 <WIZCHIP_WRITE>:

void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];
   WIZCHIP_CRITICAL_ENTER();
 8002b54:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d119      	bne.n	8002ba4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	0c12      	lsrs	r2, r2, #16
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	0a12      	lsrs	r2, r2, #8
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4610      	mov	r0, r2
 8002b96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4798      	blx	r3
 8002ba2:	e013      	b.n	8002bcc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0a1b      	lsrs	r3, r3, #8
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f107 020c 	add.w	r2, r7, #12
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002bcc:	4b04      	ldr	r3, [pc, #16]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002bd2:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <WIZCHIP_WRITE+0x98>)
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	4798      	blx	r3
}
 8002bd8:	bf00      	nop
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20001810 	.word	0x20001810

08002be4 <WIZCHIP_READ_BUF>:
         
void WIZCHIP_READ_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002bf8:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002bfe:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <WIZCHIP_READ_BUF+0x2a>
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d126      	bne.n	8002c5c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	0c12      	lsrs	r2, r2, #16
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	0a12      	lsrs	r2, r2, #8
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	4610      	mov	r0, r2
 8002c28:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	4610      	mov	r0, r2
 8002c34:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	82fb      	strh	r3, [r7, #22]
 8002c3a:	e00a      	b.n	8002c52 <WIZCHIP_READ_BUF+0x6e>
		pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	8afa      	ldrh	r2, [r7, #22]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	188c      	adds	r4, r1, r2
 8002c46:	4798      	blx	r3
 8002c48:	4603      	mov	r3, r0
 8002c4a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002c4c:	8afb      	ldrh	r3, [r7, #22]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	82fb      	strh	r3, [r7, #22]
 8002c52:	8afa      	ldrh	r2, [r7, #22]
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3f0      	bcc.n	8002c3c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002c5a:	e017      	b.n	8002c8c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	0c1b      	lsrs	r3, r3, #16
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f107 0210 	add.w	r2, r7, #16
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	4611      	mov	r1, r2
 8002c88:	68b8      	ldr	r0, [r7, #8]
 8002c8a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002c92:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <WIZCHIP_READ_BUF+0xbc>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4798      	blx	r3
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd90      	pop	{r4, r7, pc}
 8002ca0:	20001810 	.word	0x20001810

08002ca4 <WIZCHIP_WRITE_BUF>:


void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d126      	bne.n	8002d1c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002cce:	4b24      	ldr	r3, [pc, #144]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	0c12      	lsrs	r2, r2, #16
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	0a12      	lsrs	r2, r2, #8
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	82fb      	strh	r3, [r7, #22]
 8002cfa:	e00a      	b.n	8002d12 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	8afa      	ldrh	r2, [r7, #22]
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	440a      	add	r2, r1
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002d0c:	8afb      	ldrh	r3, [r7, #22]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	82fb      	strh	r3, [r7, #22]
 8002d12:	8afa      	ldrh	r2, [r7, #22]
 8002d14:	88fb      	ldrh	r3, [r7, #6]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3f0      	bcc.n	8002cfc <WIZCHIP_WRITE_BUF+0x58>
 8002d1a:	e017      	b.n	8002d4c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else 														// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	f107 0210 	add.w	r2, r7, #16
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	4611      	mov	r1, r2
 8002d48:	68b8      	ldr	r0, [r7, #8]
 8002d4a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002d52:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <WIZCHIP_WRITE_BUF+0xbc>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	4798      	blx	r3
}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20001810 	.word	0x20001810

08002d64 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	81fb      	strh	r3, [r7, #14]
 8002d72:	2300      	movs	r3, #0
 8002d74:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fe94 	bl	8002ab0 <WIZCHIP_READ>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002d8c:	89bb      	ldrh	r3, [r7, #12]
 8002d8e:	021b      	lsls	r3, r3, #8
 8002d90:	b29c      	uxth	r4, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3301      	adds	r3, #1
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fe86 	bl	8002ab0 <WIZCHIP_READ>
 8002da4:	4603      	mov	r3, r0
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4423      	add	r3, r4
 8002daa:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002dac:	89bb      	ldrh	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01a      	beq.n	8002de8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	3301      	adds	r3, #1
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe76 	bl	8002ab0 <WIZCHIP_READ>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002dc8:	89fb      	ldrh	r3, [r7, #14]
 8002dca:	021b      	lsls	r3, r3, #8
 8002dcc:	b29c      	uxth	r4, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fe68 	bl	8002ab0 <WIZCHIP_READ>
 8002de0:	4603      	mov	r3, r0
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4423      	add	r3, r4
 8002de6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002de8:	89fa      	ldrh	r2, [r7, #14]
 8002dea:	89bb      	ldrh	r3, [r7, #12]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1c2      	bne.n	8002d76 <getSn_TX_FSR+0x12>
   return val;
 8002df0:	89fb      	ldrh	r3, [r7, #14]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}

08002dfa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002dfa:	b590      	push	{r4, r7, lr}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	81fb      	strh	r3, [r7, #14]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3301      	adds	r3, #1
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fe49 	bl	8002ab0 <WIZCHIP_READ>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002e22:	89bb      	ldrh	r3, [r7, #12]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	b29c      	uxth	r4, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff fe3b 	bl	8002ab0 <WIZCHIP_READ>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4423      	add	r3, r4
 8002e40:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002e42:	89bb      	ldrh	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01a      	beq.n	8002e7e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fe2b 	bl	8002ab0 <WIZCHIP_READ>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b29c      	uxth	r4, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	3301      	adds	r3, #1
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fe1d 	bl	8002ab0 <WIZCHIP_READ>
 8002e76:	4603      	mov	r3, r0
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	4423      	add	r3, r4
 8002e7c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002e7e:	89fa      	ldrh	r2, [r7, #14]
 8002e80:	89bb      	ldrh	r3, [r7, #12]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d1c2      	bne.n	8002e0c <getSn_RX_RSR+0x12>
   return val;
 8002e86:	89fb      	ldrh	r3, [r7, #14]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}

08002e90 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002ea8:	88bb      	ldrh	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d048      	beq.n	8002f40 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fdf8 	bl	8002ab0 <WIZCHIP_READ>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	b29c      	uxth	r4, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	3301      	adds	r3, #1
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fdeb 	bl	8002ab0 <WIZCHIP_READ>
 8002eda:	4603      	mov	r3, r0
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4423      	add	r3, r4
 8002ee0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002ee2:	89fb      	ldrh	r3, [r7, #14]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	79fa      	ldrb	r2, [r7, #7]
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	3202      	adds	r2, #2
 8002eec:	00d2      	lsls	r2, r2, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002ef2:	88bb      	ldrh	r3, [r7, #4]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6839      	ldr	r1, [r7, #0]
 8002ef8:	68b8      	ldr	r0, [r7, #8]
 8002efa:	f7ff fed3 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   ptr += len;
 8002efe:	89fa      	ldrh	r2, [r7, #14]
 8002f00:	88bb      	ldrh	r3, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002f12:	461a      	mov	r2, r3
 8002f14:	89fb      	ldrh	r3, [r7, #14]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f7ff fe12 	bl	8002b48 <WIZCHIP_WRITE>
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	3301      	adds	r3, #1
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002f30:	461a      	mov	r2, r3
 8002f32:	89fb      	ldrh	r3, [r7, #14]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7ff fe05 	bl	8002b48 <WIZCHIP_WRITE>
 8002f3e:	e000      	b.n	8002f42 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002f40:	bf00      	nop
}
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd90      	pop	{r4, r7, pc}

08002f48 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
 8002f54:	4613      	mov	r3, r2
 8002f56:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002f60:	88bb      	ldrh	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d048      	beq.n	8002ff8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fd9c 	bl	8002ab0 <WIZCHIP_READ>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	b29c      	uxth	r4, r3
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3301      	adds	r3, #1
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fd8f 	bl	8002ab0 <WIZCHIP_READ>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4423      	add	r3, r4
 8002f98:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	3203      	adds	r2, #3
 8002fa4:	00d2      	lsls	r2, r2, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	60bb      	str	r3, [r7, #8]

   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002faa:	88bb      	ldrh	r3, [r7, #4]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6839      	ldr	r1, [r7, #0]
 8002fb0:	68b8      	ldr	r0, [r7, #8]
 8002fb2:	f7ff fe17 	bl	8002be4 <WIZCHIP_READ_BUF>
   ptr += len;
 8002fb6:	89fa      	ldrh	r2, [r7, #14]
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	4413      	add	r3, r2
 8002fbc:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002fca:	461a      	mov	r2, r3
 8002fcc:	89fb      	ldrh	r3, [r7, #14]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f7ff fdb6 	bl	8002b48 <WIZCHIP_WRITE>
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7ff fda9 	bl	8002b48 <WIZCHIP_WRITE>
 8002ff6:	e000      	b.n	8002ffa <wiz_recv_data+0xb2>
   if(len == 0) return;
 8002ff8:	bf00      	nop
}
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}

08003000 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
 8003074:	2300      	movs	r3, #0
 8003076:	4618      	mov	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <reg_wizchip_cs_cbfunc+0x16>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d106      	bne.n	80030bc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <reg_wizchip_cs_cbfunc+0x40>)
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <reg_wizchip_cs_cbfunc+0x44>)
 80030b2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <reg_wizchip_cs_cbfunc+0x40>)
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <reg_wizchip_cs_cbfunc+0x48>)
 80030b8:	619a      	str	r2, [r3, #24]
 80030ba:	e006      	b.n	80030ca <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <reg_wizchip_cs_cbfunc+0x40>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <reg_wizchip_cs_cbfunc+0x40>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6193      	str	r3, [r2, #24]
   }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20001810 	.word	0x20001810
 80030dc:	0800301d 	.word	0x0800301d
 80030e0:	0800302b 	.word	0x0800302b

080030e4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80030ee:	bf00      	nop
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <reg_wizchip_spi_cbfunc+0x4c>)
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f9      	beq.n	80030f0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <reg_wizchip_spi_cbfunc+0x24>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <reg_wizchip_spi_cbfunc+0x4c>)
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <reg_wizchip_spi_cbfunc+0x50>)
 800310c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800310e:	4b08      	ldr	r3, [pc, #32]	; (8003130 <reg_wizchip_spi_cbfunc+0x4c>)
 8003110:	4a09      	ldr	r2, [pc, #36]	; (8003138 <reg_wizchip_spi_cbfunc+0x54>)
 8003112:	621a      	str	r2, [r3, #32]
 8003114:	e006      	b.n	8003124 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003116:	4a06      	ldr	r2, [pc, #24]	; (8003130 <reg_wizchip_spi_cbfunc+0x4c>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <reg_wizchip_spi_cbfunc+0x4c>)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6213      	str	r3, [r2, #32]
   }
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	20001810 	.word	0x20001810
 8003134:	08003071 	.word	0x08003071
 8003138:	08003081 	.word	0x08003081

0800313c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	2b0f      	cmp	r3, #15
 8003158:	f200 80c2 	bhi.w	80032e0 <ctlwizchip+0x1a4>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <ctlwizchip+0x28>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	080031a5 	.word	0x080031a5
 8003168:	080031ab 	.word	0x080031ab
 800316c:	080031d7 	.word	0x080031d7
 8003170:	080031cb 	.word	0x080031cb
 8003174:	080031e5 	.word	0x080031e5
 8003178:	080031f1 	.word	0x080031f1
 800317c:	080031ff 	.word	0x080031ff
 8003180:	08003225 	.word	0x08003225
 8003184:	0800324b 	.word	0x0800324b
 8003188:	08003285 	.word	0x08003285
 800318c:	0800328b 	.word	0x0800328b
 8003190:	08003293 	.word	0x08003293
 8003194:	080032e7 	.word	0x080032e7
 8003198:	0800329b 	.word	0x0800329b
 800319c:	080032a9 	.word	0x080032a9
 80031a0:	080032c5 	.word	0x080032c5
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80031a4:	f000 f8a8 	bl	80032f8 <wizchip_sw_reset>
         break;
 80031a8:	e09e      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3308      	adds	r3, #8
 80031b8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f8e5 	bl	8003390 <wizchip_init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	e08f      	b.n	80032ea <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f96a 	bl	80034a8 <wizchip_clrinterrupt>
         break;
 80031d4:	e088      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80031d6:	f000 f99b 	bl	8003510 <wizchip_getinterrupt>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	801a      	strh	r2, [r3, #0]
         break;
 80031e2:	e081      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f9b6 	bl	800355a <wizchip_setinterruptmask>
         break;         
 80031ee:	e07b      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80031f0:	f000 f9ce 	bl	8003590 <wizchip_getinterruptmask>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	801a      	strh	r2, [r3, #0]
         break;
 80031fc:	e074      	b.n	80032e8 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	b29b      	uxth	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800320e:	f7ff fc9b 	bl	8002b48 <WIZCHIP_WRITE>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4619      	mov	r1, r3
 800321a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800321e:	f7ff fc93 	bl	8002b48 <WIZCHIP_WRITE>
         break;
 8003222:	e061      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003224:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8003228:	f7ff fc42 	bl	8002ab0 <WIZCHIP_READ>
 800322c:	4603      	mov	r3, r0
 800322e:	b29b      	uxth	r3, r3
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	b29c      	uxth	r4, r3
 8003234:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003238:	f7ff fc3a 	bl	8002ab0 <WIZCHIP_READ>
 800323c:	4603      	mov	r3, r0
 800323e:	b29b      	uxth	r3, r3
 8003240:	4423      	add	r3, r4
 8003242:	b29a      	uxth	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	801a      	strh	r2, [r3, #0]
         break;
 8003248:	e04e      	b.n	80032e8 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800324a:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <ctlwizchip+0x1b8>)
 800324c:	789a      	ldrb	r2, [r3, #2]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <ctlwizchip+0x1b8>)
 8003258:	78d2      	ldrb	r2, [r2, #3]
 800325a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	3302      	adds	r3, #2
 8003260:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <ctlwizchip+0x1b8>)
 8003262:	7912      	ldrb	r2, [r2, #4]
 8003264:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	3303      	adds	r3, #3
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <ctlwizchip+0x1b8>)
 800326c:	7952      	ldrb	r2, [r2, #5]
 800326e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	3304      	adds	r3, #4
 8003274:	4a1f      	ldr	r2, [pc, #124]	; (80032f4 <ctlwizchip+0x1b8>)
 8003276:	7992      	ldrb	r2, [r2, #6]
 8003278:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3305      	adds	r3, #5
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
         break;
 8003282:	e031      	b.n	80032e8 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003284:	f000 f9d6 	bl	8003634 <wizphy_reset>
         break;
 8003288:	e02e      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f000 f9f9 	bl	8003682 <wizphy_setphyconf>
         break;
 8003290:	e02a      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003292:	6838      	ldr	r0, [r7, #0]
 8003294:	f000 fa37 	bl	8003706 <wizphy_getphyconf>
         break;
 8003298:	e026      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa9a 	bl	80037d8 <wizphy_setphypmode>
 80032a4:	4603      	mov	r3, r0
 80032a6:	e020      	b.n	80032ea <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80032a8:	f000 f9ab 	bl	8003602 <wizphy_getphypmode>
 80032ac:	4603      	mov	r3, r0
 80032ae:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2bff      	cmp	r3, #255	; 0xff
 80032b4:	d102      	bne.n	80032bc <ctlwizchip+0x180>
 80032b6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ba:	e016      	b.n	80032ea <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	7dfa      	ldrb	r2, [r7, #23]
 80032c0:	701a      	strb	r2, [r3, #0]
         break;
 80032c2:	e011      	b.n	80032e8 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80032c4:	f000 f987 	bl	80035d6 <wizphy_getphylink>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d102      	bne.n	80032d8 <ctlwizchip+0x19c>
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	e008      	b.n	80032ea <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	7dfa      	ldrb	r2, [r7, #23]
 80032dc:	701a      	strb	r2, [r3, #0]
         break;
 80032de:	e003      	b.n	80032e8 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
 80032e4:	e001      	b.n	80032ea <ctlwizchip+0x1ae>
         break;
 80032e6:	bf00      	nop
   }
   return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20001810 	.word	0x20001810

080032f8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80032fe:	1d3b      	adds	r3, r7, #4
 8003300:	2206      	movs	r2, #6
 8003302:	4619      	mov	r1, r3
 8003304:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003308:	f7ff fc6c 	bl	8002be4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2204      	movs	r2, #4
 8003312:	4619      	mov	r1, r3
 8003314:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003318:	f7ff fc64 	bl	8002be4 <WIZCHIP_READ_BUF>
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	2204      	movs	r2, #4
 8003322:	4619      	mov	r1, r3
 8003324:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003328:	f7ff fc5c 	bl	8002be4 <WIZCHIP_READ_BUF>
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2204      	movs	r2, #4
 8003332:	4619      	mov	r1, r3
 8003334:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003338:	f7ff fc54 	bl	8002be4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800333c:	2180      	movs	r1, #128	; 0x80
 800333e:	2000      	movs	r0, #0
 8003340:	f7ff fc02 	bl	8002b48 <WIZCHIP_WRITE>
   getMR(); // for delay
 8003344:	2000      	movs	r0, #0
 8003346:	f7ff fbb3 	bl	8002ab0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	2206      	movs	r2, #6
 800334e:	4619      	mov	r1, r3
 8003350:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003354:	f7ff fca6 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	2204      	movs	r2, #4
 800335e:	4619      	mov	r1, r3
 8003360:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003364:	f7ff fc9e 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	2204      	movs	r2, #4
 800336e:	4619      	mov	r1, r3
 8003370:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003374:	f7ff fc96 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	2204      	movs	r2, #4
 800337e:	4619      	mov	r1, r3
 8003380:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003384:	f7ff fc8e 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
}
 8003388:	bf00      	nop
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800339e:	f7ff ffab 	bl	80032f8 <wizchip_sw_reset>
   if(txsize)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d03b      	beq.n	8003420 <wizchip_init+0x90>
   {
      tmp = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]
 80033b0:	e015      	b.n	80033de <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80033b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	7bbb      	ldrb	r3, [r7, #14]
 80033be:	4413      	add	r3, r2
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80033c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	dd02      	ble.n	80033d2 <wizchip_init+0x42>
 80033cc:	f04f 33ff 	mov.w	r3, #4294967295
 80033d0:	e066      	b.n	80034a0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	73fb      	strb	r3, [r7, #15]
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	dde5      	ble.n	80033b2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e015      	b.n	8003418 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80033ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3301      	adds	r3, #1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80033fa:	4618      	mov	r0, r3
 80033fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	f7ff fb9e 	bl	8002b48 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800340c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3301      	adds	r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	73fb      	strb	r3, [r7, #15]
 8003418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341c:	2b07      	cmp	r3, #7
 800341e:	dde5      	ble.n	80033ec <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03b      	beq.n	800349e <wizchip_init+0x10e>
   {
      tmp = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800342a:	2300      	movs	r3, #0
 800342c:	73fb      	strb	r3, [r7, #15]
 800342e:	e015      	b.n	800345c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	4413      	add	r3, r2
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	4413      	add	r3, r2
 800343e:	b2db      	uxtb	r3, r3
 8003440:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8003442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003446:	2b10      	cmp	r3, #16
 8003448:	dd02      	ble.n	8003450 <wizchip_init+0xc0>
 800344a:	f04f 33ff 	mov.w	r3, #4294967295
 800344e:	e027      	b.n	80034a0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3301      	adds	r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003460:	2b07      	cmp	r3, #7
 8003462:	dde5      	ble.n	8003430 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e015      	b.n	8003496 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800346a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3301      	adds	r3, #1
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003478:	4618      	mov	r0, r3
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	4413      	add	r3, r2
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4619      	mov	r1, r3
 8003486:	f7ff fb5f 	bl	8002b48 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	73fb      	strb	r3, [r7, #15]
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	2b07      	cmp	r3, #7
 800349c:	dde5      	ble.n	800346a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	f023 030f 	bic.w	r3, r3, #15
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 80034cc:	f7ff fb3c 	bl	8002b48 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80034d0:	2300      	movs	r3, #0
 80034d2:	73fb      	strb	r3, [r7, #15]
 80034d4:	e014      	b.n	8003500 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80034d6:	7bba      	ldrb	r2, [r7, #14]
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	fa42 f303 	asr.w	r3, r2, r3
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <wizchip_clrinterrupt+0x52>
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3301      	adds	r3, #1
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80034f2:	211f      	movs	r1, #31
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fb27 	bl	8002b48 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	3301      	adds	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b07      	cmp	r3, #7
 8003504:	d9e7      	bls.n	80034d6 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003506:	bf00      	nop
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003522:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003526:	f7ff fac3 	bl	8002ab0 <WIZCHIP_READ>
 800352a:	4603      	mov	r3, r0
 800352c:	f023 030f 	bic.w	r3, r3, #15
 8003530:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003532:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003536:	f7ff fabb 	bl	8002ab0 <WIZCHIP_READ>
 800353a:	4603      	mov	r3, r0
 800353c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800353e:	79bb      	ldrb	r3, [r7, #6]
 8003540:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003542:	88bb      	ldrh	r3, [r7, #4]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	b29a      	uxth	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	b29b      	uxth	r3, r3
 800354c:	4413      	add	r3, r2
 800354e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003550:	88bb      	ldrh	r3, [r7, #4]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	b29b      	uxth	r3, r3
 800356e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	4619      	mov	r1, r3
 8003574:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003578:	f7ff fae6 	bl	8002b48 <WIZCHIP_WRITE>
   setSIMR(simr);
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	4619      	mov	r1, r3
 8003580:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003584:	f7ff fae0 	bl	8002b48 <WIZCHIP_WRITE>
#endif   
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80035a2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80035a6:	f7ff fa83 	bl	8002ab0 <WIZCHIP_READ>
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80035ae:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80035b2:	f7ff fa7d 	bl	8002ab0 <WIZCHIP_READ>
 80035b6:	4603      	mov	r3, r0
 80035b8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80035ba:	79bb      	ldrb	r3, [r7, #6]
 80035bc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80035be:	88bb      	ldrh	r3, [r7, #4]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80035cc:	88bb      	ldrh	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80035dc:	2300      	movs	r3, #0
 80035de:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80035e0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80035e4:	f7ff fa64 	bl	8002ab0 <WIZCHIP_READ>
 80035e8:	4603      	mov	r3, r0
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80035f2:	2301      	movs	r3, #1
 80035f4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800360c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003610:	f7ff fa4e 	bl	8002ab0 <WIZCHIP_READ>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361a:	2b30      	cmp	r3, #48	; 0x30
 800361c:	d102      	bne.n	8003624 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800361e:	2301      	movs	r3, #1
 8003620:	71fb      	strb	r3, [r7, #7]
 8003622:	e001      	b.n	8003628 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003624:	2300      	movs	r3, #0
 8003626:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800363a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800363e:	f7ff fa37 	bl	8002ab0 <WIZCHIP_READ>
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800364c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	4619      	mov	r1, r3
 8003652:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003656:	f7ff fa77 	bl	8002b48 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800365a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800365e:	f7ff fa27 	bl	8002ab0 <WIZCHIP_READ>
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003666:	79fb      	ldrb	r3, [r7, #7]
 8003668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800366c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	4619      	mov	r1, r3
 8003672:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003676:	f7ff fa67 	bl	8002b48 <WIZCHIP_WRITE>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d104      	bne.n	80036a0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e003      	b.n	80036a8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036a6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	785b      	ldrb	r3, [r3, #1]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d104      	bne.n	80036ba <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e019      	b.n	80036ee <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	78db      	ldrb	r3, [r3, #3]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10d      	bne.n	80036de <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	789b      	ldrb	r3, [r3, #2]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d104      	bne.n	80036d4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	f043 0318 	orr.w	r3, r3, #24
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e00c      	b.n	80036ee <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	f043 0308 	orr.w	r3, r3, #8
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e007      	b.n	80036ee <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	789b      	ldrb	r3, [r3, #2]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d103      	bne.n	80036ee <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	f043 0310 	orr.w	r3, r3, #16
 80036ec:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80036f6:	f7ff fa27 	bl	8002b48 <WIZCHIP_WRITE>
   wizphy_reset();
 80036fa:	f7ff ff9b 	bl	8003634 <wizphy_reset>
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003712:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003716:	f7ff f9cb 	bl	8002ab0 <WIZCHIP_READ>
 800371a:	4603      	mov	r3, r0
 800371c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	119b      	asrs	r3, r3, #6
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	b2da      	uxtb	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003734:	2b20      	cmp	r3, #32
 8003736:	d001      	beq.n	800373c <wizphy_getphyconf+0x36>
 8003738:	2b38      	cmp	r3, #56	; 0x38
 800373a:	d103      	bne.n	8003744 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	705a      	strb	r2, [r3, #1]
         break;
 8003742:	e003      	b.n	800374c <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
         break;
 800374a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003752:	3b10      	subs	r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	bf8c      	ite	hi
 8003758:	2201      	movhi	r2, #1
 800375a:	2200      	movls	r2, #0
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	2a00      	cmp	r2, #0
 8003760:	d111      	bne.n	8003786 <wizphy_getphyconf+0x80>
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800376c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	709a      	strb	r2, [r3, #2]
         break;
 8003784:	e003      	b.n	800378e <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	709a      	strb	r2, [r3, #2]
         break;
 800378c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800378e:	7bfb      	ldrb	r3, [r7, #15]
 8003790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003794:	3b08      	subs	r3, #8
 8003796:	2b18      	cmp	r3, #24
 8003798:	bf8c      	ite	hi
 800379a:	2201      	movhi	r2, #1
 800379c:	2200      	movls	r2, #0
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	d111      	bne.n	80037c8 <wizphy_getphyconf+0xc2>
 80037a4:	2201      	movs	r2, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80037ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	70da      	strb	r2, [r3, #3]
         break;
 80037c6:	e003      	b.n	80037d0 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	70da      	strb	r2, [r3, #3]
         break;
 80037ce:	bf00      	nop
   }
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80037e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80037ea:	f7ff f961 	bl	8002ab0 <WIZCHIP_READ>
 80037ee:	4603      	mov	r3, r0
 80037f0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <wizphy_setphypmode+0x2a>
 80037fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003800:	e030      	b.n	8003864 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003808:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d104      	bne.n	800381a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003816:	73fb      	strb	r3, [r7, #15]
 8003818:	e003      	b.n	8003822 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003820:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003822:	7bfb      	ldrb	r3, [r7, #15]
 8003824:	4619      	mov	r1, r3
 8003826:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800382a:	f7ff f98d 	bl	8002b48 <WIZCHIP_WRITE>
   wizphy_reset();
 800382e:	f7ff ff01 	bl	8003634 <wizphy_reset>
   tmp = getPHYCFGR();
 8003832:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003836:	f7ff f93b 	bl	8002ab0 <WIZCHIP_READ>
 800383a:	4603      	mov	r3, r0
 800383c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <wizphy_setphypmode+0x88>
 800384e:	2300      	movs	r3, #0
 8003850:	e008      	b.n	8003864 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <wizphy_setphypmode+0x88>
 800385c:	2300      	movs	r3, #0
 800385e:	e001      	b.n	8003864 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2206      	movs	r2, #6
 8003878:	4619      	mov	r1, r3
 800387a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800387e:	f7ff fa11 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	330e      	adds	r3, #14
 8003886:	2204      	movs	r2, #4
 8003888:	4619      	mov	r1, r3
 800388a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800388e:	f7ff fa09 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	330a      	adds	r3, #10
 8003896:	2204      	movs	r2, #4
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800389e:	f7ff fa01 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3306      	adds	r3, #6
 80038a6:	2204      	movs	r2, #4
 80038a8:	4619      	mov	r1, r3
 80038aa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80038ae:	f7ff f9f9 	bl	8002ca4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7c9a      	ldrb	r2, [r3, #18]
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <wizchip_setnetinfo+0x78>)
 80038b8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7cda      	ldrb	r2, [r3, #19]
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <wizchip_setnetinfo+0x78>)
 80038c0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7d1a      	ldrb	r2, [r3, #20]
 80038c6:	4b07      	ldr	r3, [pc, #28]	; (80038e4 <wizchip_setnetinfo+0x78>)
 80038c8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7d5a      	ldrb	r2, [r3, #21]
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <wizchip_setnetinfo+0x78>)
 80038d0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7d9a      	ldrb	r2, [r3, #22]
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <wizchip_setnetinfo+0x7c>)
 80038d8:	701a      	strb	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200036e0 	.word	0x200036e0
 80038e8:	200036e4 	.word	0x200036e4

080038ec <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2206      	movs	r2, #6
 80038f8:	4619      	mov	r1, r3
 80038fa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80038fe:	f7ff f971 	bl	8002be4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	330e      	adds	r3, #14
 8003906:	2204      	movs	r2, #4
 8003908:	4619      	mov	r1, r3
 800390a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800390e:	f7ff f969 	bl	8002be4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	330a      	adds	r3, #10
 8003916:	2204      	movs	r2, #4
 8003918:	4619      	mov	r1, r3
 800391a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800391e:	f7ff f961 	bl	8002be4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3306      	adds	r3, #6
 8003926:	2204      	movs	r2, #4
 8003928:	4619      	mov	r1, r3
 800392a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800392e:	f7ff f959 	bl	8002be4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003932:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <wizchip_getnetinfo+0x78>)
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800393a:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <wizchip_getnetinfo+0x78>)
 800393c:	785a      	ldrb	r2, [r3, #1]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <wizchip_getnetinfo+0x78>)
 8003944:	789a      	ldrb	r2, [r3, #2]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <wizchip_getnetinfo+0x78>)
 800394c:	78da      	ldrb	r2, [r3, #3]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <wizchip_getnetinfo+0x7c>)
 8003954:	781a      	ldrb	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	759a      	strb	r2, [r3, #22]
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200036e0 	.word	0x200036e0
 8003968:	200036e4 	.word	0x200036e4

0800396c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800396c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003970:	480d      	ldr	r0, [pc, #52]	; (80039a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003972:	490e      	ldr	r1, [pc, #56]	; (80039ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003974:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <LoopForever+0xe>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003988:	4c0b      	ldr	r4, [pc, #44]	; (80039b8 <LoopForever+0x16>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003996:	f7ff f879 	bl	8002a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800399a:	f004 fb37 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800399e:	f7fd f923 	bl	8000be8 <main>

080039a2 <LoopForever>:

LoopForever:
    b LoopForever
 80039a2:	e7fe      	b.n	80039a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039a4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80039a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039ac:	200018a8 	.word	0x200018a8
  ldr r2, =_sidata
 80039b0:	080084a8 	.word	0x080084a8
  ldr r2, =_sbss
 80039b4:	200018a8 	.word	0x200018a8
  ldr r4, =_ebss
 80039b8:	200036fc 	.word	0x200036fc

080039bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039bc:	e7fe      	b.n	80039bc <ADC1_IRQHandler>
	...

080039c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_Init+0x28>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <HAL_Init+0x28>)
 80039ca:	f043 0310 	orr.w	r3, r3, #16
 80039ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d0:	2003      	movs	r0, #3
 80039d2:	f000 f973 	bl	8003cbc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f000 f808 	bl	80039ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039dc:	f7fe fdac 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40022000 	.word	0x40022000

080039ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039f4:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_InitTick+0x54>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_InitTick+0x58>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f999 	bl	8003d42 <HAL_SYSTICK_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00e      	b.n	8003a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d80a      	bhi.n	8003a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	2200      	movs	r2, #0
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f000 f953 	bl	8003cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a2c:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <HAL_InitTick+0x5c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	2000180c 	.word	0x2000180c
 8003a44:	20001840 	.word	0x20001840
 8003a48:	2000183c 	.word	0x2000183c

08003a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_IncTick+0x20>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_IncTick+0x24>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <HAL_IncTick+0x24>)
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20001840 	.word	0x20001840
 8003a70:	200036e8 	.word	0x200036e8

08003a74 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return uwTick;  
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_GetTick+0x14>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	200036e8 	.word	0x200036e8

08003a8c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff ffee 	bl	8003a74 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d005      	beq.n	8003ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_Delay+0x44>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003ab2:	bf00      	nop
 8003ab4:	f7ff ffde 	bl	8003a74 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d8f7      	bhi.n	8003ab4 <HAL_Delay+0x28>
  {
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20001840 	.word	0x20001840

08003ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af0:	4013      	ands	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b06:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <__NVIC_SetPriorityGrouping+0x44>)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	60d3      	str	r3, [r2, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b20:	4b04      	ldr	r3, [pc, #16]	; (8003b34 <__NVIC_GetPriorityGrouping+0x18>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	0a1b      	lsrs	r3, r3, #8
 8003b26:	f003 0307 	and.w	r3, r3, #7
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	db0b      	blt.n	8003b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	f003 021f 	and.w	r2, r3, #31
 8003b50:	4907      	ldr	r1, [pc, #28]	; (8003b70 <__NVIC_EnableIRQ+0x38>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2001      	movs	r0, #1
 8003b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db12      	blt.n	8003bac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	f003 021f 	and.w	r2, r3, #31
 8003b8c:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <__NVIC_DisableIRQ+0x44>)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2001      	movs	r0, #1
 8003b96:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9a:	3320      	adds	r3, #32
 8003b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba0:	f3bf 8f4f 	dsb	sy
}
 8003ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ba6:	f3bf 8f6f 	isb	sy
}
 8003baa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000e100 	.word	0xe000e100

08003bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	db0a      	blt.n	8003be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	490c      	ldr	r1, [pc, #48]	; (8003c08 <__NVIC_SetPriority+0x4c>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	0112      	lsls	r2, r2, #4
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	440b      	add	r3, r1
 8003be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be4:	e00a      	b.n	8003bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4908      	ldr	r1, [pc, #32]	; (8003c0c <__NVIC_SetPriority+0x50>)
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	0112      	lsls	r2, r2, #4
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	761a      	strb	r2, [r3, #24]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000e100 	.word	0xe000e100
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	; 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	bf28      	it	cs
 8003c2e:	2304      	movcs	r3, #4
 8003c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	3304      	adds	r3, #4
 8003c36:	2b06      	cmp	r3, #6
 8003c38:	d902      	bls.n	8003c40 <NVIC_EncodePriority+0x30>
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3b03      	subs	r3, #3
 8003c3e:	e000      	b.n	8003c42 <NVIC_EncodePriority+0x32>
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c44:	f04f 32ff 	mov.w	r2, #4294967295
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43da      	mvns	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	401a      	ands	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43d9      	mvns	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c68:	4313      	orrs	r3, r2
         );
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3724      	adds	r7, #36	; 0x24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c88:	d301      	bcc.n	8003c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00f      	b.n	8003cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c8e:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <SysTick_Config+0x40>)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c96:	210f      	movs	r1, #15
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	f7ff ff8e 	bl	8003bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca0:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <SysTick_Config+0x40>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ca6:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <SysTick_Config+0x40>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	e000e010 	.word	0xe000e010

08003cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff05 	bl	8003ad4 <__NVIC_SetPriorityGrouping>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce4:	f7ff ff1a 	bl	8003b1c <__NVIC_GetPriorityGrouping>
 8003ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff8e 	bl	8003c10 <NVIC_EncodePriority>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff5d 	bl	8003bbc <__NVIC_SetPriority>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff0d 	bl	8003b38 <__NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff1d 	bl	8003b74 <__NVIC_DisableIRQ>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff94 	bl	8003c78 <SysTick_Config>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d66:	2300      	movs	r3, #0
 8003d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d6a:	e14e      	b.n	800400a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2101      	movs	r1, #1
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8140 	beq.w	8004004 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d005      	beq.n	8003d9c <HAL_GPIO_Init+0x40>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d130      	bne.n	8003dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	f003 0201 	and.w	r2, r3, #1
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d017      	beq.n	8003e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	2203      	movs	r2, #3
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d123      	bne.n	8003e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	08da      	lsrs	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3208      	adds	r2, #8
 8003e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	220f      	movs	r2, #15
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	08da      	lsrs	r2, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3208      	adds	r2, #8
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	2203      	movs	r2, #3
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0203 	and.w	r2, r3, #3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 809a 	beq.w	8004004 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed0:	4b55      	ldr	r3, [pc, #340]	; (8004028 <HAL_GPIO_Init+0x2cc>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	4a54      	ldr	r2, [pc, #336]	; (8004028 <HAL_GPIO_Init+0x2cc>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6193      	str	r3, [r2, #24]
 8003edc:	4b52      	ldr	r3, [pc, #328]	; (8004028 <HAL_GPIO_Init+0x2cc>)
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	220f      	movs	r2, #15
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f12:	d013      	beq.n	8003f3c <HAL_GPIO_Init+0x1e0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_GPIO_Init+0x2d4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00d      	beq.n	8003f38 <HAL_GPIO_Init+0x1dc>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a45      	ldr	r2, [pc, #276]	; (8004034 <HAL_GPIO_Init+0x2d8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <HAL_GPIO_Init+0x1d8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a44      	ldr	r2, [pc, #272]	; (8004038 <HAL_GPIO_Init+0x2dc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d101      	bne.n	8003f30 <HAL_GPIO_Init+0x1d4>
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e006      	b.n	8003f3e <HAL_GPIO_Init+0x1e2>
 8003f30:	2305      	movs	r3, #5
 8003f32:	e004      	b.n	8003f3e <HAL_GPIO_Init+0x1e2>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e002      	b.n	8003f3e <HAL_GPIO_Init+0x1e2>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <HAL_GPIO_Init+0x1e2>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	f002 0203 	and.w	r2, r2, #3
 8003f44:	0092      	lsls	r2, r2, #2
 8003f46:	4093      	lsls	r3, r2
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f4e:	4937      	ldr	r1, [pc, #220]	; (800402c <HAL_GPIO_Init+0x2d0>)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5c:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f80:	4a2e      	ldr	r2, [pc, #184]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f86:	4b2d      	ldr	r3, [pc, #180]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003faa:	4a24      	ldr	r2, [pc, #144]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fd4:	4a19      	ldr	r2, [pc, #100]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fda:	4b18      	ldr	r3, [pc, #96]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_GPIO_Init+0x2e0>)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3301      	adds	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	f47f aea9 	bne.w	8003d6c <HAL_GPIO_Init+0x10>
  }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40021000 	.word	0x40021000
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	40010400 	.word	0x40010400

08004040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]
 800404c:	4613      	mov	r3, r2
 800404e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004050:	787b      	ldrb	r3, [r7, #1]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800405c:	e002      	b.n	8004064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	4013      	ands	r3, r2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d006      	beq.n	8004094 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004088:	88fb      	ldrh	r3, [r7, #6]
 800408a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fd fa52 	bl	8001538 <HAL_GPIO_EXTI_Callback>
  }
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40007000 	.word	0x40007000

080040c0 <HAL_PWR_DisableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);  
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_PWR_DisableBkUpAccess+0x1c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_PWR_DisableBkUpAccess+0x1c>)
 80040ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ce:	6013      	str	r3, [r2, #0]
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40007000 	.word	0x40007000

080040e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f001 b823 	b.w	800514c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 817d 	beq.w	8004416 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800411c:	4bbc      	ldr	r3, [pc, #752]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b04      	cmp	r3, #4
 8004126:	d00c      	beq.n	8004142 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004128:	4bb9      	ldr	r3, [pc, #740]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b08      	cmp	r3, #8
 8004132:	d15c      	bne.n	80041ee <HAL_RCC_OscConfig+0x10e>
 8004134:	4bb6      	ldr	r3, [pc, #728]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d155      	bne.n	80041ee <HAL_RCC_OscConfig+0x10e>
 8004142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004146:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8004156:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_RCC_OscConfig+0x94>
 800416e:	4ba8      	ldr	r3, [pc, #672]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	e015      	b.n	80041a0 <HAL_RCC_OscConfig+0xc0>
 8004174:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004178:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004188:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800418c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004190:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800419c:	4b9c      	ldr	r3, [pc, #624]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80041a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80041ac:	fa92 f2a2 	rbit	r2, r2
 80041b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80041b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80041b8:	fab2 f282 	clz	r2, r2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f042 0220 	orr.w	r2, r2, #32
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	f002 021f 	and.w	r2, r2, #31
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f202 	lsl.w	r2, r1, r2
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 811f 	beq.w	8004414 <HAL_RCC_OscConfig+0x334>
 80041d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 8116 	bne.w	8004414 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f000 bfaf 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x12e>
 8004200:	4b83      	ldr	r3, [pc, #524]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a82      	ldr	r2, [pc, #520]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e036      	b.n	800427c <HAL_RCC_OscConfig+0x19c>
 800420e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004212:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x158>
 800421e:	4b7c      	ldr	r3, [pc, #496]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a7b      	ldr	r2, [pc, #492]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b79      	ldr	r3, [pc, #484]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a78      	ldr	r2, [pc, #480]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004230:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e021      	b.n	800427c <HAL_RCC_OscConfig+0x19c>
 8004238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x184>
 800424a:	4b71      	ldr	r3, [pc, #452]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a70      	ldr	r2, [pc, #448]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6e      	ldr	r3, [pc, #440]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6d      	ldr	r2, [pc, #436]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x19c>
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a69      	ldr	r2, [pc, #420]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b67      	ldr	r3, [pc, #412]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a66      	ldr	r2, [pc, #408]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800427c:	4b64      	ldr	r3, [pc, #400]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	f023 020f 	bic.w	r2, r3, #15
 8004284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004288:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	495f      	ldr	r1, [pc, #380]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004292:	4313      	orrs	r3, r2
 8004294:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d059      	beq.n	800435a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7ff fbe5 	bl	8003a74 <HAL_GetTick>
 80042aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b0:	f7ff fbe0 	bl	8003a74 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d902      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	f000 bf43 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
 80042c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80042da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d102      	bne.n	80042f8 <HAL_RCC_OscConfig+0x218>
 80042f2:	4b47      	ldr	r3, [pc, #284]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	e015      	b.n	8004324 <HAL_RCC_OscConfig+0x244>
 80042f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800430c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004310:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004314:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004328:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800432c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004330:	fa92 f2a2 	rbit	r2, r2
 8004334:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004338:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800433c:	fab2 f282 	clz	r2, r2
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f042 0220 	orr.w	r2, r2, #32
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f002 021f 	and.w	r2, r2, #31
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ab      	beq.n	80042b0 <HAL_RCC_OscConfig+0x1d0>
 8004358:	e05d      	b.n	8004416 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435a:	f7ff fb8b 	bl	8003a74 <HAL_GetTick>
 800435e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e00a      	b.n	800437a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7ff fb86 	bl	8003a74 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	; 0x64
 8004372:	d902      	bls.n	800437a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	f000 bee9 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
 800437a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800437e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800438e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d102      	bne.n	80043ac <HAL_RCC_OscConfig+0x2cc>
 80043a6:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	e015      	b.n	80043d8 <HAL_RCC_OscConfig+0x2f8>
 80043ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80043b8:	fa93 f3a3 	rbit	r3, r3
 80043bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80043c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80043c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80043cc:	fa93 f3a3 	rbit	r3, r3
 80043d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <HAL_RCC_OscConfig+0x330>)
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80043e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80043e4:	fa92 f2a2 	rbit	r2, r2
 80043e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80043ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80043f0:	fab2 f282 	clz	r2, r2
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	f042 0220 	orr.w	r2, r2, #32
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f002 021f 	and.w	r2, r2, #31
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f202 	lsl.w	r2, r1, r2
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ab      	bne.n	8004364 <HAL_RCC_OscConfig+0x284>
 800440c:	e003      	b.n	8004416 <HAL_RCC_OscConfig+0x336>
 800440e:	bf00      	nop
 8004410:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 817d 	beq.w	8004726 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800442c:	4ba6      	ldr	r3, [pc, #664]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00b      	beq.n	8004450 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004438:	4ba3      	ldr	r3, [pc, #652]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 030c 	and.w	r3, r3, #12
 8004440:	2b08      	cmp	r3, #8
 8004442:	d172      	bne.n	800452a <HAL_RCC_OscConfig+0x44a>
 8004444:	4ba0      	ldr	r3, [pc, #640]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d16c      	bne.n	800452a <HAL_RCC_OscConfig+0x44a>
 8004450:	2302      	movs	r3, #2
 8004452:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004456:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800445a:	fa93 f3a3 	rbit	r3, r3
 800445e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004462:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	fab3 f383 	clz	r3, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f043 0301 	orr.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <HAL_RCC_OscConfig+0x3a0>
 800447a:	4b93      	ldr	r3, [pc, #588]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	e013      	b.n	80044a8 <HAL_RCC_OscConfig+0x3c8>
 8004480:	2302      	movs	r3, #2
 8004482:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004492:	2302      	movs	r3, #2
 8004494:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004498:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80044a4:	4b88      	ldr	r3, [pc, #544]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2202      	movs	r2, #2
 80044aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80044ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80044b2:	fa92 f2a2 	rbit	r2, r2
 80044b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80044ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80044be:	fab2 f282 	clz	r2, r2
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	f042 0220 	orr.w	r2, r2, #32
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	f002 021f 	and.w	r2, r2, #31
 80044ce:	2101      	movs	r1, #1
 80044d0:	fa01 f202 	lsl.w	r2, r1, r2
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <HAL_RCC_OscConfig+0x410>
 80044da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d002      	beq.n	80044f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f000 be2e 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f0:	4b75      	ldr	r3, [pc, #468]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	21f8      	movs	r1, #248	; 0xf8
 8004506:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800450e:	fa91 f1a1 	rbit	r1, r1
 8004512:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004516:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800451a:	fab1 f181 	clz	r1, r1
 800451e:	b2c9      	uxtb	r1, r1
 8004520:	408b      	lsls	r3, r1
 8004522:	4969      	ldr	r1, [pc, #420]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004528:	e0fd      	b.n	8004726 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800452a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8088 	beq.w	800464c <HAL_RCC_OscConfig+0x56c>
 800453c:	2301      	movs	r3, #1
 800453e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004542:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800454e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800455c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	461a      	mov	r2, r3
 8004564:	2301      	movs	r3, #1
 8004566:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7ff fa84 	bl	8003a74 <HAL_GetTick>
 800456c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7ff fa7f 	bl	8003a74 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d902      	bls.n	8004588 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	f000 bde2 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
 8004588:	2302      	movs	r3, #2
 800458a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004592:	fa93 f3a3 	rbit	r3, r3
 8004596:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800459a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	fab3 f383 	clz	r3, r3
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d102      	bne.n	80045b8 <HAL_RCC_OscConfig+0x4d8>
 80045b2:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	e013      	b.n	80045e0 <HAL_RCC_OscConfig+0x500>
 80045b8:	2302      	movs	r3, #2
 80045ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045c2:	fa93 f3a3 	rbit	r3, r3
 80045c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80045ca:	2302      	movs	r3, #2
 80045cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80045d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80045dc:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	2202      	movs	r2, #2
 80045e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80045e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80045ea:	fa92 f2a2 	rbit	r2, r2
 80045ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80045f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80045f6:	fab2 f282 	clz	r2, r2
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	f042 0220 	orr.w	r2, r2, #32
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	f002 021f 	and.w	r2, r2, #31
 8004606:	2101      	movs	r1, #1
 8004608:	fa01 f202 	lsl.w	r2, r1, r2
 800460c:	4013      	ands	r3, r2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0af      	beq.n	8004572 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	21f8      	movs	r1, #248	; 0xf8
 8004628:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004630:	fa91 f1a1 	rbit	r1, r1
 8004634:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004638:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800463c:	fab1 f181 	clz	r1, r1
 8004640:	b2c9      	uxtb	r1, r1
 8004642:	408b      	lsls	r3, r1
 8004644:	4920      	ldr	r1, [pc, #128]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
 800464a:	e06c      	b.n	8004726 <HAL_RCC_OscConfig+0x646>
 800464c:	2301      	movs	r3, #1
 800464e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800465e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800466c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7ff f9fc 	bl	8003a74 <HAL_GetTick>
 800467c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7ff f9f7 	bl	8003a74 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d902      	bls.n	8004698 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	f000 bd5a 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
 8004698:	2302      	movs	r3, #2
 800469a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80046a2:	fa93 f3a3 	rbit	r3, r3
 80046a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80046aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d104      	bne.n	80046cc <HAL_RCC_OscConfig+0x5ec>
 80046c2:	4b01      	ldr	r3, [pc, #4]	; (80046c8 <HAL_RCC_OscConfig+0x5e8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	e015      	b.n	80046f4 <HAL_RCC_OscConfig+0x614>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	2302      	movs	r3, #2
 80046ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80046de:	2302      	movs	r3, #2
 80046e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80046f0:	4bc8      	ldr	r3, [pc, #800]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	2202      	movs	r2, #2
 80046f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80046fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80046fe:	fa92 f2a2 	rbit	r2, r2
 8004702:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004706:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800470a:	fab2 f282 	clz	r2, r2
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	f042 0220 	orr.w	r2, r2, #32
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	f002 021f 	and.w	r2, r2, #31
 800471a:	2101      	movs	r1, #1
 800471c:	fa01 f202 	lsl.w	r2, r1, r2
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1ad      	bne.n	8004682 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8110 	beq.w	800495c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800473c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d079      	beq.n	8004840 <HAL_RCC_OscConfig+0x760>
 800474c:	2301      	movs	r3, #1
 800474e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800475e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004762:	fab3 f383 	clz	r3, r3
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	4bab      	ldr	r3, [pc, #684]	; (8004a18 <HAL_RCC_OscConfig+0x938>)
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	461a      	mov	r2, r3
 8004772:	2301      	movs	r3, #1
 8004774:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7ff f97d 	bl	8003a74 <HAL_GetTick>
 800477a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	e00a      	b.n	8004796 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004780:	f7ff f978 	bl	8003a74 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d902      	bls.n	8004796 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	f000 bcdb 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
 8004796:	2302      	movs	r3, #2
 8004798:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80047a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047b0:	2202      	movs	r2, #2
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	fa93 f2a3 	rbit	r2, r3
 80047c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d4:	2202      	movs	r2, #2
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	fa93 f2a3 	rbit	r2, r3
 80047e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f0:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 80047f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80047fc:	2102      	movs	r1, #2
 80047fe:	6019      	str	r1, [r3, #0]
 8004800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004804:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	fa93 f1a3 	rbit	r1, r3
 800480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004812:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004816:	6019      	str	r1, [r3, #0]
  return result;
 8004818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	fab3 f383 	clz	r3, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2101      	movs	r1, #1
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0a0      	beq.n	8004780 <HAL_RCC_OscConfig+0x6a0>
 800483e:	e08d      	b.n	800495c <HAL_RCC_OscConfig+0x87c>
 8004840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004844:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	fa93 f2a3 	rbit	r2, r3
 800485a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800485e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004862:	601a      	str	r2, [r3, #0]
  return result;
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800486c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486e:	fab3 f383 	clz	r3, r3
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <HAL_RCC_OscConfig+0x938>)
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	461a      	mov	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004882:	f7ff f8f7 	bl	8003a74 <HAL_GetTick>
 8004886:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488a:	e00a      	b.n	80048a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488c:	f7ff f8f2 	bl	8003a74 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d902      	bls.n	80048a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	f000 bc55 	b.w	800514c <HAL_RCC_OscConfig+0x106c>
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048aa:	2202      	movs	r2, #2
 80048ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	fa93 f2a3 	rbit	r2, r3
 80048bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048ce:	2202      	movs	r2, #2
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	fa93 f2a3 	rbit	r2, r3
 80048e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f2:	2202      	movs	r2, #2
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	fa93 f2a3 	rbit	r2, r3
 8004904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004908:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800490c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 8004910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004916:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800491a:	2102      	movs	r1, #2
 800491c:	6019      	str	r1, [r3, #0]
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	fa93 f1a3 	rbit	r1, r3
 800492c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004930:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004934:	6019      	str	r1, [r3, #0]
  return result;
 8004936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800493a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d197      	bne.n	800488c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004960:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 81a1 	beq.w	8004cb4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004978:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004984:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	4a22      	ldr	r2, [pc, #136]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 800498a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800498e:	61d3      	str	r3, [r2, #28]
 8004990:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80049aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <HAL_RCC_OscConfig+0x93c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11a      	bne.n	80049f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b17      	ldr	r3, [pc, #92]	; (8004a1c <HAL_RCC_OscConfig+0x93c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <HAL_RCC_OscConfig+0x93c>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7ff f853 	bl	8003a74 <HAL_GetTick>
 80049ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d2:	e009      	b.n	80049e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d4:	f7ff f84e 	bl	8003a74 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b64      	cmp	r3, #100	; 0x64
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e3b1      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_RCC_OscConfig+0x93c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0ef      	beq.n	80049d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10d      	bne.n	8004a20 <HAL_RCC_OscConfig+0x940>
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4a02      	ldr	r2, [pc, #8]	; (8004a14 <HAL_RCC_OscConfig+0x934>)
 8004a0a:	f043 0301 	orr.w	r3, r3, #1
 8004a0e:	6213      	str	r3, [r2, #32]
 8004a10:	e03c      	b.n	8004a8c <HAL_RCC_OscConfig+0x9ac>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	10908120 	.word	0x10908120
 8004a1c:	40007000 	.word	0x40007000
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10c      	bne.n	8004a4a <HAL_RCC_OscConfig+0x96a>
 8004a30:	4bc1      	ldr	r3, [pc, #772]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4ac0      	ldr	r2, [pc, #768]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	4bbe      	ldr	r3, [pc, #760]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4abd      	ldr	r2, [pc, #756]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a42:	f023 0304 	bic.w	r3, r3, #4
 8004a46:	6213      	str	r3, [r2, #32]
 8004a48:	e020      	b.n	8004a8c <HAL_RCC_OscConfig+0x9ac>
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x994>
 8004a5a:	4bb7      	ldr	r3, [pc, #732]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4ab6      	ldr	r2, [pc, #728]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a60:	f043 0304 	orr.w	r3, r3, #4
 8004a64:	6213      	str	r3, [r2, #32]
 8004a66:	4bb4      	ldr	r3, [pc, #720]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4ab3      	ldr	r2, [pc, #716]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	6213      	str	r3, [r2, #32]
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0x9ac>
 8004a74:	4bb0      	ldr	r3, [pc, #704]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4aaf      	ldr	r2, [pc, #700]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	6213      	str	r3, [r2, #32]
 8004a80:	4bad      	ldr	r3, [pc, #692]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	4aac      	ldr	r2, [pc, #688]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004a86:	f023 0304 	bic.w	r3, r3, #4
 8004a8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8081 	beq.w	8004ba0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe ffe9 	bl	8003a74 <HAL_GetTick>
 8004aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa8:	f7fe ffe4 	bl	8003a74 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e345      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
 8004ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ac8:	2202      	movs	r2, #2
 8004aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004aec:	2202      	movs	r2, #2
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	fa93 f2a3 	rbit	r2, r3
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b06:	601a      	str	r2, [r3, #0]
  return result;
 8004b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004b10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d102      	bne.n	8004b2c <HAL_RCC_OscConfig+0xa4c>
 8004b26:	4b84      	ldr	r3, [pc, #528]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	e013      	b.n	8004b54 <HAL_RCC_OscConfig+0xa74>
 8004b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b34:	2202      	movs	r2, #2
 8004b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	fa93 f2a3 	rbit	r2, r3
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	4b79      	ldr	r3, [pc, #484]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	6011      	str	r1, [r2, #0]
 8004b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	fa92 f1a2 	rbit	r1, r2
 8004b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b76:	6011      	str	r1, [r2, #0]
  return result;
 8004b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004b7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	fab2 f282 	clz	r2, r2
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	f002 021f 	and.w	r2, r2, #31
 8004b92:	2101      	movs	r1, #1
 8004b94:	fa01 f202 	lsl.w	r2, r1, r2
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d084      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x9c8>
 8004b9e:	e07f      	b.n	8004ca0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba0:	f7fe ff68 	bl	8003a74 <HAL_GetTick>
 8004ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fe ff63 	bl	8003a74 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e2c4      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
 8004bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004bca:	2202      	movs	r2, #2
 8004bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	fa93 f2a3 	rbit	r2, r3
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bee:	2202      	movs	r2, #2
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c08:	601a      	str	r2, [r3, #0]
  return result;
 8004c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004c12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f043 0302 	orr.w	r3, r3, #2
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d102      	bne.n	8004c2e <HAL_RCC_OscConfig+0xb4e>
 8004c28:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	e013      	b.n	8004c56 <HAL_RCC_OscConfig+0xb76>
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c36:	2202      	movs	r2, #2
 8004c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	fa93 f2a3 	rbit	r2, r3
 8004c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	4b39      	ldr	r3, [pc, #228]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c5e:	2102      	movs	r1, #2
 8004c60:	6011      	str	r1, [r2, #0]
 8004c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	fa92 f1a2 	rbit	r1, r2
 8004c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c78:	6011      	str	r1, [r2, #0]
  return result;
 8004c7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	fab2 f282 	clz	r2, r2
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	f002 021f 	and.w	r2, r2, #31
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d184      	bne.n	8004baa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ca0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca8:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	4a22      	ldr	r2, [pc, #136]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8242 	beq.w	800514a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <HAL_RCC_OscConfig+0xc58>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	f000 8213 	beq.w	80050fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	f040 8162 	bne.w	8004faa <HAL_RCC_OscConfig+0xeca>
 8004ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cf8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	fa93 f2a3 	rbit	r2, r3
 8004d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d0a:	601a      	str	r2, [r3, #0]
  return result;
 8004d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004d14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004d20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	461a      	mov	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2c:	f7fe fea2 	bl	8003a74 <HAL_GetTick>
 8004d30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d34:	e00c      	b.n	8004d50 <HAL_RCC_OscConfig+0xc70>
 8004d36:	bf00      	nop
 8004d38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fe fe9a 	bl	8003a74 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e1fd      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
 8004d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	fa93 f2a3 	rbit	r2, r3
 8004d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d74:	601a      	str	r2, [r3, #0]
  return result;
 8004d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004d7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d102      	bne.n	8004d9a <HAL_RCC_OscConfig+0xcba>
 8004d94:	4bb0      	ldr	r3, [pc, #704]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	e027      	b.n	8004dea <HAL_RCC_OscConfig+0xd0a>
 8004d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	fa93 f2a3 	rbit	r2, r3
 8004db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dc4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	fa93 f2a3 	rbit	r2, r3
 8004ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004de0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	4b9c      	ldr	r3, [pc, #624]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004df2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004df6:	6011      	str	r1, [r2, #0]
 8004df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dfc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	fa92 f1a2 	rbit	r1, r2
 8004e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e0e:	6011      	str	r1, [r2, #0]
  return result;
 8004e10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	fab2 f282 	clz	r2, r2
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	f042 0220 	orr.w	r2, r2, #32
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	f002 021f 	and.w	r2, r2, #31
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d182      	bne.n	8004d3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e36:	4b88      	ldr	r3, [pc, #544]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	430b      	orrs	r3, r1
 8004e58:	497f      	ldr	r1, [pc, #508]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
 8004e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	fa93 f2a3 	rbit	r2, r3
 8004e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e82:	601a      	str	r2, [r3, #0]
  return result;
 8004e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004e8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fe fde6 	bl	8003a74 <HAL_GetTick>
 8004ea8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004eac:	e009      	b.n	8004ec2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fe fde1 	bl	8003a74 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e144      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004eca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	fa93 f2a3 	rbit	r2, r3
 8004ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ee2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004ee6:	601a      	str	r2, [r3, #0]
  return result;
 8004ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004ef0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ef2:	fab3 f383 	clz	r3, r3
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	095b      	lsrs	r3, r3, #5
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d102      	bne.n	8004f0c <HAL_RCC_OscConfig+0xe2c>
 8004f06:	4b54      	ldr	r3, [pc, #336]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	e027      	b.n	8004f5c <HAL_RCC_OscConfig+0xe7c>
 8004f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	fa93 f2a3 	rbit	r2, r3
 8004f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	fa93 f2a3 	rbit	r2, r3
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	4b3f      	ldr	r3, [pc, #252]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	fa92 f1a2 	rbit	r1, r2
 8004f78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f80:	6011      	str	r1, [r2, #0]
  return result;
 8004f82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	fab2 f282 	clz	r2, r2
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	f042 0220 	orr.w	r2, r2, #32
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	f002 021f 	and.w	r2, r2, #31
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d082      	beq.n	8004eae <HAL_RCC_OscConfig+0xdce>
 8004fa8:	e0cf      	b.n	800514a <HAL_RCC_OscConfig+0x106a>
 8004faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004fb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fbc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	fa93 f2a3 	rbit	r2, r3
 8004fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fce:	601a      	str	r2, [r3, #0]
  return result;
 8004fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fd4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004fd8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fe4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	461a      	mov	r2, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fe fd40 	bl	8003a74 <HAL_GetTick>
 8004ff4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff8:	e009      	b.n	800500e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ffa:	f7fe fd3b 	bl	8003a74 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e09e      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
 800500e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005012:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005016:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800501a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800501c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005020:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	fa93 f2a3 	rbit	r2, r3
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005032:	601a      	str	r2, [r3, #0]
  return result;
 8005034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005038:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800503c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b01      	cmp	r3, #1
 8005050:	d104      	bne.n	800505c <HAL_RCC_OscConfig+0xf7c>
 8005052:	4b01      	ldr	r3, [pc, #4]	; (8005058 <HAL_RCC_OscConfig+0xf78>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	e029      	b.n	80050ac <HAL_RCC_OscConfig+0xfcc>
 8005058:	40021000 	.word	0x40021000
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	fa93 f2a3 	rbit	r2, r3
 8005078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005086:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800508a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005094:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	fa93 f2a3 	rbit	r2, r3
 800509e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <HAL_RCC_OscConfig+0x1078>)
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80050b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	fa92 f1a2 	rbit	r1, r2
 80050c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050d0:	6011      	str	r1, [r2, #0]
  return result;
 80050d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80050d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80050da:	6812      	ldr	r2, [r2, #0]
 80050dc:	fab2 f282 	clz	r2, r2
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	f042 0220 	orr.w	r2, r2, #32
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	f002 021f 	and.w	r2, r2, #31
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f202 	lsl.w	r2, r1, r2
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d180      	bne.n	8004ffa <HAL_RCC_OscConfig+0xf1a>
 80050f8:	e027      	b.n	800514a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e01e      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_RCC_OscConfig+0x1078>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005116:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800511a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800511e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	429a      	cmp	r2, r3
 800512c:	d10b      	bne.n	8005146 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800512e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005142:	429a      	cmp	r2, r3
 8005144:	d001      	beq.n	800514a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000

0800515c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b09e      	sub	sp, #120	; 0x78
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e162      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005174:	4b90      	ldr	r3, [pc, #576]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d910      	bls.n	80051a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005182:	4b8d      	ldr	r3, [pc, #564]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 0207 	bic.w	r2, r3, #7
 800518a:	498b      	ldr	r1, [pc, #556]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	4313      	orrs	r3, r2
 8005190:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005192:	4b89      	ldr	r3, [pc, #548]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e14a      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b0:	4b82      	ldr	r3, [pc, #520]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	497f      	ldr	r1, [pc, #508]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80dc 	beq.w	8005388 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d13c      	bne.n	8005252 <HAL_RCC_ClockConfig+0xf6>
 80051d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051e0:	fa93 f3a3 	rbit	r3, r3
 80051e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80051e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e8:	fab3 f383 	clz	r3, r3
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d102      	bne.n	8005202 <HAL_RCC_ClockConfig+0xa6>
 80051fc:	4b6f      	ldr	r3, [pc, #444]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	e00f      	b.n	8005222 <HAL_RCC_ClockConfig+0xc6>
 8005202:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005206:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800520a:	fa93 f3a3 	rbit	r3, r3
 800520e:	667b      	str	r3, [r7, #100]	; 0x64
 8005210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005214:	663b      	str	r3, [r7, #96]	; 0x60
 8005216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005218:	fa93 f3a3 	rbit	r3, r3
 800521c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800521e:	4b67      	ldr	r3, [pc, #412]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005226:	65ba      	str	r2, [r7, #88]	; 0x58
 8005228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800522a:	fa92 f2a2 	rbit	r2, r2
 800522e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005232:	fab2 f282 	clz	r2, r2
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	f042 0220 	orr.w	r2, r2, #32
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	f002 021f 	and.w	r2, r2, #31
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f202 	lsl.w	r2, r1, r2
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d17b      	bne.n	8005346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e0f3      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d13c      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x178>
 800525a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800525e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005262:	fa93 f3a3 	rbit	r3, r3
 8005266:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b01      	cmp	r3, #1
 800527c:	d102      	bne.n	8005284 <HAL_RCC_ClockConfig+0x128>
 800527e:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	e00f      	b.n	80052a4 <HAL_RCC_ClockConfig+0x148>
 8005284:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005288:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528c:	fa93 f3a3 	rbit	r3, r3
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
 8005292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005296:	643b      	str	r3, [r7, #64]	; 0x40
 8005298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529a:	fa93 f3a3 	rbit	r3, r3
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052a0:	4b46      	ldr	r3, [pc, #280]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80052aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ac:	fa92 f2a2 	rbit	r2, r2
 80052b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80052b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b4:	fab2 f282 	clz	r2, r2
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	f002 021f 	and.w	r2, r2, #31
 80052c4:	2101      	movs	r1, #1
 80052c6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d13a      	bne.n	8005346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e0b2      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
 80052d4:	2302      	movs	r3, #2
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	fa93 f3a3 	rbit	r3, r3
 80052de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e2:	fab3 f383 	clz	r3, r3
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d102      	bne.n	80052fc <HAL_RCC_ClockConfig+0x1a0>
 80052f6:	4b31      	ldr	r3, [pc, #196]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	e00d      	b.n	8005318 <HAL_RCC_ClockConfig+0x1bc>
 80052fc:	2302      	movs	r3, #2
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
 8005308:	2302      	movs	r3, #2
 800530a:	623b      	str	r3, [r7, #32]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	fa93 f3a3 	rbit	r3, r3
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	4b29      	ldr	r3, [pc, #164]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	2202      	movs	r2, #2
 800531a:	61ba      	str	r2, [r7, #24]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	fa92 f2a2 	rbit	r2, r2
 8005322:	617a      	str	r2, [r7, #20]
  return result;
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	fab2 f282 	clz	r2, r2
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	f042 0220 	orr.w	r2, r2, #32
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	f002 021f 	and.w	r2, r2, #31
 8005336:	2101      	movs	r1, #1
 8005338:	fa01 f202 	lsl.w	r2, r1, r2
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e079      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005346:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f023 0203 	bic.w	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	491a      	ldr	r1, [pc, #104]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005354:	4313      	orrs	r3, r2
 8005356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005358:	f7fe fb8c 	bl	8003a74 <HAL_GetTick>
 800535c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535e:	e00a      	b.n	8005376 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005360:	f7fe fb88 	bl	8003a74 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	; 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e061      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005376:	4b11      	ldr	r3, [pc, #68]	; (80053bc <HAL_RCC_ClockConfig+0x260>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 020c 	and.w	r2, r3, #12
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	429a      	cmp	r2, r3
 8005386:	d1eb      	bne.n	8005360 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d214      	bcs.n	80053c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b08      	ldr	r3, [pc, #32]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f023 0207 	bic.w	r2, r3, #7
 800539e:	4906      	ldr	r1, [pc, #24]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <HAL_RCC_ClockConfig+0x25c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d005      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e040      	b.n	800543a <HAL_RCC_ClockConfig+0x2de>
 80053b8:	40022000 	.word	0x40022000
 80053bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053cc:	4b1d      	ldr	r3, [pc, #116]	; (8005444 <HAL_RCC_ClockConfig+0x2e8>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	491a      	ldr	r1, [pc, #104]	; (8005444 <HAL_RCC_ClockConfig+0x2e8>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ea:	4b16      	ldr	r3, [pc, #88]	; (8005444 <HAL_RCC_ClockConfig+0x2e8>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4912      	ldr	r1, [pc, #72]	; (8005444 <HAL_RCC_ClockConfig+0x2e8>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053fe:	f000 f829 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8005402:	4601      	mov	r1, r0
 8005404:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <HAL_RCC_ClockConfig+0x2e8>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540c:	22f0      	movs	r2, #240	; 0xf0
 800540e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	fa92 f2a2 	rbit	r2, r2
 8005416:	60fa      	str	r2, [r7, #12]
  return result;
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	fab2 f282 	clz	r2, r2
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	40d3      	lsrs	r3, r2
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <HAL_RCC_ClockConfig+0x2ec>)
 8005424:	5cd3      	ldrb	r3, [r2, r3]
 8005426:	fa21 f303 	lsr.w	r3, r1, r3
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <HAL_RCC_ClockConfig+0x2f0>)
 800542c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <HAL_RCC_ClockConfig+0x2f4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fada 	bl	80039ec <HAL_InitTick>
  
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3778      	adds	r7, #120	; 0x78
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000
 8005448:	08008440 	.word	0x08008440
 800544c:	2000180c 	.word	0x2000180c
 8005450:	2000183c 	.word	0x2000183c

08005454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	b480      	push	{r7}
 8005456:	b08b      	sub	sp, #44	; 0x2c
 8005458:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800546e:	4b29      	ldr	r3, [pc, #164]	; (8005514 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b04      	cmp	r3, #4
 800547c:	d002      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0x30>
 800547e:	2b08      	cmp	r3, #8
 8005480:	d003      	beq.n	800548a <HAL_RCC_GetSysClockFreq+0x36>
 8005482:	e03c      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005486:	623b      	str	r3, [r7, #32]
      break;
 8005488:	e03c      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005490:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005494:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	fa92 f2a2 	rbit	r2, r2
 800549c:	607a      	str	r2, [r7, #4]
  return result;
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	fab2 f282 	clz	r2, r2
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	40d3      	lsrs	r3, r2
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <HAL_RCC_GetSysClockFreq+0xc8>)
 80054aa:	5cd3      	ldrb	r3, [r2, r3]
 80054ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_GetSysClockFreq+0xc0>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	220f      	movs	r2, #15
 80054b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	fa92 f2a2 	rbit	r2, r2
 80054c0:	60fa      	str	r2, [r7, #12]
  return result;
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	fab2 f282 	clz	r2, r2
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	40d3      	lsrs	r3, r2
 80054cc:	4a14      	ldr	r2, [pc, #80]	; (8005520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054ce:	5cd3      	ldrb	r3, [r2, r3]
 80054d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054dc:	4a0e      	ldr	r2, [pc, #56]	; (8005518 <HAL_RCC_GetSysClockFreq+0xc4>)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
 80054ec:	e004      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	623b      	str	r3, [r7, #32]
      break;
 80054fc:	e002      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054fe:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005500:	623b      	str	r3, [r7, #32]
      break;
 8005502:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005504:	6a3b      	ldr	r3, [r7, #32]
}
 8005506:	4618      	mov	r0, r3
 8005508:	372c      	adds	r7, #44	; 0x2c
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	017d7840 	.word	0x017d7840
 800551c:	08008458 	.word	0x08008458
 8005520:	08008468 	.word	0x08008468
 8005524:	003d0900 	.word	0x003d0900
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	2000180c 	.word	0x2000180c

08005544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800554a:	f7ff ffef 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554e:	4601      	mov	r1, r0
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005558:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800555c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	fa92 f2a2 	rbit	r2, r2
 8005564:	603a      	str	r2, [r7, #0]
  return result;
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	fab2 f282 	clz	r2, r2
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	40d3      	lsrs	r3, r2
 8005570:	4a04      	ldr	r2, [pc, #16]	; (8005584 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	08008450 	.word	0x08008450

08005588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800558e:	f7ff ffcd 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005592:	4601      	mov	r1, r0
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800559c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80055a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	fa92 f2a2 	rbit	r2, r2
 80055a8:	603a      	str	r2, [r7, #0]
  return result;
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	fab2 f282 	clz	r2, r2
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	40d3      	lsrs	r3, r2
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80055b6:	5cd3      	ldrb	r3, [r2, r3]
 80055b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	08008450 	.word	0x08008450

080055cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b092      	sub	sp, #72	; 0x48
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80d4 	beq.w	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f0:	4b4e      	ldr	r3, [pc, #312]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10e      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fc:	4b4b      	ldr	r3, [pc, #300]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	4a4a      	ldr	r2, [pc, #296]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005606:	61d3      	str	r3, [r2, #28]
 8005608:	4b48      	ldr	r3, [pc, #288]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561a:	4b45      	ldr	r3, [pc, #276]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d118      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005626:	4b42      	ldr	r3, [pc, #264]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a41      	ldr	r2, [pc, #260]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800562c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005632:	f7fe fa1f 	bl	8003a74 <HAL_GetTick>
 8005636:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	e008      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563a:	f7fe fa1b 	bl	8003a74 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b64      	cmp	r3, #100	; 0x64
 8005646:	d901      	bls.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e13c      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	4b38      	ldr	r3, [pc, #224]	; (8005730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f0      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005658:	4b34      	ldr	r3, [pc, #208]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8084 	beq.w	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005674:	429a      	cmp	r2, r3
 8005676:	d07c      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005678:	4b2c      	ldr	r3, [pc, #176]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	fa93 f3a3 	rbit	r3, r3
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	4b26      	ldr	r3, [pc, #152]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800569c:	4413      	add	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	461a      	mov	r2, r3
 80056a2:	2301      	movs	r3, #1
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	4b1d      	ldr	r3, [pc, #116]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80056ca:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04b      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fe f9cb 	bl	8003a74 <HAL_GetTick>
 80056de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fe f9c7 	bl	8003a74 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0e6      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80056f8:	2302      	movs	r3, #2
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	fa93 f3a3 	rbit	r3, r3
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	2302      	movs	r3, #2
 8005706:	623b      	str	r3, [r7, #32]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	fa93 f3a3 	rbit	r3, r3
 800570e:	61fb      	str	r3, [r7, #28]
  return result;
 8005710:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f043 0302 	orr.w	r3, r3, #2
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d108      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005726:	4b01      	ldr	r3, [pc, #4]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	e00d      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800572c:	40021000 	.word	0x40021000
 8005730:	40007000 	.word	0x40007000
 8005734:	10908100 	.word	0x10908100
 8005738:	2302      	movs	r3, #2
 800573a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	4b62      	ldr	r3, [pc, #392]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2202      	movs	r2, #2
 800574a:	613a      	str	r2, [r7, #16]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	fa92 f2a2 	rbit	r2, r2
 8005752:	60fa      	str	r2, [r7, #12]
  return result;
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	fab2 f282 	clz	r2, r2
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	f002 021f 	and.w	r2, r2, #31
 8005766:	2101      	movs	r1, #1
 8005768:	fa01 f202 	lsl.w	r2, r1, r2
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0b7      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005772:	4b57      	ldr	r3, [pc, #348]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	4954      	ldr	r1, [pc, #336]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005780:	4313      	orrs	r3, r2
 8005782:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005784:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005788:	2b01      	cmp	r3, #1
 800578a:	d105      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800578c:	4b50      	ldr	r3, [pc, #320]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	4a4f      	ldr	r2, [pc, #316]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057a4:	4b4a      	ldr	r3, [pc, #296]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a8:	f023 0203 	bic.w	r2, r3, #3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4947      	ldr	r1, [pc, #284]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d008      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c2:	4b43      	ldr	r3, [pc, #268]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	f023 0210 	bic.w	r2, r3, #16
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	4940      	ldr	r1, [pc, #256]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d008      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057e0:	4b3b      	ldr	r3, [pc, #236]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	f023 0220 	bic.w	r2, r3, #32
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	4938      	ldr	r1, [pc, #224]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057fe:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	4931      	ldr	r1, [pc, #196]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800580c:	4313      	orrs	r3, r2
 800580e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800581c:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4929      	ldr	r1, [pc, #164]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800582a:	4313      	orrs	r3, r2
 800582c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800583a:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	4922      	ldr	r1, [pc, #136]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005848:	4313      	orrs	r3, r2
 800584a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	491a      	ldr	r1, [pc, #104]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005866:	4313      	orrs	r3, r2
 8005868:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005876:	4b16      	ldr	r3, [pc, #88]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	4913      	ldr	r1, [pc, #76]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005884:	4313      	orrs	r3, r2
 8005886:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005894:	4b0e      	ldr	r3, [pc, #56]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	490b      	ldr	r1, [pc, #44]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	4904      	ldr	r1, [pc, #16]	; (80058d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3748      	adds	r7, #72	; 0x48
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000

080058d4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e083      	b.n	80059ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	7f5b      	ldrb	r3, [r3, #29]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc fe42 	bl	8002580 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	22ca      	movs	r2, #202	; 0xca
 8005908:	625a      	str	r2, [r3, #36]	; 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2253      	movs	r2, #83	; 0x53
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 faa8 	bl	8005e68 <RTC_EnterInitMode>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	22ff      	movs	r2, #255	; 0xff
 8005924:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e05e      	b.n	80059ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800593e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005942:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6899      	ldr	r1, [r3, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	431a      	orrs	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68d2      	ldr	r2, [r2, #12]
 800596a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6919      	ldr	r1, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	041a      	lsls	r2, r3, #16
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800598e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10e      	bne.n	80059bc <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa3a 	bl	8005e18 <HAL_RTC_WaitForSynchro>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	22ff      	movs	r2, #255	; 0xff
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2204      	movs	r2, #4
 80059b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e018      	b.n	80059ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	22ff      	movs	r2, #255	; 0xff
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
  }
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059f6:	b590      	push	{r4, r7, lr}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	7f1b      	ldrb	r3, [r3, #28]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_RTC_SetTime+0x1c>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e0aa      	b.n	8005b68 <HAL_RTC_SetTime+0x172>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2201      	movs	r2, #1
 8005a16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d126      	bne.n	8005a72 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d102      	bne.n	8005a38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2200      	movs	r2, #0
 8005a36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fa3f 	bl	8005ec0 <RTC_ByteToBcd2>
 8005a42:	4603      	mov	r3, r0
 8005a44:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fa38 	bl	8005ec0 <RTC_ByteToBcd2>
 8005a50:	4603      	mov	r3, r0
 8005a52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a54:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	789b      	ldrb	r3, [r3, #2]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fa30 	bl	8005ec0 <RTC_ByteToBcd2>
 8005a60:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	78db      	ldrb	r3, [r3, #3]
 8005a6a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	e018      	b.n	8005aa4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2200      	movs	r2, #0
 8005a84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a92:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	78db      	ldrb	r3, [r3, #3]
 8005a9e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	22ca      	movs	r2, #202	; 0xca
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2253      	movs	r2, #83	; 0x53
 8005ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 f9d7 	bl	8005e68 <RTC_EnterInitMode>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	22ff      	movs	r2, #255	; 0xff
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2204      	movs	r2, #4
 8005acc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e047      	b.n	8005b68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ae2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ae6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005af6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6899      	ldr	r1, [r3, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d111      	bne.n	8005b52 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 f972 	bl	8005e18 <HAL_RTC_WaitForSynchro>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	22ff      	movs	r2, #255	; 0xff
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2204      	movs	r2, #4
 8005b46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e00a      	b.n	8005b68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	22ff      	movs	r2, #255	; 0xff
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005b66:	2300      	movs	r3, #0
  }
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}

08005b70 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ba2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d11a      	bne.n	8005c22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f983 	bl	8005efc <RTC_Bcd2ToByte>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f97a 	bl	8005efc <RTC_Bcd2ToByte>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	789b      	ldrb	r3, [r3, #2]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f000 f971 	bl	8005efc <RTC_Bcd2ToByte>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	7f1b      	ldrb	r3, [r3, #28]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_RTC_SetDate+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e094      	b.n	8005d72 <HAL_RTC_SetDate+0x146>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2202      	movs	r2, #2
 8005c52:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10e      	bne.n	8005c78 <HAL_RTC_SetDate+0x4c>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	f003 0310 	and.w	r3, r3, #16
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	f023 0310 	bic.w	r3, r3, #16
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	330a      	adds	r3, #10
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11c      	bne.n	8005cb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	78db      	ldrb	r3, [r3, #3]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f91c 	bl	8005ec0 <RTC_ByteToBcd2>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f915 	bl	8005ec0 <RTC_ByteToBcd2>
 8005c96:	4603      	mov	r3, r0
 8005c98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	789b      	ldrb	r3, [r3, #2]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f90d 	bl	8005ec0 <RTC_ByteToBcd2>
 8005ca6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005ca8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e00e      	b.n	8005cd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	78db      	ldrb	r3, [r3, #3]
 8005cbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005cc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005cca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	22ca      	movs	r2, #202	; 0xca
 8005cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2253      	movs	r2, #83	; 0x53
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f8be 	bl	8005e68 <RTC_EnterInitMode>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	22ff      	movs	r2, #255	; 0xff
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e033      	b.n	8005d72 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d111      	bne.n	8005d5c <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f86d 	bl	8005e18 <HAL_RTC_WaitForSynchro>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	22ff      	movs	r2, #255	; 0xff
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e00a      	b.n	8005d72 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d70:	2300      	movs	r3, #0
  }
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	371c      	adds	r7, #28
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd90      	pop	{r4, r7, pc}

08005d7a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b086      	sub	sp, #24
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	0b5b      	lsrs	r3, r3, #13
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11a      	bne.n	8005e0e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	78db      	ldrb	r3, [r3, #3]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 f88d 	bl	8005efc <RTC_Bcd2ToByte>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 f884 	bl	8005efc <RTC_Bcd2ToByte>
 8005df4:	4603      	mov	r3, r0
 8005df6:	461a      	mov	r2, r3
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	789b      	ldrb	r3, [r3, #2]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 f87b 	bl	8005efc <RTC_Bcd2ToByte>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005e34:	f7fd fe1e 	bl	8003a74 <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e3a:	e009      	b.n	8005e50 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e3c:	f7fd fe1a 	bl	8003a74 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e4a:	d901      	bls.n	8005e50 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e007      	b.n	8005e60 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0ee      	beq.n	8005e3c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d119      	bne.n	8005eb6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e8c:	f7fd fdf2 	bl	8003a74 <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e92:	e009      	b.n	8005ea8 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e94:	f7fd fdee 	bl	8003a74 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea2:	d901      	bls.n	8005ea8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e007      	b.n	8005eb8 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0ee      	beq.n	8005e94 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005ece:	e005      	b.n	8005edc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	3b0a      	subs	r3, #10
 8005eda:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d8f6      	bhi.n	8005ed0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b2db      	uxtb	r3, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8005f0a:	79fb      	ldrb	r3, [r7, #7]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	4413      	add	r3, r2
 8005f2a:	b2db      	uxtb	r3, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	7f1b      	ldrb	r3, [r3, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d101      	bne.n	8005f54 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8005f50:	2302      	movs	r3, #2
 8005f52:	e081      	b.n	8006058 <HAL_RTCEx_SetWakeUpTimer+0x120>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	22ca      	movs	r2, #202	; 0xca
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2253      	movs	r2, #83	; 0x53
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01e      	beq.n	8005fbc <HAL_RTCEx_SetWakeUpTimer+0x84>
  {
    tickstart = HAL_GetTick();
 8005f7e:	f7fd fd79 	bl	8003a74 <HAL_GetTick>
 8005f82:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8005f84:	e013      	b.n	8005fae <HAL_RTCEx_SetWakeUpTimer+0x76>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f86:	f7fd fd75 	bl	8003a74 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f94:	d90b      	bls.n	8005fae <HAL_RTCEx_SetWakeUpTimer+0x76>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	22ff      	movs	r2, #255	; 0xff
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e054      	b.n	8006058 <HAL_RTCEx_SetWakeUpTimer+0x120>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e4      	bne.n	8005f86 <HAL_RTCEx_SetWakeUpTimer+0x4e>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fca:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8005fcc:	f7fd fd52 	bl	8003a74 <HAL_GetTick>
 8005fd0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005fd2:	e013      	b.n	8005ffc <HAL_RTCEx_SetWakeUpTimer+0xc4>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fd4:	f7fd fd4e 	bl	8003a74 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe2:	d90b      	bls.n	8005ffc <HAL_RTCEx_SetWakeUpTimer+0xc4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e02d      	b.n	8006058 <HAL_RTCEx_SetWakeUpTimer+0x120>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0e4      	beq.n	8005fd4 <HAL_RTCEx_SetWakeUpTimer+0x9c>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0207 	bic.w	r2, r2, #7
 8006018:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6899      	ldr	r1, [r3, #8]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006040:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	22ff      	movs	r2, #255	; 0xff
 8006048:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3350      	adds	r3, #80	; 0x50
 8006076:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4413      	add	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3350      	adds	r3, #80	; 0x50
 80060a8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e09d      	b.n	8006212 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d108      	bne.n	80060f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e6:	d009      	beq.n	80060fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	61da      	str	r2, [r3, #28]
 80060ee:	e005      	b.n	80060fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fc fa58 	bl	80025cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006132:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800613c:	d902      	bls.n	8006144 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e002      	b.n	800614a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006148:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006152:	d007      	beq.n	8006164 <HAL_SPI_Init+0xa0>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800615c:	d002      	beq.n	8006164 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006174:	431a      	orrs	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	ea42 0103 	orr.w	r1, r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	0c1b      	lsrs	r3, r3, #16
 80061c0:	f003 0204 	and.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f003 0310 	and.w	r3, r3, #16
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061e0:	ea42 0103 	orr.w	r1, r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b088      	sub	sp, #32
 800621e:	af00      	add	r7, sp, #0
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_SPI_Transmit+0x22>
 8006238:	2302      	movs	r3, #2
 800623a:	e158      	b.n	80064ee <HAL_SPI_Transmit+0x2d4>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006244:	f7fd fc16 	bl	8003a74 <HAL_GetTick>
 8006248:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d002      	beq.n	8006260 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800625a:	2302      	movs	r3, #2
 800625c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800625e:	e13d      	b.n	80064dc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_SPI_Transmit+0x52>
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006270:	e134      	b.n	80064dc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2203      	movs	r2, #3
 8006276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	88fa      	ldrh	r2, [r7, #6]
 800628a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	88fa      	ldrh	r2, [r7, #6]
 8006290:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d10f      	bne.n	80062de <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d007      	beq.n	80062fc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006304:	d94b      	bls.n	800639e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_SPI_Transmit+0xfa>
 800630e:	8afb      	ldrh	r3, [r7, #22]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d13e      	bne.n	8006392 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	1c9a      	adds	r2, r3, #2
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006338:	e02b      	b.n	8006392 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b02      	cmp	r3, #2
 8006346:	d112      	bne.n	800636e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	881a      	ldrh	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	1c9a      	adds	r2, r3, #2
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800636c:	e011      	b.n	8006392 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800636e:	f7fd fb81 	bl	8003a74 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d803      	bhi.n	8006386 <HAL_SPI_Transmit+0x16c>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006384:	d102      	bne.n	800638c <HAL_SPI_Transmit+0x172>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006390:	e0a4      	b.n	80064dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ce      	bne.n	800633a <HAL_SPI_Transmit+0x120>
 800639c:	e07c      	b.n	8006498 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Transmit+0x192>
 80063a6:	8afb      	ldrh	r3, [r7, #22]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d170      	bne.n	800648e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d912      	bls.n	80063dc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	881a      	ldrh	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	1c9a      	adds	r2, r3, #2
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b02      	subs	r3, #2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063da:	e058      	b.n	800648e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	330c      	adds	r3, #12
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006402:	e044      	b.n	800648e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d12b      	bne.n	800646a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d912      	bls.n	8006442 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	881a      	ldrh	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b02      	subs	r3, #2
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006440:	e025      	b.n	800648e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	7812      	ldrb	r2, [r2, #0]
 800644e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006468:	e011      	b.n	800648e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800646a:	f7fd fb03 	bl	8003a74 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d803      	bhi.n	8006482 <HAL_SPI_Transmit+0x268>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d102      	bne.n	8006488 <HAL_SPI_Transmit+0x26e>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800648c:	e026      	b.n	80064dc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1b5      	bne.n	8006404 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fce3 	bl	8006e68 <SPI_EndRxTxTransaction>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b6:	2300      	movs	r3, #0
 80064b8:	613b      	str	r3, [r7, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e000      	b.n	80064dc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80064da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b088      	sub	sp, #32
 80064fa:	af02      	add	r7, sp, #8
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006512:	d112      	bne.n	800653a <HAL_SPI_Receive+0x44>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10e      	bne.n	800653a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	68b9      	ldr	r1, [r7, #8]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f910 	bl	8006756 <HAL_SPI_TransmitReceive>
 8006536:	4603      	mov	r3, r0
 8006538:	e109      	b.n	800674e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_SPI_Receive+0x52>
 8006544:	2302      	movs	r3, #2
 8006546:	e102      	b.n	800674e <HAL_SPI_Receive+0x258>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006550:	f7fd fa90 	bl	8003a74 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006562:	2302      	movs	r3, #2
 8006564:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006566:	e0e9      	b.n	800673c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_SPI_Receive+0x7e>
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006578:	e0e0      	b.n	800673c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2204      	movs	r2, #4
 800657e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	88fa      	ldrh	r2, [r7, #6]
 800659a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065c4:	d908      	bls.n	80065d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065d4:	605a      	str	r2, [r3, #4]
 80065d6:	e007      	b.n	80065e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f0:	d10f      	bne.n	8006612 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006610:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d007      	beq.n	8006630 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800662e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006638:	d867      	bhi.n	800670a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800663a:	e030      	b.n	800669e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b01      	cmp	r3, #1
 8006648:	d117      	bne.n	800667a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f103 020c 	add.w	r2, r3, #12
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006678:	e011      	b.n	800669e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667a:	f7fd f9fb 	bl	8003a74 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d803      	bhi.n	8006692 <HAL_SPI_Receive+0x19c>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	d102      	bne.n	8006698 <HAL_SPI_Receive+0x1a2>
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d102      	bne.n	800669e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800669c:	e04e      	b.n	800673c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1c8      	bne.n	800663c <HAL_SPI_Receive+0x146>
 80066aa:	e034      	b.n	8006716 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d115      	bne.n	80066e6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	b292      	uxth	r2, r2
 80066c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066e4:	e011      	b.n	800670a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e6:	f7fd f9c5 	bl	8003a74 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d803      	bhi.n	80066fe <HAL_SPI_Receive+0x208>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d102      	bne.n	8006704 <HAL_SPI_Receive+0x20e>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006708:	e018      	b.n	800673c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1ca      	bne.n	80066ac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fb4c 	bl	8006db8 <SPI_EndRxTransaction>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2220      	movs	r2, #32
 800672a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75fb      	strb	r3, [r7, #23]
 8006738:	e000      	b.n	800673c <HAL_SPI_Receive+0x246>
  }

error :
 800673a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b08a      	sub	sp, #40	; 0x28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006764:	2301      	movs	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_SPI_TransmitReceive+0x26>
 8006778:	2302      	movs	r3, #2
 800677a:	e1fb      	b.n	8006b74 <HAL_SPI_TransmitReceive+0x41e>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006784:	f7fd f976 	bl	8003a74 <HAL_GetTick>
 8006788:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006790:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006798:	887b      	ldrh	r3, [r7, #2]
 800679a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800679c:	887b      	ldrh	r3, [r7, #2]
 800679e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067a0:	7efb      	ldrb	r3, [r7, #27]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d00e      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x6e>
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ac:	d106      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <HAL_SPI_TransmitReceive+0x66>
 80067b6:	7efb      	ldrb	r3, [r7, #27]
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d003      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067c2:	e1cd      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x80>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <HAL_SPI_TransmitReceive+0x80>
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067dc:	e1c0      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d003      	beq.n	80067f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2205      	movs	r2, #5
 80067ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	887a      	ldrh	r2, [r7, #2]
 8006802:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	887a      	ldrh	r2, [r7, #2]
 800680a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	887a      	ldrh	r2, [r7, #2]
 8006818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	887a      	ldrh	r2, [r7, #2]
 800681e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006834:	d802      	bhi.n	800683c <HAL_SPI_TransmitReceive+0xe6>
 8006836:	8a3b      	ldrh	r3, [r7, #16]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d908      	bls.n	800684e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800684a:	605a      	str	r2, [r3, #4]
 800684c:	e007      	b.n	800685e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800685c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d007      	beq.n	800687c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800687a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006884:	d97c      	bls.n	8006980 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_SPI_TransmitReceive+0x13e>
 800688e:	8a7b      	ldrh	r3, [r7, #18]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d169      	bne.n	8006968 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b8:	e056      	b.n	8006968 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d11b      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x1aa>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x1aa>
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d113      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d11c      	bne.n	8006948 <HAL_SPI_TransmitReceive+0x1f2>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	b292      	uxth	r2, r2
 8006926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	1c9a      	adds	r2, r3, #2
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006944:	2301      	movs	r3, #1
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006948:	f7fd f894 	bl	8003a74 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006954:	429a      	cmp	r2, r3
 8006956:	d807      	bhi.n	8006968 <HAL_SPI_TransmitReceive+0x212>
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d003      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006966:	e0fb      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1a3      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x164>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d19d      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x164>
 800697e:	e0df      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_SPI_TransmitReceive+0x23a>
 8006988:	8a7b      	ldrh	r3, [r7, #18]
 800698a:	2b01      	cmp	r3, #1
 800698c:	f040 80cb 	bne.w	8006b26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b01      	cmp	r3, #1
 8006998:	d912      	bls.n	80069c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b02      	subs	r3, #2
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069be:	e0b2      	b.n	8006b26 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	330c      	adds	r3, #12
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069dc:	b29b      	uxth	r3, r3
 80069de:	3b01      	subs	r3, #1
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069e6:	e09e      	b.n	8006b26 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d134      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x30a>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02f      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x30a>
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d12c      	bne.n	8006a60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d912      	bls.n	8006a36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	1c9a      	adds	r2, r3, #2
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b02      	subs	r3, #2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a34:	e012      	b.n	8006a5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d148      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x3aa>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d042      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d923      	bls.n	8006ace <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	b292      	uxth	r2, r2
 8006a92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	3b02      	subs	r3, #2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d81f      	bhi.n	8006afc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aca:	605a      	str	r2, [r3, #4]
 8006acc:	e016      	b.n	8006afc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f103 020c 	add.w	r2, r3, #12
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	7812      	ldrb	r2, [r2, #0]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006afc:	2301      	movs	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b00:	f7fc ffb8 	bl	8003a74 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d803      	bhi.n	8006b18 <HAL_SPI_TransmitReceive+0x3c2>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x3c8>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d103      	bne.n	8006b26 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b24:	e01c      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f47f af5b 	bne.w	80069e8 <HAL_SPI_TransmitReceive+0x292>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f47f af54 	bne.w	80069e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f98f 	bl	8006e68 <SPI_EndRxTxTransaction>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60
 8006b5c:	e000      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	4613      	mov	r3, r2
 8006b8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b8c:	f7fc ff72 	bl	8003a74 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	1a9b      	subs	r3, r3, r2
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	4413      	add	r3, r2
 8006b9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b9c:	f7fc ff6a 	bl	8003a74 <HAL_GetTick>
 8006ba0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ba2:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	015b      	lsls	r3, r3, #5
 8006ba8:	0d1b      	lsrs	r3, r3, #20
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bb2:	e054      	b.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bba:	d050      	beq.n	8006c5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bbc:	f7fc ff5a 	bl	8003a74 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d902      	bls.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d13d      	bne.n	8006c4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bea:	d111      	bne.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf4:	d004      	beq.n	8006c00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bfe:	d107      	bne.n	8006c10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c18:	d10f      	bne.n	8006c3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e017      	b.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4013      	ands	r3, r2
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	bf0c      	ite	eq
 8006c6e:	2301      	moveq	r3, #1
 8006c70:	2300      	movne	r3, #0
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	461a      	mov	r2, r3
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d19b      	bne.n	8006bb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2000180c 	.word	0x2000180c

08006c8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c9e:	f7fc fee9 	bl	8003a74 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	4413      	add	r3, r2
 8006cac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cae:	f7fc fee1 	bl	8003a74 <HAL_GetTick>
 8006cb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006cbc:	4b3d      	ldr	r3, [pc, #244]	; (8006db4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00da      	lsls	r2, r3, #3
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	0d1b      	lsrs	r3, r3, #20
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006cd4:	e060      	b.n	8006d98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cdc:	d107      	bne.n	8006cee <SPI_WaitFifoStateUntilTimeout+0x62>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d050      	beq.n	8006d98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cf6:	f7fc febd 	bl	8003a74 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d902      	bls.n	8006d0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d13d      	bne.n	8006d88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d24:	d111      	bne.n	8006d4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2e:	d004      	beq.n	8006d3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	d107      	bne.n	8006d4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d52:	d10f      	bne.n	8006d74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e010      	b.n	8006daa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	4013      	ands	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d196      	bne.n	8006cd6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3728      	adds	r7, #40	; 0x28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	2000180c 	.word	0x2000180c

08006db8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dcc:	d111      	bne.n	8006df2 <SPI_EndRxTransaction+0x3a>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d004      	beq.n	8006de2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d107      	bne.n	8006df2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	2180      	movs	r1, #128	; 0x80
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff febd 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e023      	b.n	8006e60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e20:	d11d      	bne.n	8006e5e <SPI_EndRxTransaction+0xa6>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e2a:	d004      	beq.n	8006e36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e34:	d113      	bne.n	8006e5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ff22 	bl	8006c8c <SPI_WaitFifoStateUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e000      	b.n	8006e60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af02      	add	r7, sp, #8
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff ff03 	bl	8006c8c <SPI_WaitFifoStateUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e90:	f043 0220 	orr.w	r2, r3, #32
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e027      	b.n	8006eec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2180      	movs	r1, #128	; 0x80
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f7ff fe68 	bl	8006b7c <SPI_WaitFlagStateUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb6:	f043 0220 	orr.w	r2, r3, #32
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e014      	b.n	8006eec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fedc 	bl	8006c8c <SPI_WaitFifoStateUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e000      	b.n	8006eec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e049      	b.n	8006f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fb fbe8 	bl	80026f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 fba4 	bl	8007680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_TIM_Base_DeInit+0x40>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	f240 4344 	movw	r3, #1092	; 0x444
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d107      	bne.n	8006fe2 <HAL_TIM_Base_DeInit+0x40>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb fbf4 	bl	80027d0 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e033      	b.n	80070dc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <HAL_TIM_Base_Start+0x8c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_TIM_Base_Start+0x3e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708e:	d004      	beq.n	800709a <HAL_TIM_Base_Start+0x3e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <HAL_TIM_Base_Start+0x90>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d115      	bne.n	80070c6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <HAL_TIM_Base_Start+0x94>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b06      	cmp	r3, #6
 80070aa:	d015      	beq.n	80070d8 <HAL_TIM_Base_Start+0x7c>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b2:	d011      	beq.n	80070d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c4:	e008      	b.n	80070d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f042 0201 	orr.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e000      	b.n	80070da <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40014000 	.word	0x40014000
 80070f0:	00010007 	.word	0x00010007

080070f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	f241 1311 	movw	r3, #4369	; 0x1111
 8007106:	4013      	ands	r3, r2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10f      	bne.n	800712c <HAL_TIM_Base_Stop+0x38>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	f240 4344 	movw	r3, #1092	; 0x444
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d107      	bne.n	800712c <HAL_TIM_Base_Stop+0x38>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
	...

08007144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d001      	beq.n	800715c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e03b      	b.n	80071d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0201 	orr.w	r2, r2, #1
 8007172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a19      	ldr	r2, [pc, #100]	; (80071e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d009      	beq.n	8007192 <HAL_TIM_Base_Start_IT+0x4e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007186:	d004      	beq.n	8007192 <HAL_TIM_Base_Start_IT+0x4e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a15      	ldr	r2, [pc, #84]	; (80071e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d115      	bne.n	80071be <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <HAL_TIM_Base_Start_IT+0xa4>)
 800719a:	4013      	ands	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b06      	cmp	r3, #6
 80071a2:	d015      	beq.n	80071d0 <HAL_TIM_Base_Start_IT+0x8c>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071aa:	d011      	beq.n	80071d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071bc:	e008      	b.n	80071d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f042 0201 	orr.w	r2, r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
 80071ce:	e000      	b.n	80071d2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	40012c00 	.word	0x40012c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	00010007 	.word	0x00010007

080071ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	f241 1311 	movw	r3, #4369	; 0x1111
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10f      	bne.n	8007234 <HAL_TIM_Base_Stop_IT+0x48>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6a1a      	ldr	r2, [r3, #32]
 800721a:	f240 4344 	movw	r3, #1092	; 0x444
 800721e:	4013      	ands	r3, r2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d107      	bne.n	8007234 <HAL_TIM_Base_Stop_IT+0x48>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b02      	cmp	r3, #2
 800725e:	d122      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b02      	cmp	r3, #2
 800726c:	d11b      	bne.n	80072a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f06f 0202 	mvn.w	r2, #2
 8007276:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d003      	beq.n	8007294 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f9d8 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 8007292:	e005      	b.n	80072a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f9ca 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f9db 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d122      	bne.n	80072fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d11b      	bne.n	80072fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f06f 0204 	mvn.w	r2, #4
 80072ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9ae 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 80072e6:	e005      	b.n	80072f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9a0 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f9b1 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d122      	bne.n	800734e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b08      	cmp	r3, #8
 8007314:	d11b      	bne.n	800734e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f06f 0208 	mvn.w	r2, #8
 800731e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2204      	movs	r2, #4
 8007324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f984 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 800733a:	e005      	b.n	8007348 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f976 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f987 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b10      	cmp	r3, #16
 800735a:	d122      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b10      	cmp	r3, #16
 8007368:	d11b      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f06f 0210 	mvn.w	r2, #16
 8007372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2208      	movs	r2, #8
 8007378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f95a 	bl	8007642 <HAL_TIM_IC_CaptureCallback>
 800738e:	e005      	b.n	800739c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f94c 	bl	800762e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f95d 	bl	8007656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d10e      	bne.n	80073ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d107      	bne.n	80073ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f06f 0201 	mvn.w	r2, #1
 80073c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f926 	bl	800761a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d8:	2b80      	cmp	r3, #128	; 0x80
 80073da:	d10e      	bne.n	80073fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d107      	bne.n	80073fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fabb 	bl	8007970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007408:	d10e      	bne.n	8007428 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007414:	2b80      	cmp	r3, #128	; 0x80
 8007416:	d107      	bne.n	8007428 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 faae 	bl	8007984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d10e      	bne.n	8007454 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007440:	2b40      	cmp	r3, #64	; 0x40
 8007442:	d107      	bne.n	8007454 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800744c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f90b 	bl	800766a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b20      	cmp	r3, #32
 8007460:	d10e      	bne.n	8007480 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b20      	cmp	r3, #32
 800746e:	d107      	bne.n	8007480 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f06f 0220 	mvn.w	r2, #32
 8007478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fa6e 	bl	800795c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007480:	bf00      	nop
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_TIM_ConfigClockSource+0x1c>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e0b6      	b.n	8007612 <HAL_TIM_ConfigClockSource+0x18a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e0:	d03e      	beq.n	8007560 <HAL_TIM_ConfigClockSource+0xd8>
 80074e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074e6:	f200 8087 	bhi.w	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	f000 8086 	beq.w	80075fe <HAL_TIM_ConfigClockSource+0x176>
 80074f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f6:	d87f      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 80074f8:	2b70      	cmp	r3, #112	; 0x70
 80074fa:	d01a      	beq.n	8007532 <HAL_TIM_ConfigClockSource+0xaa>
 80074fc:	2b70      	cmp	r3, #112	; 0x70
 80074fe:	d87b      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 8007500:	2b60      	cmp	r3, #96	; 0x60
 8007502:	d050      	beq.n	80075a6 <HAL_TIM_ConfigClockSource+0x11e>
 8007504:	2b60      	cmp	r3, #96	; 0x60
 8007506:	d877      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 8007508:	2b50      	cmp	r3, #80	; 0x50
 800750a:	d03c      	beq.n	8007586 <HAL_TIM_ConfigClockSource+0xfe>
 800750c:	2b50      	cmp	r3, #80	; 0x50
 800750e:	d873      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	d058      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0x13e>
 8007514:	2b40      	cmp	r3, #64	; 0x40
 8007516:	d86f      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 8007518:	2b30      	cmp	r3, #48	; 0x30
 800751a:	d064      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15e>
 800751c:	2b30      	cmp	r3, #48	; 0x30
 800751e:	d86b      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 8007520:	2b20      	cmp	r3, #32
 8007522:	d060      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15e>
 8007524:	2b20      	cmp	r3, #32
 8007526:	d867      	bhi.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d05c      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15e>
 800752c:	2b10      	cmp	r3, #16
 800752e:	d05a      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0x15e>
 8007530:	e062      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6899      	ldr	r1, [r3, #8]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f000 f985 	bl	8007850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	609a      	str	r2, [r3, #8]
      break;
 800755e:	e04f      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6818      	ldr	r0, [r3, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	6899      	ldr	r1, [r3, #8]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f000 f96e 	bl	8007850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007582:	609a      	str	r2, [r3, #8]
      break;
 8007584:	e03c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6818      	ldr	r0, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	461a      	mov	r2, r3
 8007594:	f000 f8e2 	bl	800775c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2150      	movs	r1, #80	; 0x50
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f93b 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 80075a4:	e02c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6818      	ldr	r0, [r3, #0]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6859      	ldr	r1, [r3, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f000 f901 	bl	80077ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2160      	movs	r1, #96	; 0x60
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f92b 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 80075c4:	e01c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6859      	ldr	r1, [r3, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f000 f8c2 	bl	800775c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2140      	movs	r1, #64	; 0x40
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 f91b 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 80075e4:	e00c      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f000 f912 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 80075f6:	e003      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
      break;
 80075fc:	e000      	b.n	8007600 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80075fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007610:	7bfb      	ldrb	r3, [r7, #15]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800762e:	b480      	push	{r7}
 8007630:	b083      	sub	sp, #12
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007636:	bf00      	nop
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800765e:	bf00      	nop
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a2e      	ldr	r2, [pc, #184]	; (800774c <TIM_Base_SetConfig+0xcc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_Base_SetConfig+0x20>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769e:	d108      	bne.n	80076b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a25      	ldr	r2, [pc, #148]	; (800774c <TIM_Base_SetConfig+0xcc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <TIM_Base_SetConfig+0x5a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c0:	d00b      	beq.n	80076da <TIM_Base_SetConfig+0x5a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a22      	ldr	r2, [pc, #136]	; (8007750 <TIM_Base_SetConfig+0xd0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_Base_SetConfig+0x5a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a21      	ldr	r2, [pc, #132]	; (8007754 <TIM_Base_SetConfig+0xd4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_Base_SetConfig+0x5a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a20      	ldr	r2, [pc, #128]	; (8007758 <TIM_Base_SetConfig+0xd8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a0e      	ldr	r2, [pc, #56]	; (800774c <TIM_Base_SetConfig+0xcc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0xb0>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a0d      	ldr	r2, [pc, #52]	; (8007750 <TIM_Base_SetConfig+0xd0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0xb0>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a0c      	ldr	r2, [pc, #48]	; (8007754 <TIM_Base_SetConfig+0xd4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0xb0>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a0b      	ldr	r2, [pc, #44]	; (8007758 <TIM_Base_SetConfig+0xd8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d103      	bne.n	8007738 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	615a      	str	r2, [r3, #20]
}
 800773e:	bf00      	nop
 8007740:	3714      	adds	r7, #20
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	40012c00 	.word	0x40012c00
 8007750:	40014000 	.word	0x40014000
 8007754:	40014400 	.word	0x40014400
 8007758:	40014800 	.word	0x40014800

0800775c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f023 0201 	bic.w	r2, r3, #1
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f023 030a 	bic.w	r3, r3, #10
 8007798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	621a      	str	r2, [r3, #32]
}
 80077ae:	bf00      	nop
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077ba:	b480      	push	{r7}
 80077bc:	b087      	sub	sp, #28
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	f023 0210 	bic.w	r2, r3, #16
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	031b      	lsls	r3, r3, #12
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	621a      	str	r2, [r3, #32]
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	f043 0307 	orr.w	r3, r3, #7
 800783c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800786a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	021a      	lsls	r2, r3, #8
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	431a      	orrs	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	4313      	orrs	r3, r2
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	609a      	str	r2, [r3, #8]
}
 8007884:	bf00      	nop
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e04f      	b.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a21      	ldr	r2, [pc, #132]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d108      	bne.n	80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80078d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a14      	ldr	r2, [pc, #80]	; (8007954 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d009      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007910:	d004      	beq.n	800791c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a10      	ldr	r2, [pc, #64]	; (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d10c      	bne.n	8007936 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007922:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	4313      	orrs	r3, r2
 800792c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40012c00 	.word	0x40012c00
 8007958:	40014000 	.word	0x40014000

0800795c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e040      	b.n	8007a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fa ff50 	bl	8002860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2224      	movs	r2, #36	; 0x24
 80079c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f82c 	bl	8007a34 <UART_SetConfig>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e022      	b.n	8007a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f956 	bl	8007ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f9dd 	bl	8007de4 <UART_CheckIdleState>
 8007a2a:	4603      	mov	r3, r0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	4b8a      	ldr	r3, [pc, #552]	; (8007c88 <UART_SetConfig+0x254>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a1b      	ldr	r3, [r3, #32]
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a78      	ldr	r2, [pc, #480]	; (8007c8c <UART_SetConfig+0x258>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d120      	bne.n	8007af2 <UART_SetConfig+0xbe>
 8007ab0:	4b77      	ldr	r3, [pc, #476]	; (8007c90 <UART_SetConfig+0x25c>)
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d817      	bhi.n	8007aec <UART_SetConfig+0xb8>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x90>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ad5 	.word	0x08007ad5
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae7 	.word	0x08007ae7
 8007ad0:	08007adb 	.word	0x08007adb
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	77fb      	strb	r3, [r7, #31]
 8007ad8:	e01d      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007ada:	2302      	movs	r3, #2
 8007adc:	77fb      	strb	r3, [r7, #31]
 8007ade:	e01a      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	77fb      	strb	r3, [r7, #31]
 8007ae4:	e017      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007ae6:	2308      	movs	r3, #8
 8007ae8:	77fb      	strb	r3, [r7, #31]
 8007aea:	e014      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007aec:	2310      	movs	r3, #16
 8007aee:	77fb      	strb	r3, [r7, #31]
 8007af0:	e011      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a67      	ldr	r2, [pc, #412]	; (8007c94 <UART_SetConfig+0x260>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d102      	bne.n	8007b02 <UART_SetConfig+0xce>
 8007afc:	2300      	movs	r3, #0
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e009      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a64      	ldr	r2, [pc, #400]	; (8007c98 <UART_SetConfig+0x264>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d102      	bne.n	8007b12 <UART_SetConfig+0xde>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	77fb      	strb	r3, [r7, #31]
 8007b10:	e001      	b.n	8007b16 <UART_SetConfig+0xe2>
 8007b12:	2310      	movs	r3, #16
 8007b14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b1e:	d15b      	bne.n	8007bd8 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8007b20:	7ffb      	ldrb	r3, [r7, #31]
 8007b22:	2b08      	cmp	r3, #8
 8007b24:	d827      	bhi.n	8007b76 <UART_SetConfig+0x142>
 8007b26:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <UART_SetConfig+0xf8>)
 8007b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2c:	08007b51 	.word	0x08007b51
 8007b30:	08007b59 	.word	0x08007b59
 8007b34:	08007b61 	.word	0x08007b61
 8007b38:	08007b77 	.word	0x08007b77
 8007b3c:	08007b67 	.word	0x08007b67
 8007b40:	08007b77 	.word	0x08007b77
 8007b44:	08007b77 	.word	0x08007b77
 8007b48:	08007b77 	.word	0x08007b77
 8007b4c:	08007b6f 	.word	0x08007b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b50:	f7fd fcf8 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8007b54:	61b8      	str	r0, [r7, #24]
        break;
 8007b56:	e013      	b.n	8007b80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b58:	f7fd fd16 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8007b5c:	61b8      	str	r0, [r7, #24]
        break;
 8007b5e:	e00f      	b.n	8007b80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b60:	4b4e      	ldr	r3, [pc, #312]	; (8007c9c <UART_SetConfig+0x268>)
 8007b62:	61bb      	str	r3, [r7, #24]
        break;
 8007b64:	e00c      	b.n	8007b80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b66:	f7fd fc75 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8007b6a:	61b8      	str	r0, [r7, #24]
        break;
 8007b6c:	e008      	b.n	8007b80 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b72:	61bb      	str	r3, [r7, #24]
        break;
 8007b74:	e004      	b.n	8007b80 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	77bb      	strb	r3, [r7, #30]
        break;
 8007b7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d074      	beq.n	8007c70 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	005a      	lsls	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	441a      	add	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	2b0f      	cmp	r3, #15
 8007ba2:	d916      	bls.n	8007bd2 <UART_SetConfig+0x19e>
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007baa:	d212      	bcs.n	8007bd2 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f023 030f 	bic.w	r3, r3, #15
 8007bb4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	89fb      	ldrh	r3, [r7, #14]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	89fa      	ldrh	r2, [r7, #14]
 8007bce:	60da      	str	r2, [r3, #12]
 8007bd0:	e04e      	b.n	8007c70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	77bb      	strb	r3, [r7, #30]
 8007bd6:	e04b      	b.n	8007c70 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bd8:	7ffb      	ldrb	r3, [r7, #31]
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d827      	bhi.n	8007c2e <UART_SetConfig+0x1fa>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x1b0>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c19 	.word	0x08007c19
 8007bf0:	08007c2f 	.word	0x08007c2f
 8007bf4:	08007c1f 	.word	0x08007c1f
 8007bf8:	08007c2f 	.word	0x08007c2f
 8007bfc:	08007c2f 	.word	0x08007c2f
 8007c00:	08007c2f 	.word	0x08007c2f
 8007c04:	08007c27 	.word	0x08007c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fd fc9c 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8007c0c:	61b8      	str	r0, [r7, #24]
        break;
 8007c0e:	e013      	b.n	8007c38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c10:	f7fd fcba 	bl	8005588 <HAL_RCC_GetPCLK2Freq>
 8007c14:	61b8      	str	r0, [r7, #24]
        break;
 8007c16:	e00f      	b.n	8007c38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c18:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <UART_SetConfig+0x268>)
 8007c1a:	61bb      	str	r3, [r7, #24]
        break;
 8007c1c:	e00c      	b.n	8007c38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1e:	f7fd fc19 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 8007c22:	61b8      	str	r0, [r7, #24]
        break;
 8007c24:	e008      	b.n	8007c38 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c2a:	61bb      	str	r3, [r7, #24]
        break;
 8007c2c:	e004      	b.n	8007c38 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	77bb      	strb	r3, [r7, #30]
        break;
 8007c36:	bf00      	nop
    }

    if (pclk != 0U)
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d018      	beq.n	8007c70 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085a      	lsrs	r2, r3, #1
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	441a      	add	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d908      	bls.n	8007c6c <UART_SetConfig+0x238>
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c60:	d204      	bcs.n	8007c6c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	60da      	str	r2, [r3, #12]
 8007c6a:	e001      	b.n	8007c70 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3720      	adds	r7, #32
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	efff69f3 	.word	0xefff69f3
 8007c8c:	40013800 	.word	0x40013800
 8007c90:	40021000 	.word	0x40021000
 8007c94:	40004400 	.word	0x40004400
 8007c98:	40004800 	.word	0x40004800
 8007c9c:	007a1200 	.word	0x007a1200

08007ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	f003 0310 	and.w	r3, r3, #16
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9e:	d10a      	bne.n	8007db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007df4:	f7fb fe3e 	bl	8003a74 <HAL_GetTick>
 8007df8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d10e      	bne.n	8007e26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f82d 	bl	8007e76 <UART_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e023      	b.n	8007e6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d10e      	bne.n	8007e52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f817 	bl	8007e76 <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e00d      	b.n	8007e6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b09c      	sub	sp, #112	; 0x70
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e86:	e0a5      	b.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	f000 80a1 	beq.w	8007fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e92:	f7fb fdef 	bl	8003a74 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d302      	bcc.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d13e      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ec8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e6      	bne.n	8007ea8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	f023 0301 	bic.w	r3, r3, #1
 8007ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007efa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e5      	bne.n	8007eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2220      	movs	r2, #32
 8007f12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e067      	b.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d04f      	beq.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f42:	d147      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f023 0301 	bic.w	r3, r3, #1
 8007f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fa0:	623a      	str	r2, [r7, #32]
 8007fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	69f9      	ldr	r1, [r7, #28]
 8007fa6:	6a3a      	ldr	r2, [r7, #32]
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e010      	b.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	69da      	ldr	r2, [r3, #28]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4013      	ands	r3, r2
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2301      	moveq	r3, #1
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	461a      	mov	r2, r3
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	f43f af4a 	beq.w	8007e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3770      	adds	r7, #112	; 0x70
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <__errno>:
 8008000:	4b01      	ldr	r3, [pc, #4]	; (8008008 <__errno+0x8>)
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	20001844 	.word	0x20001844

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d0d      	ldr	r5, [pc, #52]	; (8008044 <__libc_init_array+0x38>)
 8008010:	4c0d      	ldr	r4, [pc, #52]	; (8008048 <__libc_init_array+0x3c>)
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	2600      	movs	r6, #0
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	4d0b      	ldr	r5, [pc, #44]	; (800804c <__libc_init_array+0x40>)
 800801e:	4c0c      	ldr	r4, [pc, #48]	; (8008050 <__libc_init_array+0x44>)
 8008020:	f000 f9a8 	bl	8008374 <_init>
 8008024:	1b64      	subs	r4, r4, r5
 8008026:	10a4      	asrs	r4, r4, #2
 8008028:	2600      	movs	r6, #0
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	f855 3b04 	ldr.w	r3, [r5], #4
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	f855 3b04 	ldr.w	r3, [r5], #4
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	080084a0 	.word	0x080084a0
 8008048:	080084a0 	.word	0x080084a0
 800804c:	080084a0 	.word	0x080084a0
 8008050:	080084a4 	.word	0x080084a4

08008054 <__itoa>:
 8008054:	1e93      	subs	r3, r2, #2
 8008056:	2b22      	cmp	r3, #34	; 0x22
 8008058:	b510      	push	{r4, lr}
 800805a:	460c      	mov	r4, r1
 800805c:	d904      	bls.n	8008068 <__itoa+0x14>
 800805e:	2300      	movs	r3, #0
 8008060:	700b      	strb	r3, [r1, #0]
 8008062:	461c      	mov	r4, r3
 8008064:	4620      	mov	r0, r4
 8008066:	bd10      	pop	{r4, pc}
 8008068:	2a0a      	cmp	r2, #10
 800806a:	d109      	bne.n	8008080 <__itoa+0x2c>
 800806c:	2800      	cmp	r0, #0
 800806e:	da07      	bge.n	8008080 <__itoa+0x2c>
 8008070:	232d      	movs	r3, #45	; 0x2d
 8008072:	700b      	strb	r3, [r1, #0]
 8008074:	4240      	negs	r0, r0
 8008076:	2101      	movs	r1, #1
 8008078:	4421      	add	r1, r4
 800807a:	f000 f92b 	bl	80082d4 <__utoa>
 800807e:	e7f1      	b.n	8008064 <__itoa+0x10>
 8008080:	2100      	movs	r1, #0
 8008082:	e7f9      	b.n	8008078 <__itoa+0x24>

08008084 <itoa>:
 8008084:	f7ff bfe6 	b.w	8008054 <__itoa>

08008088 <malloc>:
 8008088:	4b02      	ldr	r3, [pc, #8]	; (8008094 <malloc+0xc>)
 800808a:	4601      	mov	r1, r0
 800808c:	6818      	ldr	r0, [r3, #0]
 800808e:	f000 b88d 	b.w	80081ac <_malloc_r>
 8008092:	bf00      	nop
 8008094:	20001844 	.word	0x20001844

08008098 <free>:
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <free+0xc>)
 800809a:	4601      	mov	r1, r0
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	f000 b819 	b.w	80080d4 <_free_r>
 80080a2:	bf00      	nop
 80080a4:	20001844 	.word	0x20001844

080080a8 <memcpy>:
 80080a8:	440a      	add	r2, r1
 80080aa:	4291      	cmp	r1, r2
 80080ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xc>
 80080b2:	4770      	bx	lr
 80080b4:	b510      	push	{r4, lr}
 80080b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080be:	4291      	cmp	r1, r2
 80080c0:	d1f9      	bne.n	80080b6 <memcpy+0xe>
 80080c2:	bd10      	pop	{r4, pc}

080080c4 <memset>:
 80080c4:	4402      	add	r2, r0
 80080c6:	4603      	mov	r3, r0
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d100      	bne.n	80080ce <memset+0xa>
 80080cc:	4770      	bx	lr
 80080ce:	f803 1b01 	strb.w	r1, [r3], #1
 80080d2:	e7f9      	b.n	80080c8 <memset+0x4>

080080d4 <_free_r>:
 80080d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080d6:	2900      	cmp	r1, #0
 80080d8:	d044      	beq.n	8008164 <_free_r+0x90>
 80080da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080de:	9001      	str	r0, [sp, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f1a1 0404 	sub.w	r4, r1, #4
 80080e6:	bfb8      	it	lt
 80080e8:	18e4      	addlt	r4, r4, r3
 80080ea:	f000 f935 	bl	8008358 <__malloc_lock>
 80080ee:	4a1e      	ldr	r2, [pc, #120]	; (8008168 <_free_r+0x94>)
 80080f0:	9801      	ldr	r0, [sp, #4]
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	b933      	cbnz	r3, 8008104 <_free_r+0x30>
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	6014      	str	r4, [r2, #0]
 80080fa:	b003      	add	sp, #12
 80080fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008100:	f000 b930 	b.w	8008364 <__malloc_unlock>
 8008104:	42a3      	cmp	r3, r4
 8008106:	d908      	bls.n	800811a <_free_r+0x46>
 8008108:	6825      	ldr	r5, [r4, #0]
 800810a:	1961      	adds	r1, r4, r5
 800810c:	428b      	cmp	r3, r1
 800810e:	bf01      	itttt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	1949      	addeq	r1, r1, r5
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	e7ed      	b.n	80080f6 <_free_r+0x22>
 800811a:	461a      	mov	r2, r3
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b10b      	cbz	r3, 8008124 <_free_r+0x50>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d9fa      	bls.n	800811a <_free_r+0x46>
 8008124:	6811      	ldr	r1, [r2, #0]
 8008126:	1855      	adds	r5, r2, r1
 8008128:	42a5      	cmp	r5, r4
 800812a:	d10b      	bne.n	8008144 <_free_r+0x70>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	4421      	add	r1, r4
 8008130:	1854      	adds	r4, r2, r1
 8008132:	42a3      	cmp	r3, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	d1e0      	bne.n	80080fa <_free_r+0x26>
 8008138:	681c      	ldr	r4, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	4421      	add	r1, r4
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	e7da      	b.n	80080fa <_free_r+0x26>
 8008144:	d902      	bls.n	800814c <_free_r+0x78>
 8008146:	230c      	movs	r3, #12
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	e7d6      	b.n	80080fa <_free_r+0x26>
 800814c:	6825      	ldr	r5, [r4, #0]
 800814e:	1961      	adds	r1, r4, r5
 8008150:	428b      	cmp	r3, r1
 8008152:	bf04      	itt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	bf04      	itt	eq
 800815c:	1949      	addeq	r1, r1, r5
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	6054      	str	r4, [r2, #4]
 8008162:	e7ca      	b.n	80080fa <_free_r+0x26>
 8008164:	b003      	add	sp, #12
 8008166:	bd30      	pop	{r4, r5, pc}
 8008168:	200036ec 	.word	0x200036ec

0800816c <sbrk_aligned>:
 800816c:	b570      	push	{r4, r5, r6, lr}
 800816e:	4e0e      	ldr	r6, [pc, #56]	; (80081a8 <sbrk_aligned+0x3c>)
 8008170:	460c      	mov	r4, r1
 8008172:	6831      	ldr	r1, [r6, #0]
 8008174:	4605      	mov	r5, r0
 8008176:	b911      	cbnz	r1, 800817e <sbrk_aligned+0x12>
 8008178:	f000 f88c 	bl	8008294 <_sbrk_r>
 800817c:	6030      	str	r0, [r6, #0]
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 f887 	bl	8008294 <_sbrk_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	d00a      	beq.n	80081a0 <sbrk_aligned+0x34>
 800818a:	1cc4      	adds	r4, r0, #3
 800818c:	f024 0403 	bic.w	r4, r4, #3
 8008190:	42a0      	cmp	r0, r4
 8008192:	d007      	beq.n	80081a4 <sbrk_aligned+0x38>
 8008194:	1a21      	subs	r1, r4, r0
 8008196:	4628      	mov	r0, r5
 8008198:	f000 f87c 	bl	8008294 <_sbrk_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d101      	bne.n	80081a4 <sbrk_aligned+0x38>
 80081a0:	f04f 34ff 	mov.w	r4, #4294967295
 80081a4:	4620      	mov	r0, r4
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	200036f0 	.word	0x200036f0

080081ac <_malloc_r>:
 80081ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b0:	1ccd      	adds	r5, r1, #3
 80081b2:	f025 0503 	bic.w	r5, r5, #3
 80081b6:	3508      	adds	r5, #8
 80081b8:	2d0c      	cmp	r5, #12
 80081ba:	bf38      	it	cc
 80081bc:	250c      	movcc	r5, #12
 80081be:	2d00      	cmp	r5, #0
 80081c0:	4607      	mov	r7, r0
 80081c2:	db01      	blt.n	80081c8 <_malloc_r+0x1c>
 80081c4:	42a9      	cmp	r1, r5
 80081c6:	d905      	bls.n	80081d4 <_malloc_r+0x28>
 80081c8:	230c      	movs	r3, #12
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	2600      	movs	r6, #0
 80081ce:	4630      	mov	r0, r6
 80081d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081d4:	4e2e      	ldr	r6, [pc, #184]	; (8008290 <_malloc_r+0xe4>)
 80081d6:	f000 f8bf 	bl	8008358 <__malloc_lock>
 80081da:	6833      	ldr	r3, [r6, #0]
 80081dc:	461c      	mov	r4, r3
 80081de:	bb34      	cbnz	r4, 800822e <_malloc_r+0x82>
 80081e0:	4629      	mov	r1, r5
 80081e2:	4638      	mov	r0, r7
 80081e4:	f7ff ffc2 	bl	800816c <sbrk_aligned>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	4604      	mov	r4, r0
 80081ec:	d14d      	bne.n	800828a <_malloc_r+0xde>
 80081ee:	6834      	ldr	r4, [r6, #0]
 80081f0:	4626      	mov	r6, r4
 80081f2:	2e00      	cmp	r6, #0
 80081f4:	d140      	bne.n	8008278 <_malloc_r+0xcc>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	4631      	mov	r1, r6
 80081fa:	4638      	mov	r0, r7
 80081fc:	eb04 0803 	add.w	r8, r4, r3
 8008200:	f000 f848 	bl	8008294 <_sbrk_r>
 8008204:	4580      	cmp	r8, r0
 8008206:	d13a      	bne.n	800827e <_malloc_r+0xd2>
 8008208:	6821      	ldr	r1, [r4, #0]
 800820a:	3503      	adds	r5, #3
 800820c:	1a6d      	subs	r5, r5, r1
 800820e:	f025 0503 	bic.w	r5, r5, #3
 8008212:	3508      	adds	r5, #8
 8008214:	2d0c      	cmp	r5, #12
 8008216:	bf38      	it	cc
 8008218:	250c      	movcc	r5, #12
 800821a:	4629      	mov	r1, r5
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff ffa5 	bl	800816c <sbrk_aligned>
 8008222:	3001      	adds	r0, #1
 8008224:	d02b      	beq.n	800827e <_malloc_r+0xd2>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	442b      	add	r3, r5
 800822a:	6023      	str	r3, [r4, #0]
 800822c:	e00e      	b.n	800824c <_malloc_r+0xa0>
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	1b52      	subs	r2, r2, r5
 8008232:	d41e      	bmi.n	8008272 <_malloc_r+0xc6>
 8008234:	2a0b      	cmp	r2, #11
 8008236:	d916      	bls.n	8008266 <_malloc_r+0xba>
 8008238:	1961      	adds	r1, r4, r5
 800823a:	42a3      	cmp	r3, r4
 800823c:	6025      	str	r5, [r4, #0]
 800823e:	bf18      	it	ne
 8008240:	6059      	strne	r1, [r3, #4]
 8008242:	6863      	ldr	r3, [r4, #4]
 8008244:	bf08      	it	eq
 8008246:	6031      	streq	r1, [r6, #0]
 8008248:	5162      	str	r2, [r4, r5]
 800824a:	604b      	str	r3, [r1, #4]
 800824c:	4638      	mov	r0, r7
 800824e:	f104 060b 	add.w	r6, r4, #11
 8008252:	f000 f887 	bl	8008364 <__malloc_unlock>
 8008256:	f026 0607 	bic.w	r6, r6, #7
 800825a:	1d23      	adds	r3, r4, #4
 800825c:	1af2      	subs	r2, r6, r3
 800825e:	d0b6      	beq.n	80081ce <_malloc_r+0x22>
 8008260:	1b9b      	subs	r3, r3, r6
 8008262:	50a3      	str	r3, [r4, r2]
 8008264:	e7b3      	b.n	80081ce <_malloc_r+0x22>
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	42a3      	cmp	r3, r4
 800826a:	bf0c      	ite	eq
 800826c:	6032      	streq	r2, [r6, #0]
 800826e:	605a      	strne	r2, [r3, #4]
 8008270:	e7ec      	b.n	800824c <_malloc_r+0xa0>
 8008272:	4623      	mov	r3, r4
 8008274:	6864      	ldr	r4, [r4, #4]
 8008276:	e7b2      	b.n	80081de <_malloc_r+0x32>
 8008278:	4634      	mov	r4, r6
 800827a:	6876      	ldr	r6, [r6, #4]
 800827c:	e7b9      	b.n	80081f2 <_malloc_r+0x46>
 800827e:	230c      	movs	r3, #12
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	4638      	mov	r0, r7
 8008284:	f000 f86e 	bl	8008364 <__malloc_unlock>
 8008288:	e7a1      	b.n	80081ce <_malloc_r+0x22>
 800828a:	6025      	str	r5, [r4, #0]
 800828c:	e7de      	b.n	800824c <_malloc_r+0xa0>
 800828e:	bf00      	nop
 8008290:	200036ec 	.word	0x200036ec

08008294 <_sbrk_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d06      	ldr	r5, [pc, #24]	; (80082b0 <_sbrk_r+0x1c>)
 8008298:	2300      	movs	r3, #0
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	602b      	str	r3, [r5, #0]
 80082a0:	f7fa fbbe 	bl	8002a20 <_sbrk>
 80082a4:	1c43      	adds	r3, r0, #1
 80082a6:	d102      	bne.n	80082ae <_sbrk_r+0x1a>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b103      	cbz	r3, 80082ae <_sbrk_r+0x1a>
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	bd38      	pop	{r3, r4, r5, pc}
 80082b0:	200036f4 	.word	0x200036f4

080082b4 <strcat>:
 80082b4:	b510      	push	{r4, lr}
 80082b6:	4602      	mov	r2, r0
 80082b8:	7814      	ldrb	r4, [r2, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	3201      	adds	r2, #1
 80082be:	2c00      	cmp	r4, #0
 80082c0:	d1fa      	bne.n	80082b8 <strcat+0x4>
 80082c2:	3b01      	subs	r3, #1
 80082c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	d1f9      	bne.n	80082c4 <strcat+0x10>
 80082d0:	bd10      	pop	{r4, pc}
	...

080082d4 <__utoa>:
 80082d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d6:	4c1f      	ldr	r4, [pc, #124]	; (8008354 <__utoa+0x80>)
 80082d8:	b08b      	sub	sp, #44	; 0x2c
 80082da:	4605      	mov	r5, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	466e      	mov	r6, sp
 80082e0:	f104 0c20 	add.w	ip, r4, #32
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	6861      	ldr	r1, [r4, #4]
 80082e8:	4637      	mov	r7, r6
 80082ea:	c703      	stmia	r7!, {r0, r1}
 80082ec:	3408      	adds	r4, #8
 80082ee:	4564      	cmp	r4, ip
 80082f0:	463e      	mov	r6, r7
 80082f2:	d1f7      	bne.n	80082e4 <__utoa+0x10>
 80082f4:	7921      	ldrb	r1, [r4, #4]
 80082f6:	7139      	strb	r1, [r7, #4]
 80082f8:	1e91      	subs	r1, r2, #2
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	6038      	str	r0, [r7, #0]
 80082fe:	2922      	cmp	r1, #34	; 0x22
 8008300:	f04f 0100 	mov.w	r1, #0
 8008304:	d904      	bls.n	8008310 <__utoa+0x3c>
 8008306:	7019      	strb	r1, [r3, #0]
 8008308:	460b      	mov	r3, r1
 800830a:	4618      	mov	r0, r3
 800830c:	b00b      	add	sp, #44	; 0x2c
 800830e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008310:	1e58      	subs	r0, r3, #1
 8008312:	4684      	mov	ip, r0
 8008314:	fbb5 f7f2 	udiv	r7, r5, r2
 8008318:	fb02 5617 	mls	r6, r2, r7, r5
 800831c:	3628      	adds	r6, #40	; 0x28
 800831e:	446e      	add	r6, sp
 8008320:	460c      	mov	r4, r1
 8008322:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008326:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800832a:	462e      	mov	r6, r5
 800832c:	42b2      	cmp	r2, r6
 800832e:	f101 0101 	add.w	r1, r1, #1
 8008332:	463d      	mov	r5, r7
 8008334:	d9ee      	bls.n	8008314 <__utoa+0x40>
 8008336:	2200      	movs	r2, #0
 8008338:	545a      	strb	r2, [r3, r1]
 800833a:	1919      	adds	r1, r3, r4
 800833c:	1aa5      	subs	r5, r4, r2
 800833e:	42aa      	cmp	r2, r5
 8008340:	dae3      	bge.n	800830a <__utoa+0x36>
 8008342:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008346:	780e      	ldrb	r6, [r1, #0]
 8008348:	7006      	strb	r6, [r0, #0]
 800834a:	3201      	adds	r2, #1
 800834c:	f801 5901 	strb.w	r5, [r1], #-1
 8008350:	e7f4      	b.n	800833c <__utoa+0x68>
 8008352:	bf00      	nop
 8008354:	08008478 	.word	0x08008478

08008358 <__malloc_lock>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__malloc_lock+0x8>)
 800835a:	f000 b809 	b.w	8008370 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	200036f8 	.word	0x200036f8

08008364 <__malloc_unlock>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__malloc_unlock+0x8>)
 8008366:	f000 b804 	b.w	8008372 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	200036f8 	.word	0x200036f8

08008370 <__retarget_lock_acquire_recursive>:
 8008370:	4770      	bx	lr

08008372 <__retarget_lock_release_recursive>:
 8008372:	4770      	bx	lr

08008374 <_init>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	bf00      	nop
 8008378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837a:	bc08      	pop	{r3}
 800837c:	469e      	mov	lr, r3
 800837e:	4770      	bx	lr

08008380 <_fini>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	bf00      	nop
 8008384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008386:	bc08      	pop	{r3}
 8008388:	469e      	mov	lr, r3
 800838a:	4770      	bx	lr
