
Basic_State_Machine_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08007018  08007018  00017018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007120  08007120  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08007120  08007120  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007120  08007120  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007124  08007124  00017124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08007128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001578  200000a8  080071d0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  080071d0  00021620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcb6  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003966  00000000  00000000  0003bd8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00040a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001990e  00000000  00000000  00041c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183fc  00000000  00000000  0005b596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947d4  00000000  00000000  00073992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005278  00000000  00000000  001081bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007000 	.word	0x08007000

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08007000 	.word	0x08007000

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <Manual_delay>:

#include "Interrupt_Services.h"
#include "main.h"

void Manual_delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(int i=0;i<=120;i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <Manual_delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2b78      	cmp	r3, #120	; 0x78
 80001ee:	ddf9      	ble.n	80001e4 <Manual_delay+0xc>
	{

	}
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
	...

08000200 <Lan_Interrupt_Service>:

void Lan_Interrupt_Service(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	if(getSn_IR(0) & (1 << 2))
 8000204:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000208:	f001 ffca 	bl	80021a0 <WIZCHIP_READ>
 800020c:	4603      	mov	r3, r0
 800020e:	f003 0304 	and.w	r3, r3, #4
 8000212:	2b00      	cmp	r3, #0
 8000214:	d00f      	beq.n	8000236 <Lan_Interrupt_Service+0x36>
	{
		recv(0,Receive_Buffer,255);
 8000216:	22ff      	movs	r2, #255	; 0xff
 8000218:	4913      	ldr	r1, [pc, #76]	; (8000268 <Lan_Interrupt_Service+0x68>)
 800021a:	2000      	movs	r0, #0
 800021c:	f001 fc58 	bl	8001ad0 <recv>
//		if(Receive_Buffer==PING_ACK_CMD)
//		{
//			//Set State Idle State
//		}

		memset(Receive_Buffer,0,sizeof Receive_Buffer);// clear the receiving buffer
 8000220:	22ff      	movs	r2, #255	; 0xff
 8000222:	2100      	movs	r1, #0
 8000224:	4810      	ldr	r0, [pc, #64]	; (8000268 <Lan_Interrupt_Service+0x68>)
 8000226:	f006 fdc9 	bl	8006dbc <memset>
		setSn_IR(0, 0x04);
 800022a:	2104      	movs	r1, #4
 800022c:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000230:	f002 f802 	bl	8002238 <WIZCHIP_WRITE>

	else
	{
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
	}
}
 8000234:	e015      	b.n	8000262 <Lan_Interrupt_Service+0x62>
	else if(getSn_IR(0) & (1 << 1))
 8000236:	f44f 7002 	mov.w	r0, #520	; 0x208
 800023a:	f001 ffb1 	bl	80021a0 <WIZCHIP_READ>
 800023e:	4603      	mov	r3, r0
 8000240:	f003 0302 	and.w	r3, r3, #2
 8000244:	2b00      	cmp	r3, #0
 8000246:	d007      	beq.n	8000258 <Lan_Interrupt_Service+0x58>
		Ethernet_Connect();
 8000248:	f000 fb84 	bl	8000954 <Ethernet_Connect>
		setSn_IR(0, 0x02);
 800024c:	2102      	movs	r1, #2
 800024e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8000252:	f001 fff1 	bl	8002238 <WIZCHIP_WRITE>
}
 8000256:	e004      	b.n	8000262 <Lan_Interrupt_Service+0x62>
		setSn_IR(0, 0x1F);/// decimal 31 .. for more info check W5500 datasheet, Page 48
 8000258:	211f      	movs	r1, #31
 800025a:	f44f 7002 	mov.w	r0, #520	; 0x208
 800025e:	f001 ffeb 	bl	8002238 <WIZCHIP_WRITE>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000470 	.word	0x20000470

0800026c <WR_Interrupt_Service>:

void WR_Interrupt_Service(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	WR_Counts++;
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <WR_Interrupt_Service+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	4a23      	ldr	r2, [pc, #140]	; (8000304 <WR_Interrupt_Service+0x98>)
 8000278:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==0)
 800027a:	4b23      	ldr	r3, [pc, #140]	; (8000308 <WR_Interrupt_Service+0x9c>)
 800027c:	881b      	ldrh	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d12e      	bne.n	80002e0 <WR_Interrupt_Service+0x74>
	{
		switch(WR_Counts)
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <WR_Interrupt_Service+0x98>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d002      	beq.n	8000290 <WR_Interrupt_Service+0x24>
 800028a:	2b02      	cmp	r3, #2
 800028c:	d012      	beq.n	80002b4 <WR_Interrupt_Service+0x48>
 800028e:	e028      	b.n	80002e2 <WR_Interrupt_Service+0x76>
		{
		case(1):
				send(0, (uint8_t *)INIT_CMD,strlen(INIT_CMD));
 8000290:	2206      	movs	r2, #6
 8000292:	491e      	ldr	r1, [pc, #120]	; (800030c <WR_Interrupt_Service+0xa0>)
 8000294:	2000      	movs	r0, #0
 8000296:	f001 fb21 	bl	80018dc <send>
		        Timer2_Start();
 800029a:	f000 fc03 	bl	8000aa4 <Timer2_Start>
				WR_Instant=Timer2_GetTimer();
 800029e:	f000 fc0b 	bl	8000ab8 <Timer2_GetTimer>
 80002a2:	4603      	mov	r3, r0
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b1a      	ldr	r3, [pc, #104]	; (8000310 <WR_Interrupt_Service+0xa4>)
 80002a8:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WR_Ring,&WR_Instant);
 80002aa:	4919      	ldr	r1, [pc, #100]	; (8000310 <WR_Interrupt_Service+0xa4>)
 80002ac:	4819      	ldr	r0, [pc, #100]	; (8000314 <WR_Interrupt_Service+0xa8>)
 80002ae:	f001 f821 	bl	80012f4 <RingWriteElement>
				break;
 80002b2:	e016      	b.n	80002e2 <WR_Interrupt_Service+0x76>
		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 80002b4:	220b      	movs	r2, #11
 80002b6:	4918      	ldr	r1, [pc, #96]	; (8000318 <WR_Interrupt_Service+0xac>)
 80002b8:	2000      	movs	r0, #0
 80002ba:	f001 fb0f 	bl	80018dc <send>
				Entry_flag=1;
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <WR_Interrupt_Service+0xb0>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	801a      	strh	r2, [r3, #0]
				Rt_Lt_flag=1;
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <WR_Interrupt_Service+0xb4>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	801a      	strh	r2, [r3, #0]
				WR_Instant=Timer2_GetTimer();
 80002ca:	f000 fbf5 	bl	8000ab8 <Timer2_GetTimer>
 80002ce:	4603      	mov	r3, r0
 80002d0:	461a      	mov	r2, r3
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <WR_Interrupt_Service+0xa4>)
 80002d4:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WR_Ring,&WR_Instant);
 80002d6:	490e      	ldr	r1, [pc, #56]	; (8000310 <WR_Interrupt_Service+0xa4>)
 80002d8:	480e      	ldr	r0, [pc, #56]	; (8000314 <WR_Interrupt_Service+0xa8>)
 80002da:	f001 f80b 	bl	80012f4 <RingWriteElement>
				break;
 80002de:	e000      	b.n	80002e2 <WR_Interrupt_Service+0x76>
		}

	}
 80002e0:	bf00      	nop

	if(Entry_flag==1)
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <WR_Interrupt_Service+0xb0>)
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d109      	bne.n	80002fe <WR_Interrupt_Service+0x92>
	{
		WR_Instant=Timer2_GetTimer();
 80002ea:	f000 fbe5 	bl	8000ab8 <Timer2_GetTimer>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <WR_Interrupt_Service+0xa4>)
 80002f4:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WR_Ring,&WR_Instant);
 80002f6:	4906      	ldr	r1, [pc, #24]	; (8000310 <WR_Interrupt_Service+0xa4>)
 80002f8:	4806      	ldr	r0, [pc, #24]	; (8000314 <WR_Interrupt_Service+0xa8>)
 80002fa:	f000 fffb 	bl	80012f4 <RingWriteElement>
	}
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	200008e8 	.word	0x200008e8
 8000308:	20000448 	.word	0x20000448
 800030c:	08007018 	.word	0x08007018
 8000310:	200000f8 	.word	0x200000f8
 8000314:	20000570 	.word	0x20000570
 8000318:	08007020 	.word	0x08007020
 800031c:	20000c46 	.word	0x20000c46
 8000320:	20000c0c 	.word	0x20000c0c

08000324 <FCT_Interrupt_Service>:


void FCT_Interrupt_Service(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	FCT_Counts++;
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <FCT_Interrupt_Service+0x84>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3301      	adds	r3, #1
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <FCT_Interrupt_Service+0x84>)
 8000330:	6013      	str	r3, [r2, #0]
	if(Lt_Rt_flag==1)
 8000332:	4b1e      	ldr	r3, [pc, #120]	; (80003ac <FCT_Interrupt_Service+0x88>)
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d10a      	bne.n	8000350 <FCT_Interrupt_Service+0x2c>
	{
		FCT_Instant=Timer2_GetTimer();
 800033a:	f000 fbbd 	bl	8000ab8 <Timer2_GetTimer>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <FCT_Interrupt_Service+0x8c>)
 8000344:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 8000346:	491a      	ldr	r1, [pc, #104]	; (80003b0 <FCT_Interrupt_Service+0x8c>)
 8000348:	481a      	ldr	r0, [pc, #104]	; (80003b4 <FCT_Interrupt_Service+0x90>)
 800034a:	f000 ffd3 	bl	80012f4 <RingWriteElement>
		Manual_delay();
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
	}

}
 800034e:	e029      	b.n	80003a4 <FCT_Interrupt_Service+0x80>
	else if(Rt_Lt_flag==1)
 8000350:	4b19      	ldr	r3, [pc, #100]	; (80003b8 <FCT_Interrupt_Service+0x94>)
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d125      	bne.n	80003a4 <FCT_Interrupt_Service+0x80>
		FCT_Instant=Timer2_GetTimer();
 8000358:	f000 fbae 	bl	8000ab8 <Timer2_GetTimer>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <FCT_Interrupt_Service+0x8c>)
 8000362:	601a      	str	r2, [r3, #0]
		RingWriteElement(&FCT_Ring,&FCT_Instant);
 8000364:	4912      	ldr	r1, [pc, #72]	; (80003b0 <FCT_Interrupt_Service+0x8c>)
 8000366:	4813      	ldr	r0, [pc, #76]	; (80003b4 <FCT_Interrupt_Service+0x90>)
 8000368:	f000 ffc4 	bl	80012f4 <RingWriteElement>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000372:	4812      	ldr	r0, [pc, #72]	; (80003bc <FCT_Interrupt_Service+0x98>)
 8000374:	f003 f9aa 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000382:	f003 f9a3 	bl	80036cc <HAL_GPIO_WritePin>
		Manual_delay();
 8000386:	f7ff ff27 	bl	80001d8 <Manual_delay>
		HAL_GPIO_WritePin(GPIOB,CA_OP_Pin,GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000390:	480a      	ldr	r0, [pc, #40]	; (80003bc <FCT_Interrupt_Service+0x98>)
 8000392:	f003 f99b 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,CA_OP1_Pin,GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800039c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a0:	f003 f994 	bl	80036cc <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000594 	.word	0x20000594
 80003ac:	20000448 	.word	0x20000448
 80003b0:	20000464 	.word	0x20000464
 80003b4:	200008c8 	.word	0x200008c8
 80003b8:	20000c0c 	.word	0x20000c0c
 80003bc:	48000400 	.word	0x48000400

080003c0 <WL_Interrupt_Service>:

void WL_Interrupt_Service(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	WL_Counts++;
 80003c4:	4b24      	ldr	r3, [pc, #144]	; (8000458 <WL_Interrupt_Service+0x98>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	3301      	adds	r3, #1
 80003ca:	4a23      	ldr	r2, [pc, #140]	; (8000458 <WL_Interrupt_Service+0x98>)
 80003cc:	6013      	str	r3, [r2, #0]
	if(Rt_Lt_flag==0)
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <WL_Interrupt_Service+0x9c>)
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d12e      	bne.n	8000434 <WL_Interrupt_Service+0x74>
	{
		switch(WL_Counts)
 80003d6:	4b20      	ldr	r3, [pc, #128]	; (8000458 <WL_Interrupt_Service+0x98>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d002      	beq.n	80003e4 <WL_Interrupt_Service+0x24>
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d012      	beq.n	8000408 <WL_Interrupt_Service+0x48>
 80003e2:	e028      	b.n	8000436 <WL_Interrupt_Service+0x76>
		{
		case(1):
				send(0, (uint8_t *)INIT_CMD,strlen(INIT_CMD));
 80003e4:	2206      	movs	r2, #6
 80003e6:	491e      	ldr	r1, [pc, #120]	; (8000460 <WL_Interrupt_Service+0xa0>)
 80003e8:	2000      	movs	r0, #0
 80003ea:	f001 fa77 	bl	80018dc <send>
				Timer2_Start();
 80003ee:	f000 fb59 	bl	8000aa4 <Timer2_Start>
				WL_Instant=Timer2_GetTimer();
 80003f2:	f000 fb61 	bl	8000ab8 <Timer2_GetTimer>
 80003f6:	4603      	mov	r3, r0
 80003f8:	461a      	mov	r2, r3
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <WL_Interrupt_Service+0xa4>)
 80003fc:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WL_Ring,&WL_Instant);
 80003fe:	4919      	ldr	r1, [pc, #100]	; (8000464 <WL_Interrupt_Service+0xa4>)
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <WL_Interrupt_Service+0xa8>)
 8000402:	f000 ff77 	bl	80012f4 <RingWriteElement>
				break;
 8000406:	e016      	b.n	8000436 <WL_Interrupt_Service+0x76>

		case(2):
				send(0, (uint8_t *)GRAB_START_CMD,strlen(GRAB_START_CMD));
 8000408:	220b      	movs	r2, #11
 800040a:	4918      	ldr	r1, [pc, #96]	; (800046c <WL_Interrupt_Service+0xac>)
 800040c:	2000      	movs	r0, #0
 800040e:	f001 fa65 	bl	80018dc <send>
				Entry_flag=1;
 8000412:	4b17      	ldr	r3, [pc, #92]	; (8000470 <WL_Interrupt_Service+0xb0>)
 8000414:	2201      	movs	r2, #1
 8000416:	801a      	strh	r2, [r3, #0]
				Lt_Rt_flag=1;
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <WL_Interrupt_Service+0xb4>)
 800041a:	2201      	movs	r2, #1
 800041c:	801a      	strh	r2, [r3, #0]
				WL_Instant=Timer2_GetTimer();
 800041e:	f000 fb4b 	bl	8000ab8 <Timer2_GetTimer>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <WL_Interrupt_Service+0xa4>)
 8000428:	601a      	str	r2, [r3, #0]
				RingWriteElement(&WL_Ring,&WL_Instant);
 800042a:	490e      	ldr	r1, [pc, #56]	; (8000464 <WL_Interrupt_Service+0xa4>)
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <WL_Interrupt_Service+0xa8>)
 800042e:	f000 ff61 	bl	80012f4 <RingWriteElement>
				break;
 8000432:	e000      	b.n	8000436 <WL_Interrupt_Service+0x76>
		}

	}
 8000434:	bf00      	nop

	if(Entry_flag==1)
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <WL_Interrupt_Service+0xb0>)
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	2b01      	cmp	r3, #1
 800043c:	d109      	bne.n	8000452 <WL_Interrupt_Service+0x92>
	{
		WL_Instant=Timer2_GetTimer();
 800043e:	f000 fb3b 	bl	8000ab8 <Timer2_GetTimer>
 8000442:	4603      	mov	r3, r0
 8000444:	461a      	mov	r2, r3
 8000446:	4b07      	ldr	r3, [pc, #28]	; (8000464 <WL_Interrupt_Service+0xa4>)
 8000448:	601a      	str	r2, [r3, #0]
		RingWriteElement(&WL_Ring,&WL_Instant);
 800044a:	4906      	ldr	r1, [pc, #24]	; (8000464 <WL_Interrupt_Service+0xa4>)
 800044c:	4806      	ldr	r0, [pc, #24]	; (8000468 <WL_Interrupt_Service+0xa8>)
 800044e:	f000 ff51 	bl	80012f4 <RingWriteElement>
	}
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000046c 	.word	0x2000046c
 800045c:	20000c0c 	.word	0x20000c0c
 8000460:	08007018 	.word	0x08007018
 8000464:	20000c48 	.word	0x20000c48
 8000468:	200000fc 	.word	0x200000fc
 800046c:	08007020 	.word	0x08007020
 8000470:	20000c46 	.word	0x20000c46
 8000474:	20000448 	.word	0x20000448

08000478 <Send_WR_Samples>:
#include "Save_Data.h"

void Send_WR_Samples()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	WR_Roller = (BUFFERSIZE-1)-(WR_Ring.place + 1);
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <Send_WR_Samples+0xa4>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	b2da      	uxtb	r2, r3
 8000484:	f06f 0339 	mvn.w	r3, #57	; 0x39
 8000488:	1a9b      	subs	r3, r3, r2
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b24      	ldr	r3, [pc, #144]	; (8000520 <Send_WR_Samples+0xa8>)
 800048e:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	e036      	b.n	8000504 <Send_WR_Samples+0x8c>
	{
		RingReadElement(&WR_Ring,&WR_Ring_Unit);
 8000496:	4923      	ldr	r1, [pc, #140]	; (8000524 <Send_WR_Samples+0xac>)
 8000498:	4820      	ldr	r0, [pc, #128]	; (800051c <Send_WR_Samples+0xa4>)
 800049a:	f000 ff7b 	bl	8001394 <RingReadElement>
		itoa(WR_Ring_Unit,WR_Ring_Bulletin,10);
 800049e:	4b21      	ldr	r3, [pc, #132]	; (8000524 <Send_WR_Samples+0xac>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	220a      	movs	r2, #10
 80004a4:	4920      	ldr	r1, [pc, #128]	; (8000528 <Send_WR_Samples+0xb0>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	f006 fc68 	bl	8006d7c <itoa>
		unsigned char* WR_Packet;
		WR_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(WR_Ring_Bulletin));
 80004ac:	481e      	ldr	r0, [pc, #120]	; (8000528 <Send_WR_Samples+0xb0>)
 80004ae:	f7ff fe8b 	bl	80001c8 <strlen>
 80004b2:	4603      	mov	r3, r0
 80004b4:	3309      	adds	r3, #9
 80004b6:	4618      	mov	r0, r3
 80004b8:	f006 fc62 	bl	8006d80 <malloc>
 80004bc:	4603      	mov	r3, r0
 80004be:	603b      	str	r3, [r7, #0]
		strcpy(WR_Packet,LOG_WRITE_CMD);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	491a      	ldr	r1, [pc, #104]	; (800052c <Send_WR_Samples+0xb4>)
 80004c4:	461a      	mov	r2, r3
 80004c6:	460b      	mov	r3, r1
 80004c8:	cb03      	ldmia	r3!, {r0, r1}
 80004ca:	6010      	str	r0, [r2, #0]
 80004cc:	6051      	str	r1, [r2, #4]
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	8113      	strh	r3, [r2, #8]
		strcat(WR_Packet,WR_Ring_Bulletin);
 80004d2:	4915      	ldr	r1, [pc, #84]	; (8000528 <Send_WR_Samples+0xb0>)
 80004d4:	6838      	ldr	r0, [r7, #0]
 80004d6:	f006 fd33 	bl	8006f40 <strcat>

		send(0, (buff_size *)WR_Packet,strlen(WR_Packet));
 80004da:	6838      	ldr	r0, [r7, #0]
 80004dc:	f7ff fe74 	bl	80001c8 <strlen>
 80004e0:	4603      	mov	r3, r0
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	6839      	ldr	r1, [r7, #0]
 80004e8:	2000      	movs	r0, #0
 80004ea:	f001 f9f7 	bl	80018dc <send>
		free(WR_Packet);
 80004ee:	6838      	ldr	r0, [r7, #0]
 80004f0:	f006 fc4e 	bl	8006d90 <free>
		WR_Packet=NULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	603b      	str	r3, [r7, #0]

		HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f002 fe3f 	bl	800317c <HAL_Delay>
	for(int Iter=0;Iter<=WR_Roller;Iter++)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3301      	adds	r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <Send_WR_Samples+0xa8>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4293      	cmp	r3, r2
 800050e:	ddc2      	ble.n	8000496 <Send_WR_Samples+0x1e>
	}
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000570 	.word	0x20000570
 8000520:	20000c44 	.word	0x20000c44
 8000524:	20000468 	.word	0x20000468
 8000528:	20000c1c 	.word	0x20000c1c
 800052c:	0800702c 	.word	0x0800702c

08000530 <Send_FCT_Samples>:

void Send_FCT_Samples()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	FCT_Roller = (BUFFERSIZE-1)-(FCT_Ring.place + 1);
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <Send_FCT_Samples+0xa4>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	f06f 0339 	mvn.w	r3, #57	; 0x39
 8000540:	1a9b      	subs	r3, r3, r2
 8000542:	b2da      	uxtb	r2, r3
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <Send_FCT_Samples+0xa8>)
 8000546:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=FCT_Roller;Iter++)
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	e036      	b.n	80005bc <Send_FCT_Samples+0x8c>
	{
		RingReadElement(&FCT_Ring,&FCT_Ring_Unit);
 800054e:	4923      	ldr	r1, [pc, #140]	; (80005dc <Send_FCT_Samples+0xac>)
 8000550:	4820      	ldr	r0, [pc, #128]	; (80005d4 <Send_FCT_Samples+0xa4>)
 8000552:	f000 ff1f 	bl	8001394 <RingReadElement>
		itoa(FCT_Ring_Unit,FCT_Ring_Bulletin,10);
 8000556:	4b21      	ldr	r3, [pc, #132]	; (80005dc <Send_FCT_Samples+0xac>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	220a      	movs	r2, #10
 800055c:	4920      	ldr	r1, [pc, #128]	; (80005e0 <Send_FCT_Samples+0xb0>)
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fc0c 	bl	8006d7c <itoa>
		unsigned char* FCT_Packet;
		FCT_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(FCT_Ring_Bulletin));
 8000564:	481e      	ldr	r0, [pc, #120]	; (80005e0 <Send_FCT_Samples+0xb0>)
 8000566:	f7ff fe2f 	bl	80001c8 <strlen>
 800056a:	4603      	mov	r3, r0
 800056c:	3309      	adds	r3, #9
 800056e:	4618      	mov	r0, r3
 8000570:	f006 fc06 	bl	8006d80 <malloc>
 8000574:	4603      	mov	r3, r0
 8000576:	603b      	str	r3, [r7, #0]
		strcpy(FCT_Packet,LOG_WRITE_CMD);
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	491a      	ldr	r1, [pc, #104]	; (80005e4 <Send_FCT_Samples+0xb4>)
 800057c:	461a      	mov	r2, r3
 800057e:	460b      	mov	r3, r1
 8000580:	cb03      	ldmia	r3!, {r0, r1}
 8000582:	6010      	str	r0, [r2, #0]
 8000584:	6051      	str	r1, [r2, #4]
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	8113      	strh	r3, [r2, #8]
		strcat(FCT_Packet,FCT_Ring_Bulletin);
 800058a:	4915      	ldr	r1, [pc, #84]	; (80005e0 <Send_FCT_Samples+0xb0>)
 800058c:	6838      	ldr	r0, [r7, #0]
 800058e:	f006 fcd7 	bl	8006f40 <strcat>

		send(0, (buff_size *)FCT_Packet,strlen(FCT_Packet));
 8000592:	6838      	ldr	r0, [r7, #0]
 8000594:	f7ff fe18 	bl	80001c8 <strlen>
 8000598:	4603      	mov	r3, r0
 800059a:	b29b      	uxth	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	6839      	ldr	r1, [r7, #0]
 80005a0:	2000      	movs	r0, #0
 80005a2:	f001 f99b 	bl	80018dc <send>
		free(FCT_Packet);
 80005a6:	6838      	ldr	r0, [r7, #0]
 80005a8:	f006 fbf2 	bl	8006d90 <free>
		FCT_Packet=NULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	603b      	str	r3, [r7, #0]
		HAL_Delay(100);
 80005b0:	2064      	movs	r0, #100	; 0x64
 80005b2:	f002 fde3 	bl	800317c <HAL_Delay>
	for(int Iter=0;Iter<=FCT_Roller;Iter++)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3301      	adds	r3, #1
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <Send_FCT_Samples+0xa8>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4293      	cmp	r3, r2
 80005c6:	ddc2      	ble.n	800054e <Send_FCT_Samples+0x1e>
	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200008c8 	.word	0x200008c8
 80005d8:	20000c0e 	.word	0x20000c0e
 80005dc:	20000590 	.word	0x20000590
 80005e0:	200008b8 	.word	0x200008b8
 80005e4:	0800702c 	.word	0x0800702c

080005e8 <Send_WL_Samples>:


void Send_WL_Samples()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	WL_Roller = (BUFFERSIZE-1)-(WL_Ring.place + 1);
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <Send_WL_Samples+0xa4>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	f06f 0339 	mvn.w	r3, #57	; 0x39
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <Send_WL_Samples+0xa8>)
 80005fe:	701a      	strb	r2, [r3, #0]
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	e036      	b.n	8000674 <Send_WL_Samples+0x8c>
	{
		RingReadElement(&WL_Ring,&WL_Ring_Unit);
 8000606:	4923      	ldr	r1, [pc, #140]	; (8000694 <Send_WL_Samples+0xac>)
 8000608:	4820      	ldr	r0, [pc, #128]	; (800068c <Send_WL_Samples+0xa4>)
 800060a:	f000 fec3 	bl	8001394 <RingReadElement>
		itoa(WL_Ring_Unit,WL_Ring_Bulletin,10);
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <Send_WL_Samples+0xac>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	220a      	movs	r2, #10
 8000614:	4920      	ldr	r1, [pc, #128]	; (8000698 <Send_WL_Samples+0xb0>)
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fbb0 	bl	8006d7c <itoa>
		unsigned char* WL_Packet;
		WL_Packet = malloc(strlen(LOG_WRITE_CMD)+strlen(WL_Ring_Bulletin));
 800061c:	481e      	ldr	r0, [pc, #120]	; (8000698 <Send_WL_Samples+0xb0>)
 800061e:	f7ff fdd3 	bl	80001c8 <strlen>
 8000622:	4603      	mov	r3, r0
 8000624:	3309      	adds	r3, #9
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fbaa 	bl	8006d80 <malloc>
 800062c:	4603      	mov	r3, r0
 800062e:	603b      	str	r3, [r7, #0]
		strcpy(WL_Packet,LOG_WRITE_CMD);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	491a      	ldr	r1, [pc, #104]	; (800069c <Send_WL_Samples+0xb4>)
 8000634:	461a      	mov	r2, r3
 8000636:	460b      	mov	r3, r1
 8000638:	cb03      	ldmia	r3!, {r0, r1}
 800063a:	6010      	str	r0, [r2, #0]
 800063c:	6051      	str	r1, [r2, #4]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	8113      	strh	r3, [r2, #8]
		strcat(WL_Packet,WL_Ring_Bulletin);
 8000642:	4915      	ldr	r1, [pc, #84]	; (8000698 <Send_WL_Samples+0xb0>)
 8000644:	6838      	ldr	r0, [r7, #0]
 8000646:	f006 fc7b 	bl	8006f40 <strcat>

		send(0, (buff_size *)WL_Packet,strlen(WL_Packet));
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f7ff fdbc 	bl	80001c8 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29b      	uxth	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	2000      	movs	r0, #0
 800065a:	f001 f93f 	bl	80018dc <send>
		free(WL_Packet);
 800065e:	6838      	ldr	r0, [r7, #0]
 8000660:	f006 fb96 	bl	8006d90 <free>
		WL_Packet=NULL;
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
		HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f002 fd87 	bl	800317c <HAL_Delay>
	for(int Iter=0;Iter<=WL_Roller;Iter++)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <Send_WL_Samples+0xa8>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4293      	cmp	r3, r2
 800067e:	ddc2      	ble.n	8000606 <Send_WL_Samples+0x1e>
	}
}
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000fc 	.word	0x200000fc
 8000690:	20000c4c 	.word	0x20000c4c
 8000694:	200008c4 	.word	0x200008c4
 8000698:	20000c10 	.word	0x20000c10
 800069c:	0800702c 	.word	0x0800702c

080006a0 <Send_Data>:

void Send_Data()
{
 80006a0:	b598      	push	{r3, r4, r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	send(0, (uint8_t *)GRAB_STOP_CMD,strlen(GRAB_STOP_CMD));
 80006a4:	220a      	movs	r2, #10
 80006a6:	4963      	ldr	r1, [pc, #396]	; (8000834 <Send_Data+0x194>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f001 f917 	bl	80018dc <send>
	HAL_Delay(500);
 80006ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b2:	f002 fd63 	bl	800317c <HAL_Delay>
	send(0, (uint8_t *)LOG_START_CMD,strlen(LOG_START_CMD));
 80006b6:	220a      	movs	r2, #10
 80006b8:	495f      	ldr	r1, [pc, #380]	; (8000838 <Send_Data+0x198>)
 80006ba:	2000      	movs	r0, #0
 80006bc:	f001 f90e 	bl	80018dc <send>
	HAL_Delay(500);
 80006c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c4:	f002 fd5a 	bl	800317c <HAL_Delay>

	send(0, (uint8_t *)LOG_WR_CMD,strlen(LOG_WR_CMD));
 80006c8:	220d      	movs	r2, #13
 80006ca:	495c      	ldr	r1, [pc, #368]	; (800083c <Send_Data+0x19c>)
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 f905 	bl	80018dc <send>
	HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d6:	f002 fd51 	bl	800317c <HAL_Delay>

	Send_WR_Samples();//send WR Samples
 80006da:	f7ff fecd 	bl	8000478 <Send_WR_Samples>
	HAL_Delay(500);
 80006de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e2:	f002 fd4b 	bl	800317c <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 80006e6:	220c      	movs	r2, #12
 80006e8:	4955      	ldr	r1, [pc, #340]	; (8000840 <Send_Data+0x1a0>)
 80006ea:	2000      	movs	r0, #0
 80006ec:	f001 f8f6 	bl	80018dc <send>
	HAL_Delay(500);
 80006f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f4:	f002 fd42 	bl	800317c <HAL_Delay>

	send(0, (uint8_t *)LOG_FCT_CMD,strlen(LOG_FCT_CMD));
 80006f8:	220e      	movs	r2, #14
 80006fa:	4952      	ldr	r1, [pc, #328]	; (8000844 <Send_Data+0x1a4>)
 80006fc:	2000      	movs	r0, #0
 80006fe:	f001 f8ed 	bl	80018dc <send>
	HAL_Delay(500);
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f002 fd39 	bl	800317c <HAL_Delay>

	Send_FCT_Samples();//send  Samples
 800070a:	f7ff ff11 	bl	8000530 <Send_FCT_Samples>
	HAL_Delay(500);
 800070e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000712:	f002 fd33 	bl	800317c <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 8000716:	220c      	movs	r2, #12
 8000718:	4949      	ldr	r1, [pc, #292]	; (8000840 <Send_Data+0x1a0>)
 800071a:	2000      	movs	r0, #0
 800071c:	f001 f8de 	bl	80018dc <send>
	HAL_Delay(500);
 8000720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000724:	f002 fd2a 	bl	800317c <HAL_Delay>

	send(0, (uint8_t *)LOG_WL_CMD,strlen(LOG_WL_CMD));
 8000728:	220d      	movs	r2, #13
 800072a:	4947      	ldr	r1, [pc, #284]	; (8000848 <Send_Data+0x1a8>)
 800072c:	2000      	movs	r0, #0
 800072e:	f001 f8d5 	bl	80018dc <send>
	HAL_Delay(500);
 8000732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000736:	f002 fd21 	bl	800317c <HAL_Delay>

	Send_WL_Samples();
 800073a:	f7ff ff55 	bl	80005e8 <Send_WL_Samples>
	HAL_Delay(500);
 800073e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000742:	f002 fd1b 	bl	800317c <HAL_Delay>
	send(0, (uint8_t *)LOG_END_WRITE_CMD,strlen(LOG_END_WRITE_CMD));
 8000746:	220c      	movs	r2, #12
 8000748:	493d      	ldr	r1, [pc, #244]	; (8000840 <Send_Data+0x1a0>)
 800074a:	2000      	movs	r0, #0
 800074c:	f001 f8c6 	bl	80018dc <send>
	HAL_Delay(500);
 8000750:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000754:	f002 fd12 	bl	800317c <HAL_Delay>

	itoa(WR_Counts,WR_Count_Bulletin,10);
 8000758:	4b3c      	ldr	r3, [pc, #240]	; (800084c <Send_Data+0x1ac>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	220a      	movs	r2, #10
 800075e:	493c      	ldr	r1, [pc, #240]	; (8000850 <Send_Data+0x1b0>)
 8000760:	4618      	mov	r0, r3
 8000762:	f006 fb0b 	bl	8006d7c <itoa>
	send(0, (buff_size *)strcat(WR_Count_Bulletin,","),strlen(WR_Count_Bulletin));
 8000766:	483a      	ldr	r0, [pc, #232]	; (8000850 <Send_Data+0x1b0>)
 8000768:	f7ff fd2e 	bl	80001c8 <strlen>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b37      	ldr	r3, [pc, #220]	; (8000850 <Send_Data+0x1b0>)
 8000772:	4413      	add	r3, r2
 8000774:	4937      	ldr	r1, [pc, #220]	; (8000854 <Send_Data+0x1b4>)
 8000776:	461a      	mov	r2, r3
 8000778:	460b      	mov	r3, r1
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	8013      	strh	r3, [r2, #0]
 800077e:	4c34      	ldr	r4, [pc, #208]	; (8000850 <Send_Data+0x1b0>)
 8000780:	4833      	ldr	r0, [pc, #204]	; (8000850 <Send_Data+0x1b0>)
 8000782:	f7ff fd21 	bl	80001c8 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	b29b      	uxth	r3, r3
 800078a:	461a      	mov	r2, r3
 800078c:	4621      	mov	r1, r4
 800078e:	2000      	movs	r0, #0
 8000790:	f001 f8a4 	bl	80018dc <send>

	HAL_Delay(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000798:	f002 fcf0 	bl	800317c <HAL_Delay>
	itoa(FCT_Counts,FCT_Count_Bulletin,10);
 800079c:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <Send_Data+0x1b8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	220a      	movs	r2, #10
 80007a2:	492e      	ldr	r1, [pc, #184]	; (800085c <Send_Data+0x1bc>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f006 fae9 	bl	8006d7c <itoa>
	send(0, (buff_size *)strcat(FCT_Count_Bulletin,","),strlen(FCT_Count_Bulletin));
 80007aa:	482c      	ldr	r0, [pc, #176]	; (800085c <Send_Data+0x1bc>)
 80007ac:	f7ff fd0c 	bl	80001c8 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <Send_Data+0x1bc>)
 80007b6:	4413      	add	r3, r2
 80007b8:	4926      	ldr	r1, [pc, #152]	; (8000854 <Send_Data+0x1b4>)
 80007ba:	461a      	mov	r2, r3
 80007bc:	460b      	mov	r3, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	8013      	strh	r3, [r2, #0]
 80007c2:	4c26      	ldr	r4, [pc, #152]	; (800085c <Send_Data+0x1bc>)
 80007c4:	4825      	ldr	r0, [pc, #148]	; (800085c <Send_Data+0x1bc>)
 80007c6:	f7ff fcff 	bl	80001c8 <strlen>
 80007ca:	4603      	mov	r3, r0
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	4621      	mov	r1, r4
 80007d2:	2000      	movs	r0, #0
 80007d4:	f001 f882 	bl	80018dc <send>

	HAL_Delay(500);
 80007d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007dc:	f002 fcce 	bl	800317c <HAL_Delay>
	itoa(WL_Counts,WL_Count_Bulletin,10);
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <Send_Data+0x1c0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	220a      	movs	r2, #10
 80007e6:	491f      	ldr	r1, [pc, #124]	; (8000864 <Send_Data+0x1c4>)
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fac7 	bl	8006d7c <itoa>
	send(0, (buff_size *)strcat(WL_Count_Bulletin,","),strlen(WL_Count_Bulletin));
 80007ee:	481d      	ldr	r0, [pc, #116]	; (8000864 <Send_Data+0x1c4>)
 80007f0:	f7ff fcea 	bl	80001c8 <strlen>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <Send_Data+0x1c4>)
 80007fa:	4413      	add	r3, r2
 80007fc:	4915      	ldr	r1, [pc, #84]	; (8000854 <Send_Data+0x1b4>)
 80007fe:	461a      	mov	r2, r3
 8000800:	460b      	mov	r3, r1
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	8013      	strh	r3, [r2, #0]
 8000806:	4c17      	ldr	r4, [pc, #92]	; (8000864 <Send_Data+0x1c4>)
 8000808:	4816      	ldr	r0, [pc, #88]	; (8000864 <Send_Data+0x1c4>)
 800080a:	f7ff fcdd 	bl	80001c8 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29b      	uxth	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	4621      	mov	r1, r4
 8000816:	2000      	movs	r0, #0
 8000818:	f001 f860 	bl	80018dc <send>

	HAL_Delay(500);
 800081c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000820:	f002 fcac 	bl	800317c <HAL_Delay>
	send(0, (uint8_t *)LOG_STOP_CMD,strlen(LOG_STOP_CMD));
 8000824:	2209      	movs	r2, #9
 8000826:	4910      	ldr	r1, [pc, #64]	; (8000868 <Send_Data+0x1c8>)
 8000828:	2000      	movs	r0, #0
 800082a:	f001 f857 	bl	80018dc <send>
}
 800082e:	bf00      	nop
 8000830:	bd98      	pop	{r3, r4, r7, pc}
 8000832:	bf00      	nop
 8000834:	08007038 	.word	0x08007038
 8000838:	08007044 	.word	0x08007044
 800083c:	08007050 	.word	0x08007050
 8000840:	08007060 	.word	0x08007060
 8000844:	08007070 	.word	0x08007070
 8000848:	08007080 	.word	0x08007080
 800084c:	200008e8 	.word	0x200008e8
 8000850:	2000011c 	.word	0x2000011c
 8000854:	08007090 	.word	0x08007090
 8000858:	20000594 	.word	0x20000594
 800085c:	2000044c 	.word	0x2000044c
 8000860:	2000046c 	.word	0x2000046c
 8000864:	20000458 	.word	0x20000458
 8000868:	08007094 	.word	0x08007094

0800086c <cs_sel>:
uint8_t  IntStatus;
uint8_t  Sock_Rx_Flag;
uint8_t  Sock_Disconnect_Flag;

void cs_sel(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_RESET); //CS LOW
 8000870:	2200      	movs	r2, #0
 8000872:	2101      	movs	r1, #1
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <cs_sel+0x14>)
 8000876:	f002 ff29 	bl	80036cc <HAL_GPIO_WritePin>
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	48000400 	.word	0x48000400

08000884 <cs_desel>:

void cs_desel(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET); //CS HIGH
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <cs_desel+0x14>)
 800088e:	f002 ff1d 	bl	80036cc <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	48000400 	.word	0x48000400

0800089c <Init_Ethernet>:


void Init_Ethernet(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
	uint8_t bufSize[] = {2, 2, 2, 2};
 80008a2:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 80008a6:	61fb      	str	r3, [r7, #28]

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 80008a8:	4922      	ldr	r1, [pc, #136]	; (8000934 <Init_Ethernet+0x98>)
 80008aa:	4823      	ldr	r0, [pc, #140]	; (8000938 <Init_Ethernet+0x9c>)
 80008ac:	f001 ff6c 	bl	8002788 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80008b0:	4922      	ldr	r1, [pc, #136]	; (800093c <Init_Ethernet+0xa0>)
 80008b2:	4823      	ldr	r0, [pc, #140]	; (8000940 <Init_Ethernet+0xa4>)
 80008b4:	f001 ff8e 	bl	80027d4 <reg_wizchip_spi_cbfunc>

	wizchip_init(bufSize, bufSize);
 80008b8:	f107 021c 	add.w	r2, r7, #28
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 f8dc 	bl	8002a80 <wizchip_init>
	wiz_NetInfo netInfo = { .mac = {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef}, // Mac address
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	f8c3 2013 	str.w	r2, [r3, #19]
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <Init_Ethernet+0xa8>)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e2:	6018      	str	r0, [r3, #0]
 80008e4:	3304      	adds	r3, #4
 80008e6:	8019      	strh	r1, [r3, #0]
 80008e8:	4a17      	ldr	r2, [pc, #92]	; (8000948 <Init_Ethernet+0xac>)
 80008ea:	f107 030a 	add.w	r3, r7, #10
 80008ee:	6810      	ldr	r0, [r2, #0]
 80008f0:	6018      	str	r0, [r3, #0]
 80008f2:	4a16      	ldr	r2, [pc, #88]	; (800094c <Init_Ethernet+0xb0>)
 80008f4:	f107 030e 	add.w	r3, r7, #14
 80008f8:	6810      	ldr	r0, [r2, #0]
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <Init_Ethernet+0xb4>)
 80008fe:	f107 0312 	add.w	r3, r7, #18
 8000902:	6810      	ldr	r0, [r2, #0]
 8000904:	6018      	str	r0, [r3, #0]
	 .ip = {192, 168, 1, 204},    // IP address
	 .sn = {255, 255, 255, 0},    // Subnet mask
	 .gw = {192, 168, 1, 1}};    // Gateway address

	wizchip_setnetinfo(&netInfo);
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fb27 	bl	8002f5c <wizchip_setnetinfo>
	wizchip_getnetinfo(&netInfo);
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fb63 	bl	8002fdc <wizchip_getnetinfo>

	setSn_IMR(0, 0x06);
 8000916:	2106      	movs	r1, #6
 8000918:	f642 4008 	movw	r0, #11272	; 0x2c08
 800091c:	f001 fc8c 	bl	8002238 <WIZCHIP_WRITE>
	WIZCHIP_WRITE(SIMR,0x01);
 8000920:	2101      	movs	r1, #1
 8000922:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8000926:	f001 fc87 	bl	8002238 <WIZCHIP_WRITE>
}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	08000885 	.word	0x08000885
 8000938:	0800086d 	.word	0x0800086d
 800093c:	08000a45 	.word	0x08000a45
 8000940:	08000a21 	.word	0x08000a21
 8000944:	080070a0 	.word	0x080070a0
 8000948:	080070a8 	.word	0x080070a8
 800094c:	080070ac 	.word	0x080070ac
 8000950:	080070b0 	.word	0x080070b0

08000954 <Ethernet_Connect>:

void Ethernet_Connect(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	Init_Ethernet();
 8000958:	f7ff ffa0 	bl	800089c <Init_Ethernet>


	while(Connect_Reply !=SOCK_OK)
 800095c:	e012      	b.n	8000984 <Ethernet_Connect+0x30>
	{
		socket(0, Sn_MR_TCP, PORT_ADDR, SF_TCP_NODELAY);
 800095e:	2320      	movs	r3, #32
 8000960:	f242 328b 	movw	r2, #9099	; 0x238b
 8000964:	2101      	movs	r1, #1
 8000966:	2000      	movs	r0, #0
 8000968:	f000 fd58 	bl	800141c <socket>
		Refresh_Watchdog();
 800096c:	f000 f822 	bl	80009b4 <Refresh_Watchdog>
		Connect_Reply = connect(0,server_Add,PORT_ADDR);
 8000970:	f242 328b 	movw	r2, #9099	; 0x238b
 8000974:	490d      	ldr	r1, [pc, #52]	; (80009ac <Ethernet_Connect+0x58>)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fed4 	bl	8001724 <connect>
 800097c:	4603      	mov	r3, r0
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <Ethernet_Connect+0x5c>)
 8000982:	701a      	strb	r2, [r3, #0]
	while(Connect_Reply !=SOCK_OK)
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <Ethernet_Connect+0x5c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d1e8      	bne.n	800095e <Ethernet_Connect+0xa>
	}

	if(Connect_Reply == 1)
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <Ethernet_Connect+0x5c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d102      	bne.n	800099a <Ethernet_Connect+0x46>
	{
		Connect_Reply = 0;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <Ethernet_Connect+0x5c>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
		//sprintf((char*)msg, IP_MSG, server_IP[0], server_IP[1], server_IP[2], server_IP[3]);
		//HAL_UART_Transmit(&huart2, (uint8_t*)"Connection Established with Server ", 35, 100);
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((const char*)msg), 100);
	}
	HAL_Delay(500);
 800099a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099e:	f002 fbed 	bl	800317c <HAL_Delay>
	Refresh_Watchdog();
 80009a2:	f000 f807 	bl	80009b4 <Refresh_Watchdog>

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20001452 	.word	0x20001452

080009b4 <Refresh_Watchdog>:

void Refresh_Watchdog(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	IWDG->KR  = 0x0000AAAA;
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <Refresh_Watchdog+0x18>)
 80009ba:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40003000 	.word	0x40003000

080009d0 <Get_event>:
#include"event.h"

struct EventStruct test_Events = {NULL_Event,NULL_Event};

myEvents Get_event()
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

	return test_Events.Next_Event;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <Get_event+0x14>)
 80009d6:	785b      	ldrb	r3, [r3, #1]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	200000c4 	.word	0x200000c4

080009e8 <Set_event>:

void Set_event(myEvents N_E)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	test_Events.Next_Event = N_E;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <Set_event+0x1c>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	7053      	strb	r3, [r2, #1]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	200000c4 	.word	0x200000c4

08000a08 <Reset_event>:



void Reset_event()
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	test_Events.Next_Event=NULL_Event;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <Reset_event+0x14>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	705a      	strb	r2, [r3, #1]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	200000c4 	.word	0x200000c4

08000a20 <spi_rb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi_rb(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi3, &rbuf, 1, 0xffffffff);
 8000a26:	1df9      	adds	r1, r7, #7
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4804      	ldr	r0, [pc, #16]	; (8000a40 <spi_rb+0x20>)
 8000a30:	f004 fdd0 	bl	80055d4 <HAL_SPI_Receive>
	return rbuf;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200014b8 	.word	0x200014b8

08000a44 <spi_wb>:

void spi_wb(uint8_t b)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xffffffff);
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	f04f 33ff 	mov.w	r3, #4294967295
 8000a54:	2201      	movs	r2, #1
 8000a56:	4803      	ldr	r0, [pc, #12]	; (8000a64 <spi_wb+0x20>)
 8000a58:	f004 fc4e 	bl	80052f8 <HAL_SPI_Transmit>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200014b8 	.word	0x200014b8

08000a68 <Timer2_Stop>:

void Timer2_Stop()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim2);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <Timer2_Stop+0x10>)
 8000a6e:	f005 fbb1 	bl	80061d4 <HAL_TIM_Base_Stop>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000153c 	.word	0x2000153c

08000a7c <Timer2_DeInitilized>:

void Timer2_DeInitilized()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&htim2);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <Timer2_DeInitilized+0x10>)
 8000a82:	f005 fafe 	bl	8006082 <HAL_TIM_Base_DeInit>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000153c 	.word	0x2000153c

08000a90 <Timer2_Initilized>:

void Timer2_Initilized()
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Init(&htim2);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <Timer2_Initilized+0x10>)
 8000a96:	f005 fa9d 	bl	8005fd4 <HAL_TIM_Base_Init>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000153c 	.word	0x2000153c

08000aa4 <Timer2_Start>:

void Timer2_Start()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <Timer2_Start+0x10>)
 8000aaa:	f005 fb47 	bl	800613c <HAL_TIM_Base_Start>
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000153c 	.word	0x2000153c

08000ab8 <Timer2_GetTimer>:

int Timer2_GetTimer()
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
	uint32_t Tim_val = __HAL_TIM_GetCounter(&htim2);
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <Timer2_GetTimer+0x1c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac4:	607b      	str	r3, [r7, #4]
	return Tim_val;
 8000ac6:	687b      	ldr	r3, [r7, #4]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	2000153c 	.word	0x2000153c

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f002 fae8 	bl	80030b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f88e 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 fa4c 	bl	8000f80 <MX_GPIO_Init>
  MX_RTC_Init();
 8000ae8:	f000 f8f2 	bl	8000cd0 <MX_RTC_Init>
  MX_SPI2_Init();
 8000aec:	f000 f94a 	bl	8000d84 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000af0:	f000 f986 	bl	8000e00 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000af4:	f000 f9c2 	bl	8000e7c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000af8:	f000 fa0e 	bl	8000f18 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(Get_state())
 8000afc:	f001 f89e 	bl	8001c3c <Get_state>
 8000b00:	4603      	mov	r3, r0
 8000b02:	3b01      	subs	r3, #1
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d8f9      	bhi.n	8000afc <main+0x24>
 8000b08:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <main+0x38>)
 8000b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0e:	bf00      	nop
 8000b10:	08000b2d 	.word	0x08000b2d
 8000b14:	08000b41 	.word	0x08000b41
 8000b18:	08000b51 	.word	0x08000b51
 8000b1c:	08000ba1 	.word	0x08000ba1
 8000b20:	08000bb1 	.word	0x08000bb1
 8000b24:	08000bc1 	.word	0x08000bc1
 8000b28:	08000bd1 	.word	0x08000bd1
	  	  {
	  	  case Initilisation_State:
	  		  Initilisation_State_Handler();
 8000b2c:	f001 f8a2 	bl	8001c74 <Initilisation_State_Handler>

	  		  if(Get_event()==Reset_Event)
 8000b30:	f7ff ff4e 	bl	80009d0 <Get_event>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d152      	bne.n	8000be0 <main+0x108>
	  		  {
	  			  Reset_State_Handler();
 8000b3a:	f001 f8d1 	bl	8001ce0 <Reset_State_Handler>
	  		  }
	  		  break;
 8000b3e:	e04f      	b.n	8000be0 <main+0x108>

	  	  case Reset_State:
	  		  if(Get_event()==Idle_Event)
 8000b40:	f7ff ff46 	bl	80009d0 <Get_event>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d14c      	bne.n	8000be4 <main+0x10c>
	  		  {
	  			  Idle_State_Handler();
 8000b4a:	f001 f909 	bl	8001d60 <Idle_State_Handler>
	  		  }
	  		  break;
 8000b4e:	e049      	b.n	8000be4 <main+0x10c>

	  	  case Idle_State:
	  		  if(Get_event()==WRSide_Train_Detect_Event)
 8000b50:	f7ff ff3e 	bl	80009d0 <Get_event>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d102      	bne.n	8000b60 <main+0x88>
	  			  //Nothing should happen in the idle state! It only polls for a change in state. Event setting and getting and state change happens WRT ISR
	  		  {
	  			  WRSide_Train_Presence_State_Handler();
 8000b5a:	f001 f90b 	bl	8001d74 <WRSide_Train_Presence_State_Handler>
 8000b5e:	e006      	b.n	8000b6e <main+0x96>
	  		  }
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
 8000b60:	f7ff ff36 	bl	80009d0 <Get_event>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d101      	bne.n	8000b6e <main+0x96>
	  		  {
	  			  WLSide_Train_Presence_State_Handler();
 8000b6a:	f001 f911 	bl	8001d90 <WLSide_Train_Presence_State_Handler>
	  		  }

	  		  // Check for physical connection.
	  		  ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP); // gets physical status of the TCPIP
 8000b6e:	4923      	ldr	r1, [pc, #140]	; (8000bfc <main+0x124>)
 8000b70:	200f      	movs	r0, #15
 8000b72:	f001 fe5b 	bl	800282c <ctlwizchip>

	  		  //if phy connection NOK, set state to initialization state
	  		  if(Phy_TCP_IP==PHY_LINK_OFF)
 8000b76:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <main+0x124>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <main+0xae>
	  		  {
					//Save the status in the flash memory with date and time stamp+++++++++++++++++++++
	  			  Set_state(Initilisation_State);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f001 f868 	bl	8001c54 <Set_state>
	  			  HAL_Delay(500);
	  			  HAL_Delay(500);
	  			  //send(0, (uint8_t *)PING_CMD,strlen(PING_CMD));
	  		  }

	  		  break;
 8000b84:	e030      	b.n	8000be8 <main+0x110>
	  		  else if(Phy_TCP_IP==PHY_LINK_ON)
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <main+0x124>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d12c      	bne.n	8000be8 <main+0x110>
	  			  HAL_Delay(500);
 8000b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b92:	f002 faf3 	bl	800317c <HAL_Delay>
	  			  HAL_Delay(500);
 8000b96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9a:	f002 faef 	bl	800317c <HAL_Delay>
	  		  break;
 8000b9e:	e023      	b.n	8000be8 <main+0x110>

	  	  case WRSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 8000ba0:	f7ff ff16 	bl	80009d0 <Get_event>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d120      	bne.n	8000bec <main+0x114>
	  		  {
	  			  Train_Exit_State_Handler();
 8000baa:	f001 f8ff 	bl	8001dac <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000bae:	e01d      	b.n	8000bec <main+0x114>

	  	  case WLSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 8000bb0:	f7ff ff0e 	bl	80009d0 <Get_event>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b05      	cmp	r3, #5
 8000bb8:	d11a      	bne.n	8000bf0 <main+0x118>
	  		  {
	  			  Train_Exit_State_Handler();
 8000bba:	f001 f8f7 	bl	8001dac <Train_Exit_State_Handler>
	  		  }
	  		  break;
 8000bbe:	e017      	b.n	8000bf0 <main+0x118>

	  	  case Train_Exit_State:
	  		  if(Get_event()==Log_Data_Event)
 8000bc0:	f7ff ff06 	bl	80009d0 <Get_event>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d114      	bne.n	8000bf4 <main+0x11c>
	  		  {
	  			  Log_Data_State_Handler();
 8000bca:	f001 f8fb 	bl	8001dc4 <Log_Data_State_Handler>
	  		  }
	  		  break;
 8000bce:	e011      	b.n	8000bf4 <main+0x11c>

	  	  case Log_Data_State:
	  		  if(Get_event()==Reset_Event)
 8000bd0:	f7ff fefe 	bl	80009d0 <Get_event>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10e      	bne.n	8000bf8 <main+0x120>
	  		  {
	  			  Reset_State_Handler();
 8000bda:	f001 f881 	bl	8001ce0 <Reset_State_Handler>
	  		  }
	  		  break;
 8000bde:	e00b      	b.n	8000bf8 <main+0x120>
	  		  break;
 8000be0:	bf00      	nop
 8000be2:	e78b      	b.n	8000afc <main+0x24>
	  		  break;
 8000be4:	bf00      	nop
 8000be6:	e789      	b.n	8000afc <main+0x24>
	  		  break;
 8000be8:	bf00      	nop
 8000bea:	e787      	b.n	8000afc <main+0x24>
	  		  break;
 8000bec:	bf00      	nop
 8000bee:	e785      	b.n	8000afc <main+0x24>
	  		  break;
 8000bf0:	bf00      	nop
 8000bf2:	e783      	b.n	8000afc <main+0x24>
	  		  break;
 8000bf4:	bf00      	nop
 8000bf6:	e781      	b.n	8000afc <main+0x24>
	  		  break;
 8000bf8:	bf00      	nop
	  switch(Get_state())
 8000bfa:	e77f      	b.n	8000afc <main+0x24>
 8000bfc:	20000c45 	.word	0x20000c45

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b09c      	sub	sp, #112	; 0x70
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 f8d4 	bl	8006dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 f8c6 	bl	8006dbc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c30:	f002 fd7c 	bl	800372c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c34:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <SystemClock_Config+0xcc>)
 8000c3a:	f023 0318 	bic.w	r3, r3, #24
 8000c3e:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c40:	2305      	movs	r3, #5
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c52:	2301      	movs	r3, #1
 8000c54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000c60:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fd6e 	bl	800374c <HAL_RCC_OscConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c76:	f000 fae9 	bl	800124c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7a:	230f      	movs	r3, #15
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c94:	2102      	movs	r1, #2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fc60 	bl	800455c <HAL_RCC_ClockConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ca2:	f000 fad3 	bl	800124c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000caa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fe89 	bl	80049cc <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cc0:	f000 fac4 	bl	800124c <Error_Handler>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3770      	adds	r7, #112	; 0x70
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <MX_RTC_Init+0xac>)
 8000cea:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <MX_RTC_Init+0xb0>)
 8000cec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_RTC_Init+0xac>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_RTC_Init+0xac>)
 8000cf6:	227f      	movs	r2, #127	; 0x7f
 8000cf8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_RTC_Init+0xac>)
 8000cfc:	22ff      	movs	r2, #255	; 0xff
 8000cfe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_RTC_Init+0xac>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_RTC_Init+0xac>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_RTC_Init+0xac>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d12:	481a      	ldr	r0, [pc, #104]	; (8000d7c <MX_RTC_Init+0xac>)
 8000d14:	f003 ffde 	bl	8004cd4 <HAL_RTC_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d1e:	f000 fa95 	bl	800124c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480f      	ldr	r0, [pc, #60]	; (8000d7c <MX_RTC_Init+0xac>)
 8000d3e:	f004 f85a 	bl	8004df6 <HAL_RTC_SetTime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000d48:	f000 fa80 	bl	800124c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000d50:	2305      	movs	r3, #5
 8000d52:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 8000d54:	2325      	movs	r3, #37	; 0x25
 8000d56:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000d58:	2322      	movs	r3, #34	; 0x22
 8000d5a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_RTC_Init+0xac>)
 8000d64:	f004 f904 	bl	8004f70 <HAL_RTC_SetDate>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000d6e:	f000 fa6d 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000151c 	.word	0x2000151c
 8000d80:	40002800 	.word	0x40002800

08000d84 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <MX_SPI2_Init+0x78>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d94:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000d9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000dde:	2208      	movs	r2, #8
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_SPI2_Init+0x74>)
 8000de4:	f004 f9dd 	bl	80051a2 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dee:	f000 fa2d 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20001454 	.word	0x20001454
 8000dfc:	40003800 	.word	0x40003800

08000e00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <MX_SPI3_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e5a:	2208      	movs	r2, #8
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_SPI3_Init+0x74>)
 8000e60:	f004 f99f 	bl	80051a2 <HAL_SPI_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 f9ef 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200014b8 	.word	0x200014b8
 8000e78:	40003c00 	.word	0x40003c00

08000e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ea4:	2245      	movs	r2, #69	; 0x45
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF-1;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eb0:	f06f 0201 	mvn.w	r2, #1
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ec4:	f005 f886 	bl	8005fd4 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ece:	f000 f9bd 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ee0:	f005 f99f 	bl	8006222 <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eea:	f000 f9af 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000efc:	f005 fb62 	bl	80065c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f000 f9a1 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	3720      	adds	r7, #32
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000153c 	.word	0x2000153c

08000f18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <MX_USART2_UART_Init+0x64>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f56:	2210      	movs	r2, #16
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f60:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x60>)
 8000f64:	f005 fb94 	bl	8006690 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000f6e:	f000 f96d 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20001588 	.word	0x20001588
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b56      	ldr	r3, [pc, #344]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	4a55      	ldr	r2, [pc, #340]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fa0:	6153      	str	r3, [r2, #20]
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b50      	ldr	r3, [pc, #320]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fb8:	6153      	str	r3, [r2, #20]
 8000fba:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a49      	ldr	r2, [pc, #292]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a43      	ldr	r2, [pc, #268]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <MX_GPIO_Init+0x170>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	483e      	ldr	r0, [pc, #248]	; (80010f4 <MX_GPIO_Init+0x174>)
 8000ffc:	f002 fb66 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001006:	483b      	ldr	r0, [pc, #236]	; (80010f4 <MX_GPIO_Init+0x174>)
 8001008:	f002 fb60 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CA_OP1_Pin|LA_OP1_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001012:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001016:	f002 fb59 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f002 fb52 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WR_IP_Pin WL_IP_Pin F_IP_Pin */
  GPIO_InitStruct.Pin = WR_IP_Pin|WL_IP_Pin|F_IP_Pin;
 8001028:	2323      	movs	r3, #35	; 0x23
 800102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001032:	2301      	movs	r3, #1
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001040:	f002 f9d2 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_CS_Pin;
 8001044:	2301      	movs	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4826      	ldr	r0, [pc, #152]	; (80010f4 <MX_GPIO_Init+0x174>)
 800105c:	f002 f9c4 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_INT_Pin */
  GPIO_InitStruct.Pin = LAN_INT_Pin;
 8001060:	2304      	movs	r3, #4
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001064:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106a:	2301      	movs	r3, #1
 800106c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_INT_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <MX_GPIO_Init+0x174>)
 8001076:	f002 f9b7 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 CA_OP_Pin LA_OP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin;
 800107a:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4818      	ldr	r0, [pc, #96]	; (80010f4 <MX_GPIO_Init+0x174>)
 8001094:	f002 f9a8 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CA_OP1_Pin LA_OP1_Pin LAN_RESET_Pin */
  GPIO_InitStruct.Pin = CA_OP1_Pin|LA_OP1_Pin|LAN_RESET_Pin;
 8001098:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f002 f998 	bl	80033e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2006      	movs	r0, #6
 80010be:	f002 f95c 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010c2:	2006      	movs	r0, #6
 80010c4:	f002 f975 	bl	80033b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2007      	movs	r0, #7
 80010ce:	f002 f954 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010d2:	2007      	movs	r0, #7
 80010d4:	f002 f96d 	bl	80033b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2017      	movs	r0, #23
 80010de:	f002 f94c 	bl	800337a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e2:	2017      	movs	r0, #23
 80010e4:	f002 f965 	bl	80033b2 <HAL_NVIC_EnableIRQ>

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400

080010f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed
   */

  switch(GPIO_Pin)
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	3b01      	subs	r3, #1
 8001106:	2b1f      	cmp	r3, #31
 8001108:	f200 8097 	bhi.w	800123a <HAL_GPIO_EXTI_Callback+0x142>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <HAL_GPIO_EXTI_Callback+0x1c>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001195 	.word	0x08001195
 8001118:	080011d3 	.word	0x080011d3
 800111c:	0800123b 	.word	0x0800123b
 8001120:	0800122f 	.word	0x0800122f
 8001124:	0800123b 	.word	0x0800123b
 8001128:	0800123b 	.word	0x0800123b
 800112c:	0800123b 	.word	0x0800123b
 8001130:	0800123b 	.word	0x0800123b
 8001134:	0800123b 	.word	0x0800123b
 8001138:	0800123b 	.word	0x0800123b
 800113c:	0800123b 	.word	0x0800123b
 8001140:	0800123b 	.word	0x0800123b
 8001144:	0800123b 	.word	0x0800123b
 8001148:	0800123b 	.word	0x0800123b
 800114c:	0800123b 	.word	0x0800123b
 8001150:	0800123b 	.word	0x0800123b
 8001154:	0800123b 	.word	0x0800123b
 8001158:	0800123b 	.word	0x0800123b
 800115c:	0800123b 	.word	0x0800123b
 8001160:	0800123b 	.word	0x0800123b
 8001164:	0800123b 	.word	0x0800123b
 8001168:	0800123b 	.word	0x0800123b
 800116c:	0800123b 	.word	0x0800123b
 8001170:	0800123b 	.word	0x0800123b
 8001174:	0800123b 	.word	0x0800123b
 8001178:	0800123b 	.word	0x0800123b
 800117c:	0800123b 	.word	0x0800123b
 8001180:	0800123b 	.word	0x0800123b
 8001184:	0800123b 	.word	0x0800123b
 8001188:	0800123b 	.word	0x0800123b
 800118c:	0800123b 	.word	0x0800123b
 8001190:	08001211 	.word	0x08001211
  {
  case WR_IP_Pin:
	  switch(Get_state()){
 8001194:	f000 fd52 	bl	8001c3c <Get_state>
 8001198:	4603      	mov	r3, r0
 800119a:	2b05      	cmp	r3, #5
 800119c:	d00c      	beq.n	80011b8 <HAL_GPIO_EXTI_Callback+0xc0>
 800119e:	2b05      	cmp	r3, #5
 80011a0:	dc0d      	bgt.n	80011be <HAL_GPIO_EXTI_Callback+0xc6>
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d002      	beq.n	80011ac <HAL_GPIO_EXTI_Callback+0xb4>
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_EXTI_Callback+0xba>
 80011aa:	e008      	b.n	80011be <HAL_GPIO_EXTI_Callback+0xc6>
	  case Idle_State:
		  Set_event(WRSide_Train_Detect_Event);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff fc1b 	bl	80009e8 <Set_event>
	  case WRSide_Train_Presence_State:
		  WR_Interrupt_Service();
 80011b2:	f7ff f85b 	bl	800026c <WR_Interrupt_Service>
		  break;
 80011b6:	e002      	b.n	80011be <HAL_GPIO_EXTI_Callback+0xc6>
	  case WLSide_Train_Presence_State:
		  WR_Interrupt_Service();
 80011b8:	f7ff f858 	bl	800026c <WR_Interrupt_Service>
		  break;
 80011bc:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)//(Counts of WL_Counts==WR_Counts)
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_GPIO_EXTI_Callback+0x14c>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <HAL_GPIO_EXTI_Callback+0x150>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d134      	bne.n	8001234 <HAL_GPIO_EXTI_Callback+0x13c>
	  {
		  Set_event(Train_Exit_Event);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f7ff fc0c 	bl	80009e8 <Set_event>
	  }
	  break;
 80011d0:	e030      	b.n	8001234 <HAL_GPIO_EXTI_Callback+0x13c>

  case WL_IP_Pin:

	  switch(Get_state()){
 80011d2:	f000 fd33 	bl	8001c3c <Get_state>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d00c      	beq.n	80011f6 <HAL_GPIO_EXTI_Callback+0xfe>
 80011dc:	2b05      	cmp	r3, #5
 80011de:	dc0d      	bgt.n	80011fc <HAL_GPIO_EXTI_Callback+0x104>
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d002      	beq.n	80011ea <HAL_GPIO_EXTI_Callback+0xf2>
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_EXTI_Callback+0xf8>
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_EXTI_Callback+0x104>
	  case Idle_State:
		  Set_event(WLSide_Train_Detect_Event);
 80011ea:	2004      	movs	r0, #4
 80011ec:	f7ff fbfc 	bl	80009e8 <Set_event>
	  case WRSide_Train_Presence_State:
		  WL_Interrupt_Service();
 80011f0:	f7ff f8e6 	bl	80003c0 <WL_Interrupt_Service>
		  break;
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_EXTI_Callback+0x104>
	  case WLSide_Train_Presence_State:
		  WL_Interrupt_Service();
 80011f6:	f7ff f8e3 	bl	80003c0 <WL_Interrupt_Service>
		  break;
 80011fa:	bf00      	nop
	  }

	  if (WR_Counts==WL_Counts)
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_GPIO_EXTI_Callback+0x14c>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_GPIO_EXTI_Callback+0x150>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d117      	bne.n	8001238 <HAL_GPIO_EXTI_Callback+0x140>
	  {
		  Set_event(Train_Exit_Event);
 8001208:	2005      	movs	r0, #5
 800120a:	f7ff fbed 	bl	80009e8 <Set_event>
	  }

	  break;
 800120e:	e013      	b.n	8001238 <HAL_GPIO_EXTI_Callback+0x140>


  case F_IP_Pin:

	  switch(Get_state())
 8001210:	f000 fd14 	bl	8001c3c <Get_state>
 8001214:	4603      	mov	r3, r0
 8001216:	2b04      	cmp	r3, #4
 8001218:	d002      	beq.n	8001220 <HAL_GPIO_EXTI_Callback+0x128>
 800121a:	2b05      	cmp	r3, #5
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_EXTI_Callback+0x12e>
		  break;
	  case WLSide_Train_Presence_State:
		  FCT_Interrupt_Service();
		  break;
	  }
	  break;
 800121e:	e00c      	b.n	800123a <HAL_GPIO_EXTI_Callback+0x142>
		  FCT_Interrupt_Service();
 8001220:	f7ff f880 	bl	8000324 <FCT_Interrupt_Service>
		  break;
 8001224:	e002      	b.n	800122c <HAL_GPIO_EXTI_Callback+0x134>
		  FCT_Interrupt_Service();
 8001226:	f7ff f87d 	bl	8000324 <FCT_Interrupt_Service>
		  break;
 800122a:	bf00      	nop
	  break;
 800122c:	e005      	b.n	800123a <HAL_GPIO_EXTI_Callback+0x142>

  case LAN_INT_Pin:

	  Lan_Interrupt_Service();
 800122e:	f7fe ffe7 	bl	8000200 <Lan_Interrupt_Service>
	  break;
 8001232:	e002      	b.n	800123a <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 8001234:	bf00      	nop
 8001236:	e000      	b.n	800123a <HAL_GPIO_EXTI_Callback+0x142>
	  break;
 8001238:	bf00      	nop
  }
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200008e8 	.word	0x200008e8
 8001248:	2000046c 	.word	0x2000046c

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <RingInit>:
uint32_t RingGetDataCnt (RingBuffer_t* buffer){
	return buffer -> size - RingGetSpace(buffer);
}

/* DONE: Add null pointer exceptions. */
RingStatus_t RingInit (RingBuffer_t* buffer, void* arrayBuffer, size_t bufferSize, size_t elementSize){
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	603b      	str	r3, [r7, #0]
	if(NULL == buffer) return NO_PTR;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <RingInit+0x1a>
 800126e:	f06f 0302 	mvn.w	r3, #2
 8001272:	e03b      	b.n	80012ec <RingInit+0x92>
	if(NULL == arrayBuffer) return NO_PTR;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <RingInit+0x26>
 800127a:	f06f 0302 	mvn.w	r3, #2
 800127e:	e035      	b.n	80012ec <RingInit+0x92>

	memset(buffer, 0, sizeof(RingBuffer_t));
 8001280:	2220      	movs	r2, #32
 8001282:	2100      	movs	r1, #0
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f005 fd99 	bl	8006dbc <memset>

	if(arrayBuffer == NULL) return NO_PTR;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <RingInit+0x3c>
 8001290:	f06f 0302 	mvn.w	r3, #2
 8001294:	e02a      	b.n	80012ec <RingInit+0x92>
	if(bufferSize <= 0) return NO_DATA;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <RingInit+0x48>
 800129c:	f06f 0301 	mvn.w	r3, #1
 80012a0:	e024      	b.n	80012ec <RingInit+0x92>

	buffer -> buffer = arrayBuffer;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	61da      	str	r2, [r3, #28]
	buffer -> size = bufferSize;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
	buffer -> place = buffer -> size - 1;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	619a      	str	r2, [r3, #24]
	buffer -> writePtr = 0;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	buffer -> readPtr = 0;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
	buffer -> elementSize = elementSize;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	605a      	str	r2, [r3, #4]
	buffer -> sizeB = buffer -> elementSize * buffer -> size;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	fb02 f203 	mul.w	r2, r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	609a      	str	r2, [r3, #8]

	memset(buffer -> buffer, 0, buffer -> sizeB);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	69d8      	ldr	r0, [r3, #28]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	461a      	mov	r2, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	f005 fd69 	bl	8006dbc <memset>
	return OK;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <RingWriteElement>:
		return NO_PTR;
	}
	return RingInit(buffer, ptr, bufferSize, elementSize);
}

RingStatus_t RingWriteElement (RingBuffer_t* buffer, void* data){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 80012fe:	2301      	movs	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]

	if(buffer == NULL) return NO_PTR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <RingWriteElement+0x1a>
 8001308:	f06f 0302 	mvn.w	r3, #2
 800130c:	e03e      	b.n	800138c <RingWriteElement+0x98>
	if(data == NULL) return NO_PTR;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <RingWriteElement+0x26>
 8001314:	f06f 0302 	mvn.w	r3, #2
 8001318:	e038      	b.n	800138c <RingWriteElement+0x98>
	if(buffer -> buffer == NULL) return NO_PTR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <RingWriteElement+0x34>
 8001322:	f06f 0302 	mvn.w	r3, #2
 8001326:	e031      	b.n	800138c <RingWriteElement+0x98>

	uint32_t tempHead = buffer -> writePtr;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	61bb      	str	r3, [r7, #24]
	uint32_t tempTail = buffer -> readPtr;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
	size_t bufferSize = buffer -> sizeB;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	60fb      	str	r3, [r7, #12]

	void* wrPtr;
	wrPtr = buffer -> buffer + tempHead;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69da      	ldr	r2, [r3, #28]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4413      	add	r3, r2
 8001348:	60bb      	str	r3, [r7, #8]

	tempHead = MODULO_BUF(tempHead + elSize, bufferSize);
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4413      	add	r3, r2
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	fbb3 f2f2 	udiv	r2, r3, r2
 8001356:	68f9      	ldr	r1, [r7, #12]
 8001358:	fb01 f202 	mul.w	r2, r1, r2
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
	if(tempHead != tempTail){
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	d00d      	beq.n	8001384 <RingWriteElement+0x90>
		memcpy(wrPtr, data, elSize);
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	6839      	ldr	r1, [r7, #0]
 800136c:	68b8      	ldr	r0, [r7, #8]
 800136e:	f005 fd17 	bl	8006da0 <memcpy>
		buffer -> writePtr = tempHead;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	611a      	str	r2, [r3, #16]
		buffer -> place --;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
 8001382:	e001      	b.n	8001388 <RingWriteElement+0x94>
	}else{
		retval = NO_PLACE;
 8001384:	23ff      	movs	r3, #255	; 0xff
 8001386:	77fb      	strb	r3, [r7, #31]
	}
	return retval;
 8001388:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <RingReadElement>:
	}

	return retval;
}

RingStatus_t RingReadElement (RingBuffer_t* buffer, void* data){
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	RingStatus_t retval = OK;
 800139e:	2301      	movs	r3, #1
 80013a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t tempHead = buffer -> writePtr;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	623b      	str	r3, [r7, #32]
	uint32_t tempTail = buffer -> readPtr;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	61fb      	str	r3, [r7, #28]
	uint32_t tempPlace = buffer -> place;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	61bb      	str	r3, [r7, #24]
	size_t bufferSize = buffer -> sizeB;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	617b      	str	r3, [r7, #20]
	size_t elSize = buffer -> elementSize;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
	void* wrPtr;
	wrPtr = buffer -> buffer + tempTail;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

	if(tempHead != tempTail){
 80013cc:	6a3a      	ldr	r2, [r7, #32]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d019      	beq.n	8001408 <RingReadElement+0x74>
		memcpy(data, wrPtr, elSize);
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68f9      	ldr	r1, [r7, #12]
 80013d8:	6838      	ldr	r0, [r7, #0]
 80013da:	f005 fce1 	bl	8006da0 <memcpy>
		tempTail = MODULO_BUF(tempTail + elSize, bufferSize);
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4413      	add	r3, r2
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80013ea:	6979      	ldr	r1, [r7, #20]
 80013ec:	fb01 f202 	mul.w	r2, r1, r2
 80013f0:	1a9b      	subs	r3, r3, r2
 80013f2:	61fb      	str	r3, [r7, #28]
		tempPlace++;
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3301      	adds	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
		buffer -> readPtr = tempTail;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	615a      	str	r2, [r3, #20]
		buffer -> place = tempPlace;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	619a      	str	r2, [r3, #24]
 8001406:	e002      	b.n	800140e <RingReadElement+0x7a>
	}else{
		retval = NO_DATA;
 8001408:	23fe      	movs	r3, #254	; 0xfe
 800140a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return retval;
 800140e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001412:	4618      	mov	r0, r3
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	4603      	mov	r3, r0
 8001430:	71bb      	strb	r3, [r7, #6]
 8001432:	460b      	mov	r3, r1
 8001434:	80bb      	strh	r3, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b08      	cmp	r3, #8
 800143e:	d902      	bls.n	8001446 <socket+0x2a>
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e0f2      	b.n	800162c <socket+0x210>
	switch(protocol)
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d005      	beq.n	8001458 <socket+0x3c>
 800144c:	2b00      	cmp	r3, #0
 800144e:	dd11      	ble.n	8001474 <socket+0x58>
 8001450:	3b02      	subs	r3, #2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d80e      	bhi.n	8001474 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8001456:	e011      	b.n	800147c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2204      	movs	r2, #4
 800145e:	4619      	mov	r1, r3
 8001460:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001464:	f000 ff36 	bl	80022d4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d105      	bne.n	800147a <socket+0x5e>
 800146e:	f06f 0302 	mvn.w	r3, #2
 8001472:	e0db      	b.n	800162c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001474:	f06f 0304 	mvn.w	r3, #4
 8001478:	e0d8      	b.n	800162c <socket+0x210>
	    break;
 800147a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <socket+0x70>
 8001486:	f06f 0305 	mvn.w	r3, #5
 800148a:	e0cf      	b.n	800162c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d025      	beq.n	80014de <socket+0xc2>
	{
   	switch(protocol)
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d002      	beq.n	800149e <socket+0x82>
 8001498:	2b02      	cmp	r3, #2
 800149a:	d008      	beq.n	80014ae <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800149c:	e024      	b.n	80014e8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d11c      	bne.n	80014e2 <socket+0xc6>
 80014a8:	f06f 0305 	mvn.w	r3, #5
 80014ac:	e0be      	b.n	800162c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80014b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db02      	blt.n	80014c6 <socket+0xaa>
 80014c0:	f06f 0305 	mvn.w	r3, #5
 80014c4:	e0b2      	b.n	800162c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80014d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db06      	blt.n	80014e6 <socket+0xca>
 80014d8:	f06f 0305 	mvn.w	r3, #5
 80014dc:	e0a6      	b.n	800162c <socket+0x210>
   	}
   }
 80014de:	bf00      	nop
 80014e0:	e002      	b.n	80014e8 <socket+0xcc>
   	      break;
 80014e2:	bf00      	nop
 80014e4:	e000      	b.n	80014e8 <socket+0xcc>
   	      break;
 80014e6:	bf00      	nop
	close(sn);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f8ac 	bl	8001648 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	3301      	adds	r3, #1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014fe:	f023 030f 	bic.w	r3, r3, #15
 8001502:	b25a      	sxtb	r2, r3
 8001504:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001508:	4313      	orrs	r3, r2
 800150a:	b25b      	sxtb	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	4619      	mov	r1, r3
 8001510:	f000 fe92 	bl	8002238 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d110      	bne.n	800153c <socket+0x120>
	{
	   port = sock_any_port++;
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <socket+0x218>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	b291      	uxth	r1, r2
 8001522:	4a44      	ldr	r2, [pc, #272]	; (8001634 <socket+0x218>)
 8001524:	8011      	strh	r1, [r2, #0]
 8001526:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <socket+0x218>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001530:	4293      	cmp	r3, r2
 8001532:	d103      	bne.n	800153c <socket+0x120>
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <socket+0x218>)
 8001536:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800153a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	3301      	adds	r3, #1
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001548:	461a      	mov	r2, r3
 800154a:	88bb      	ldrh	r3, [r7, #4]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	b29b      	uxth	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f000 fe6f 	bl	8002238 <WIZCHIP_WRITE>
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	3301      	adds	r3, #1
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001566:	461a      	mov	r2, r3
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f000 fe62 	bl	8002238 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	3301      	adds	r3, #1
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001580:	2101      	movs	r1, #1
 8001582:	4618      	mov	r0, r3
 8001584:	f000 fe58 	bl	8002238 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001588:	bf00      	nop
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	3301      	adds	r3, #1
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fe02 	bl	80021a0 <WIZCHIP_READ>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f3      	bne.n	800158a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2201      	movs	r2, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	b21b      	sxth	r3, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <socket+0x21c>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4013      	ands	r3, r2
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <socket+0x21c>)
 80015be:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <socket+0x21c>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <socket+0x21c>)
 80015dc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2201      	movs	r2, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <socket+0x220>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4013      	ands	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <socket+0x220>)
 80015fa:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <socket+0x224>)
 8001600:	2100      	movs	r1, #0
 8001602:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4a0e      	ldr	r2, [pc, #56]	; (8001644 <socket+0x228>)
 800160a:	2100      	movs	r1, #0
 800160c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800160e:	bf00      	nop
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3301      	adds	r3, #1
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fdbf 	bl	80021a0 <WIZCHIP_READ>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f3      	beq.n	8001610 <socket+0x1f4>
   return (int8_t)sn;
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	20000004 	.word	0x20000004
 8001638:	200000c6 	.word	0x200000c6
 800163c:	200000c8 	.word	0x200000c8
 8001640:	200000cc 	.word	0x200000cc
 8001644:	200000dc 	.word	0x200000dc

08001648 <close>:

int8_t close(uint8_t sn)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d902      	bls.n	800165e <close+0x16>
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	e055      	b.n	800170a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	3301      	adds	r3, #1
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800166a:	2110      	movs	r1, #16
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fde3 	bl	8002238 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001672:	bf00      	nop
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	3301      	adds	r3, #1
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fd8d 	bl	80021a0 <WIZCHIP_READ>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f3      	bne.n	8001674 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3301      	adds	r3, #1
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001698:	211f      	movs	r1, #31
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fdcc 	bl	8002238 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2201      	movs	r2, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <close+0xcc>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b21b      	sxth	r3, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <close+0xcc>)
 80016bc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2201      	movs	r2, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <close+0xd0>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4013      	ands	r3, r2
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <close+0xd0>)
 80016da:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <close+0xd4>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <close+0xd8>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80016ee:	bf00      	nop
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	3301      	adds	r3, #1
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fd4f 	bl	80021a0 <WIZCHIP_READ>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f3      	bne.n	80016f0 <close+0xa8>
	return SOCK_OK;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000c6 	.word	0x200000c6
 8001718:	200000c8 	.word	0x200000c8
 800171c:	200000cc 	.word	0x200000cc
 8001720:	200000dc 	.word	0x200000dc

08001724 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
 8001730:	4613      	mov	r3, r2
 8001732:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d902      	bls.n	8001740 <connect+0x1c>
 800173a:	f04f 33ff 	mov.w	r3, #4294967295
 800173e:	e0c6      	b.n	80018ce <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	3301      	adds	r3, #1
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fd29 	bl	80021a0 <WIZCHIP_READ>
 800174e:	4603      	mov	r3, r0
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	2b01      	cmp	r3, #1
 8001756:	d002      	beq.n	800175e <connect+0x3a>
 8001758:	f06f 0304 	mvn.w	r3, #4
 800175c:	e0b7      	b.n	80018ce <connect+0x1aa>
   CHECK_SOCKINIT();
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	3301      	adds	r3, #1
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800176a:	4618      	mov	r0, r3
 800176c:	f000 fd18 	bl	80021a0 <WIZCHIP_READ>
 8001770:	4603      	mov	r3, r0
 8001772:	2b13      	cmp	r3, #19
 8001774:	d002      	beq.n	800177c <connect+0x58>
 8001776:	f06f 0302 	mvn.w	r3, #2
 800177a:	e0a8      	b.n	80018ce <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	3201      	adds	r2, #1
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	4413      	add	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	3202      	adds	r2, #2
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	3203      	adds	r2, #3
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b2:	d002      	beq.n	80017ba <connect+0x96>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <connect+0x9c>
 80017ba:	f06f 030b 	mvn.w	r3, #11
 80017be:	e086      	b.n	80018ce <connect+0x1aa>
   }

	if(port == 0) return SOCKERR_PORTZERO;
 80017c0:	88bb      	ldrh	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <connect+0xa8>
 80017c6:	f06f 030a 	mvn.w	r3, #10
 80017ca:	e080      	b.n	80018ce <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	3301      	adds	r3, #1
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80017d8:	2204      	movs	r2, #4
 80017da:	6839      	ldr	r1, [r7, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fdd9 	bl	8002394 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	3301      	adds	r3, #1
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	461a      	mov	r2, r3
 80017f0:	88bb      	ldrh	r3, [r7, #4]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 fd1c 	bl	8002238 <WIZCHIP_WRITE>
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	3301      	adds	r3, #1
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800180c:	461a      	mov	r2, r3
 800180e:	88bb      	ldrh	r3, [r7, #4]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f000 fd0f 	bl	8002238 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	3301      	adds	r3, #1
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001826:	2104      	movs	r1, #4
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd05 	bl	8002238 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800182e:	bf00      	nop
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	3301      	adds	r3, #1
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fcaf 	bl	80021a0 <WIZCHIP_READ>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f3      	bne.n	8001830 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <connect+0x1b4>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	fa42 f303 	asr.w	r3, r2, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d02b      	beq.n	80018b4 <connect+0x190>
 800185c:	2300      	movs	r3, #0
 800185e:	e036      	b.n	80018ce <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
//	    Refresh_Watchdog();
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	3301      	adds	r3, #1
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fc97 	bl	80021a0 <WIZCHIP_READ>
 8001872:	4603      	mov	r3, r0
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	3301      	adds	r3, #1
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001888:	2108      	movs	r1, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fcd4 	bl	8002238 <WIZCHIP_WRITE>
			return SOCKERR_TIMEOUT;
 8001890:	f06f 030c 	mvn.w	r3, #12
 8001894:	e01b      	b.n	80018ce <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	3301      	adds	r3, #1
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc7c 	bl	80021a0 <WIZCHIP_READ>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80018ae:	f06f 0303 	mvn.w	r3, #3
 80018b2:	e00c      	b.n	80018ce <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	3301      	adds	r3, #1
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fc6d 	bl	80021a0 <WIZCHIP_READ>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b17      	cmp	r3, #23
 80018ca:	d1c9      	bne.n	8001860 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200000c6 	.word	0x200000c6

080018dc <send>:
	return SOCK_OK;
}


int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d902      	bls.n	8001900 <send+0x24>
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e0de      	b.n	8001abe <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	3301      	adds	r3, #1
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fc49 	bl	80021a0 <WIZCHIP_READ>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	2b01      	cmp	r3, #1
 8001916:	d002      	beq.n	800191e <send+0x42>
 8001918:	f06f 0304 	mvn.w	r3, #4
 800191c:	e0cf      	b.n	8001abe <send+0x1e2>
   CHECK_SOCKDATA();
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <send+0x4e>
 8001924:	f06f 030d 	mvn.w	r3, #13
 8001928:	e0c9      	b.n	8001abe <send+0x1e2>
   tmp = getSn_SR(sn);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	3301      	adds	r3, #1
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fc32 	bl	80021a0 <WIZCHIP_READ>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b17      	cmp	r3, #23
 8001944:	d005      	beq.n	8001952 <send+0x76>
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	2b1c      	cmp	r3, #28
 800194a:	d002      	beq.n	8001952 <send+0x76>
 800194c:	f06f 0306 	mvn.w	r3, #6
 8001950:	e0b5      	b.n	8001abe <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <send+0x1ec>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	fa42 f303 	asr.w	r3, r2, r3
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d039      	beq.n	80019da <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	3301      	adds	r3, #1
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001972:	4618      	mov	r0, r3
 8001974:	f000 fc14 	bl	80021a0 <WIZCHIP_READ>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d019      	beq.n	80019be <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	3301      	adds	r3, #1
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001996:	2110      	movs	r1, #16
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fc4d 	bl	8002238 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2201      	movs	r2, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	4b46      	ldr	r3, [pc, #280]	; (8001ac8 <send+0x1ec>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4013      	ands	r3, r2
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <send+0x1ec>)
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e00d      	b.n	80019da <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <send+0xfa>
      {
         close(sn);
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe3c 	bl	8001648 <close>
         return SOCKERR_TIMEOUT;
 80019d0:	f06f 030c 	mvn.w	r3, #12
 80019d4:	e073      	b.n	8001abe <send+0x1e2>
      }
      else return SOCK_BUSY;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e071      	b.n	8001abe <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	3301      	adds	r3, #1
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fbda 	bl	80021a0 <WIZCHIP_READ>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80019f4:	88ba      	ldrh	r2, [r7, #4]
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d901      	bls.n	8001a00 <send+0x124>
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fd26 	bl	8002454 <getSn_TX_FSR>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	3301      	adds	r3, #1
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fbc1 	bl	80021a0 <WIZCHIP_READ>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	2b17      	cmp	r3, #23
 8001a26:	d009      	beq.n	8001a3c <send+0x160>
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	2b1c      	cmp	r3, #28
 8001a2c:	d006      	beq.n	8001a3c <send+0x160>
      {
         close(sn);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fe09 	bl	8001648 <close>
         return SOCKERR_SOCKSTATUS;
 8001a36:	f06f 0306 	mvn.w	r3, #6
 8001a3a:	e040      	b.n	8001abe <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <send+0x1f0>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	fa42 f303 	asr.w	r3, r2, r3
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <send+0x180>
 8001a50:	88ba      	ldrh	r2, [r7, #4]
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d901      	bls.n	8001a5c <send+0x180>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e030      	b.n	8001abe <send+0x1e2>
      if(len <= freesize) break;
 8001a5c:	88ba      	ldrh	r2, [r7, #4]
 8001a5e:	89bb      	ldrh	r3, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d900      	bls.n	8001a66 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001a64:	e7cc      	b.n	8001a00 <send+0x124>
      if(len <= freesize) break;
 8001a66:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001a68:	88ba      	ldrh	r2, [r7, #4]
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	6839      	ldr	r1, [r7, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd86 	bl	8002580 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	3301      	adds	r3, #1
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a80:	2120      	movs	r1, #32
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fbd8 	bl	8002238 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001a88:	bf00      	nop
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	3301      	adds	r3, #1
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fb82 	bl	80021a0 <WIZCHIP_READ>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f3      	bne.n	8001a8a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <send+0x1ec>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b21b      	sxth	r3, r3
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <send+0x1ec>)
 8001aba:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001abc:	88bb      	ldrh	r3, [r7, #4]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200000c8 	.word	0x200000c8
 8001acc:	200000c6 	.word	0x200000c6

08001ad0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d902      	bls.n	8001af4 <recv+0x24>
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
 8001af2:	e09c      	b.n	8001c2e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	3301      	adds	r3, #1
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fb4f 	bl	80021a0 <WIZCHIP_READ>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d002      	beq.n	8001b12 <recv+0x42>
 8001b0c:	f06f 0304 	mvn.w	r3, #4
 8001b10:	e08d      	b.n	8001c2e <recv+0x15e>
   CHECK_SOCKDATA();
 8001b12:	88bb      	ldrh	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d102      	bne.n	8001b1e <recv+0x4e>
 8001b18:	f06f 030d 	mvn.w	r3, #13
 8001b1c:	e087      	b.n	8001c2e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	3301      	adds	r3, #1
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fb38 	bl	80021a0 <WIZCHIP_READ>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	029b      	lsls	r3, r3, #10
 8001b36:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001b38:	89ba      	ldrh	r2, [r7, #12]
 8001b3a:	88bb      	ldrh	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d201      	bcs.n	8001b44 <recv+0x74>
 8001b40:	89bb      	ldrh	r3, [r7, #12]
 8001b42:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 fccf 	bl	80024ea <getSn_RX_RSR>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	3301      	adds	r3, #1
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 fb1f 	bl	80021a0 <WIZCHIP_READ>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	2b17      	cmp	r3, #23
 8001b6a:	d026      	beq.n	8001bba <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b1c      	cmp	r3, #28
 8001b70:	d11c      	bne.n	8001bac <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001b72:	89bb      	ldrh	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d133      	bne.n	8001be0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fc6a 	bl	8002454 <getSn_TX_FSR>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461c      	mov	r4, r3
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	3301      	adds	r3, #1
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fb05 	bl	80021a0 <WIZCHIP_READ>
 8001b96:	4603      	mov	r3, r0
 8001b98:	029b      	lsls	r3, r3, #10
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d10d      	bne.n	8001bba <recv+0xea>
               {
                  close(sn);
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fd51 	bl	8001648 <close>
                  return SOCKERR_SOCKSTATUS;
 8001ba6:	f06f 0306 	mvn.w	r3, #6
 8001baa:	e040      	b.n	8001c2e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fd4a 	bl	8001648 <close>
               return SOCKERR_SOCKSTATUS;
 8001bb4:	f06f 0306 	mvn.w	r3, #6
 8001bb8:	e039      	b.n	8001c2e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <recv+0x168>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	fa42 f303 	asr.w	r3, r2, r3
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <recv+0x108>
 8001bce:	89bb      	ldrh	r3, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <recv+0x108>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	e02a      	b.n	8001c2e <recv+0x15e>
         if(recvsize != 0) break;
 8001bd8:	89bb      	ldrh	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8001bde:	e7b1      	b.n	8001b44 <recv+0x74>
               if(recvsize != 0) break;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <recv+0x116>
         if(recvsize != 0) break;
 8001be4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001be6:	89ba      	ldrh	r2, [r7, #12]
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d201      	bcs.n	8001bf2 <recv+0x122>
 8001bee:	89bb      	ldrh	r3, [r7, #12]
 8001bf0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001bf2:	88ba      	ldrh	r2, [r7, #4]
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fd1d 	bl	8002638 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);    //Sn_CR_RECV - Update RX buffer pointer and receive data
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	3301      	adds	r3, #1
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c0a:	2140      	movs	r1, #64	; 0x40
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fb13 	bl	8002238 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c12:	bf00      	nop
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3301      	adds	r3, #1
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fabd 	bl	80021a0 <WIZCHIP_READ>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f3      	bne.n	8001c14 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001c2c:	88bb      	ldrh	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200000c6 	.word	0x200000c6

08001c3c <Get_state>:


struct StatesStruct test_states={Initilisation_State, NULL_State}; // current state defined as initilisation state, next state defined as NULL state

myStates Get_state()
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	return	 test_states.Current_State;
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <Get_state+0x14>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000008 	.word	0x20000008

08001c54 <Set_state>:

void Set_state(myStates N_S)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
test_states.Current_State = N_S;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <Set_state+0x1c>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	7013      	strb	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20000008 	.word	0x20000008

08001c74 <Initilisation_State_Handler>:
#include "state_Handler.h"

void Initilisation_State_Handler()
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	Set_state(Initilisation_State);
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f7ff ffeb 	bl	8001c54 <Set_state>
	Reset_event();
 8001c7e:	f7fe fec3 	bl	8000a08 <Reset_event>
	//Initialize the TCPIP Connection
	Init_Ethernet();
 8001c82:	f7fe fe0b 	bl	800089c <Init_Ethernet>
	//Check the physical Connection of TCP IP
	ctlwizchip(CW_GET_PHYLINK, (void*) &Phy_TCP_IP); // gets physical status of the TCPIP
 8001c86:	4914      	ldr	r1, [pc, #80]	; (8001cd8 <Initilisation_State_Handler+0x64>)
 8001c88:	200f      	movs	r0, #15
 8001c8a:	f000 fdcf 	bl	800282c <ctlwizchip>

	if(Phy_TCP_IP==PHY_LINK_OFF)
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <Initilisation_State_Handler+0x64>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <Initilisation_State_Handler+0x2a>
	{
		//Save the status in the flash memory with date and time stamp+++++++++++++++++++++
		Set_state(Initilisation_State);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7ff ffdc 	bl	8001c54 <Set_state>
		HAL_Delay(100);
		send(0, (uint8_t *)SYS_INIT_CMD,strlen(SYS_INIT_CMD));

		Set_event(Reset_Event);
	}
}
 8001c9c:	e019      	b.n	8001cd2 <Initilisation_State_Handler+0x5e>
	else if(Phy_TCP_IP==PHY_LINK_ON)
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <Initilisation_State_Handler+0x64>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d115      	bne.n	8001cd2 <Initilisation_State_Handler+0x5e>
		HAL_Delay(500);
 8001ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001caa:	f001 fa67 	bl	800317c <HAL_Delay>
		HAL_Delay(100);
 8001cae:	2064      	movs	r0, #100	; 0x64
 8001cb0:	f001 fa64 	bl	800317c <HAL_Delay>
		Refresh_Watchdog();
 8001cb4:	f7fe fe7e 	bl	80009b4 <Refresh_Watchdog>
		Ethernet_Connect();
 8001cb8:	f7fe fe4c 	bl	8000954 <Ethernet_Connect>
		HAL_Delay(100);
 8001cbc:	2064      	movs	r0, #100	; 0x64
 8001cbe:	f001 fa5d 	bl	800317c <HAL_Delay>
		send(0, (uint8_t *)SYS_INIT_CMD,strlen(SYS_INIT_CMD));
 8001cc2:	2209      	movs	r2, #9
 8001cc4:	4905      	ldr	r1, [pc, #20]	; (8001cdc <Initilisation_State_Handler+0x68>)
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fe08 	bl	80018dc <send>
		Set_event(Reset_Event);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7fe fe8b 	bl	80009e8 <Set_event>
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000c45 	.word	0x20000c45
 8001cdc:	080070b4 	.word	0x080070b4

08001ce0 <Reset_State_Handler>:

void Reset_State_Handler()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	Set_state(Reset_State);
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7ff ffb5 	bl	8001c54 <Set_state>
	Reset_event();
 8001cea:	f7fe fe8d 	bl	8000a08 <Reset_event>
	//Reset the RingBuffers
	RingInit(&WR_Ring,&WR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8001cee:	2304      	movs	r3, #4
 8001cf0:	22c8      	movs	r2, #200	; 0xc8
 8001cf2:	4912      	ldr	r1, [pc, #72]	; (8001d3c <Reset_State_Handler+0x5c>)
 8001cf4:	4812      	ldr	r0, [pc, #72]	; (8001d40 <Reset_State_Handler+0x60>)
 8001cf6:	f7ff fab0 	bl	800125a <RingInit>
	RingInit(&WL_Ring,&WL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	22c8      	movs	r2, #200	; 0xc8
 8001cfe:	4911      	ldr	r1, [pc, #68]	; (8001d44 <Reset_State_Handler+0x64>)
 8001d00:	4811      	ldr	r0, [pc, #68]	; (8001d48 <Reset_State_Handler+0x68>)
 8001d02:	f7ff faaa 	bl	800125a <RingInit>
	RingInit(&FCT_Ring,&FCT_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8001d06:	2304      	movs	r3, #4
 8001d08:	22c8      	movs	r2, #200	; 0xc8
 8001d0a:	4910      	ldr	r1, [pc, #64]	; (8001d4c <Reset_State_Handler+0x6c>)
 8001d0c:	4810      	ldr	r0, [pc, #64]	; (8001d50 <Reset_State_Handler+0x70>)
 8001d0e:	f7ff faa4 	bl	800125a <RingInit>
	//Reset the Counts
	WR_Counts=0;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <Reset_State_Handler+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
	WL_Counts=0;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <Reset_State_Handler+0x78>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
	FCT_Counts=0;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <Reset_State_Handler+0x7c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
	//Reset the 32 bit timer 2
	Timer2_Stop(); //Timer Stopped
 8001d24:	f7fe fea0 	bl	8000a68 <Timer2_Stop>

	Timer2_DeInitilized();//Timer DeInitilized
 8001d28:	f7fe fea8 	bl	8000a7c <Timer2_DeInitilized>

	Timer2_Initilized(); //Timer Initialized
 8001d2c:	f7fe feb0 	bl	8000a90 <Timer2_Initilized>

	//send(0, (buff_size *)" Reset,",strlen(" Reset,"));

	//set the event to idle
	Set_event(Idle_Event);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7fe fe59 	bl	80009e8 <Set_event>
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000128 	.word	0x20000128
 8001d40:	20000570 	.word	0x20000570
 8001d44:	20000598 	.word	0x20000598
 8001d48:	200000fc 	.word	0x200000fc
 8001d4c:	200008ec 	.word	0x200008ec
 8001d50:	200008c8 	.word	0x200008c8
 8001d54:	200008e8 	.word	0x200008e8
 8001d58:	2000046c 	.word	0x2000046c
 8001d5c:	20000594 	.word	0x20000594

08001d60 <Idle_State_Handler>:

void Idle_State_Handler()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	//Set state to idle state
	Set_state(Idle_State);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f7ff ff75 	bl	8001c54 <Set_state>


	//send(0, (buff_size *)" Idle,",strlen(" Idle,"));
	//reset the event
	Reset_event();
 8001d6a:	f7fe fe4d 	bl	8000a08 <Reset_event>
	//
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <WRSide_Train_Presence_State_Handler>:

void WRSide_Train_Presence_State_Handler()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	if(Get_state!=WRSide_Train_Presence_State)
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <WRSide_Train_Presence_State_Handler+0x18>)
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d004      	beq.n	8001d88 <WRSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WRSide Train Presence state
		Set_state(WRSide_Train_Presence_State);
 8001d7e:	2004      	movs	r0, #4
 8001d80:	f7ff ff68 	bl	8001c54 <Set_state>

		//send(0, (buff_size *)" WRSide,",strlen(" WRSide,"));
		//reset the event
		Reset_event();
 8001d84:	f7fe fe40 	bl	8000a08 <Reset_event>
	}
	//tasks that need to be done on each WR trigger
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	08001c3d 	.word	0x08001c3d

08001d90 <WLSide_Train_Presence_State_Handler>:

void WLSide_Train_Presence_State_Handler()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	if(Get_state!=WLSide_Train_Presence_State)
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <WLSide_Train_Presence_State_Handler+0x18>)
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d004      	beq.n	8001da4 <WLSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WLSide Train Presence state
		Set_state(WLSide_Train_Presence_State);
 8001d9a:	2005      	movs	r0, #5
 8001d9c:	f7ff ff5a 	bl	8001c54 <Set_state>

		//send(0, (buff_size *)" WLSide,",strlen(" WLSide,"));
		//reset the event
		Reset_event();
 8001da0:	f7fe fe32 	bl	8000a08 <Reset_event>
	}
	//tasks that need to be done on each WL trigger
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	08001c3d 	.word	0x08001c3d

08001dac <Train_Exit_State_Handler>:

void Train_Exit_State_Handler()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	//Set state to Train Exit state
	Set_state(Train_Exit_State);
 8001db0:	2006      	movs	r0, #6
 8001db2:	f7ff ff4f 	bl	8001c54 <Set_state>

	//send(0, (buff_size *)" Exit,",strlen(" Exit,"));
	//reset the event
	Reset_event();
 8001db6:	f7fe fe27 	bl	8000a08 <Reset_event>
	//shut down the purge and close the shutters
	//set the event to Log Data event
	Set_event(Log_Data_Event);
 8001dba:	2006      	movs	r0, #6
 8001dbc:	f7fe fe14 	bl	80009e8 <Set_event>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <Log_Data_State_Handler>:

void Log_Data_State_Handler()
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	//Set state to Log Data state
	Set_state(Log_Data_State);
 8001dc8:	2007      	movs	r0, #7
 8001dca:	f7ff ff43 	bl	8001c54 <Set_state>

	//send(0, (buff_size *)" Log,",strlen(" Log,"));
	//reset the event
	Reset_event();
 8001dce:	f7fe fe1b 	bl	8000a08 <Reset_event>
	//send the data over TCPIP
	Send_Data();
 8001dd2:	f7fe fc65 	bl	80006a0 <Send_Data>
	//set the event to reset event
	Set_event(Reset_Event);
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7fe fe06 	bl	80009e8 <Set_event>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_MspInit+0x44>)
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_MspInit+0x44>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6193      	str	r3, [r2, #24]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_MspInit+0x44>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_MspInit+0x44>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x44>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x44>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <HAL_RTC_MspInit+0x44>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_RTC_MspInit+0x36>
 8001e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e48:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <HAL_RTC_MspInit+0x48>)
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e5e:	bf00      	nop
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40002800 	.word	0x40002800
 8001e70:	10908100 	.word	0x10908100

08001e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	; 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3d      	ldr	r2, [pc, #244]	; (8001f88 <HAL_SPI_MspInit+0x114>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d147      	bne.n	8001f26 <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a3c      	ldr	r2, [pc, #240]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	61bb      	str	r3, [r7, #24]
 8001eac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6153      	str	r3, [r2, #20]
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	4a30      	ldr	r2, [pc, #192]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	6153      	str	r3, [r2, #20]
 8001ed2:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4825      	ldr	r0, [pc, #148]	; (8001f90 <HAL_SPI_MspInit+0x11c>)
 8001efc:	f001 fa74 	bl	80033e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f00:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f12:	2305      	movs	r3, #5
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f001 fa62 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f24:	e02c      	b.n	8001f80 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_SPI_MspInit+0x120>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d127      	bne.n	8001f80 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f30:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f3a:	61d3      	str	r3, [r2, #28]
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f48:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f52:	6153      	str	r3, [r2, #20]
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_SPI_MspInit+0x118>)
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f60:	2338      	movs	r3, #56	; 0x38
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f70:	2306      	movs	r3, #6
 8001f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <HAL_SPI_MspInit+0x11c>)
 8001f7c:	f001 fa34 	bl	80033e8 <HAL_GPIO_Init>
}
 8001f80:	bf00      	nop
 8001f82:	3730      	adds	r7, #48	; 0x30
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40003800 	.word	0x40003800
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400
 8001f94:	40003c00 	.word	0x40003c00

08001f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_Base_MspInit+0x38>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <HAL_TIM_Base_MspInit+0x38>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_TIM_Base_MspInit+0x38>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000

08001fd4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d105      	bne.n	8001ff2 <HAL_TIM_Base_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <HAL_TIM_Base_MspDeInit+0x2c>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM2_MspDeInit 1 */

  /* USER CODE END TIM2_MspDeInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_UART_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d128      	bne.n	8002078 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_UART_MspInit+0x80>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a16      	ldr	r2, [pc, #88]	; (8002084 <HAL_UART_MspInit+0x80>)
 800202c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_UART_MspInit+0x80>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_UART_MspInit+0x80>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_UART_MspInit+0x80>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	6153      	str	r3, [r2, #20]
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_UART_MspInit+0x80>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002056:	230c      	movs	r3, #12
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002066:	2307      	movs	r3, #7
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f001 f9b8 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40004400 	.word	0x40004400
 8002084:	40021000 	.word	0x40021000

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler+0x4>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <UsageFault_Handler+0x4>

080020ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020dc:	f001 f82e 	bl	800313c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f001 fb07 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80020f6:	2002      	movs	r0, #2
 80020f8:	f001 fb00 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002104:	2020      	movs	r0, #32
 8002106:	f001 faf9 	bl	80036fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <_sbrk+0x5c>)
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <_sbrk+0x60>)
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <_sbrk+0x64>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <_sbrk+0x68>)
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	429a      	cmp	r2, r3
 800213e:	d207      	bcs.n	8002150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002140:	f004 fdda 	bl	8006cf8 <__errno>
 8002144:	4603      	mov	r3, r0
 8002146:	220c      	movs	r2, #12
 8002148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	e009      	b.n	8002164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002156:	4b07      	ldr	r3, [pc, #28]	; (8002174 <_sbrk+0x64>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <_sbrk+0x64>)
 8002160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20004000 	.word	0x20004000
 8002170:	00000400 	.word	0x00000400
 8002174:	200000e4 	.word	0x200000e4
 8002178:	20001620 	.word	0x20001620

0800217c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <SystemInit+0x20>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <SystemInit+0x20>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80021a8:	4b22      	ldr	r3, [pc, #136]	; (8002234 <WIZCHIP_READ+0x94>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4798      	blx	r3
   WIZCHIP.CS._select();
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <WIZCHIP_READ+0x94>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80021b4:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <WIZCHIP_READ+0x94>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <WIZCHIP_READ+0x24>
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <WIZCHIP_READ+0x94>)
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d114      	bne.n	80021ee <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <WIZCHIP_READ+0x94>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	0c12      	lsrs	r2, r2, #16
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4610      	mov	r0, r2
 80021d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <WIZCHIP_READ+0x94>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	0a12      	lsrs	r2, r2, #8
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	4610      	mov	r0, r2
 80021de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <WIZCHIP_READ+0x94>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	4610      	mov	r0, r2
 80021ea:	4798      	blx	r3
 80021ec:	e011      	b.n	8002212 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0a1b      	lsrs	r3, r3, #8
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <WIZCHIP_READ+0x94>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f107 020c 	add.w	r2, r7, #12
 800220c:	2103      	movs	r1, #3
 800220e:	4610      	mov	r0, r2
 8002210:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8002212:	4b08      	ldr	r3, [pc, #32]	; (8002234 <WIZCHIP_READ+0x94>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4798      	blx	r3
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <WIZCHIP_READ+0x94>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <WIZCHIP_READ+0x94>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4798      	blx	r3
   return ret;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000010 	.word	0x20000010

08002238 <WIZCHIP_WRITE>:

void WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];
   WIZCHIP_CRITICAL_ENTER();
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4798      	blx	r3
   WIZCHIP.CS._select();
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	2b00      	cmp	r3, #0
 800225e:	d119      	bne.n	8002294 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	0c12      	lsrs	r2, r2, #16
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	4610      	mov	r0, r2
 800226c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	0a12      	lsrs	r2, r2, #8
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	4610      	mov	r0, r2
 800227a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4610      	mov	r0, r2
 8002286:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	4610      	mov	r0, r2
 8002290:	4798      	blx	r3
 8002292:	e013      	b.n	80022bc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	b2db      	uxtb	r3, r3
 800229a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f107 020c 	add.w	r2, r7, #12
 80022b6:	2104      	movs	r1, #4
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80022c2:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <WIZCHIP_WRITE+0x98>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	4798      	blx	r3
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000010 	.word	0x20000010

080022d4 <WIZCHIP_READ_BUF>:
         
void WIZCHIP_READ_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80022e2:	4b2b      	ldr	r3, [pc, #172]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80022e8:	4b29      	ldr	r3, [pc, #164]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <WIZCHIP_READ_BUF+0x2a>
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d126      	bne.n	800234c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	0c12      	lsrs	r2, r2, #16
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4610      	mov	r0, r2
 800230a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800230c:	4b20      	ldr	r3, [pc, #128]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	0a12      	lsrs	r2, r2, #8
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	4610      	mov	r0, r2
 8002318:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	4610      	mov	r0, r2
 8002324:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002326:	2300      	movs	r3, #0
 8002328:	82fb      	strh	r3, [r7, #22]
 800232a:	e00a      	b.n	8002342 <WIZCHIP_READ_BUF+0x6e>
		pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	8afa      	ldrh	r2, [r7, #22]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	188c      	adds	r4, r1, r2
 8002336:	4798      	blx	r3
 8002338:	4603      	mov	r3, r0
 800233a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800233c:	8afb      	ldrh	r3, [r7, #22]
 800233e:	3301      	adds	r3, #1
 8002340:	82fb      	strh	r3, [r7, #22]
 8002342:	8afa      	ldrh	r2, [r7, #22]
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	429a      	cmp	r2, r3
 8002348:	d3f0      	bcc.n	800232c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800234a:	e017      	b.n	800237c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	b2db      	uxtb	r3, r3
 8002352:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b2db      	uxtb	r3, r3
 800235a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	f107 0210 	add.w	r2, r7, #16
 800236a:	2103      	movs	r1, #3
 800236c:	4610      	mov	r0, r2
 800236e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	4611      	mov	r1, r2
 8002378:	68b8      	ldr	r0, [r7, #8]
 800237a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002382:	4b03      	ldr	r3, [pc, #12]	; (8002390 <WIZCHIP_READ_BUF+0xbc>)
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	4798      	blx	r3
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	20000010 	.word	0x20000010

08002394 <WIZCHIP_WRITE_BUF>:


void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80023b6:	4b26      	ldr	r3, [pc, #152]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d126      	bne.n	800240c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	0c12      	lsrs	r2, r2, #16
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4610      	mov	r0, r2
 80023ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	0a12      	lsrs	r2, r2, #8
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	4610      	mov	r0, r2
 80023d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	4610      	mov	r0, r2
 80023e4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	82fb      	strh	r3, [r7, #22]
 80023ea:	e00a      	b.n	8002402 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	8afa      	ldrh	r2, [r7, #22]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	440a      	add	r2, r1
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	4610      	mov	r0, r2
 80023fa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80023fc:	8afb      	ldrh	r3, [r7, #22]
 80023fe:	3301      	adds	r3, #1
 8002400:	82fb      	strh	r3, [r7, #22]
 8002402:	8afa      	ldrh	r2, [r7, #22]
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	429a      	cmp	r2, r3
 8002408:	d3f0      	bcc.n	80023ec <WIZCHIP_WRITE_BUF+0x58>
 800240a:	e017      	b.n	800243c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else 														// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	0c1b      	lsrs	r3, r3, #16
 8002410:	b2db      	uxtb	r3, r3
 8002412:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	b2db      	uxtb	r3, r3
 800241a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f107 0210 	add.w	r2, r7, #16
 800242a:	2103      	movs	r1, #3
 800242c:	4610      	mov	r0, r2
 800242e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	4611      	mov	r1, r2
 8002438:	68b8      	ldr	r0, [r7, #8]
 800243a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002442:	4b03      	ldr	r3, [pc, #12]	; (8002450 <WIZCHIP_WRITE_BUF+0xbc>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4798      	blx	r3
}
 8002448:	bf00      	nop
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000010 	.word	0x20000010

08002454 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800245e:	2300      	movs	r3, #0
 8002460:	81fb      	strh	r3, [r7, #14]
 8002462:	2300      	movs	r3, #0
 8002464:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	3301      	adds	r3, #1
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fe94 	bl	80021a0 <WIZCHIP_READ>
 8002478:	4603      	mov	r3, r0
 800247a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800247c:	89bb      	ldrh	r3, [r7, #12]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b29c      	uxth	r4, r3
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	3301      	adds	r3, #1
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fe86 	bl	80021a0 <WIZCHIP_READ>
 8002494:	4603      	mov	r3, r0
 8002496:	b29b      	uxth	r3, r3
 8002498:	4423      	add	r3, r4
 800249a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800249c:	89bb      	ldrh	r3, [r7, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d01a      	beq.n	80024d8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	3301      	adds	r3, #1
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fe76 	bl	80021a0 <WIZCHIP_READ>
 80024b4:	4603      	mov	r3, r0
 80024b6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	b29c      	uxth	r4, r3
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	3301      	adds	r3, #1
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fe68 	bl	80021a0 <WIZCHIP_READ>
 80024d0:	4603      	mov	r3, r0
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4423      	add	r3, r4
 80024d6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80024d8:	89fa      	ldrh	r2, [r7, #14]
 80024da:	89bb      	ldrh	r3, [r7, #12]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1c2      	bne.n	8002466 <getSn_TX_FSR+0x12>
   return val;
 80024e0:	89fb      	ldrh	r3, [r7, #14]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}

080024ea <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80024ea:	b590      	push	{r4, r7, lr}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	81fb      	strh	r3, [r7, #14]
 80024f8:	2300      	movs	r3, #0
 80024fa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	3301      	adds	r3, #1
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fe49 	bl	80021a0 <WIZCHIP_READ>
 800250e:	4603      	mov	r3, r0
 8002510:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002512:	89bb      	ldrh	r3, [r7, #12]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	b29c      	uxth	r4, r3
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3301      	adds	r3, #1
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fe3b 	bl	80021a0 <WIZCHIP_READ>
 800252a:	4603      	mov	r3, r0
 800252c:	b29b      	uxth	r3, r3
 800252e:	4423      	add	r3, r4
 8002530:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002532:	89bb      	ldrh	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d01a      	beq.n	800256e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002538:	79fb      	ldrb	r3, [r7, #7]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3301      	adds	r3, #1
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fe2b 	bl	80021a0 <WIZCHIP_READ>
 800254a:	4603      	mov	r3, r0
 800254c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800254e:	89fb      	ldrh	r3, [r7, #14]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	b29c      	uxth	r4, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	3301      	adds	r3, #1
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fe1d 	bl	80021a0 <WIZCHIP_READ>
 8002566:	4603      	mov	r3, r0
 8002568:	b29b      	uxth	r3, r3
 800256a:	4423      	add	r3, r4
 800256c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800256e:	89fa      	ldrh	r2, [r7, #14]
 8002570:	89bb      	ldrh	r3, [r7, #12]
 8002572:	429a      	cmp	r2, r3
 8002574:	d1c2      	bne.n	80024fc <getSn_RX_RSR+0x12>
   return val;
 8002576:	89fb      	ldrh	r3, [r7, #14]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <wiz_send_data>:


void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	4613      	mov	r3, r2
 800258e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002598:	88bb      	ldrh	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d048      	beq.n	8002630 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	3301      	adds	r3, #1
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fdf8 	bl	80021a0 <WIZCHIP_READ>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	b29c      	uxth	r4, r3
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	3301      	adds	r3, #1
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fdeb 	bl	80021a0 <WIZCHIP_READ>
 80025ca:	4603      	mov	r3, r0
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	4423      	add	r3, r4
 80025d0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80025d2:	89fb      	ldrh	r3, [r7, #14]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	3202      	adds	r2, #2
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	4413      	add	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80025e2:	88bb      	ldrh	r3, [r7, #4]
 80025e4:	461a      	mov	r2, r3
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	68b8      	ldr	r0, [r7, #8]
 80025ea:	f7ff fed3 	bl	8002394 <WIZCHIP_WRITE_BUF>
   ptr += len;
 80025ee:	89fa      	ldrh	r2, [r7, #14]
 80025f0:	88bb      	ldrh	r3, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	3301      	adds	r3, #1
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002602:	461a      	mov	r2, r3
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29b      	uxth	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7ff fe12 	bl	8002238 <WIZCHIP_WRITE>
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	3301      	adds	r3, #1
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8002620:	461a      	mov	r2, r3
 8002622:	89fb      	ldrh	r3, [r7, #14]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f7ff fe05 	bl	8002238 <WIZCHIP_WRITE>
 800262e:	e000      	b.n	8002632 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8002630:	bf00      	nop
}
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}

08002638 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
 8002644:	4613      	mov	r3, r2
 8002646:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d048      	beq.n	80026e8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	3301      	adds	r3, #1
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fd9c 	bl	80021a0 <WIZCHIP_READ>
 8002668:	4603      	mov	r3, r0
 800266a:	b29b      	uxth	r3, r3
 800266c:	021b      	lsls	r3, r3, #8
 800266e:	b29c      	uxth	r4, r3
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	3301      	adds	r3, #1
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fd8f 	bl	80021a0 <WIZCHIP_READ>
 8002682:	4603      	mov	r3, r0
 8002684:	b29b      	uxth	r3, r3
 8002686:	4423      	add	r3, r4
 8002688:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800268a:	89fb      	ldrh	r3, [r7, #14]
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	79fa      	ldrb	r2, [r7, #7]
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	3203      	adds	r2, #3
 8002694:	00d2      	lsls	r2, r2, #3
 8002696:	4413      	add	r3, r2
 8002698:	60bb      	str	r3, [r7, #8]

   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800269a:	88bb      	ldrh	r3, [r7, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	6839      	ldr	r1, [r7, #0]
 80026a0:	68b8      	ldr	r0, [r7, #8]
 80026a2:	f7ff fe17 	bl	80022d4 <WIZCHIP_READ_BUF>
   ptr += len;
 80026a6:	89fa      	ldrh	r2, [r7, #14]
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	3301      	adds	r3, #1
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80026ba:	461a      	mov	r2, r3
 80026bc:	89fb      	ldrh	r3, [r7, #14]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7ff fdb6 	bl	8002238 <WIZCHIP_WRITE>
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	3301      	adds	r3, #1
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80026d8:	461a      	mov	r2, r3
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f7ff fda9 	bl	8002238 <WIZCHIP_WRITE>
 80026e6:	e000      	b.n	80026ea <wiz_recv_data+0xb2>
   if(len == 0) return;
 80026e8:	bf00      	nop
}
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}

080026f0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
 8002702:	bf00      	nop
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
 8002764:	2300      	movs	r3, #0
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <reg_wizchip_cs_cbfunc+0x16>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d106      	bne.n	80027ac <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <reg_wizchip_cs_cbfunc+0x40>)
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <reg_wizchip_cs_cbfunc+0x44>)
 80027a2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <reg_wizchip_cs_cbfunc+0x40>)
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <reg_wizchip_cs_cbfunc+0x48>)
 80027a8:	619a      	str	r2, [r3, #24]
 80027aa:	e006      	b.n	80027ba <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <reg_wizchip_cs_cbfunc+0x40>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <reg_wizchip_cs_cbfunc+0x40>)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6193      	str	r3, [r2, #24]
   }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000010 	.word	0x20000010
 80027cc:	0800270d 	.word	0x0800270d
 80027d0:	0800271b 	.word	0x0800271b

080027d4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80027de:	bf00      	nop
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <reg_wizchip_spi_cbfunc+0x4c>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f9      	beq.n	80027e0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <reg_wizchip_spi_cbfunc+0x24>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d106      	bne.n	8002806 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <reg_wizchip_spi_cbfunc+0x4c>)
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <reg_wizchip_spi_cbfunc+0x50>)
 80027fc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <reg_wizchip_spi_cbfunc+0x4c>)
 8002800:	4a09      	ldr	r2, [pc, #36]	; (8002828 <reg_wizchip_spi_cbfunc+0x54>)
 8002802:	621a      	str	r2, [r3, #32]
 8002804:	e006      	b.n	8002814 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002806:	4a06      	ldr	r2, [pc, #24]	; (8002820 <reg_wizchip_spi_cbfunc+0x4c>)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800280c:	4a04      	ldr	r2, [pc, #16]	; (8002820 <reg_wizchip_spi_cbfunc+0x4c>)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6213      	str	r3, [r2, #32]
   }
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	20000010 	.word	0x20000010
 8002824:	08002761 	.word	0x08002761
 8002828:	08002771 	.word	0x08002771

0800282c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f200 80c2 	bhi.w	80029d0 <ctlwizchip+0x1a4>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <ctlwizchip+0x28>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002895 	.word	0x08002895
 8002858:	0800289b 	.word	0x0800289b
 800285c:	080028c7 	.word	0x080028c7
 8002860:	080028bb 	.word	0x080028bb
 8002864:	080028d5 	.word	0x080028d5
 8002868:	080028e1 	.word	0x080028e1
 800286c:	080028ef 	.word	0x080028ef
 8002870:	08002915 	.word	0x08002915
 8002874:	0800293b 	.word	0x0800293b
 8002878:	08002975 	.word	0x08002975
 800287c:	0800297b 	.word	0x0800297b
 8002880:	08002983 	.word	0x08002983
 8002884:	080029d7 	.word	0x080029d7
 8002888:	0800298b 	.word	0x0800298b
 800288c:	08002999 	.word	0x08002999
 8002890:	080029b5 	.word	0x080029b5
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002894:	f000 f8a8 	bl	80029e8 <wizchip_sw_reset>
         break;
 8002898:	e09e      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3308      	adds	r3, #8
 80028a8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f8e5 	bl	8002a80 <wizchip_init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	e08f      	b.n	80029da <ctlwizchip+0x1ae>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f96a 	bl	8002b98 <wizchip_clrinterrupt>
         break;
 80028c4:	e088      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80028c6:	f000 f99b 	bl	8002c00 <wizchip_getinterrupt>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	801a      	strh	r2, [r3, #0]
         break;
 80028d2:	e081      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f9b6 	bl	8002c4a <wizchip_setinterruptmask>
         break;         
 80028de:	e07b      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80028e0:	f000 f9ce 	bl	8002c80 <wizchip_getinterruptmask>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	801a      	strh	r2, [r3, #0]
         break;
 80028ec:	e074      	b.n	80029d8 <ctlwizchip+0x1ac>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80028fe:	f7ff fc9b 	bl	8002238 <WIZCHIP_WRITE>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b2db      	uxtb	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800290e:	f7ff fc93 	bl	8002238 <WIZCHIP_WRITE>
         break;
 8002912:	e061      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8002914:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002918:	f7ff fc42 	bl	80021a0 <WIZCHIP_READ>
 800291c:	4603      	mov	r3, r0
 800291e:	b29b      	uxth	r3, r3
 8002920:	021b      	lsls	r3, r3, #8
 8002922:	b29c      	uxth	r4, r3
 8002924:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002928:	f7ff fc3a 	bl	80021a0 <WIZCHIP_READ>
 800292c:	4603      	mov	r3, r0
 800292e:	b29b      	uxth	r3, r3
 8002930:	4423      	add	r3, r4
 8002932:	b29a      	uxth	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	801a      	strh	r2, [r3, #0]
         break;
 8002938:	e04e      	b.n	80029d8 <ctlwizchip+0x1ac>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800293a:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <ctlwizchip+0x1b8>)
 800293c:	789a      	ldrb	r2, [r3, #2]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <ctlwizchip+0x1b8>)
 8002948:	78d2      	ldrb	r2, [r2, #3]
 800294a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	3302      	adds	r3, #2
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <ctlwizchip+0x1b8>)
 8002952:	7912      	ldrb	r2, [r2, #4]
 8002954:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3303      	adds	r3, #3
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <ctlwizchip+0x1b8>)
 800295c:	7952      	ldrb	r2, [r2, #5]
 800295e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3304      	adds	r3, #4
 8002964:	4a1f      	ldr	r2, [pc, #124]	; (80029e4 <ctlwizchip+0x1b8>)
 8002966:	7992      	ldrb	r2, [r2, #6]
 8002968:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3305      	adds	r3, #5
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
         break;
 8002972:	e031      	b.n	80029d8 <ctlwizchip+0x1ac>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8002974:	f000 f9d6 	bl	8002d24 <wizphy_reset>
         break;
 8002978:	e02e      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800297a:	6838      	ldr	r0, [r7, #0]
 800297c:	f000 f9f9 	bl	8002d72 <wizphy_setphyconf>
         break;
 8002980:	e02a      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f000 fa37 	bl	8002df6 <wizphy_getphyconf>
         break;
 8002988:	e026      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fa9a 	bl	8002ec8 <wizphy_setphypmode>
 8002994:	4603      	mov	r3, r0
 8002996:	e020      	b.n	80029da <ctlwizchip+0x1ae>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8002998:	f000 f9ab 	bl	8002cf2 <wizphy_getphypmode>
 800299c:	4603      	mov	r3, r0
 800299e:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2bff      	cmp	r3, #255	; 0xff
 80029a4:	d102      	bne.n	80029ac <ctlwizchip+0x180>
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	e016      	b.n	80029da <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	7dfa      	ldrb	r2, [r7, #23]
 80029b0:	701a      	strb	r2, [r3, #0]
         break;
 80029b2:	e011      	b.n	80029d8 <ctlwizchip+0x1ac>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80029b4:	f000 f987 	bl	8002cc6 <wizphy_getphylink>
 80029b8:	4603      	mov	r3, r0
 80029ba:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2bff      	cmp	r3, #255	; 0xff
 80029c0:	d102      	bne.n	80029c8 <ctlwizchip+0x19c>
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e008      	b.n	80029da <ctlwizchip+0x1ae>
         *(uint8_t*)arg = tmp;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	7dfa      	ldrb	r2, [r7, #23]
 80029cc:	701a      	strb	r2, [r3, #0]
         break;
 80029ce:	e003      	b.n	80029d8 <ctlwizchip+0x1ac>
   #endif      
      default:
         return -1;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	e001      	b.n	80029da <ctlwizchip+0x1ae>
         break;
 80029d6:	bf00      	nop
   }
   return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000010 	.word	0x20000010

080029e8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2206      	movs	r2, #6
 80029f2:	4619      	mov	r1, r3
 80029f4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80029f8:	f7ff fc6c 	bl	80022d4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2204      	movs	r2, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a08:	f7ff fc64 	bl	80022d4 <WIZCHIP_READ_BUF>
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	2204      	movs	r2, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a18:	f7ff fc5c 	bl	80022d4 <WIZCHIP_READ_BUF>
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2204      	movs	r2, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a28:	f7ff fc54 	bl	80022d4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7ff fc02 	bl	8002238 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff fbb3 	bl	80021a0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2206      	movs	r2, #6
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002a44:	f7ff fca6 	bl	8002394 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2204      	movs	r2, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a54:	f7ff fc9e 	bl	8002394 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002a64:	f7ff fc96 	bl	8002394 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002a74:	f7ff fc8e 	bl	8002394 <WIZCHIP_WRITE_BUF>
}
 8002a78:	bf00      	nop
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8002a8e:	f7ff ffab 	bl	80029e8 <wizchip_sw_reset>
   if(txsize)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03b      	beq.n	8002b10 <wizchip_init+0x90>
   {
      tmp = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e015      	b.n	8002ace <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	7bbb      	ldrb	r3, [r7, #14]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002ab4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	dd02      	ble.n	8002ac2 <wizchip_init+0x42>
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e066      	b.n	8002b90 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	2b07      	cmp	r3, #7
 8002ad4:	dde5      	ble.n	8002aa2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e015      	b.n	8002b08 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8002aea:	4618      	mov	r0, r3
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7ff fb9e 	bl	8002238 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0c:	2b07      	cmp	r3, #7
 8002b0e:	dde5      	ble.n	8002adc <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d03b      	beq.n	8002b8e <wizchip_init+0x10e>
   {
      tmp = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
 8002b1e:	e015      	b.n	8002b4c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8002b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	7bbb      	ldrb	r3, [r7, #14]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8002b32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	dd02      	ble.n	8002b40 <wizchip_init+0xc0>
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e027      	b.n	8002b90 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b50:	2b07      	cmp	r3, #7
 8002b52:	dde5      	ble.n	8002b20 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
 8002b58:	e015      	b.n	8002b86 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	3301      	adds	r3, #1
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4619      	mov	r1, r3
 8002b76:	f7ff fb5f 	bl	8002238 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	2b07      	cmp	r3, #7
 8002b8c:	dde5      	ble.n	8002b5a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	f023 030f 	bic.w	r3, r3, #15
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002bbc:	f7ff fb3c 	bl	8002238 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e014      	b.n	8002bf0 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8002bc6:	7bba      	ldrb	r2, [r7, #14]
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	fa42 f303 	asr.w	r3, r2, r3
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <wizchip_clrinterrupt+0x52>
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3301      	adds	r3, #1
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002be2:	211f      	movs	r1, #31
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fb27 	bl	8002238 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	3301      	adds	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b07      	cmp	r3, #7
 8002bf4:	d9e7      	bls.n	8002bc6 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002c12:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002c16:	f7ff fac3 	bl	80021a0 <WIZCHIP_READ>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f023 030f 	bic.w	r3, r3, #15
 8002c20:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002c22:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002c26:	f7ff fabb 	bl	80021a0 <WIZCHIP_READ>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8002c2e:	79bb      	ldrb	r3, [r7, #6]
 8002c30:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002c32:	88bb      	ldrh	r3, [r7, #4]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002c40:	88bb      	ldrh	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	0a1b      	lsrs	r3, r3, #8
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	4619      	mov	r1, r3
 8002c64:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c68:	f7ff fae6 	bl	8002238 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002c74:	f7ff fae0 	bl	8002238 <WIZCHIP_WRITE>
#endif   
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002c92:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002c96:	f7ff fa83 	bl	80021a0 <WIZCHIP_READ>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8002c9e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002ca2:	f7ff fa7d 	bl	80021a0 <WIZCHIP_READ>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8002cae:	88bb      	ldrh	r3, [r7, #4]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002cbc:	88bb      	ldrh	r3, [r7, #4]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002cd0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002cd4:	f7ff fa64 	bl	80021a0 <WIZCHIP_READ>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002cfc:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d00:	f7ff fa4e 	bl	80021a0 <WIZCHIP_READ>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0a:	2b30      	cmp	r3, #48	; 0x30
 8002d0c:	d102      	bne.n	8002d14 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	e001      	b.n	8002d18 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002d14:	2300      	movs	r3, #0
 8002d16:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8002d2a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d2e:	f7ff fa37 	bl	80021a0 <WIZCHIP_READ>
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d46:	f7ff fa77 	bl	8002238 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002d4a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d4e:	f7ff fa27 	bl	80021a0 <WIZCHIP_READ>
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d5c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d66:	f7ff fa67 	bl	8002238 <WIZCHIP_WRITE>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	e003      	b.n	8002d98 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
 8002d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d96:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d104      	bne.n	8002daa <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002da6:	73fb      	strb	r3, [r7, #15]
 8002da8:	e019      	b.n	8002dde <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	78db      	ldrb	r3, [r3, #3]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10d      	bne.n	8002dce <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	789b      	ldrb	r3, [r3, #2]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d104      	bne.n	8002dc4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	f043 0318 	orr.w	r3, r3, #24
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e00c      	b.n	8002dde <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	f043 0308 	orr.w	r3, r3, #8
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	e007      	b.n	8002dde <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	789b      	ldrb	r3, [r3, #2]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d103      	bne.n	8002dde <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002de6:	f7ff fa27 	bl	8002238 <WIZCHIP_WRITE>
   wizphy_reset();
 8002dea:	f7ff ff9b 	bl	8002d24 <wizphy_reset>
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002e02:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e06:	f7ff f9cb 	bl	80021a0 <WIZCHIP_READ>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002e0e:	7bfb      	ldrb	r3, [r7, #15]
 8002e10:	119b      	asrs	r3, r3, #6
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	d001      	beq.n	8002e2c <wizphy_getphyconf+0x36>
 8002e28:	2b38      	cmp	r3, #56	; 0x38
 8002e2a:	d103      	bne.n	8002e34 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	705a      	strb	r2, [r3, #1]
         break;
 8002e32:	e003      	b.n	8002e3c <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	705a      	strb	r2, [r3, #1]
         break;
 8002e3a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e42:	3b10      	subs	r3, #16
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	bf8c      	ite	hi
 8002e48:	2201      	movhi	r2, #1
 8002e4a:	2200      	movls	r2, #0
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	2a00      	cmp	r2, #0
 8002e50:	d111      	bne.n	8002e76 <wizphy_getphyconf+0x80>
 8002e52:	2201      	movs	r2, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002e5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	709a      	strb	r2, [r3, #2]
         break;
 8002e74:	e003      	b.n	8002e7e <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	709a      	strb	r2, [r3, #2]
         break;
 8002e7c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e84:	3b08      	subs	r3, #8
 8002e86:	2b18      	cmp	r3, #24
 8002e88:	bf8c      	ite	hi
 8002e8a:	2201      	movhi	r2, #1
 8002e8c:	2200      	movls	r2, #0
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	2a00      	cmp	r2, #0
 8002e92:	d111      	bne.n	8002eb8 <wizphy_getphyconf+0xc2>
 8002e94:	2201      	movs	r2, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	bf14      	ite	ne
 8002ea6:	2301      	movne	r3, #1
 8002ea8:	2300      	moveq	r3, #0
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	70da      	strb	r2, [r3, #3]
         break;
 8002eb6:	e003      	b.n	8002ec0 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	70da      	strb	r2, [r3, #3]
         break;
 8002ebe:	bf00      	nop
   }
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002ed6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002eda:	f7ff f961 	bl	80021a0 <WIZCHIP_READ>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <wizphy_setphypmode+0x2a>
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	e030      	b.n	8002f54 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002ef8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d104      	bne.n	8002f0a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e003      	b.n	8002f12 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002f10:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	4619      	mov	r1, r3
 8002f16:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f1a:	f7ff f98d 	bl	8002238 <WIZCHIP_WRITE>
   wizphy_reset();
 8002f1e:	f7ff ff01 	bl	8002d24 <wizphy_reset>
   tmp = getPHYCFGR();
 8002f22:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002f26:	f7ff f93b 	bl	80021a0 <WIZCHIP_READ>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d008      	beq.n	8002f50 <wizphy_setphypmode+0x88>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e008      	b.n	8002f54 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <wizphy_setphypmode+0x88>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e001      	b.n	8002f54 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2206      	movs	r2, #6
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002f6e:	f7ff fa11 	bl	8002394 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	330e      	adds	r3, #14
 8002f76:	2204      	movs	r2, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f7e:	f7ff fa09 	bl	8002394 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	330a      	adds	r3, #10
 8002f86:	2204      	movs	r2, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002f8e:	f7ff fa01 	bl	8002394 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3306      	adds	r3, #6
 8002f96:	2204      	movs	r2, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002f9e:	f7ff f9f9 	bl	8002394 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7c9a      	ldrb	r2, [r3, #18]
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <wizchip_setnetinfo+0x78>)
 8002fa8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7cda      	ldrb	r2, [r3, #19]
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <wizchip_setnetinfo+0x78>)
 8002fb0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7d1a      	ldrb	r2, [r3, #20]
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <wizchip_setnetinfo+0x78>)
 8002fb8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7d5a      	ldrb	r2, [r3, #21]
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <wizchip_setnetinfo+0x78>)
 8002fc0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7d9a      	ldrb	r2, [r3, #22]
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <wizchip_setnetinfo+0x7c>)
 8002fc8:	701a      	strb	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200000e8 	.word	0x200000e8
 8002fd8:	200000ec 	.word	0x200000ec

08002fdc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2206      	movs	r2, #6
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002fee:	f7ff f971 	bl	80022d4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	330e      	adds	r3, #14
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ffe:	f7ff f969 	bl	80022d4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	330a      	adds	r3, #10
 8003006:	2204      	movs	r2, #4
 8003008:	4619      	mov	r1, r3
 800300a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800300e:	f7ff f961 	bl	80022d4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3306      	adds	r3, #6
 8003016:	2204      	movs	r2, #4
 8003018:	4619      	mov	r1, r3
 800301a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800301e:	f7ff f959 	bl	80022d4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <wizchip_getnetinfo+0x78>)
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <wizchip_getnetinfo+0x78>)
 800302c:	785a      	ldrb	r2, [r3, #1]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <wizchip_getnetinfo+0x78>)
 8003034:	789a      	ldrb	r2, [r3, #2]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800303a:	4b06      	ldr	r3, [pc, #24]	; (8003054 <wizchip_getnetinfo+0x78>)
 800303c:	78da      	ldrb	r2, [r3, #3]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <wizchip_getnetinfo+0x7c>)
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	759a      	strb	r2, [r3, #22]
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200000e8 	.word	0x200000e8
 8003058:	200000ec 	.word	0x200000ec

0800305c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800305c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003094 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <LoopForever+0x6>)
  ldr r1, =_edata
 8003062:	490e      	ldr	r1, [pc, #56]	; (800309c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <LoopForever+0xe>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003068:	e002      	b.n	8003070 <LoopCopyDataInit>

0800306a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800306a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800306c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800306e:	3304      	adds	r3, #4

08003070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003074:	d3f9      	bcc.n	800306a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003078:	4c0b      	ldr	r4, [pc, #44]	; (80030a8 <LoopForever+0x16>)
  movs r3, #0
 800307a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800307c:	e001      	b.n	8003082 <LoopFillZerobss>

0800307e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800307e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003080:	3204      	adds	r2, #4

08003082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003084:	d3fb      	bcc.n	800307e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003086:	f7ff f879 	bl	800217c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800308a:	f003 fe3b 	bl	8006d04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800308e:	f7fd fd23 	bl	8000ad8 <main>

08003092 <LoopForever>:

LoopForever:
    b LoopForever
 8003092:	e7fe      	b.n	8003092 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003094:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800309c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80030a0:	08007128 	.word	0x08007128
  ldr r2, =_sbss
 80030a4:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80030a8:	20001620 	.word	0x20001620

080030ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030ac:	e7fe      	b.n	80030ac <ADC1_IRQHandler>
	...

080030b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_Init+0x28>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a07      	ldr	r2, [pc, #28]	; (80030d8 <HAL_Init+0x28>)
 80030ba:	f043 0310 	orr.w	r3, r3, #16
 80030be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c0:	2003      	movs	r0, #3
 80030c2:	f000 f94f 	bl	8003364 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f000 f808 	bl	80030dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030cc:	f7fe fe88 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000

080030dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <HAL_InitTick+0x54>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_InitTick+0x58>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f967 	bl	80033ce <HAL_SYSTICK_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e00e      	b.n	8003128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d80a      	bhi.n	8003126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003110:	2200      	movs	r2, #0
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f000 f92f 	bl	800337a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800311c:	4a06      	ldr	r2, [pc, #24]	; (8003138 <HAL_InitTick+0x5c>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	2000000c 	.word	0x2000000c
 8003134:	20000040 	.word	0x20000040
 8003138:	2000003c 	.word	0x2000003c

0800313c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_IncTick+0x20>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_IncTick+0x24>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_IncTick+0x24>)
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000040 	.word	0x20000040
 8003160:	2000160c 	.word	0x2000160c

08003164 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return uwTick;  
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_GetTick+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	2000160c 	.word	0x2000160c

0800317c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff ffee 	bl	8003164 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80031a2:	bf00      	nop
 80031a4:	f7ff ffde 	bl	8003164 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20000040 	.word	0x20000040

080031c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f6:	4a04      	ldr	r2, [pc, #16]	; (8003208 <__NVIC_SetPriorityGrouping+0x44>)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	60d3      	str	r3, [r2, #12]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_GetPriorityGrouping+0x18>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	0a1b      	lsrs	r3, r3, #8
 8003216:	f003 0307 	and.w	r3, r3, #7
}
 800321a:	4618      	mov	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	2b00      	cmp	r3, #0
 8003238:	db0b      	blt.n	8003252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	f003 021f 	and.w	r2, r3, #31
 8003240:	4907      	ldr	r1, [pc, #28]	; (8003260 <__NVIC_EnableIRQ+0x38>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	2001      	movs	r0, #1
 800324a:	fa00 f202 	lsl.w	r2, r0, r2
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	2b00      	cmp	r3, #0
 8003276:	db0a      	blt.n	800328e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	b2da      	uxtb	r2, r3
 800327c:	490c      	ldr	r1, [pc, #48]	; (80032b0 <__NVIC_SetPriority+0x4c>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	440b      	add	r3, r1
 8003288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800328c:	e00a      	b.n	80032a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4908      	ldr	r1, [pc, #32]	; (80032b4 <__NVIC_SetPriority+0x50>)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	3b04      	subs	r3, #4
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	440b      	add	r3, r1
 80032a2:	761a      	strb	r2, [r3, #24]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f1c3 0307 	rsb	r3, r3, #7
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	bf28      	it	cs
 80032d6:	2304      	movcs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3304      	adds	r3, #4
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d902      	bls.n	80032e8 <NVIC_EncodePriority+0x30>
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3b03      	subs	r3, #3
 80032e6:	e000      	b.n	80032ea <NVIC_EncodePriority+0x32>
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	f04f 32ff 	mov.w	r2, #4294967295
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	401a      	ands	r2, r3
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa01 f303 	lsl.w	r3, r1, r3
 800330a:	43d9      	mvns	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	4313      	orrs	r3, r2
         );
}
 8003312:	4618      	mov	r0, r3
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3b01      	subs	r3, #1
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d301      	bcc.n	8003336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003332:	2301      	movs	r3, #1
 8003334:	e00f      	b.n	8003356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003336:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <SysTick_Config+0x40>)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800333e:	210f      	movs	r1, #15
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f7ff ff8e 	bl	8003264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Config+0x40>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800334e:	4b04      	ldr	r3, [pc, #16]	; (8003360 <SysTick_Config+0x40>)
 8003350:	2207      	movs	r2, #7
 8003352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff29 	bl	80031c4 <__NVIC_SetPriorityGrouping>
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800338c:	f7ff ff3e 	bl	800320c <__NVIC_GetPriorityGrouping>
 8003390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68b9      	ldr	r1, [r7, #8]
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f7ff ff8e 	bl	80032b8 <NVIC_EncodePriority>
 800339c:	4602      	mov	r2, r0
 800339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff5d 	bl	8003264 <__NVIC_SetPriority>
}
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff31 	bl	8003228 <__NVIC_EnableIRQ>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ffa2 	bl	8003320 <SysTick_Config>
 80033dc:	4603      	mov	r3, r0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f6:	e14e      	b.n	8003696 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2101      	movs	r1, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8140 	beq.w	8003690 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d005      	beq.n	8003428 <HAL_GPIO_Init+0x40>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d130      	bne.n	800348a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800345e:	2201      	movs	r2, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0201 	and.w	r2, r3, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	2b03      	cmp	r3, #3
 8003494:	d017      	beq.n	80034c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d123      	bne.n	800351a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	08da      	lsrs	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3208      	adds	r2, #8
 80034da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	220f      	movs	r2, #15
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	6939      	ldr	r1, [r7, #16]
 8003516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0203 	and.w	r2, r3, #3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 809a 	beq.w	8003690 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355c:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <HAL_GPIO_Init+0x2cc>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4a54      	ldr	r2, [pc, #336]	; (80036b4 <HAL_GPIO_Init+0x2cc>)
 8003562:	f043 0301 	orr.w	r3, r3, #1
 8003566:	6193      	str	r3, [r2, #24]
 8003568:	4b52      	ldr	r3, [pc, #328]	; (80036b4 <HAL_GPIO_Init+0x2cc>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003574:	4a50      	ldr	r2, [pc, #320]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800359e:	d013      	beq.n	80035c8 <HAL_GPIO_Init+0x1e0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a46      	ldr	r2, [pc, #280]	; (80036bc <HAL_GPIO_Init+0x2d4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00d      	beq.n	80035c4 <HAL_GPIO_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a45      	ldr	r2, [pc, #276]	; (80036c0 <HAL_GPIO_Init+0x2d8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <HAL_GPIO_Init+0x1d8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a44      	ldr	r2, [pc, #272]	; (80036c4 <HAL_GPIO_Init+0x2dc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_GPIO_Init+0x1d4>
 80035b8:	2303      	movs	r3, #3
 80035ba:	e006      	b.n	80035ca <HAL_GPIO_Init+0x1e2>
 80035bc:	2305      	movs	r3, #5
 80035be:	e004      	b.n	80035ca <HAL_GPIO_Init+0x1e2>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e002      	b.n	80035ca <HAL_GPIO_Init+0x1e2>
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <HAL_GPIO_Init+0x1e2>
 80035c8:	2300      	movs	r3, #0
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	f002 0203 	and.w	r2, r2, #3
 80035d0:	0092      	lsls	r2, r2, #2
 80035d2:	4093      	lsls	r3, r2
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035da:	4937      	ldr	r1, [pc, #220]	; (80036b8 <HAL_GPIO_Init+0x2d0>)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	089b      	lsrs	r3, r3, #2
 80035e0:	3302      	adds	r3, #2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e8:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800360c:	4a2e      	ldr	r2, [pc, #184]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003612:	4b2d      	ldr	r3, [pc, #180]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	43db      	mvns	r3, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4013      	ands	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003636:	4a24      	ldr	r2, [pc, #144]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003666:	4b18      	ldr	r3, [pc, #96]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4013      	ands	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800368a:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_GPIO_Init+0x2e0>)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3301      	adds	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f aea9 	bne.w	80033f8 <HAL_GPIO_Init+0x10>
  }
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40010000 	.word	0x40010000
 80036bc:	48000400 	.word	0x48000400
 80036c0:	48000800 	.word	0x48000800
 80036c4:	48000c00 	.word	0x48000c00
 80036c8:	40010400 	.word	0x40010400

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fcec 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40010400 	.word	0x40010400

0800372c <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40007000 	.word	0x40007000

0800374c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003752:	af00      	add	r7, sp, #0
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f000 bef4 	b.w	800454e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 816a 	beq.w	8003a4a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003776:	4bb3      	ldr	r3, [pc, #716]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d00c      	beq.n	800379c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003782:	4bb0      	ldr	r3, [pc, #704]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d159      	bne.n	8003842 <HAL_RCC_OscConfig+0xf6>
 800378e:	4bad      	ldr	r3, [pc, #692]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379a:	d152      	bne.n	8003842 <HAL_RCC_OscConfig+0xf6>
 800379c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80037b0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b4:	fab3 f383 	clz	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_OscConfig+0x82>
 80037c8:	4b9e      	ldr	r3, [pc, #632]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0xae>
 80037ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80037e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80037ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80037f6:	4b93      	ldr	r3, [pc, #588]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037fe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003802:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003806:	fa92 f2a2 	rbit	r2, r2
 800380a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800380e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003812:	fab2 f282 	clz	r2, r2
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	f042 0220 	orr.w	r2, r2, #32
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	f002 021f 	and.w	r2, r2, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f202 	lsl.w	r2, r1, r2
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 810c 	beq.w	8003a48 <HAL_RCC_OscConfig+0x2fc>
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 8106 	bne.w	8003a48 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f000 be86 	b.w	800454e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003842:	1d3b      	adds	r3, r7, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384c:	d106      	bne.n	800385c <HAL_RCC_OscConfig+0x110>
 800384e:	4b7d      	ldr	r3, [pc, #500]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a7c      	ldr	r2, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e030      	b.n	80038be <HAL_RCC_OscConfig+0x172>
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0x134>
 8003866:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a76      	ldr	r2, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a73      	ldr	r2, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01e      	b.n	80038be <HAL_RCC_OscConfig+0x172>
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x15a>
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6c      	ldr	r2, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 800389e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	e00b      	b.n	80038be <HAL_RCC_OscConfig+0x172>
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a66      	ldr	r2, [pc, #408]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b64      	ldr	r3, [pc, #400]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a63      	ldr	r2, [pc, #396]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80038b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80038c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c2:	f023 020f 	bic.w	r2, r3, #15
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	495d      	ldr	r1, [pc, #372]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d059      	beq.n	8003990 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7ff fc42 	bl	8003164 <HAL_GetTick>
 80038e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e6:	f7ff fc3d 	bl	8003164 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d902      	bls.n	80038fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	f000 be29 	b.w	800454e <HAL_RCC_OscConfig+0xe02>
 80038fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003900:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003910:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d102      	bne.n	800392e <HAL_RCC_OscConfig+0x1e2>
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	e015      	b.n	800395a <HAL_RCC_OscConfig+0x20e>
 800392e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003932:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800393a:	fa93 f3a3 	rbit	r3, r3
 800393e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003946:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800394a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800395e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003962:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003966:	fa92 f2a2 	rbit	r2, r2
 800396a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800396e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f042 0220 	orr.w	r2, r2, #32
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f002 021f 	and.w	r2, r2, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ab      	beq.n	80038e6 <HAL_RCC_OscConfig+0x19a>
 800398e:	e05c      	b.n	8003a4a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7ff fbe8 	bl	8003164 <HAL_GetTick>
 8003994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399a:	f7ff fbe3 	bl	8003164 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d902      	bls.n	80039b0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	f000 bdcf 	b.w	800454e <HAL_RCC_OscConfig+0xe02>
 80039b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80039c4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d102      	bne.n	80039e2 <HAL_RCC_OscConfig+0x296>
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x2c2>
 80039e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80039f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80039fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x2f8>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003a16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003a1a:	fa92 f2a2 	rbit	r2, r2
 8003a1e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003a22:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003a26:	fab2 f282 	clz	r2, r2
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	f042 0220 	orr.w	r2, r2, #32
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	f002 021f 	and.w	r2, r2, #31
 8003a36:	2101      	movs	r1, #1
 8003a38:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ab      	bne.n	800399a <HAL_RCC_OscConfig+0x24e>
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_OscConfig+0x2fe>
 8003a44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 816f 	beq.w	8003d38 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a5a:	4bd0      	ldr	r3, [pc, #832]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a66:	4bcd      	ldr	r3, [pc, #820]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d16c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x400>
 8003a72:	4bca      	ldr	r3, [pc, #808]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d166      	bne.n	8003b4c <HAL_RCC_OscConfig+0x400>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003a90:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_OscConfig+0x362>
 8003aa8:	4bbc      	ldr	r3, [pc, #752]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e013      	b.n	8003ad6 <HAL_RCC_OscConfig+0x38a>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003ac6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003ad2:	4bb2      	ldr	r3, [pc, #712]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003adc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003ae8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f002 021f 	and.w	r2, r2, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3cc>
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f000 bd1b 	b.w	800454e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4ba0      	ldr	r3, [pc, #640]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b20:	1d3b      	adds	r3, r7, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	21f8      	movs	r1, #248	; 0xf8
 8003b28:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003b30:	fa91 f1a1 	rbit	r1, r1
 8003b34:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003b38:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003b3c:	fab1 f181 	clz	r1, r1
 8003b40:	b2c9      	uxtb	r1, r1
 8003b42:	408b      	lsls	r3, r1
 8003b44:	4995      	ldr	r1, [pc, #596]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	e0f5      	b.n	8003d38 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8085 	beq.w	8003c62 <HAL_RCC_OscConfig+0x516>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003b62:	fa93 f3a3 	rbit	r3, r3
 8003b66:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003b6a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7ff faee 	bl	8003164 <HAL_GetTick>
 8003b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8e:	f7ff fae9 	bl	8003164 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	f000 bcd5 	b.w	800454e <HAL_RCC_OscConfig+0xe02>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003bb6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x488>
 8003bce:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	e013      	b.n	8003bfc <HAL_RCC_OscConfig+0x4b0>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003be6:	2302      	movs	r3, #2
 8003be8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003bec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003bf0:	fa93 f3a3 	rbit	r3, r3
 8003bf4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003bf8:	4b68      	ldr	r3, [pc, #416]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003c02:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003c06:	fa92 f2a2 	rbit	r2, r2
 8003c0a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003c0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c12:	fab2 f282 	clz	r2, r2
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f042 0220 	orr.w	r2, r2, #32
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	f002 021f 	and.w	r2, r2, #31
 8003c22:	2101      	movs	r1, #1
 8003c24:	fa01 f202 	lsl.w	r2, r1, r2
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0af      	beq.n	8003b8e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2e:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	21f8      	movs	r1, #248	; 0xf8
 8003c3e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003c46:	fa91 f1a1 	rbit	r1, r1
 8003c4a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003c4e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003c52:	fab1 f181 	clz	r1, r1
 8003c56:	b2c9      	uxtb	r1, r1
 8003c58:	408b      	lsls	r3, r1
 8003c5a:	4950      	ldr	r1, [pc, #320]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	e06a      	b.n	8003d38 <HAL_RCC_OscConfig+0x5ec>
 8003c62:	2301      	movs	r3, #1
 8003c64:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c82:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7ff fa69 	bl	8003164 <HAL_GetTick>
 8003c92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c98:	f7ff fa64 	bl	8003164 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d902      	bls.n	8003cae <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	f000 bc50 	b.w	800454e <HAL_RCC_OscConfig+0xe02>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003cb8:	fa93 f3a3 	rbit	r3, r3
 8003cbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc4:	fab3 f383 	clz	r3, r3
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d102      	bne.n	8003cde <HAL_RCC_OscConfig+0x592>
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	e013      	b.n	8003d06 <HAL_RCC_OscConfig+0x5ba>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003cf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003d02:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <HAL_RCC_OscConfig+0x650>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2202      	movs	r2, #2
 8003d08:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003d0c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003d10:	fa92 f2a2 	rbit	r2, r2
 8003d14:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003d18:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003d1c:	fab2 f282 	clz	r2, r2
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f042 0220 	orr.w	r2, r2, #32
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f002 021f 	and.w	r2, r2, #31
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1af      	bne.n	8003c98 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80da 	beq.w	8003efc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d069      	beq.n	8003e26 <HAL_RCC_OscConfig+0x6da>
 8003d52:	2301      	movs	r3, #1
 8003d54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x654>)
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	461a      	mov	r2, r3
 8003d78:	2301      	movs	r3, #1
 8003d7a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7c:	f7ff f9f2 	bl	8003164 <HAL_GetTick>
 8003d80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d84:	e00e      	b.n	8003da4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d86:	f7ff f9ed 	bl	8003164 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d906      	bls.n	8003da4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e3d9      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	10908120 	.word	0x10908120
 8003da4:	2302      	movs	r3, #2
 8003da6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003db6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003dba:	2202      	movs	r2, #2
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	fa93 f2a3 	rbit	r2, r3
 8003dc8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	fa93 f2a3 	rbit	r2, r3
 8003de0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003de4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	4ba5      	ldr	r3, [pc, #660]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003de8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003dee:	2102      	movs	r1, #2
 8003df0:	6019      	str	r1, [r3, #0]
 8003df2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	fa93 f1a3 	rbit	r1, r3
 8003dfc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e00:	6019      	str	r1, [r3, #0]
  return result;
 8003e02:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0b0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x63a>
 8003e24:	e06a      	b.n	8003efc <HAL_RCC_OscConfig+0x7b0>
 8003e26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	fa93 f2a3 	rbit	r2, r3
 8003e38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e3c:	601a      	str	r2, [r3, #0]
  return result;
 8003e3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003e42:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b8c      	ldr	r3, [pc, #560]	; (8004080 <HAL_RCC_OscConfig+0x934>)
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	461a      	mov	r2, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e58:	f7ff f984 	bl	8003164 <HAL_GetTick>
 8003e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e60:	e009      	b.n	8003e76 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e62:	f7ff f97f 	bl	8003164 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e36b      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 8003e76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e92:	2202      	movs	r2, #2
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	fa93 f2a3 	rbit	r2, r3
 8003ea0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003eaa:	2202      	movs	r2, #2
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	fa93 f2a3 	rbit	r2, r3
 8003eb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ebc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebe:	4b6f      	ldr	r3, [pc, #444]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	6019      	str	r1, [r3, #0]
 8003eca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	fa93 f1a3 	rbit	r1, r3
 8003ed4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ed8:	6019      	str	r1, [r3, #0]
  return result;
 8003eda:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1b2      	bne.n	8003e62 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8158 	beq.w	80041bc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b5a      	ldr	r3, [pc, #360]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d112      	bne.n	8003f44 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	4b57      	ldr	r3, [pc, #348]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	4a56      	ldr	r2, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	61d3      	str	r3, [r2, #28]
 8003f2a:	4b54      	ldr	r3, [pc, #336]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_RCC_OscConfig+0x938>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11a      	bne.n	8003f86 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f50:	4b4c      	ldr	r3, [pc, #304]	; (8004084 <HAL_RCC_OscConfig+0x938>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <HAL_RCC_OscConfig+0x938>)
 8003f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5c:	f7ff f902 	bl	8003164 <HAL_GetTick>
 8003f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f64:	e009      	b.n	8003f7a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f66:	f7ff f8fd 	bl	8003164 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e2e9      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	4b42      	ldr	r3, [pc, #264]	; (8004084 <HAL_RCC_OscConfig+0x938>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ef      	beq.n	8003f66 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x852>
 8003f90:	4b3a      	ldr	r3, [pc, #232]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	4a39      	ldr	r2, [pc, #228]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6213      	str	r3, [r2, #32]
 8003f9c:	e02f      	b.n	8003ffe <HAL_RCC_OscConfig+0x8b2>
 8003f9e:	1d3b      	adds	r3, r7, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10c      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x876>
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4a33      	ldr	r2, [pc, #204]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	6213      	str	r3, [r2, #32]
 8003fb4:	4b31      	ldr	r3, [pc, #196]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	4a30      	ldr	r2, [pc, #192]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fba:	f023 0304 	bic.w	r3, r3, #4
 8003fbe:	6213      	str	r3, [r2, #32]
 8003fc0:	e01d      	b.n	8003ffe <HAL_RCC_OscConfig+0x8b2>
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	d10c      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x89a>
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
 8003fd6:	6213      	str	r3, [r2, #32]
 8003fd8:	4b28      	ldr	r3, [pc, #160]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	6213      	str	r3, [r2, #32]
 8003fe4:	e00b      	b.n	8003ffe <HAL_RCC_OscConfig+0x8b2>
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a24      	ldr	r2, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a21      	ldr	r2, [pc, #132]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d06b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004008:	f7ff f8ac 	bl	8003164 <HAL_GetTick>
 800400c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	e00b      	b.n	800402a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7ff f8a7 	bl	8003164 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e291      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 800402a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800402e:	2202      	movs	r2, #2
 8004030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fa93 f2a3 	rbit	r2, r3
 800403c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004046:	2202      	movs	r2, #2
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	fa93 f2a3 	rbit	r2, r3
 8004054:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004058:	601a      	str	r2, [r3, #0]
  return result;
 800405a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800405e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d109      	bne.n	8004088 <HAL_RCC_OscConfig+0x93c>
 8004074:	4b01      	ldr	r3, [pc, #4]	; (800407c <HAL_RCC_OscConfig+0x930>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	e014      	b.n	80040a4 <HAL_RCC_OscConfig+0x958>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	10908120 	.word	0x10908120
 8004084:	40007000 	.word	0x40007000
 8004088:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800408c:	2202      	movs	r2, #2
 800408e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	fa93 f2a3 	rbit	r2, r3
 800409a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	4bbb      	ldr	r3, [pc, #748]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80040a8:	2102      	movs	r1, #2
 80040aa:	6011      	str	r1, [r2, #0]
 80040ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	fa92 f1a2 	rbit	r1, r2
 80040b6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80040ba:	6011      	str	r1, [r2, #0]
  return result;
 80040bc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	fab2 f282 	clz	r2, r2
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f002 021f 	and.w	r2, r2, #31
 80040d2:	2101      	movs	r1, #1
 80040d4:	fa01 f202 	lsl.w	r2, r1, r2
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d099      	beq.n	8004012 <HAL_RCC_OscConfig+0x8c6>
 80040de:	e063      	b.n	80041a8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e0:	f7ff f840 	bl	8003164 <HAL_GetTick>
 80040e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e8:	e00b      	b.n	8004102 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7ff f83b 	bl	8003164 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e225      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 8004102:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004106:	2202      	movs	r2, #2
 8004108:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fa93 f2a3 	rbit	r2, r3
 8004114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800411e:	2202      	movs	r2, #2
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	fa93 f2a3 	rbit	r2, r3
 800412c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004130:	601a      	str	r2, [r3, #0]
  return result;
 8004132:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004136:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f043 0302 	orr.w	r3, r3, #2
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d102      	bne.n	8004152 <HAL_RCC_OscConfig+0xa06>
 800414c:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	e00d      	b.n	800416e <HAL_RCC_OscConfig+0xa22>
 8004152:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004156:	2202      	movs	r2, #2
 8004158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f2a3 	rbit	r2, r3
 8004164:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	4b89      	ldr	r3, [pc, #548]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004172:	2102      	movs	r1, #2
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	fa92 f1a2 	rbit	r1, r2
 8004180:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004184:	6011      	str	r1, [r2, #0]
  return result;
 8004186:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	fab2 f282 	clz	r2, r2
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	f002 021f 	and.w	r2, r2, #31
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f202 	lsl.w	r2, r1, r2
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1a0      	bne.n	80040ea <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041a8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b0:	4b77      	ldr	r3, [pc, #476]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4a76      	ldr	r2, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80041b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ba:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041bc:	1d3b      	adds	r3, r7, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 81c2 	beq.w	800454c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c8:	4b71      	ldr	r3, [pc, #452]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	f000 819c 	beq.w	800450e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	f040 8114 	bne.w	800440a <HAL_RCC_OscConfig+0xcbe>
 80041e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	fa93 f2a3 	rbit	r2, r3
 80041f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80041fa:	601a      	str	r2, [r3, #0]
  return result;
 80041fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004200:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800420c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	461a      	mov	r2, r3
 8004214:	2300      	movs	r3, #0
 8004216:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe ffa4 	bl	8003164 <HAL_GetTick>
 800421c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004220:	e009      	b.n	8004236 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe ff9f 	bl	8003164 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e18b      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 8004236:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800423a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800423e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	fa93 f2a3 	rbit	r2, r3
 800424a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800424e:	601a      	str	r2, [r3, #0]
  return result;
 8004250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004254:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <HAL_RCC_OscConfig+0xb24>
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	e01b      	b.n	80042a8 <HAL_RCC_OscConfig+0xb5c>
 8004270:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004274:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	fa93 f2a3 	rbit	r2, r3
 8004284:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800428e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	fa93 f2a3 	rbit	r2, r3
 800429e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	4b3a      	ldr	r3, [pc, #232]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042b0:	6011      	str	r1, [r2, #0]
 80042b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	fa92 f1a2 	rbit	r1, r2
 80042bc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80042c0:	6011      	str	r1, [r2, #0]
  return result;
 80042c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	fab2 f282 	clz	r2, r2
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	f042 0220 	orr.w	r2, r2, #32
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	f002 021f 	and.w	r2, r2, #31
 80042d8:	2101      	movs	r1, #1
 80042da:	fa01 f202 	lsl.w	r2, r1, r2
 80042de:	4013      	ands	r3, r2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d19e      	bne.n	8004222 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042f2:	1d3b      	adds	r3, r7, #4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	4925      	ldr	r1, [pc, #148]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
 8004300:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	fa93 f2a3 	rbit	r2, r3
 8004314:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004318:	601a      	str	r2, [r3, #0]
  return result;
 800431a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800431e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004320:	fab3 f383 	clz	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800432a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	461a      	mov	r2, r3
 8004332:	2301      	movs	r3, #1
 8004334:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fe ff15 	bl	8003164 <HAL_GetTick>
 800433a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800433e:	e009      	b.n	8004354 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe ff10 	bl	8003164 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e0fc      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 8004354:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800435c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	fa93 f2a3 	rbit	r2, r3
 8004368:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800436c:	601a      	str	r2, [r3, #0]
  return result;
 800436e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004372:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004374:	fab3 f383 	clz	r3, r3
 8004378:	b2db      	uxtb	r3, r3
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d105      	bne.n	8004394 <HAL_RCC_OscConfig+0xc48>
 8004388:	4b01      	ldr	r3, [pc, #4]	; (8004390 <HAL_RCC_OscConfig+0xc44>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	e01e      	b.n	80043cc <HAL_RCC_OscConfig+0xc80>
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000
 8004394:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800439c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	fa93 f2a3 	rbit	r2, r3
 80043a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	fa93 f2a3 	rbit	r2, r3
 80043c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_OscConfig+0xe0c>)
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	fa92 f1a2 	rbit	r1, r2
 80043e0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80043e4:	6011      	str	r1, [r2, #0]
  return result;
 80043e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80043ea:	6812      	ldr	r2, [r2, #0]
 80043ec:	fab2 f282 	clz	r2, r2
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	f042 0220 	orr.w	r2, r2, #32
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	f002 021f 	and.w	r2, r2, #31
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d09b      	beq.n	8004340 <HAL_RCC_OscConfig+0xbf4>
 8004408:	e0a0      	b.n	800454c <HAL_RCC_OscConfig+0xe00>
 800440a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800440e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004412:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	fa93 f2a3 	rbit	r2, r3
 800441e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004422:	601a      	str	r2, [r3, #0]
  return result;
 8004424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004428:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	fab3 f383 	clz	r3, r3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004434:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	461a      	mov	r2, r3
 800443c:	2300      	movs	r3, #0
 800443e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fe fe90 	bl	8003164 <HAL_GetTick>
 8004444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004448:	e009      	b.n	800445e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444a:	f7fe fe8b 	bl	8003164 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e077      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
 800445e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004462:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	fa93 f2a3 	rbit	r2, r3
 8004472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004476:	601a      	str	r2, [r3, #0]
  return result;
 8004478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800447e:	fab3 f383 	clz	r3, r3
 8004482:	b2db      	uxtb	r3, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <HAL_RCC_OscConfig+0xd4c>
 8004492:	4b31      	ldr	r3, [pc, #196]	; (8004558 <HAL_RCC_OscConfig+0xe0c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	e01b      	b.n	80044d0 <HAL_RCC_OscConfig+0xd84>
 8004498:	f107 0320 	add.w	r3, r7, #32
 800449c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a2:	f107 0320 	add.w	r3, r7, #32
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	fa93 f2a3 	rbit	r2, r3
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	f107 0318 	add.w	r3, r7, #24
 80044b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	f107 0318 	add.w	r3, r7, #24
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	fa93 f2a3 	rbit	r2, r3
 80044c6:	f107 0314 	add.w	r3, r7, #20
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <HAL_RCC_OscConfig+0xe0c>)
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	f107 0210 	add.w	r2, r7, #16
 80044d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044d8:	6011      	str	r1, [r2, #0]
 80044da:	f107 0210 	add.w	r2, r7, #16
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	fa92 f1a2 	rbit	r1, r2
 80044e4:	f107 020c 	add.w	r2, r7, #12
 80044e8:	6011      	str	r1, [r2, #0]
  return result;
 80044ea:	f107 020c 	add.w	r2, r7, #12
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	fab2 f282 	clz	r2, r2
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	f002 021f 	and.w	r2, r2, #31
 8004500:	2101      	movs	r1, #1
 8004502:	fa01 f202 	lsl.w	r2, r1, r2
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d19e      	bne.n	800444a <HAL_RCC_OscConfig+0xcfe>
 800450c:	e01e      	b.n	800454c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450e:	1d3b      	adds	r3, r7, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e018      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800451c:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <HAL_RCC_OscConfig+0xe0c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004524:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800452c:	1d3b      	adds	r3, r7, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	429a      	cmp	r2, r3
 8004534:	d108      	bne.n	8004548 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004536:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800453a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800453e:	1d3b      	adds	r3, r7, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b09e      	sub	sp, #120	; 0x78
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e162      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b90      	ldr	r3, [pc, #576]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d910      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b8d      	ldr	r3, [pc, #564]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 0207 	bic.w	r2, r3, #7
 800458a:	498b      	ldr	r1, [pc, #556]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b89      	ldr	r3, [pc, #548]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e14a      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b82      	ldr	r3, [pc, #520]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	497f      	ldr	r1, [pc, #508]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80dc 	beq.w	8004788 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d13c      	bne.n	8004652 <HAL_RCC_ClockConfig+0xf6>
 80045d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80045dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e0:	fa93 f3a3 	rbit	r3, r3
 80045e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80045e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <HAL_RCC_ClockConfig+0xa6>
 80045fc:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	e00f      	b.n	8004622 <HAL_RCC_ClockConfig+0xc6>
 8004602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004606:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	667b      	str	r3, [r7, #100]	; 0x64
 8004610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004614:	663b      	str	r3, [r7, #96]	; 0x60
 8004616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004618:	fa93 f3a3 	rbit	r3, r3
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461e:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004626:	65ba      	str	r2, [r7, #88]	; 0x58
 8004628:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800462a:	fa92 f2a2 	rbit	r2, r2
 800462e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004630:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004632:	fab2 f282 	clz	r2, r2
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	f042 0220 	orr.w	r2, r2, #32
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	f002 021f 	and.w	r2, r2, #31
 8004642:	2101      	movs	r1, #1
 8004644:	fa01 f202 	lsl.w	r2, r1, r2
 8004648:	4013      	ands	r3, r2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d17b      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0f3      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d13c      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x178>
 800465a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004662:	fa93 f3a3 	rbit	r3, r3
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	b2db      	uxtb	r3, r3
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_RCC_ClockConfig+0x128>
 800467e:	4b4f      	ldr	r3, [pc, #316]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	e00f      	b.n	80046a4 <HAL_RCC_ClockConfig+0x148>
 8004684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004688:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	647b      	str	r3, [r7, #68]	; 0x44
 8004692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004696:	643b      	str	r3, [r7, #64]	; 0x40
 8004698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469a:	fa93 f3a3 	rbit	r3, r3
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046a0:	4b46      	ldr	r3, [pc, #280]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80046aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ac:	fa92 f2a2 	rbit	r2, r2
 80046b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80046b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046b4:	fab2 f282 	clz	r2, r2
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	f042 0220 	orr.w	r2, r2, #32
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	f002 021f 	and.w	r2, r2, #31
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d13a      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b2      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
 80046d4:	2302      	movs	r3, #2
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d102      	bne.n	80046fc <HAL_RCC_ClockConfig+0x1a0>
 80046f6:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	e00d      	b.n	8004718 <HAL_RCC_ClockConfig+0x1bc>
 80046fc:	2302      	movs	r3, #2
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	fa93 f3a3 	rbit	r3, r3
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
 8004708:	2302      	movs	r3, #2
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	fa93 f3a3 	rbit	r3, r3
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	4b29      	ldr	r3, [pc, #164]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2202      	movs	r2, #2
 800471a:	61ba      	str	r2, [r7, #24]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	fa92 f2a2 	rbit	r2, r2
 8004722:	617a      	str	r2, [r7, #20]
  return result;
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	fab2 f282 	clz	r2, r2
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	f042 0220 	orr.w	r2, r2, #32
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	f002 021f 	and.w	r2, r2, #31
 8004736:	2101      	movs	r1, #1
 8004738:	fa01 f202 	lsl.w	r2, r1, r2
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e079      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f023 0203 	bic.w	r2, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	491a      	ldr	r1, [pc, #104]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004758:	f7fe fd04 	bl	8003164 <HAL_GetTick>
 800475c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475e:	e00a      	b.n	8004776 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fe fd00 	bl	8003164 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e061      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_RCC_ClockConfig+0x260>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 020c 	and.w	r2, r3, #12
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	429a      	cmp	r2, r3
 8004786:	d1eb      	bne.n	8004760 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d214      	bcs.n	80047c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 0207 	bic.w	r2, r3, #7
 800479e:	4906      	ldr	r1, [pc, #24]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <HAL_RCC_ClockConfig+0x25c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e040      	b.n	800483a <HAL_RCC_ClockConfig+0x2de>
 80047b8:	40022000 	.word	0x40022000
 80047bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047cc:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCC_ClockConfig+0x2e8>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	491a      	ldr	r1, [pc, #104]	; (8004844 <HAL_RCC_ClockConfig+0x2e8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ea:	4b16      	ldr	r3, [pc, #88]	; (8004844 <HAL_RCC_ClockConfig+0x2e8>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4912      	ldr	r1, [pc, #72]	; (8004844 <HAL_RCC_ClockConfig+0x2e8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047fe:	f000 f829 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8004802:	4601      	mov	r1, r0
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <HAL_RCC_ClockConfig+0x2e8>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480c:	22f0      	movs	r2, #240	; 0xf0
 800480e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	fa92 f2a2 	rbit	r2, r2
 8004816:	60fa      	str	r2, [r7, #12]
  return result;
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	fab2 f282 	clz	r2, r2
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	40d3      	lsrs	r3, r2
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x2ec>)
 8004824:	5cd3      	ldrb	r3, [r2, r3]
 8004826:	fa21 f303 	lsr.w	r3, r1, r3
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <HAL_RCC_ClockConfig+0x2f0>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800482e:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_RCC_ClockConfig+0x2f4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fc52 	bl	80030dc <HAL_InitTick>
  
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3778      	adds	r7, #120	; 0x78
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	080070c0 	.word	0x080070c0
 800484c:	2000000c 	.word	0x2000000c
 8004850:	2000003c 	.word	0x2000003c

08004854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b480      	push	{r7}
 8004856:	b08b      	sub	sp, #44	; 0x2c
 8004858:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	2300      	movs	r3, #0
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800486e:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b04      	cmp	r3, #4
 800487c:	d002      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x30>
 800487e:	2b08      	cmp	r3, #8
 8004880:	d003      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0x36>
 8004882:	e03c      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004884:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004886:	623b      	str	r3, [r7, #32]
      break;
 8004888:	e03c      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004890:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004894:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	fa92 f2a2 	rbit	r2, r2
 800489c:	607a      	str	r2, [r7, #4]
  return result;
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	fab2 f282 	clz	r2, r2
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	40d3      	lsrs	r3, r2
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_RCC_GetSysClockFreq+0xc8>)
 80048aa:	5cd3      	ldrb	r3, [r2, r3]
 80048ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80048ae:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	220f      	movs	r2, #15
 80048b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	fa92 f2a2 	rbit	r2, r2
 80048c0:	60fa      	str	r2, [r7, #12]
  return result;
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	fab2 f282 	clz	r2, r2
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	40d3      	lsrs	r3, r2
 80048cc:	4a14      	ldr	r2, [pc, #80]	; (8004920 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80048dc:	4a0e      	ldr	r2, [pc, #56]	; (8004918 <HAL_RCC_GetSysClockFreq+0xc4>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
 80048ec:	e004      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4a0c      	ldr	r2, [pc, #48]	; (8004924 <HAL_RCC_GetSysClockFreq+0xd0>)
 80048f2:	fb02 f303 	mul.w	r3, r2, r3
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	623b      	str	r3, [r7, #32]
      break;
 80048fc:	e002      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004900:	623b      	str	r3, [r7, #32]
      break;
 8004902:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004904:	6a3b      	ldr	r3, [r7, #32]
}
 8004906:	4618      	mov	r0, r3
 8004908:	372c      	adds	r7, #44	; 0x2c
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	017d7840 	.word	0x017d7840
 800491c:	080070d8 	.word	0x080070d8
 8004920:	080070e8 	.word	0x080070e8
 8004924:	003d0900 	.word	0x003d0900
 8004928:	007a1200 	.word	0x007a1200

0800492c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <HAL_RCC_GetHCLKFreq+0x14>)
 8004932:	681b      	ldr	r3, [r3, #0]
}
 8004934:	4618      	mov	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	2000000c 	.word	0x2000000c

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800494a:	f7ff ffef 	bl	800492c <HAL_RCC_GetHCLKFreq>
 800494e:	4601      	mov	r1, r0
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004958:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800495c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	fa92 f2a2 	rbit	r2, r2
 8004964:	603a      	str	r2, [r7, #0]
  return result;
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	fab2 f282 	clz	r2, r2
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	40d3      	lsrs	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004978:	4618      	mov	r0, r3
 800497a:	3708      	adds	r7, #8
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	080070d0 	.word	0x080070d0

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800498e:	f7ff ffcd 	bl	800492c <HAL_RCC_GetHCLKFreq>
 8004992:	4601      	mov	r1, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800499c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80049a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	fa92 f2a2 	rbit	r2, r2
 80049a8:	603a      	str	r2, [r7, #0]
  return result;
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	fab2 f282 	clz	r2, r2
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	40d3      	lsrs	r3, r2
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80049b6:	5cd3      	ldrb	r3, [r2, r3]
 80049b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021000 	.word	0x40021000
 80049c8:	080070d0 	.word	0x080070d0

080049cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b092      	sub	sp, #72	; 0x48
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80d4 	beq.w	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f0:	4b4e      	ldr	r3, [pc, #312]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10e      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fc:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	4a4a      	ldr	r2, [pc, #296]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a06:	61d3      	str	r3, [r2, #28]
 8004a08:	4b48      	ldr	r3, [pc, #288]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a14:	2301      	movs	r3, #1
 8004a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a1a:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a26:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a41      	ldr	r2, [pc, #260]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fe fb97 	bl	8003164 <HAL_GetTick>
 8004a36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fe fb93 	bl	8003164 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e13c      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	4b38      	ldr	r3, [pc, #224]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a58:	4b34      	ldr	r3, [pc, #208]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8084 	beq.w	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d07c      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a78:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	fa93 f3a3 	rbit	r3, r3
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab6:	fab3 f383 	clz	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04b      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fe fb43 	bl	8003164 <HAL_GetTick>
 8004ade:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae0:	e00a      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae2:	f7fe fb3f 	bl	8003164 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d901      	bls.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0e6      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004af8:	2302      	movs	r3, #2
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	2302      	movs	r3, #2
 8004b06:	623b      	str	r3, [r7, #32]
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	61fb      	str	r3, [r7, #28]
  return result;
 8004b10:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d108      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004b26:	4b01      	ldr	r3, [pc, #4]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	e00d      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40007000 	.word	0x40007000
 8004b34:	10908100 	.word	0x10908100
 8004b38:	2302      	movs	r3, #2
 8004b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	4b62      	ldr	r3, [pc, #392]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	2202      	movs	r2, #2
 8004b4a:	613a      	str	r2, [r7, #16]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	fa92 f2a2 	rbit	r2, r2
 8004b52:	60fa      	str	r2, [r7, #12]
  return result;
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	fab2 f282 	clz	r2, r2
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f002 021f 	and.w	r2, r2, #31
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0b7      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b72:	4b57      	ldr	r3, [pc, #348]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4954      	ldr	r1, [pc, #336]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d105      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b8c:	4b50      	ldr	r3, [pc, #320]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	4a4f      	ldr	r2, [pc, #316]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ba4:	4b4a      	ldr	r3, [pc, #296]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	f023 0203 	bic.w	r2, r3, #3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4947      	ldr	r1, [pc, #284]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc2:	4b43      	ldr	r3, [pc, #268]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	f023 0210 	bic.w	r2, r3, #16
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4940      	ldr	r1, [pc, #256]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be0:	4b3b      	ldr	r3, [pc, #236]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	f023 0220 	bic.w	r2, r3, #32
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	4938      	ldr	r1, [pc, #224]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bfe:	4b34      	ldr	r3, [pc, #208]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	4931      	ldr	r1, [pc, #196]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4929      	ldr	r1, [pc, #164]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004c3a:	4b25      	ldr	r3, [pc, #148]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	4922      	ldr	r1, [pc, #136]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	491a      	ldr	r1, [pc, #104]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	4913      	ldr	r1, [pc, #76]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	490b      	ldr	r1, [pc, #44]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3748      	adds	r7, #72	; 0x48
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e083      	b.n	8004dee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	7f5b      	ldrb	r3, [r3, #29]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd f896 	bl	8001e28 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	22ca      	movs	r2, #202	; 0xca
 8004d08:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2253      	movs	r2, #83	; 0x53
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9fb 	bl	800510e <RTC_EnterInitMode>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	22ff      	movs	r2, #255	; 0xff
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e05e      	b.n	8004dee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6899      	ldr	r1, [r3, #8]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	68d2      	ldr	r2, [r2, #12]
 8004d6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	041a      	lsls	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10e      	bne.n	8004dbc <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f98d 	bl	80050be <HAL_RTC_WaitForSynchro>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	22ff      	movs	r2, #255	; 0xff
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2204      	movs	r2, #4
 8004db6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e018      	b.n	8004dee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	22ff      	movs	r2, #255	; 0xff
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004dec:	2300      	movs	r3, #0
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004df6:	b590      	push	{r4, r7, lr}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	7f1b      	ldrb	r3, [r3, #28]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_RTC_SetTime+0x1c>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e0aa      	b.n	8004f68 <HAL_RTC_SetTime+0x172>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d126      	bne.n	8004e72 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2200      	movs	r2, #0
 8004e36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 f992 	bl	8005166 <RTC_ByteToBcd2>
 8004e42:	4603      	mov	r3, r0
 8004e44:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	785b      	ldrb	r3, [r3, #1]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f98b 	bl	8005166 <RTC_ByteToBcd2>
 8004e50:	4603      	mov	r3, r0
 8004e52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e54:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	789b      	ldrb	r3, [r3, #2]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f983 	bl	8005166 <RTC_ByteToBcd2>
 8004e60:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004e62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	78db      	ldrb	r3, [r3, #3]
 8004e6a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e018      	b.n	8004ea4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2200      	movs	r2, #0
 8004e84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	785b      	ldrb	r3, [r3, #1]
 8004e90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004e92:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004e98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	78db      	ldrb	r3, [r3, #3]
 8004e9e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	22ca      	movs	r2, #202	; 0xca
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2253      	movs	r2, #83	; 0x53
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f92a 	bl	800510e <RTC_EnterInitMode>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	22ff      	movs	r2, #255	; 0xff
 8004ec6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2204      	movs	r2, #4
 8004ecc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e047      	b.n	8004f68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ee2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ef6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d111      	bne.n	8004f52 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 f8c5 	bl	80050be <HAL_RTC_WaitForSynchro>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00b      	beq.n	8004f52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	22ff      	movs	r2, #255	; 0xff
 8004f40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2204      	movs	r2, #4
 8004f46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e00a      	b.n	8004f68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	22ff      	movs	r2, #255	; 0xff
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}

08004f70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f70:	b590      	push	{r4, r7, lr}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	7f1b      	ldrb	r3, [r3, #28]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_RTC_SetDate+0x1c>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e094      	b.n	80050b6 <HAL_RTC_SetDate+0x146>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2202      	movs	r2, #2
 8004f96:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <HAL_RTC_SetDate+0x4c>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	f023 0310 	bic.w	r3, r3, #16
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	330a      	adds	r3, #10
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d11c      	bne.n	8004ffc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f8cd 	bl	8005166 <RTC_ByteToBcd2>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f8c6 	bl	8005166 <RTC_ByteToBcd2>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fde:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	789b      	ldrb	r3, [r3, #2]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f8be 	bl	8005166 <RTC_ByteToBcd2>
 8004fea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
 8004ffa:	e00e      	b.n	800501a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	78db      	ldrb	r3, [r3, #3]
 8005000:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005008:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800500e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	22ca      	movs	r2, #202	; 0xca
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2253      	movs	r2, #83	; 0x53
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f86f 	bl	800510e <RTC_EnterInitMode>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2204      	movs	r2, #4
 8005042:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e033      	b.n	80050b6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005058:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800505c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800506c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d111      	bne.n	80050a0 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 f81e 	bl	80050be <HAL_RTC_WaitForSynchro>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	22ff      	movs	r2, #255	; 0xff
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2204      	movs	r2, #4
 8005094:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e00a      	b.n	80050b6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	22ff      	movs	r2, #255	; 0xff
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd90      	pop	{r4, r7, pc}

080050be <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80050da:	f7fe f843 	bl	8003164 <HAL_GetTick>
 80050de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80050e0:	e009      	b.n	80050f6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050e2:	f7fe f83f 	bl	8003164 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f0:	d901      	bls.n	80050f6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e007      	b.n	8005106 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0ee      	beq.n	80050e2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d119      	bne.n	800515c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005132:	f7fe f817 	bl	8003164 <HAL_GetTick>
 8005136:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005138:	e009      	b.n	800514e <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800513a:	f7fe f813 	bl	8003164 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005148:	d901      	bls.n	800514e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e007      	b.n	800515e <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ee      	beq.n	800513a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	4603      	mov	r3, r0
 800516e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005174:	e005      	b.n	8005182 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3301      	adds	r3, #1
 800517a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	3b0a      	subs	r3, #10
 8005180:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b09      	cmp	r3, #9
 8005186:	d8f6      	bhi.n	8005176 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	b2da      	uxtb	r2, r3
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	4313      	orrs	r3, r2
 8005194:	b2db      	uxtb	r3, r3
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e09d      	b.n	80052f0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051c4:	d009      	beq.n	80051da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	61da      	str	r2, [r3, #28]
 80051cc:	e005      	b.n	80051da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fc fe3d 	bl	8001e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800521a:	d902      	bls.n	8005222 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e002      	b.n	8005228 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005226:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005230:	d007      	beq.n	8005242 <HAL_SPI_Init+0xa0>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800523a:	d002      	beq.n	8005242 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	ea42 0103 	orr.w	r1, r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0204 	and.w	r2, r3, #4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80052be:	ea42 0103 	orr.w	r1, r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_SPI_Transmit+0x22>
 8005316:	2302      	movs	r3, #2
 8005318:	e158      	b.n	80055cc <HAL_SPI_Transmit+0x2d4>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005322:	f7fd ff1f 	bl	8003164 <HAL_GetTick>
 8005326:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d002      	beq.n	800533e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005338:	2302      	movs	r3, #2
 800533a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800533c:	e13d      	b.n	80055ba <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_SPI_Transmit+0x52>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800534e:	e134      	b.n	80055ba <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2203      	movs	r2, #3
 8005354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539a:	d10f      	bne.n	80053bc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d007      	beq.n	80053da <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053e2:	d94b      	bls.n	800547c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_SPI_Transmit+0xfa>
 80053ec:	8afb      	ldrh	r3, [r7, #22]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d13e      	bne.n	8005470 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005416:	e02b      	b.n	8005470 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b02      	cmp	r3, #2
 8005424:	d112      	bne.n	800544c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	881a      	ldrh	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	1c9a      	adds	r2, r3, #2
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	87da      	strh	r2, [r3, #62]	; 0x3e
 800544a:	e011      	b.n	8005470 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800544c:	f7fd fe8a 	bl	8003164 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d803      	bhi.n	8005464 <HAL_SPI_Transmit+0x16c>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d102      	bne.n	800546a <HAL_SPI_Transmit+0x172>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800546e:	e0a4      	b.n	80055ba <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1ce      	bne.n	8005418 <HAL_SPI_Transmit+0x120>
 800547a:	e07c      	b.n	8005576 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_SPI_Transmit+0x192>
 8005484:	8afb      	ldrh	r3, [r7, #22]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d170      	bne.n	800556c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548e:	b29b      	uxth	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d912      	bls.n	80054ba <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b02      	subs	r3, #2
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054b8:	e058      	b.n	800556c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	330c      	adds	r3, #12
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80054e0:	e044      	b.n	800556c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d12b      	bne.n	8005548 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d912      	bls.n	8005520 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	881a      	ldrh	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b02      	subs	r3, #2
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800551e:	e025      	b.n	800556c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005546:	e011      	b.n	800556c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005548:	f7fd fe0c 	bl	8003164 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d803      	bhi.n	8005560 <HAL_SPI_Transmit+0x268>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d102      	bne.n	8005566 <HAL_SPI_Transmit+0x26e>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	77fb      	strb	r3, [r7, #31]
          goto error;
 800556a:	e026      	b.n	80055ba <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1b5      	bne.n	80054e2 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	6839      	ldr	r1, [r7, #0]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fce4 	bl	8005f48 <SPI_EndRxTxTransaction>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	613b      	str	r3, [r7, #16]
 80055a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e000      	b.n	80055ba <HAL_SPI_Transmit+0x2c2>
  }

error:
 80055b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80055ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f0:	d112      	bne.n	8005618 <HAL_SPI_Receive+0x44>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10e      	bne.n	8005618 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2204      	movs	r2, #4
 80055fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f910 	bl	8005834 <HAL_SPI_TransmitReceive>
 8005614:	4603      	mov	r3, r0
 8005616:	e109      	b.n	800582c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Receive+0x52>
 8005622:	2302      	movs	r3, #2
 8005624:	e102      	b.n	800582c <HAL_SPI_Receive+0x258>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562e:	f7fd fd99 	bl	8003164 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d002      	beq.n	8005646 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005640:	2302      	movs	r3, #2
 8005642:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005644:	e0e9      	b.n	800581a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_SPI_Receive+0x7e>
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005656:	e0e0      	b.n	800581a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2204      	movs	r2, #4
 800565c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056a2:	d908      	bls.n	80056b6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b2:	605a      	str	r2, [r3, #4]
 80056b4:	e007      	b.n	80056c6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056c4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ce:	d10f      	bne.n	80056f0 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d007      	beq.n	800570e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005716:	d867      	bhi.n	80057e8 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005718:	e030      	b.n	800577c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d117      	bne.n	8005758 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f103 020c 	add.w	r2, r3, #12
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005756:	e011      	b.n	800577c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005758:	f7fd fd04 	bl	8003164 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d803      	bhi.n	8005770 <HAL_SPI_Receive+0x19c>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Receive+0x1a2>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d102      	bne.n	800577c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	75fb      	strb	r3, [r7, #23]
          goto error;
 800577a:	e04e      	b.n	800581a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1c8      	bne.n	800571a <HAL_SPI_Receive+0x146>
 8005788:	e034      	b.n	80057f4 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d115      	bne.n	80057c4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	b292      	uxth	r2, r2
 80057a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	1c9a      	adds	r2, r3, #2
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057c2:	e011      	b.n	80057e8 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c4:	f7fd fcce 	bl	8003164 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d803      	bhi.n	80057dc <HAL_SPI_Receive+0x208>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	d102      	bne.n	80057e2 <HAL_SPI_Receive+0x20e>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057e6:	e018      	b.n	800581a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ca      	bne.n	800578a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fb4d 	bl	8005e98 <SPI_EndRxTransaction>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	75fb      	strb	r3, [r7, #23]
 8005816:	e000      	b.n	800581a <HAL_SPI_Receive+0x246>
  }

error :
 8005818:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005842:	2301      	movs	r3, #1
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_SPI_TransmitReceive+0x26>
 8005856:	2302      	movs	r3, #2
 8005858:	e1fb      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x41e>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005862:	f7fd fc7f 	bl	8003164 <HAL_GetTick>
 8005866:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800586e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800587a:	887b      	ldrh	r3, [r7, #2]
 800587c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800587e:	7efb      	ldrb	r3, [r7, #27]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d00e      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x6e>
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800588a:	d106      	bne.n	800589a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <HAL_SPI_TransmitReceive+0x66>
 8005894:	7efb      	ldrb	r3, [r7, #27]
 8005896:	2b04      	cmp	r3, #4
 8005898:	d003      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058a0:	e1cd      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x80>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x80>
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d103      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058ba:	e1c0      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d003      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2205      	movs	r2, #5
 80058cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	887a      	ldrh	r2, [r7, #2]
 80058e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	887a      	ldrh	r2, [r7, #2]
 80058f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	887a      	ldrh	r2, [r7, #2]
 80058fc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005912:	d802      	bhi.n	800591a <HAL_SPI_TransmitReceive+0xe6>
 8005914:	8a3b      	ldrh	r3, [r7, #16]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d908      	bls.n	800592c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	e007      	b.n	800593c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800593a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d007      	beq.n	800595a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005962:	d97c      	bls.n	8005a5e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x13e>
 800596c:	8a7b      	ldrh	r3, [r7, #18]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d169      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	1c9a      	adds	r2, r3, #2
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005996:	e056      	b.n	8005a46 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d11b      	bne.n	80059de <HAL_SPI_TransmitReceive+0x1aa>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d016      	beq.n	80059de <HAL_SPI_TransmitReceive+0x1aa>
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d113      	bne.n	80059de <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	881a      	ldrh	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d11c      	bne.n	8005a26 <HAL_SPI_TransmitReceive+0x1f2>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d016      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	b292      	uxth	r2, r2
 8005a04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a22:	2301      	movs	r3, #1
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a26:	f7fd fb9d 	bl	8003164 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d807      	bhi.n	8005a46 <HAL_SPI_TransmitReceive+0x212>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d003      	beq.n	8005a46 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a44:	e0fb      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1a3      	bne.n	8005998 <HAL_SPI_TransmitReceive+0x164>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d19d      	bne.n	8005998 <HAL_SPI_TransmitReceive+0x164>
 8005a5c:	e0df      	b.n	8005c1e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_SPI_TransmitReceive+0x23a>
 8005a66:	8a7b      	ldrh	r3, [r7, #18]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	f040 80cb 	bne.w	8005c04 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d912      	bls.n	8005a9e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b02      	subs	r3, #2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a9c:	e0b2      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ac4:	e09e      	b.n	8005c04 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d134      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x30a>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d02f      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x30a>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d12c      	bne.n	8005b3e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d912      	bls.n	8005b14 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	881a      	ldrh	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	1c9a      	adds	r2, r3, #2
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b02      	subs	r3, #2
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b12:	e012      	b.n	8005b3a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	7812      	ldrb	r2, [r2, #0]
 8005b20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d148      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x3aa>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d042      	beq.n	8005bde <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d923      	bls.n	8005bac <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	b292      	uxth	r2, r2
 8005b70:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b02      	subs	r3, #2
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d81f      	bhi.n	8005bda <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ba8:	605a      	str	r2, [r3, #4]
 8005baa:	e016      	b.n	8005bda <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f103 020c 	add.w	r2, r3, #12
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bde:	f7fd fac1 	bl	8003164 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d803      	bhi.n	8005bf6 <HAL_SPI_TransmitReceive+0x3c2>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d102      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x3c8>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c02:	e01c      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f af5b 	bne.w	8005ac6 <HAL_SPI_TransmitReceive+0x292>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f af54 	bne.w	8005ac6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c1e:	69fa      	ldr	r2, [r7, #28]
 8005c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f990 	bl	8005f48 <SPI_EndRxTxTransaction>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d006      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	661a      	str	r2, [r3, #96]	; 0x60
 8005c3a:	e000      	b.n	8005c3e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3728      	adds	r7, #40	; 0x28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c6c:	f7fd fa7a 	bl	8003164 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4413      	add	r3, r2
 8005c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c7c:	f7fd fa72 	bl	8003164 <HAL_GetTick>
 8005c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c82:	4b39      	ldr	r3, [pc, #228]	; (8005d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	015b      	lsls	r3, r3, #5
 8005c88:	0d1b      	lsrs	r3, r3, #20
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c92:	e054      	b.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d050      	beq.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c9c:	f7fd fa62 	bl	8003164 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	69fa      	ldr	r2, [r7, #28]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d902      	bls.n	8005cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d13d      	bne.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cca:	d111      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd4:	d004      	beq.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cde:	d107      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf8:	d10f      	bne.n	8005d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e017      	b.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d19b      	bne.n	8005c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	2000000c 	.word	0x2000000c

08005d6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d7e:	f7fd f9f1 	bl	8003164 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	1a9b      	subs	r3, r3, r2
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d8e:	f7fd f9e9 	bl	8003164 <HAL_GetTick>
 8005d92:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d9c:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	00da      	lsls	r2, r3, #3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	0d1b      	lsrs	r3, r3, #20
 8005dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005db4:	e060      	b.n	8005e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dbc:	d107      	bne.n	8005dce <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd4:	d050      	beq.n	8005e78 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dd6:	f7fd f9c5 	bl	8003164 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d902      	bls.n	8005dec <SPI_WaitFifoStateUntilTimeout+0x80>
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d13d      	bne.n	8005e68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e04:	d111      	bne.n	8005e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e0e:	d004      	beq.n	8005e1a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e18:	d107      	bne.n	8005e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e32:	d10f      	bne.n	8005e54 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e010      	b.n	8005e8a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d196      	bne.n	8005db6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	2000000c 	.word	0x2000000c

08005e98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eac:	d111      	bne.n	8005ed2 <SPI_EndRxTransaction+0x3a>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb6:	d004      	beq.n	8005ec2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec0:	d107      	bne.n	8005ed2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff febd 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e023      	b.n	8005f40 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f00:	d11d      	bne.n	8005f3e <SPI_EndRxTransaction+0xa6>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0a:	d004      	beq.n	8005f16 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f14:	d113      	bne.n	8005f3e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff ff22 	bl	8005d6c <SPI_WaitFifoStateUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	f043 0220 	orr.w	r2, r3, #32
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e000      	b.n	8005f40 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f7ff ff03 	bl	8005d6c <SPI_WaitFifoStateUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d007      	beq.n	8005f7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e027      	b.n	8005fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fe68 	bl	8005c5c <SPI_WaitFlagStateUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f96:	f043 0220 	orr.w	r2, r3, #32
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e014      	b.n	8005fcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fedc 	bl	8005d6c <SPI_WaitFifoStateUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e000      	b.n	8005fcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e049      	b.n	800607a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb ffcc 	bl	8001f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f000 f9ce 	bl	80063b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6a1a      	ldr	r2, [r3, #32]
 8006098:	f241 1311 	movw	r3, #4369	; 0x1111
 800609c:	4013      	ands	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10f      	bne.n	80060c2 <HAL_TIM_Base_DeInit+0x40>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1a      	ldr	r2, [r3, #32]
 80060a8:	f240 4344 	movw	r3, #1092	; 0x444
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <HAL_TIM_Base_DeInit+0x40>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb ff86 	bl	8001fd4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e033      	b.n	80061bc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a19      	ldr	r2, [pc, #100]	; (80061c8 <HAL_TIM_Base_Start+0x8c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_TIM_Base_Start+0x3e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d004      	beq.n	800617a <HAL_TIM_Base_Start+0x3e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a15      	ldr	r2, [pc, #84]	; (80061cc <HAL_TIM_Base_Start+0x90>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d115      	bne.n	80061a6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <HAL_TIM_Base_Start+0x94>)
 8006182:	4013      	ands	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b06      	cmp	r3, #6
 800618a:	d015      	beq.n	80061b8 <HAL_TIM_Base_Start+0x7c>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006192:	d011      	beq.n	80061b8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a4:	e008      	b.n	80061b8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e000      	b.n	80061ba <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40012c00 	.word	0x40012c00
 80061cc:	40014000 	.word	0x40014000
 80061d0:	00010007 	.word	0x00010007

080061d4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6a1a      	ldr	r2, [r3, #32]
 80061e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10f      	bne.n	800620c <HAL_TIM_Base_Stop+0x38>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	f240 4344 	movw	r3, #1092	; 0x444
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_TIM_Base_Stop+0x38>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_TIM_ConfigClockSource+0x1c>
 800623a:	2302      	movs	r3, #2
 800623c:	e0b6      	b.n	80063ac <HAL_TIM_ConfigClockSource+0x18a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006260:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006268:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627a:	d03e      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0xd8>
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006280:	f200 8087 	bhi.w	8006392 <HAL_TIM_ConfigClockSource+0x170>
 8006284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006288:	f000 8086 	beq.w	8006398 <HAL_TIM_ConfigClockSource+0x176>
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006290:	d87f      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 8006292:	2b70      	cmp	r3, #112	; 0x70
 8006294:	d01a      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0xaa>
 8006296:	2b70      	cmp	r3, #112	; 0x70
 8006298:	d87b      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 800629a:	2b60      	cmp	r3, #96	; 0x60
 800629c:	d050      	beq.n	8006340 <HAL_TIM_ConfigClockSource+0x11e>
 800629e:	2b60      	cmp	r3, #96	; 0x60
 80062a0:	d877      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 80062a2:	2b50      	cmp	r3, #80	; 0x50
 80062a4:	d03c      	beq.n	8006320 <HAL_TIM_ConfigClockSource+0xfe>
 80062a6:	2b50      	cmp	r3, #80	; 0x50
 80062a8:	d873      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d058      	beq.n	8006360 <HAL_TIM_ConfigClockSource+0x13e>
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d86f      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 80062b2:	2b30      	cmp	r3, #48	; 0x30
 80062b4:	d064      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x15e>
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d86b      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d060      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x15e>
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d867      	bhi.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05c      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x15e>
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d05a      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x15e>
 80062ca:	e062      	b.n	8006392 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f000 f952 	bl	8006584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	609a      	str	r2, [r3, #8]
      break;
 80062f8:	e04f      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6899      	ldr	r1, [r3, #8]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f000 f93b 	bl	8006584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800631c:	609a      	str	r2, [r3, #8]
      break;
 800631e:	e03c      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	6859      	ldr	r1, [r3, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	461a      	mov	r2, r3
 800632e:	f000 f8af 	bl	8006490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2150      	movs	r1, #80	; 0x50
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f908 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 800633e:	e02c      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	6859      	ldr	r1, [r3, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	461a      	mov	r2, r3
 800634e:	f000 f8ce 	bl	80064ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2160      	movs	r1, #96	; 0x60
 8006358:	4618      	mov	r0, r3
 800635a:	f000 f8f8 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 800635e:	e01c      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	461a      	mov	r2, r3
 800636e:	f000 f88f 	bl	8006490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2140      	movs	r1, #64	; 0x40
 8006378:	4618      	mov	r0, r3
 800637a:	f000 f8e8 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 800637e:	e00c      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4619      	mov	r1, r3
 800638a:	4610      	mov	r0, r2
 800638c:	f000 f8df 	bl	800654e <TIM_ITRx_SetConfig>
      break;
 8006390:	e003      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	73fb      	strb	r3, [r7, #15]
      break;
 8006396:	e000      	b.n	800639a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a2e      	ldr	r2, [pc, #184]	; (8006480 <TIM_Base_SetConfig+0xcc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_Base_SetConfig+0x20>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d2:	d108      	bne.n	80063e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a25      	ldr	r2, [pc, #148]	; (8006480 <TIM_Base_SetConfig+0xcc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_Base_SetConfig+0x5a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f4:	d00b      	beq.n	800640e <TIM_Base_SetConfig+0x5a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a22      	ldr	r2, [pc, #136]	; (8006484 <TIM_Base_SetConfig+0xd0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_Base_SetConfig+0x5a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a21      	ldr	r2, [pc, #132]	; (8006488 <TIM_Base_SetConfig+0xd4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_Base_SetConfig+0x5a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a20      	ldr	r2, [pc, #128]	; (800648c <TIM_Base_SetConfig+0xd8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d108      	bne.n	8006420 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <TIM_Base_SetConfig+0xcc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0xb0>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a0d      	ldr	r2, [pc, #52]	; (8006484 <TIM_Base_SetConfig+0xd0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0xb0>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <TIM_Base_SetConfig+0xd4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0xb0>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0b      	ldr	r2, [pc, #44]	; (800648c <TIM_Base_SetConfig+0xd8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d103      	bne.n	800646c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	615a      	str	r2, [r3, #20]
}
 8006472:	bf00      	nop
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40014000 	.word	0x40014000
 8006488:	40014400 	.word	0x40014400
 800648c:	40014800 	.word	0x40014800

08006490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 030a 	bic.w	r3, r3, #10
 80064cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b087      	sub	sp, #28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f023 0210 	bic.w	r2, r3, #16
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	031b      	lsls	r3, r3, #12
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800652a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4313      	orrs	r3, r2
 8006534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	621a      	str	r2, [r3, #32]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	f043 0307 	orr.w	r3, r3, #7
 8006570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800659e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	021a      	lsls	r2, r3, #8
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	609a      	str	r2, [r3, #8]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d8:	2302      	movs	r3, #2
 80065da:	e04f      	b.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a21      	ldr	r2, [pc, #132]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800660c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a14      	ldr	r2, [pc, #80]	; (8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d009      	beq.n	8006650 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006644:	d004      	beq.n	8006650 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10c      	bne.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006656:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	4313      	orrs	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	40012c00 	.word	0x40012c00
 800668c:	40014000 	.word	0x40014000

08006690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e040      	b.n	8006724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb fca6 	bl	8002004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2224      	movs	r2, #36	; 0x24
 80066bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0201 	bic.w	r2, r2, #1
 80066cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f82c 	bl	800672c <UART_SetConfig>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e022      	b.n	8006724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f956 	bl	8006998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f9dd 	bl	8006adc <UART_CheckIdleState>
 8006722:	4603      	mov	r3, r0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4b8a      	ldr	r3, [pc, #552]	; (8006980 <UART_SetConfig+0x254>)
 8006758:	4013      	ands	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	430b      	orrs	r3, r1
 8006762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a78      	ldr	r2, [pc, #480]	; (8006984 <UART_SetConfig+0x258>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d120      	bne.n	80067ea <UART_SetConfig+0xbe>
 80067a8:	4b77      	ldr	r3, [pc, #476]	; (8006988 <UART_SetConfig+0x25c>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d817      	bhi.n	80067e4 <UART_SetConfig+0xb8>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <UART_SetConfig+0x90>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	080067d9 	.word	0x080067d9
 80067c4:	080067df 	.word	0x080067df
 80067c8:	080067d3 	.word	0x080067d3
 80067cc:	2300      	movs	r3, #0
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e01d      	b.n	800680e <UART_SetConfig+0xe2>
 80067d2:	2302      	movs	r3, #2
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e01a      	b.n	800680e <UART_SetConfig+0xe2>
 80067d8:	2304      	movs	r3, #4
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e017      	b.n	800680e <UART_SetConfig+0xe2>
 80067de:	2308      	movs	r3, #8
 80067e0:	77fb      	strb	r3, [r7, #31]
 80067e2:	e014      	b.n	800680e <UART_SetConfig+0xe2>
 80067e4:	2310      	movs	r3, #16
 80067e6:	77fb      	strb	r3, [r7, #31]
 80067e8:	e011      	b.n	800680e <UART_SetConfig+0xe2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a67      	ldr	r2, [pc, #412]	; (800698c <UART_SetConfig+0x260>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d102      	bne.n	80067fa <UART_SetConfig+0xce>
 80067f4:	2300      	movs	r3, #0
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e009      	b.n	800680e <UART_SetConfig+0xe2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a64      	ldr	r2, [pc, #400]	; (8006990 <UART_SetConfig+0x264>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d102      	bne.n	800680a <UART_SetConfig+0xde>
 8006804:	2300      	movs	r3, #0
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e001      	b.n	800680e <UART_SetConfig+0xe2>
 800680a:	2310      	movs	r3, #16
 800680c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006816:	d15b      	bne.n	80068d0 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8006818:	7ffb      	ldrb	r3, [r7, #31]
 800681a:	2b08      	cmp	r3, #8
 800681c:	d827      	bhi.n	800686e <UART_SetConfig+0x142>
 800681e:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <UART_SetConfig+0xf8>)
 8006820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	0800686f 	.word	0x0800686f
 8006834:	0800685f 	.word	0x0800685f
 8006838:	0800686f 	.word	0x0800686f
 800683c:	0800686f 	.word	0x0800686f
 8006840:	0800686f 	.word	0x0800686f
 8006844:	08006867 	.word	0x08006867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006848:	f7fe f87c 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 800684c:	61b8      	str	r0, [r7, #24]
        break;
 800684e:	e013      	b.n	8006878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7fe f89a 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8006854:	61b8      	str	r0, [r7, #24]
        break;
 8006856:	e00f      	b.n	8006878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006858:	4b4e      	ldr	r3, [pc, #312]	; (8006994 <UART_SetConfig+0x268>)
 800685a:	61bb      	str	r3, [r7, #24]
        break;
 800685c:	e00c      	b.n	8006878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800685e:	f7fd fff9 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8006862:	61b8      	str	r0, [r7, #24]
        break;
 8006864:	e008      	b.n	8006878 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686a:	61bb      	str	r3, [r7, #24]
        break;
 800686c:	e004      	b.n	8006878 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	77bb      	strb	r3, [r7, #30]
        break;
 8006876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d074      	beq.n	8006968 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	005a      	lsls	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	441a      	add	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	b29b      	uxth	r3, r3
 8006894:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b0f      	cmp	r3, #15
 800689a:	d916      	bls.n	80068ca <UART_SetConfig+0x19e>
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a2:	d212      	bcs.n	80068ca <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	f023 030f 	bic.w	r3, r3, #15
 80068ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	89fb      	ldrh	r3, [r7, #14]
 80068bc:	4313      	orrs	r3, r2
 80068be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	89fa      	ldrh	r2, [r7, #14]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	e04e      	b.n	8006968 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	77bb      	strb	r3, [r7, #30]
 80068ce:	e04b      	b.n	8006968 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
 80068d2:	2b08      	cmp	r3, #8
 80068d4:	d827      	bhi.n	8006926 <UART_SetConfig+0x1fa>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <UART_SetConfig+0x1b0>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006911 	.word	0x08006911
 80068e8:	08006927 	.word	0x08006927
 80068ec:	08006917 	.word	0x08006917
 80068f0:	08006927 	.word	0x08006927
 80068f4:	08006927 	.word	0x08006927
 80068f8:	08006927 	.word	0x08006927
 80068fc:	0800691f 	.word	0x0800691f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006900:	f7fe f820 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8006904:	61b8      	str	r0, [r7, #24]
        break;
 8006906:	e013      	b.n	8006930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006908:	f7fe f83e 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 800690c:	61b8      	str	r0, [r7, #24]
        break;
 800690e:	e00f      	b.n	8006930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006910:	4b20      	ldr	r3, [pc, #128]	; (8006994 <UART_SetConfig+0x268>)
 8006912:	61bb      	str	r3, [r7, #24]
        break;
 8006914:	e00c      	b.n	8006930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006916:	f7fd ff9d 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 800691a:	61b8      	str	r0, [r7, #24]
        break;
 800691c:	e008      	b.n	8006930 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800691e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006922:	61bb      	str	r3, [r7, #24]
        break;
 8006924:	e004      	b.n	8006930 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006926:	2300      	movs	r3, #0
 8006928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	77bb      	strb	r3, [r7, #30]
        break;
 800692e:	bf00      	nop
    }

    if (pclk != 0U)
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d018      	beq.n	8006968 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	085a      	lsrs	r2, r3, #1
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	441a      	add	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	fbb2 f3f3 	udiv	r3, r2, r3
 8006948:	b29b      	uxth	r3, r3
 800694a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	2b0f      	cmp	r3, #15
 8006950:	d908      	bls.n	8006964 <UART_SetConfig+0x238>
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006958:	d204      	bcs.n	8006964 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e001      	b.n	8006968 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006974:	7fbb      	ldrb	r3, [r7, #30]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3720      	adds	r7, #32
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	efff69f3 	.word	0xefff69f3
 8006984:	40013800 	.word	0x40013800
 8006988:	40021000 	.word	0x40021000
 800698c:	40004400 	.word	0x40004400
 8006990:	40004800 	.word	0x40004800
 8006994:	007a1200 	.word	0x007a1200

08006998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01a      	beq.n	8006aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a96:	d10a      	bne.n	8006aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00a      	beq.n	8006ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	605a      	str	r2, [r3, #4]
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aec:	f7fc fb3a 	bl	8003164 <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d10e      	bne.n	8006b1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f82d 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e023      	b.n	8006b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d10e      	bne.n	8006b4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f817 	bl	8006b6e <UART_WaitOnFlagUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e00d      	b.n	8006b66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b09c      	sub	sp, #112	; 0x70
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7e:	e0a5      	b.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b86:	f000 80a1 	beq.w	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8a:	f7fc faeb 	bl	8003164 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d302      	bcc.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d13e      	bne.n	8006c1e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bb4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	f023 0301 	bic.w	r3, r3, #1
 8006be8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e067      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04f      	beq.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c3a:	d147      	bne.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	e853 3f00 	ldrex	r3, [r3]
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
 8006c66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e6      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	613b      	str	r3, [r7, #16]
   return(result);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c98:	623a      	str	r2, [r7, #32]
 8006c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	69f9      	ldr	r1, [r7, #28]
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e010      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69da      	ldr	r2, [r3, #28]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	bf0c      	ite	eq
 8006cdc:	2301      	moveq	r3, #1
 8006cde:	2300      	movne	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	f43f af4a 	beq.w	8006b80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3770      	adds	r7, #112	; 0x70
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <__errno>:
 8006cf8:	4b01      	ldr	r3, [pc, #4]	; (8006d00 <__errno+0x8>)
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20000044 	.word	0x20000044

08006d04 <__libc_init_array>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4d0d      	ldr	r5, [pc, #52]	; (8006d3c <__libc_init_array+0x38>)
 8006d08:	4c0d      	ldr	r4, [pc, #52]	; (8006d40 <__libc_init_array+0x3c>)
 8006d0a:	1b64      	subs	r4, r4, r5
 8006d0c:	10a4      	asrs	r4, r4, #2
 8006d0e:	2600      	movs	r6, #0
 8006d10:	42a6      	cmp	r6, r4
 8006d12:	d109      	bne.n	8006d28 <__libc_init_array+0x24>
 8006d14:	4d0b      	ldr	r5, [pc, #44]	; (8006d44 <__libc_init_array+0x40>)
 8006d16:	4c0c      	ldr	r4, [pc, #48]	; (8006d48 <__libc_init_array+0x44>)
 8006d18:	f000 f972 	bl	8007000 <_init>
 8006d1c:	1b64      	subs	r4, r4, r5
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	2600      	movs	r6, #0
 8006d22:	42a6      	cmp	r6, r4
 8006d24:	d105      	bne.n	8006d32 <__libc_init_array+0x2e>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2c:	4798      	blx	r3
 8006d2e:	3601      	adds	r6, #1
 8006d30:	e7ee      	b.n	8006d10 <__libc_init_array+0xc>
 8006d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d36:	4798      	blx	r3
 8006d38:	3601      	adds	r6, #1
 8006d3a:	e7f2      	b.n	8006d22 <__libc_init_array+0x1e>
 8006d3c:	08007120 	.word	0x08007120
 8006d40:	08007120 	.word	0x08007120
 8006d44:	08007120 	.word	0x08007120
 8006d48:	08007124 	.word	0x08007124

08006d4c <__itoa>:
 8006d4c:	1e93      	subs	r3, r2, #2
 8006d4e:	2b22      	cmp	r3, #34	; 0x22
 8006d50:	b510      	push	{r4, lr}
 8006d52:	460c      	mov	r4, r1
 8006d54:	d904      	bls.n	8006d60 <__itoa+0x14>
 8006d56:	2300      	movs	r3, #0
 8006d58:	700b      	strb	r3, [r1, #0]
 8006d5a:	461c      	mov	r4, r3
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	bd10      	pop	{r4, pc}
 8006d60:	2a0a      	cmp	r2, #10
 8006d62:	d109      	bne.n	8006d78 <__itoa+0x2c>
 8006d64:	2800      	cmp	r0, #0
 8006d66:	da07      	bge.n	8006d78 <__itoa+0x2c>
 8006d68:	232d      	movs	r3, #45	; 0x2d
 8006d6a:	700b      	strb	r3, [r1, #0]
 8006d6c:	4240      	negs	r0, r0
 8006d6e:	2101      	movs	r1, #1
 8006d70:	4421      	add	r1, r4
 8006d72:	f000 f8f5 	bl	8006f60 <__utoa>
 8006d76:	e7f1      	b.n	8006d5c <__itoa+0x10>
 8006d78:	2100      	movs	r1, #0
 8006d7a:	e7f9      	b.n	8006d70 <__itoa+0x24>

08006d7c <itoa>:
 8006d7c:	f7ff bfe6 	b.w	8006d4c <__itoa>

08006d80 <malloc>:
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <malloc+0xc>)
 8006d82:	4601      	mov	r1, r0
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	f000 b871 	b.w	8006e6c <_malloc_r>
 8006d8a:	bf00      	nop
 8006d8c:	20000044 	.word	0x20000044

08006d90 <free>:
 8006d90:	4b02      	ldr	r3, [pc, #8]	; (8006d9c <free+0xc>)
 8006d92:	4601      	mov	r1, r0
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	f000 b819 	b.w	8006dcc <_free_r>
 8006d9a:	bf00      	nop
 8006d9c:	20000044 	.word	0x20000044

08006da0 <memcpy>:
 8006da0:	440a      	add	r2, r1
 8006da2:	4291      	cmp	r1, r2
 8006da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da8:	d100      	bne.n	8006dac <memcpy+0xc>
 8006daa:	4770      	bx	lr
 8006dac:	b510      	push	{r4, lr}
 8006dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db6:	4291      	cmp	r1, r2
 8006db8:	d1f9      	bne.n	8006dae <memcpy+0xe>
 8006dba:	bd10      	pop	{r4, pc}

08006dbc <memset>:
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d100      	bne.n	8006dc6 <memset+0xa>
 8006dc4:	4770      	bx	lr
 8006dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dca:	e7f9      	b.n	8006dc0 <memset+0x4>

08006dcc <_free_r>:
 8006dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dce:	2900      	cmp	r1, #0
 8006dd0:	d048      	beq.n	8006e64 <_free_r+0x98>
 8006dd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd6:	9001      	str	r0, [sp, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f1a1 0404 	sub.w	r4, r1, #4
 8006dde:	bfb8      	it	lt
 8006de0:	18e4      	addlt	r4, r4, r3
 8006de2:	f000 f8ff 	bl	8006fe4 <__malloc_lock>
 8006de6:	4a20      	ldr	r2, [pc, #128]	; (8006e68 <_free_r+0x9c>)
 8006de8:	9801      	ldr	r0, [sp, #4]
 8006dea:	6813      	ldr	r3, [r2, #0]
 8006dec:	4615      	mov	r5, r2
 8006dee:	b933      	cbnz	r3, 8006dfe <_free_r+0x32>
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	6014      	str	r4, [r2, #0]
 8006df4:	b003      	add	sp, #12
 8006df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006dfa:	f000 b8f9 	b.w	8006ff0 <__malloc_unlock>
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	d90b      	bls.n	8006e1a <_free_r+0x4e>
 8006e02:	6821      	ldr	r1, [r4, #0]
 8006e04:	1862      	adds	r2, r4, r1
 8006e06:	4293      	cmp	r3, r2
 8006e08:	bf04      	itt	eq
 8006e0a:	681a      	ldreq	r2, [r3, #0]
 8006e0c:	685b      	ldreq	r3, [r3, #4]
 8006e0e:	6063      	str	r3, [r4, #4]
 8006e10:	bf04      	itt	eq
 8006e12:	1852      	addeq	r2, r2, r1
 8006e14:	6022      	streq	r2, [r4, #0]
 8006e16:	602c      	str	r4, [r5, #0]
 8006e18:	e7ec      	b.n	8006df4 <_free_r+0x28>
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	b10b      	cbz	r3, 8006e24 <_free_r+0x58>
 8006e20:	42a3      	cmp	r3, r4
 8006e22:	d9fa      	bls.n	8006e1a <_free_r+0x4e>
 8006e24:	6811      	ldr	r1, [r2, #0]
 8006e26:	1855      	adds	r5, r2, r1
 8006e28:	42a5      	cmp	r5, r4
 8006e2a:	d10b      	bne.n	8006e44 <_free_r+0x78>
 8006e2c:	6824      	ldr	r4, [r4, #0]
 8006e2e:	4421      	add	r1, r4
 8006e30:	1854      	adds	r4, r2, r1
 8006e32:	42a3      	cmp	r3, r4
 8006e34:	6011      	str	r1, [r2, #0]
 8006e36:	d1dd      	bne.n	8006df4 <_free_r+0x28>
 8006e38:	681c      	ldr	r4, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	6053      	str	r3, [r2, #4]
 8006e3e:	4421      	add	r1, r4
 8006e40:	6011      	str	r1, [r2, #0]
 8006e42:	e7d7      	b.n	8006df4 <_free_r+0x28>
 8006e44:	d902      	bls.n	8006e4c <_free_r+0x80>
 8006e46:	230c      	movs	r3, #12
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	e7d3      	b.n	8006df4 <_free_r+0x28>
 8006e4c:	6825      	ldr	r5, [r4, #0]
 8006e4e:	1961      	adds	r1, r4, r5
 8006e50:	428b      	cmp	r3, r1
 8006e52:	bf04      	itt	eq
 8006e54:	6819      	ldreq	r1, [r3, #0]
 8006e56:	685b      	ldreq	r3, [r3, #4]
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	bf04      	itt	eq
 8006e5c:	1949      	addeq	r1, r1, r5
 8006e5e:	6021      	streq	r1, [r4, #0]
 8006e60:	6054      	str	r4, [r2, #4]
 8006e62:	e7c7      	b.n	8006df4 <_free_r+0x28>
 8006e64:	b003      	add	sp, #12
 8006e66:	bd30      	pop	{r4, r5, pc}
 8006e68:	200000f0 	.word	0x200000f0

08006e6c <_malloc_r>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	1ccd      	adds	r5, r1, #3
 8006e70:	f025 0503 	bic.w	r5, r5, #3
 8006e74:	3508      	adds	r5, #8
 8006e76:	2d0c      	cmp	r5, #12
 8006e78:	bf38      	it	cc
 8006e7a:	250c      	movcc	r5, #12
 8006e7c:	2d00      	cmp	r5, #0
 8006e7e:	4606      	mov	r6, r0
 8006e80:	db01      	blt.n	8006e86 <_malloc_r+0x1a>
 8006e82:	42a9      	cmp	r1, r5
 8006e84:	d903      	bls.n	8006e8e <_malloc_r+0x22>
 8006e86:	230c      	movs	r3, #12
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8e:	f000 f8a9 	bl	8006fe4 <__malloc_lock>
 8006e92:	4921      	ldr	r1, [pc, #132]	; (8006f18 <_malloc_r+0xac>)
 8006e94:	680a      	ldr	r2, [r1, #0]
 8006e96:	4614      	mov	r4, r2
 8006e98:	b99c      	cbnz	r4, 8006ec2 <_malloc_r+0x56>
 8006e9a:	4f20      	ldr	r7, [pc, #128]	; (8006f1c <_malloc_r+0xb0>)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	b923      	cbnz	r3, 8006eaa <_malloc_r+0x3e>
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f000 f83c 	bl	8006f20 <_sbrk_r>
 8006ea8:	6038      	str	r0, [r7, #0]
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 f837 	bl	8006f20 <_sbrk_r>
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	d123      	bne.n	8006efe <_malloc_r+0x92>
 8006eb6:	230c      	movs	r3, #12
 8006eb8:	6033      	str	r3, [r6, #0]
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f000 f898 	bl	8006ff0 <__malloc_unlock>
 8006ec0:	e7e3      	b.n	8006e8a <_malloc_r+0x1e>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	1b5b      	subs	r3, r3, r5
 8006ec6:	d417      	bmi.n	8006ef8 <_malloc_r+0x8c>
 8006ec8:	2b0b      	cmp	r3, #11
 8006eca:	d903      	bls.n	8006ed4 <_malloc_r+0x68>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	441c      	add	r4, r3
 8006ed0:	6025      	str	r5, [r4, #0]
 8006ed2:	e004      	b.n	8006ede <_malloc_r+0x72>
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	42a2      	cmp	r2, r4
 8006ed8:	bf0c      	ite	eq
 8006eda:	600b      	streq	r3, [r1, #0]
 8006edc:	6053      	strne	r3, [r2, #4]
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f000 f886 	bl	8006ff0 <__malloc_unlock>
 8006ee4:	f104 000b 	add.w	r0, r4, #11
 8006ee8:	1d23      	adds	r3, r4, #4
 8006eea:	f020 0007 	bic.w	r0, r0, #7
 8006eee:	1ac2      	subs	r2, r0, r3
 8006ef0:	d0cc      	beq.n	8006e8c <_malloc_r+0x20>
 8006ef2:	1a1b      	subs	r3, r3, r0
 8006ef4:	50a3      	str	r3, [r4, r2]
 8006ef6:	e7c9      	b.n	8006e8c <_malloc_r+0x20>
 8006ef8:	4622      	mov	r2, r4
 8006efa:	6864      	ldr	r4, [r4, #4]
 8006efc:	e7cc      	b.n	8006e98 <_malloc_r+0x2c>
 8006efe:	1cc4      	adds	r4, r0, #3
 8006f00:	f024 0403 	bic.w	r4, r4, #3
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d0e3      	beq.n	8006ed0 <_malloc_r+0x64>
 8006f08:	1a21      	subs	r1, r4, r0
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f000 f808 	bl	8006f20 <_sbrk_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d1dd      	bne.n	8006ed0 <_malloc_r+0x64>
 8006f14:	e7cf      	b.n	8006eb6 <_malloc_r+0x4a>
 8006f16:	bf00      	nop
 8006f18:	200000f0 	.word	0x200000f0
 8006f1c:	200000f4 	.word	0x200000f4

08006f20 <_sbrk_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d06      	ldr	r5, [pc, #24]	; (8006f3c <_sbrk_r+0x1c>)
 8006f24:	2300      	movs	r3, #0
 8006f26:	4604      	mov	r4, r0
 8006f28:	4608      	mov	r0, r1
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	f7fb f8f0 	bl	8002110 <_sbrk>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d102      	bne.n	8006f3a <_sbrk_r+0x1a>
 8006f34:	682b      	ldr	r3, [r5, #0]
 8006f36:	b103      	cbz	r3, 8006f3a <_sbrk_r+0x1a>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	20001610 	.word	0x20001610

08006f40 <strcat>:
 8006f40:	b510      	push	{r4, lr}
 8006f42:	4602      	mov	r2, r0
 8006f44:	7814      	ldrb	r4, [r2, #0]
 8006f46:	4613      	mov	r3, r2
 8006f48:	3201      	adds	r2, #1
 8006f4a:	2c00      	cmp	r4, #0
 8006f4c:	d1fa      	bne.n	8006f44 <strcat+0x4>
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	d1f9      	bne.n	8006f50 <strcat+0x10>
 8006f5c:	bd10      	pop	{r4, pc}
	...

08006f60 <__utoa>:
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	4c1f      	ldr	r4, [pc, #124]	; (8006fe0 <__utoa+0x80>)
 8006f64:	b08b      	sub	sp, #44	; 0x2c
 8006f66:	4605      	mov	r5, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	466e      	mov	r6, sp
 8006f6c:	f104 0c20 	add.w	ip, r4, #32
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	6861      	ldr	r1, [r4, #4]
 8006f74:	4637      	mov	r7, r6
 8006f76:	c703      	stmia	r7!, {r0, r1}
 8006f78:	3408      	adds	r4, #8
 8006f7a:	4564      	cmp	r4, ip
 8006f7c:	463e      	mov	r6, r7
 8006f7e:	d1f7      	bne.n	8006f70 <__utoa+0x10>
 8006f80:	7921      	ldrb	r1, [r4, #4]
 8006f82:	7139      	strb	r1, [r7, #4]
 8006f84:	1e91      	subs	r1, r2, #2
 8006f86:	6820      	ldr	r0, [r4, #0]
 8006f88:	6038      	str	r0, [r7, #0]
 8006f8a:	2922      	cmp	r1, #34	; 0x22
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	d904      	bls.n	8006f9c <__utoa+0x3c>
 8006f92:	7019      	strb	r1, [r3, #0]
 8006f94:	460b      	mov	r3, r1
 8006f96:	4618      	mov	r0, r3
 8006f98:	b00b      	add	sp, #44	; 0x2c
 8006f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f9c:	1e58      	subs	r0, r3, #1
 8006f9e:	4684      	mov	ip, r0
 8006fa0:	fbb5 f7f2 	udiv	r7, r5, r2
 8006fa4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8006fa8:	fb02 5617 	mls	r6, r2, r7, r5
 8006fac:	4476      	add	r6, lr
 8006fae:	460c      	mov	r4, r1
 8006fb0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006fb4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006fb8:	462e      	mov	r6, r5
 8006fba:	42b2      	cmp	r2, r6
 8006fbc:	f101 0101 	add.w	r1, r1, #1
 8006fc0:	463d      	mov	r5, r7
 8006fc2:	d9ed      	bls.n	8006fa0 <__utoa+0x40>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	545a      	strb	r2, [r3, r1]
 8006fc8:	1919      	adds	r1, r3, r4
 8006fca:	1aa5      	subs	r5, r4, r2
 8006fcc:	42aa      	cmp	r2, r5
 8006fce:	dae2      	bge.n	8006f96 <__utoa+0x36>
 8006fd0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006fd4:	780e      	ldrb	r6, [r1, #0]
 8006fd6:	7006      	strb	r6, [r0, #0]
 8006fd8:	3201      	adds	r2, #1
 8006fda:	f801 5901 	strb.w	r5, [r1], #-1
 8006fde:	e7f4      	b.n	8006fca <__utoa+0x6a>
 8006fe0:	080070f8 	.word	0x080070f8

08006fe4 <__malloc_lock>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__malloc_lock+0x8>)
 8006fe6:	f000 b809 	b.w	8006ffc <__retarget_lock_acquire_recursive>
 8006fea:	bf00      	nop
 8006fec:	20001618 	.word	0x20001618

08006ff0 <__malloc_unlock>:
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <__malloc_unlock+0x8>)
 8006ff2:	f000 b804 	b.w	8006ffe <__retarget_lock_release_recursive>
 8006ff6:	bf00      	nop
 8006ff8:	20001618 	.word	0x20001618

08006ffc <__retarget_lock_acquire_recursive>:
 8006ffc:	4770      	bx	lr

08006ffe <__retarget_lock_release_recursive>:
 8006ffe:	4770      	bx	lr

08007000 <_init>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	bf00      	nop
 8007004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007006:	bc08      	pop	{r3}
 8007008:	469e      	mov	lr, r3
 800700a:	4770      	bx	lr

0800700c <_fini>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr
