
Basic_State_Machine_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003bc4  08003bc4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bc4  08003bc4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001704  20000010  08003bdc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  08003bdc  00021714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001445c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f9  00000000  00000000  0003449c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00037f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177b6  00000000  00000000  00038ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c7d  00000000  00000000  00050686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000925da  00000000  00000000  00064303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f68dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  000f6930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b74 	.word	0x08003b74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003b74 	.word	0x08003b74

080001c8 <Get_event>:
#include"event.h"

struct EventStruct test_Events = {NULL_Event,NULL_Event};

myEvents Get_event()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	return test_Events.Next_Event;
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <Get_event+0x14>)
 80001ce:	785b      	ldrb	r3, [r3, #1]
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000002c 	.word	0x2000002c

080001e0 <Set_event>:

void Set_event(myEvents N_E)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	test_Events.Next_Event = N_E;
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <Set_event+0x1c>)
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	7053      	strb	r3, [r2, #1]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	2000002c 	.word	0x2000002c

08000200 <Reset_event>:



void Reset_event()
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	test_Events.Next_Event=NULL_Event;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <Reset_event+0x14>)
 8000206:	2200      	movs	r2, #0
 8000208:	705a      	strb	r2, [r3, #1]
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	2000002c 	.word	0x2000002c

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fdbc 	bl	8000d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f872 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa30 	bl	8000688 <MX_GPIO_Init>
  MX_RTC_Init();
 8000228:	f000 f8d6 	bl	80003d8 <MX_RTC_Init>
  MX_SPI2_Init();
 800022c:	f000 f92e 	bl	800048c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000230:	f000 f96a 	bl	8000508 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000234:	f000 f9a6 	bl	8000584 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f9f2 	bl	8000620 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(Get_state())
 800023c:	f000 fb62 	bl	8000904 <Get_state>
 8000240:	4603      	mov	r3, r0
 8000242:	3b01      	subs	r3, #1
 8000244:	2b06      	cmp	r3, #6
 8000246:	d8f9      	bhi.n	800023c <main+0x24>
 8000248:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <main+0x38>)
 800024a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800024e:	bf00      	nop
 8000250:	0800026d 	.word	0x0800026d
 8000254:	0800027d 	.word	0x0800027d
 8000258:	0800028d 	.word	0x0800028d
 800025c:	080002ad 	.word	0x080002ad
 8000260:	080002bd 	.word	0x080002bd
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002dd 	.word	0x080002dd
	  	  {
	  	  case Initilisation_State:
	  		  if(Get_event()==Reset_Event)
 800026c:	f7ff ffac 	bl	80001c8 <Get_event>
 8000270:	4603      	mov	r3, r0
 8000272:	2b01      	cmp	r3, #1
 8000274:	d13a      	bne.n	80002ec <main+0xd4>
	  		  {
	  			  Reset_State_Handler();
 8000276:	f000 fb61 	bl	800093c <Reset_State_Handler>
	  		  }
	  		  break;
 800027a:	e037      	b.n	80002ec <main+0xd4>

	  	  case Reset_State:
	  		  if(Get_event()==Idle_Event)
 800027c:	f7ff ffa4 	bl	80001c8 <Get_event>
 8000280:	4603      	mov	r3, r0
 8000282:	2b02      	cmp	r3, #2
 8000284:	d134      	bne.n	80002f0 <main+0xd8>
	  		  {
	  			  Idle_State_Handler();
 8000286:	f000 fb8d 	bl	80009a4 <Idle_State_Handler>
	  		  }
	  		  break;
 800028a:	e031      	b.n	80002f0 <main+0xd8>

	  	  case Idle_State:
	  		  if(Get_event()==WRSide_Train_Detect_Event)
 800028c:	f7ff ff9c 	bl	80001c8 <Get_event>
 8000290:	4603      	mov	r3, r0
 8000292:	2b03      	cmp	r3, #3
 8000294:	d102      	bne.n	800029c <main+0x84>
	  			  //Nothing should happen in the idle state! It only polls for a change in state. Event setting and getting and state change happens WRT ISR
	  		  {
	  			  WRSide_Train_Presence_State_Handler();
 8000296:	f000 fb8f 	bl	80009b8 <WRSide_Train_Presence_State_Handler>
	  		  }
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
	  		  {
	  			  WLSide_Train_Presence_State_Handler();
	  		  }
	  		  break;
 800029a:	e02b      	b.n	80002f4 <main+0xdc>
	  		  else if (Get_event()==WLSide_Train_Detect_Event)
 800029c:	f7ff ff94 	bl	80001c8 <Get_event>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b04      	cmp	r3, #4
 80002a4:	d126      	bne.n	80002f4 <main+0xdc>
	  			  WLSide_Train_Presence_State_Handler();
 80002a6:	f000 fb95 	bl	80009d4 <WLSide_Train_Presence_State_Handler>
	  		  break;
 80002aa:	e023      	b.n	80002f4 <main+0xdc>

	  	  case WRSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 80002ac:	f7ff ff8c 	bl	80001c8 <Get_event>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b05      	cmp	r3, #5
 80002b4:	d120      	bne.n	80002f8 <main+0xe0>
	  		  {
	  			  Train_Exit_State_Handler();
 80002b6:	f000 fb9b 	bl	80009f0 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 80002ba:	e01d      	b.n	80002f8 <main+0xe0>

	  	  case WLSide_Train_Presence_State:
	  		  if(Get_event()==Train_Exit_Event)
 80002bc:	f7ff ff84 	bl	80001c8 <Get_event>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b05      	cmp	r3, #5
 80002c4:	d11a      	bne.n	80002fc <main+0xe4>
	  		  {
	  			  Train_Exit_State_Handler();
 80002c6:	f000 fb93 	bl	80009f0 <Train_Exit_State_Handler>
	  		  }
	  		  break;
 80002ca:	e017      	b.n	80002fc <main+0xe4>

	  	  case Train_Exit_State:
	  		  if(Get_event()==Log_Data_Event)
 80002cc:	f7ff ff7c 	bl	80001c8 <Get_event>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b06      	cmp	r3, #6
 80002d4:	d114      	bne.n	8000300 <main+0xe8>
	  		  {
	  			  Log_Data_State_Handler();
 80002d6:	f000 fb97 	bl	8000a08 <Log_Data_State_Handler>
	  		  }
	  		  break;
 80002da:	e011      	b.n	8000300 <main+0xe8>

	  	  case Log_Data_State:
	  		  if(Get_event()==Reset_Event)
 80002dc:	f7ff ff74 	bl	80001c8 <Get_event>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d10e      	bne.n	8000304 <main+0xec>
	  		  {
	  			  Reset_State_Handler();
 80002e6:	f000 fb29 	bl	800093c <Reset_State_Handler>
	  		  }
	  		  break;
 80002ea:	e00b      	b.n	8000304 <main+0xec>
	  		  break;
 80002ec:	bf00      	nop
 80002ee:	e7a5      	b.n	800023c <main+0x24>
	  		  break;
 80002f0:	bf00      	nop
 80002f2:	e7a3      	b.n	800023c <main+0x24>
	  		  break;
 80002f4:	bf00      	nop
 80002f6:	e7a1      	b.n	800023c <main+0x24>
	  		  break;
 80002f8:	bf00      	nop
 80002fa:	e79f      	b.n	800023c <main+0x24>
	  		  break;
 80002fc:	bf00      	nop
 80002fe:	e79d      	b.n	800023c <main+0x24>
	  		  break;
 8000300:	bf00      	nop
 8000302:	e79b      	b.n	800023c <main+0x24>
	  		  break;
 8000304:	bf00      	nop
	  switch(Get_state())
 8000306:	e799      	b.n	800023c <main+0x24>

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b09c      	sub	sp, #112	; 0x70
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fc24 	bl	8003b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
 8000324:	605a      	str	r2, [r3, #4]
 8000326:	609a      	str	r2, [r3, #8]
 8000328:	60da      	str	r2, [r3, #12]
 800032a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2230      	movs	r2, #48	; 0x30
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fc16 	bl	8003b64 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000338:	f001 f848 	bl	80013cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800033c:	4b25      	ldr	r3, [pc, #148]	; (80003d4 <SystemClock_Config+0xcc>)
 800033e:	6a1b      	ldr	r3, [r3, #32]
 8000340:	4a24      	ldr	r2, [pc, #144]	; (80003d4 <SystemClock_Config+0xcc>)
 8000342:	f023 0318 	bic.w	r3, r3, #24
 8000346:	6213      	str	r3, [r2, #32]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000348:	2305      	movs	r3, #5
 800034a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000352:	2304      	movs	r3, #4
 8000354:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035a:	2301      	movs	r3, #1
 800035c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035e:	2302      	movs	r3, #2
 8000360:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000366:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000368:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800036c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000372:	4618      	mov	r0, r3
 8000374:	f001 f83a 	bl	80013ec <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800037e:	f000 fa6d 	bl	800085c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000398:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800039c:	2102      	movs	r1, #2
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 ff2c 	bl	80021fc <HAL_RCC_ClockConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80003aa:	f000 fa57 	bl	800085c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80003ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80003b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003b8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f002 f955 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003c8:	f000 fa48 	bl	800085c <Error_Handler>
  }
}
 80003cc:	bf00      	nop
 80003ce:	3770      	adds	r7, #112	; 0x70
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80003ec:	2300      	movs	r3, #0
 80003ee:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003f0:	4b24      	ldr	r3, [pc, #144]	; (8000484 <MX_RTC_Init+0xac>)
 80003f2:	4a25      	ldr	r2, [pc, #148]	; (8000488 <MX_RTC_Init+0xb0>)
 80003f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <MX_RTC_Init+0xac>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <MX_RTC_Init+0xac>)
 80003fe:	227f      	movs	r2, #127	; 0x7f
 8000400:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <MX_RTC_Init+0xac>)
 8000404:	22ff      	movs	r2, #255	; 0xff
 8000406:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <MX_RTC_Init+0xac>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <MX_RTC_Init+0xac>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <MX_RTC_Init+0xac>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800041a:	481a      	ldr	r0, [pc, #104]	; (8000484 <MX_RTC_Init+0xac>)
 800041c:	f002 faaa 	bl	8002974 <HAL_RTC_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000426:	f000 fa19 	bl	800085c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800042a:	2300      	movs	r3, #0
 800042c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800042e:	2300      	movs	r3, #0
 8000430:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000432:	2300      	movs	r3, #0
 8000434:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800043a:	2300      	movs	r3, #0
 800043c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2201      	movs	r2, #1
 8000442:	4619      	mov	r1, r3
 8000444:	480f      	ldr	r0, [pc, #60]	; (8000484 <MX_RTC_Init+0xac>)
 8000446:	f002 fb26 	bl	8002a96 <HAL_RTC_SetTime>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000450:	f000 fa04 	bl	800085c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000454:	2301      	movs	r3, #1
 8000456:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000458:	2305      	movs	r3, #5
 800045a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x25;
 800045c:	2325      	movs	r3, #37	; 0x25
 800045e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000460:	2322      	movs	r3, #34	; 0x22
 8000462:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000464:	463b      	mov	r3, r7
 8000466:	2201      	movs	r2, #1
 8000468:	4619      	mov	r1, r3
 800046a:	4806      	ldr	r0, [pc, #24]	; (8000484 <MX_RTC_Init+0xac>)
 800046c:	f002 fbd0 	bl	8002c10 <HAL_RTC_SetDate>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000476:	f000 f9f1 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20001620 	.word	0x20001620
 8000488:	40002800 	.word	0x40002800

0800048c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000490:	4b1b      	ldr	r3, [pc, #108]	; (8000500 <MX_SPI2_Init+0x74>)
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <MX_SPI2_Init+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <MX_SPI2_Init+0x74>)
 8000498:	f44f 7282 	mov.w	r2, #260	; 0x104
 800049c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <MX_SPI2_Init+0x74>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <MX_SPI2_Init+0x74>)
 80004a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ac:	4b14      	ldr	r3, [pc, #80]	; (8000500 <MX_SPI2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_SPI2_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80004b8:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_SPI2_Init+0x74>)
 80004ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_SPI2_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_SPI2_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_SPI2_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_SPI2_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_SPI2_Init+0x74>)
 80004da:	2207      	movs	r2, #7
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_SPI2_Init+0x74>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_SPI2_Init+0x74>)
 80004e6:	2208      	movs	r2, #8
 80004e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_SPI2_Init+0x74>)
 80004ec:	f002 fca9 	bl	8002e42 <HAL_SPI_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004f6:	f000 f9b1 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20001558 	.word	0x20001558
 8000504:	40003800 	.word	0x40003800

08000508 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_SPI3_Init+0x74>)
 800050e:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <MX_SPI3_Init+0x78>)
 8000510:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_SPI3_Init+0x74>)
 8000514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000518:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <MX_SPI3_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000520:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_SPI3_Init+0x74>)
 8000522:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000526:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_SPI3_Init+0x74>)
 800052a:	2200      	movs	r2, #0
 800052c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_SPI3_Init+0x74>)
 8000530:	2200      	movs	r2, #0
 8000532:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_SPI3_Init+0x74>)
 8000536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800053a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_SPI3_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_SPI3_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <MX_SPI3_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_SPI3_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <MX_SPI3_Init+0x74>)
 8000556:	2207      	movs	r2, #7
 8000558:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_SPI3_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <MX_SPI3_Init+0x74>)
 8000562:	2208      	movs	r2, #8
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <MX_SPI3_Init+0x74>)
 8000568:	f002 fc6b 	bl	8002e42 <HAL_SPI_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000572:	f000 f973 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200015bc 	.word	0x200015bc
 8000580:	40003c00 	.word	0x40003c00

08000584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0310 	add.w	r3, r7, #16
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_TIM2_Init+0x98>)
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 70-1;
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_TIM2_Init+0x98>)
 80005ac:	2245      	movs	r2, #69	; 0x45
 80005ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM2_Init+0x98>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF-1;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <MX_TIM2_Init+0x98>)
 80005b8:	f06f 0201 	mvn.w	r2, #1
 80005bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <MX_TIM2_Init+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_TIM2_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <MX_TIM2_Init+0x98>)
 80005cc:	f002 fce4 	bl	8002f98 <HAL_TIM_Base_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005d6:	f000 f941 	bl	800085c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	480d      	ldr	r0, [pc, #52]	; (800061c <MX_TIM2_Init+0x98>)
 80005e8:	f002 fd2d 	bl	8003046 <HAL_TIM_ConfigClockSource>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005f2:	f000 f933 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4619      	mov	r1, r3
 8000602:	4806      	ldr	r0, [pc, #24]	; (800061c <MX_TIM2_Init+0x98>)
 8000604:	f002 fef0 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800060e:	f000 f925 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20001640 	.word	0x20001640

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_USART2_UART_Init+0x64>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_USART2_UART_Init+0x60>)
 800062c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART2_UART_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_USART2_UART_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART2_UART_Init+0x60>)
 800065e:	2210      	movs	r2, #16
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_USART2_UART_Init+0x60>)
 8000664:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART2_UART_Init+0x60>)
 800066c:	f002 ff22 	bl	80034b4 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000676:	f000 f8f1 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000168c 	.word	0x2000168c
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b56      	ldr	r3, [pc, #344]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a55      	ldr	r2, [pc, #340]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b50      	ldr	r3, [pc, #320]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a4f      	ldr	r2, [pc, #316]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b4d      	ldr	r3, [pc, #308]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b4a      	ldr	r3, [pc, #296]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a49      	ldr	r2, [pc, #292]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b44      	ldr	r3, [pc, #272]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a43      	ldr	r2, [pc, #268]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b41      	ldr	r3, [pc, #260]	; (80007f8 <MX_GPIO_Init+0x170>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_CS_GPIO_Port, LAN_CS_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2101      	movs	r1, #1
 8000702:	483e      	ldr	r0, [pc, #248]	; (80007fc <MX_GPIO_Init+0x174>)
 8000704:	f000 fe32 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800070e:	483b      	ldr	r0, [pc, #236]	; (80007fc <MX_GPIO_Init+0x174>)
 8000710:	f000 fe2c 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CA_OP1_Pin|LA_OP1_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7140 	mov.w	r1, #768	; 0x300
 800071a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071e:	f000 fe25 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f000 fe1e 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WR_IP_Pin WL_IP_Pin F_IP_Pin */
  GPIO_InitStruct.Pin = WR_IP_Pin|WL_IP_Pin|F_IP_Pin;
 8000730:	2323      	movs	r3, #35	; 0x23
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000734:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 fc9e 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_CS_Pin */
  GPIO_InitStruct.Pin = LAN_CS_Pin;
 800074c:	2301      	movs	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LAN_CS_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4826      	ldr	r0, [pc, #152]	; (80007fc <MX_GPIO_Init+0x174>)
 8000764:	f000 fc90 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LAN_INT_Pin */
  GPIO_InitStruct.Pin = LAN_INT_Pin;
 8000768:	2304      	movs	r3, #4
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800076c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_INT_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	481f      	ldr	r0, [pc, #124]	; (80007fc <MX_GPIO_Init+0x174>)
 800077e:	f000 fc83 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 CA_OP_Pin LA_OP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|CA_OP_Pin|LA_OP_Pin;
 8000782:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0x174>)
 800079c:	f000 fc74 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : CA_OP1_Pin LA_OP1_Pin LAN_RESET_Pin */
  GPIO_InitStruct.Pin = CA_OP1_Pin|LA_OP1_Pin|LAN_RESET_Pin;
 80007a0:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fc64 	bl	8001088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2006      	movs	r0, #6
 80007c6:	f000 fc28 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007ca:	2006      	movs	r0, #6
 80007cc:	f000 fc41 	bl	8001052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2007      	movs	r0, #7
 80007d6:	f000 fc20 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007da:	2007      	movs	r0, #7
 80007dc:	f000 fc39 	bl	8001052 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2017      	movs	r0, #23
 80007e6:	f000 fc18 	bl	800101a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ea:	2017      	movs	r0, #23
 80007ec:	f000 fc31 	bl	8001052 <HAL_NVIC_EnableIRQ>

}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	; 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed
   */

  switch(GPIO_Pin)
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2b20      	cmp	r3, #32
 800080e:	d020      	beq.n	8000852 <HAL_GPIO_EXTI_Callback+0x52>
 8000810:	2b20      	cmp	r3, #32
 8000812:	dc1f      	bgt.n	8000854 <HAL_GPIO_EXTI_Callback+0x54>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d002      	beq.n	800081e <HAL_GPIO_EXTI_Callback+0x1e>
 8000818:	2b02      	cmp	r3, #2
 800081a:	d00d      	beq.n	8000838 <HAL_GPIO_EXTI_Callback+0x38>
		  //Camera Trigger
	  }
	  //HAL_Delay(100);
	  break;
  }
}
 800081c:	e01a      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x54>
	  if(Get_state()==Idle_State)
 800081e:	f000 f871 	bl	8000904 <Get_state>
 8000822:	4603      	mov	r3, r0
 8000824:	2b03      	cmp	r3, #3
 8000826:	d103      	bne.n	8000830 <HAL_GPIO_EXTI_Callback+0x30>
		  Set_event(WRSide_Train_Detect_Event);
 8000828:	2003      	movs	r0, #3
 800082a:	f7ff fcd9 	bl	80001e0 <Set_event>
	  break;
 800082e:	e011      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x54>
		  Set_event(Train_Exit_Event);
 8000830:	2005      	movs	r0, #5
 8000832:	f7ff fcd5 	bl	80001e0 <Set_event>
	  break;
 8000836:	e00d      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x54>
	  if(Get_state()==Idle_State)
 8000838:	f000 f864 	bl	8000904 <Get_state>
 800083c:	4603      	mov	r3, r0
 800083e:	2b03      	cmp	r3, #3
 8000840:	d103      	bne.n	800084a <HAL_GPIO_EXTI_Callback+0x4a>
		  Set_event(WLSide_Train_Detect_Event);
 8000842:	2004      	movs	r0, #4
 8000844:	f7ff fccc 	bl	80001e0 <Set_event>
	  break;
 8000848:	e004      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x54>
		  Set_event(Train_Exit_Event);
 800084a:	2005      	movs	r0, #5
 800084c:	f7ff fcc8 	bl	80001e0 <Set_event>
	  break;
 8000850:	e000      	b.n	8000854 <HAL_GPIO_EXTI_Callback+0x54>
	  break;
 8000852:	bf00      	nop
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <RingInit>:
uint32_t RingGetDataCnt (RingBuffer_t* buffer){
	return buffer -> size - RingGetSpace(buffer);
}

/* DONE: Add null pointer exceptions. */
RingStatus_t RingInit (RingBuffer_t* buffer, void* arrayBuffer, size_t bufferSize, size_t elementSize){
 800086a:	b580      	push	{r7, lr}
 800086c:	b084      	sub	sp, #16
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	603b      	str	r3, [r7, #0]
	if(NULL == buffer) return NO_PTR;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d102      	bne.n	8000884 <RingInit+0x1a>
 800087e:	f06f 0302 	mvn.w	r3, #2
 8000882:	e03b      	b.n	80008fc <RingInit+0x92>
	if(NULL == arrayBuffer) return NO_PTR;
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d102      	bne.n	8000890 <RingInit+0x26>
 800088a:	f06f 0302 	mvn.w	r3, #2
 800088e:	e035      	b.n	80008fc <RingInit+0x92>

	memset(buffer, 0, sizeof(RingBuffer_t));
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f003 f965 	bl	8003b64 <memset>

	if(arrayBuffer == NULL) return NO_PTR;
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <RingInit+0x3c>
 80008a0:	f06f 0302 	mvn.w	r3, #2
 80008a4:	e02a      	b.n	80008fc <RingInit+0x92>
	if(bufferSize <= 0) return NO_DATA;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <RingInit+0x48>
 80008ac:	f06f 0301 	mvn.w	r3, #1
 80008b0:	e024      	b.n	80008fc <RingInit+0x92>

	buffer -> buffer = arrayBuffer;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	61da      	str	r2, [r3, #28]
	buffer -> size = bufferSize;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	601a      	str	r2, [r3, #0]
	buffer -> place = buffer -> size - 1;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	1e5a      	subs	r2, r3, #1
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	619a      	str	r2, [r3, #24]
	buffer -> writePtr = 0;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
	buffer -> readPtr = 0;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
	buffer -> elementSize = elementSize;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	605a      	str	r2, [r3, #4]
	buffer -> sizeB = buffer -> elementSize * buffer -> size;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	fb02 f203 	mul.w	r2, r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	609a      	str	r2, [r3, #8]

	memset(buffer -> buffer, 0, buffer -> sizeB);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	69d8      	ldr	r0, [r3, #28]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	461a      	mov	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f003 f935 	bl	8003b64 <memset>
	return OK;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <Get_state>:


struct StatesStruct test_states={Initilisation_State, NULL_State}; // current state defined as initilisation state, next state defined as NULL state

myStates Get_state()
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	return	 test_states.Current_State;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <Get_state+0x14>)
 800090a:	781b      	ldrb	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000000 	.word	0x20000000

0800091c <Set_state>:

void Set_state(myStates N_S)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
test_states.Current_State = N_S;
 8000926:	4a04      	ldr	r2, [pc, #16]	; (8000938 <Set_state+0x1c>)
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	7013      	strb	r3, [r2, #0]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	20000000 	.word	0x20000000

0800093c <Reset_State_Handler>:

	Set_event(Reset_Event);
}

void Reset_State_Handler()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	Set_state(Reset_State);
 8000940:	2002      	movs	r0, #2
 8000942:	f7ff ffeb 	bl	800091c <Set_state>
	Reset_event();
 8000946:	f7ff fc5b 	bl	8000200 <Reset_event>
	//reset the buffers,count variables, and other defined variables

	RingInit(&WR_Ring,&WR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 800094a:	2304      	movs	r3, #4
 800094c:	22c8      	movs	r2, #200	; 0xc8
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <Reset_State_Handler+0x48>)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <Reset_State_Handler+0x4c>)
 8000952:	f7ff ff8a 	bl	800086a <RingInit>
	RingInit(&TR_Ring,&TR_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8000956:	2304      	movs	r3, #4
 8000958:	22c8      	movs	r2, #200	; 0xc8
 800095a:	490c      	ldr	r1, [pc, #48]	; (800098c <Reset_State_Handler+0x50>)
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <Reset_State_Handler+0x54>)
 800095e:	f7ff ff84 	bl	800086a <RingInit>
	RingInit(&WL_Ring,&WL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 8000962:	2304      	movs	r3, #4
 8000964:	22c8      	movs	r2, #200	; 0xc8
 8000966:	490b      	ldr	r1, [pc, #44]	; (8000994 <Reset_State_Handler+0x58>)
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <Reset_State_Handler+0x5c>)
 800096a:	f7ff ff7e 	bl	800086a <RingInit>
	RingInit(&TL_Ring,&TL_Samples[0],BUFFERSIZE,sizeof(buff_size));
 800096e:	2304      	movs	r3, #4
 8000970:	22c8      	movs	r2, #200	; 0xc8
 8000972:	490a      	ldr	r1, [pc, #40]	; (800099c <Reset_State_Handler+0x60>)
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <Reset_State_Handler+0x64>)
 8000976:	f7ff ff78 	bl	800086a <RingInit>
	//set the event to idle
	Set_event(Idle_Event);
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fc30 	bl	80001e0 <Set_event>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000854 	.word	0x20000854
 8000988:	20000ec0 	.word	0x20000ec0
 800098c:	20001238 	.word	0x20001238
 8000990:	20001210 	.word	0x20001210
 8000994:	20000ee0 	.word	0x20000ee0
 8000998:	20000834 	.word	0x20000834
 800099c:	20000b98 	.word	0x20000b98
 80009a0:	20000b74 	.word	0x20000b74

080009a4 <Idle_State_Handler>:

void Idle_State_Handler()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	//Set state to idle state
	Set_state(Idle_State);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff ffb7 	bl	800091c <Set_state>
	//reset the event
	Reset_event();
 80009ae:	f7ff fc27 	bl	8000200 <Reset_event>
	//
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <WRSide_Train_Presence_State_Handler>:

void WRSide_Train_Presence_State_Handler()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(Get_state!=WRSide_Train_Presence_State)
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <WRSide_Train_Presence_State_Handler+0x18>)
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d004      	beq.n	80009cc <WRSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WRSide Train Presence state
		Set_state(WRSide_Train_Presence_State);
 80009c2:	2004      	movs	r0, #4
 80009c4:	f7ff ffaa 	bl	800091c <Set_state>
		//reset the event
		Reset_event();
 80009c8:	f7ff fc1a 	bl	8000200 <Reset_event>
	}
	//tasks that need to be done on each WR trigger
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	08000905 	.word	0x08000905

080009d4 <WLSide_Train_Presence_State_Handler>:

void WLSide_Train_Presence_State_Handler()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(Get_state!=WLSide_Train_Presence_State)
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <WLSide_Train_Presence_State_Handler+0x18>)
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d004      	beq.n	80009e8 <WLSide_Train_Presence_State_Handler+0x14>
	{
		//set state to WLSide Train Presence state
		Set_state(WLSide_Train_Presence_State);
 80009de:	2005      	movs	r0, #5
 80009e0:	f7ff ff9c 	bl	800091c <Set_state>
		//reset the event
		Reset_event();
 80009e4:	f7ff fc0c 	bl	8000200 <Reset_event>
	}
	//tasks that need to be done on each WL trigger
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	08000905 	.word	0x08000905

080009f0 <Train_Exit_State_Handler>:

void Train_Exit_State_Handler()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	//Set state to Train Exit state
	Set_state(Train_Exit_State);
 80009f4:	2006      	movs	r0, #6
 80009f6:	f7ff ff91 	bl	800091c <Set_state>
	//reset the event
	Reset_event();
 80009fa:	f7ff fc01 	bl	8000200 <Reset_event>
	//shut down the purge and close the shutters
	//set the event to Log Data event
	Set_event(Log_Data_Event);
 80009fe:	2006      	movs	r0, #6
 8000a00:	f7ff fbee 	bl	80001e0 <Set_event>
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Log_Data_State_Handler>:

void Log_Data_State_Handler()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	//Set state to Log Data state
	Set_state(Log_Data_State);
 8000a0c:	2007      	movs	r0, #7
 8000a0e:	f7ff ff85 	bl	800091c <Set_state>
	//reset the event
	Reset_event();
 8000a12:	f7ff fbf5 	bl	8000200 <Reset_event>
	//send the data over TCPIP
	//set the event to reset event
	Set_event(Reset_Event);
 8000a16:	2001      	movs	r0, #1
 8000a18:	f7ff fbe2 	bl	80001e0 <Set_event>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x44>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x44>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x44>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	61d3      	str	r3, [r2, #28]
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <HAL_RTC_MspInit+0x44>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d111      	bne.n	8000a9e <HAL_RTC_MspInit+0x36>
 8000a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a7e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	fa93 f3a3 	rbit	r3, r3
 8000a86:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a88:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a8a:	fab3 f383 	clz	r3, r3
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_RTC_MspInit+0x48>)
 8000a94:	4413      	add	r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40002800 	.word	0x40002800
 8000ab0:	10908100 	.word	0x10908100

08000ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	; 0x30
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <HAL_SPI_MspInit+0x114>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d147      	bne.n	8000b66 <HAL_SPI_MspInit+0xb2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a36      	ldr	r2, [pc, #216]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PA10     ------> SPI2_MISO
    PA11     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b30:	2305      	movs	r3, #5
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4825      	ldr	r0, [pc, #148]	; (8000bd0 <HAL_SPI_MspInit+0x11c>)
 8000b3c:	f000 faa4 	bl	8001088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b52:	2305      	movs	r3, #5
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 fa92 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b64:	e02c      	b.n	8000bc0 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI3)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <HAL_SPI_MspInit+0x120>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d127      	bne.n	8000bc0 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b7a:	61d3      	str	r3, [r2, #28]
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b92:	6153      	str	r3, [r2, #20]
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_SPI_MspInit+0x118>)
 8000b96:	695b      	ldr	r3, [r3, #20]
 8000b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ba0:	2338      	movs	r3, #56	; 0x38
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <HAL_SPI_MspInit+0x11c>)
 8000bbc:	f000 fa64 	bl	8001088 <HAL_GPIO_Init>
}
 8000bc0:	bf00      	nop
 8000bc2:	3730      	adds	r7, #48	; 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40003800 	.word	0x40003800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be8:	d10b      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_TIM_Base_MspInit+0x38>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_UART_MspInit+0x7c>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d128      	bne.n	8000c88 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x80>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <HAL_UART_MspInit+0x80>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x80>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x80>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <HAL_UART_MspInit+0x80>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x80>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	230c      	movs	r3, #12
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c84:	f000 fa00 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40004400 	.word	0x40004400
 8000c94:	40021000 	.word	0x40021000

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <HardFault_Handler+0x4>

08000cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <MemManage_Handler+0x4>

08000cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f89a 	bl	8000e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f000 fb4f 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 fb48 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d14:	2020      	movs	r0, #32
 8000d16:	f000 fb41 	bl	800139c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4a:	490e      	ldr	r1, [pc, #56]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d60:	4c0b      	ldr	r4, [pc, #44]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d6e:	f7ff ffd7 	bl	8000d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d72:	f002 fed3 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d76:	f7ff fa4f 	bl	8000218 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d7c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d88:	08003bcc 	.word	0x08003bcc
  ldr r2, =_sbss
 8000d8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d90:	20001714 	.word	0x20001714

08000d94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_IRQHandler>
	...

08000d98 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_Init+0x28>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_Init+0x28>)
 8000da2:	f043 0310 	orr.w	r3, r3, #16
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f000 f92b 	bl	8001004 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f808 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fe34 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x54>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x58>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f943 	bl	800106e <HAL_SYSTICK_Config>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00e      	b.n	8000e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d80a      	bhi.n	8000e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f000 f90b 	bl	800101a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_InitTick+0x5c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e000      	b.n	8000e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000008 	.word	0x20000008

08000e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20001710 	.word	0x20001710

08000e4c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20001710 	.word	0x20001710

08000e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7a:	68ba      	ldr	r2, [r7, #8]
 8000e7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e80:	4013      	ands	r3, r2
 8000e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	f003 0307 	and.w	r3, r3, #7
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	db0b      	blt.n	8000ef2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 021f 	and.w	r2, r3, #31
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <__NVIC_EnableIRQ+0x38>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	095b      	lsrs	r3, r3, #5
 8000ee8:	2001      	movs	r0, #1
 8000eea:	fa00 f202 	lsl.w	r2, r0, r2
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	db0a      	blt.n	8000f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	490c      	ldr	r1, [pc, #48]	; (8000f50 <__NVIC_SetPriority+0x4c>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	0112      	lsls	r2, r2, #4
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	440b      	add	r3, r1
 8000f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f2c:	e00a      	b.n	8000f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <__NVIC_SetPriority+0x50>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	f003 030f 	and.w	r3, r3, #15
 8000f3a:	3b04      	subs	r3, #4
 8000f3c:	0112      	lsls	r2, r2, #4
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	440b      	add	r3, r1
 8000f42:	761a      	strb	r2, [r3, #24]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000e100 	.word	0xe000e100
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f1c3 0307 	rsb	r3, r3, #7
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	bf28      	it	cs
 8000f76:	2304      	movcs	r3, #4
 8000f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	2b06      	cmp	r3, #6
 8000f80:	d902      	bls.n	8000f88 <NVIC_EncodePriority+0x30>
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3b03      	subs	r3, #3
 8000f86:	e000      	b.n	8000f8a <NVIC_EncodePriority+0x32>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43da      	mvns	r2, r3
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	43d9      	mvns	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	4313      	orrs	r3, r2
         );
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3724      	adds	r7, #36	; 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd0:	d301      	bcc.n	8000fd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00f      	b.n	8000ff6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <SysTick_Config+0x40>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fde:	210f      	movs	r1, #15
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f7ff ff8e 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <SysTick_Config+0x40>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <SysTick_Config+0x40>)
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010

08001004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff29 	bl	8000e64 <__NVIC_SetPriorityGrouping>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff3e 	bl	8000eac <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff8e 	bl	8000f58 <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff31 	bl	8000ec8 <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa2 	bl	8000fc0 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001096:	e14e      	b.n	8001336 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8140 	beq.w	8001330 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x40>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 809a 	beq.w	8001330 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <HAL_GPIO_Init+0x2cc>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a54      	ldr	r2, [pc, #336]	; (8001354 <HAL_GPIO_Init+0x2cc>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <HAL_GPIO_Init+0x2cc>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d013      	beq.n	8001268 <HAL_GPIO_Init+0x1e0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a46      	ldr	r2, [pc, #280]	; (800135c <HAL_GPIO_Init+0x2d4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d00d      	beq.n	8001264 <HAL_GPIO_Init+0x1dc>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a45      	ldr	r2, [pc, #276]	; (8001360 <HAL_GPIO_Init+0x2d8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d007      	beq.n	8001260 <HAL_GPIO_Init+0x1d8>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a44      	ldr	r2, [pc, #272]	; (8001364 <HAL_GPIO_Init+0x2dc>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d101      	bne.n	800125c <HAL_GPIO_Init+0x1d4>
 8001258:	2303      	movs	r3, #3
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 800125c:	2305      	movs	r3, #5
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x1e2>
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127a:	4937      	ldr	r1, [pc, #220]	; (8001358 <HAL_GPIO_Init+0x2d0>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b37      	ldr	r3, [pc, #220]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ac:	4a2e      	ldr	r2, [pc, #184]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d6:	4a24      	ldr	r2, [pc, #144]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_GPIO_Init+0x2e0>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f47f aea9 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	40010000 	.word	0x40010000
 800135c:	48000400 	.word	0x48000400
 8001360:	48000800 	.word	0x48000800
 8001364:	48000c00 	.word	0x48000c00
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001388:	e002      	b.n	8001390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fa20 	bl	8000800 <HAL_GPIO_EXTI_Callback>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_DBP);  
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40007000 	.word	0x40007000

080013ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	f000 bef4 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 816a 	beq.w	80016ea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001416:	4bb3      	ldr	r3, [pc, #716]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b04      	cmp	r3, #4
 8001420:	d00c      	beq.n	800143c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001422:	4bb0      	ldr	r3, [pc, #704]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b08      	cmp	r3, #8
 800142c:	d159      	bne.n	80014e2 <HAL_RCC_OscConfig+0xf6>
 800142e:	4bad      	ldr	r3, [pc, #692]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d152      	bne.n	80014e2 <HAL_RCC_OscConfig+0xf6>
 800143c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001440:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001444:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8001450:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	fab3 f383 	clz	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b01      	cmp	r3, #1
 8001466:	d102      	bne.n	800146e <HAL_RCC_OscConfig+0x82>
 8001468:	4b9e      	ldr	r3, [pc, #632]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0xae>
 800146e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001472:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001482:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001486:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800148a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001496:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800149e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80014a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80014a6:	fa92 f2a2 	rbit	r2, r2
 80014aa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80014ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80014b2:	fab2 f282 	clz	r2, r2
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	f042 0220 	orr.w	r2, r2, #32
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	f002 021f 	and.w	r2, r2, #31
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f202 	lsl.w	r2, r1, r2
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 810c 	beq.w	80016e8 <HAL_RCC_OscConfig+0x2fc>
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f040 8106 	bne.w	80016e8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	f000 be86 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d106      	bne.n	80014fc <HAL_RCC_OscConfig+0x110>
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e030      	b.n	800155e <HAL_RCC_OscConfig+0x172>
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x134>
 8001506:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a76      	ldr	r2, [pc, #472]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800150c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a73      	ldr	r2, [pc, #460]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e01e      	b.n	800155e <HAL_RCC_OscConfig+0x172>
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x15a>
 800152c:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a6c      	ldr	r2, [pc, #432]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b6a      	ldr	r3, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a69      	ldr	r2, [pc, #420]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800153e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x172>
 8001546:	4b67      	ldr	r3, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a66      	ldr	r2, [pc, #408]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001558:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155e:	4b61      	ldr	r3, [pc, #388]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	f023 020f 	bic.w	r2, r3, #15
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	495d      	ldr	r1, [pc, #372]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800156e:	4313      	orrs	r3, r2
 8001570:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d059      	beq.n	8001630 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fc66 	bl	8000e4c <HAL_GetTick>
 8001580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001586:	f7ff fc61 	bl	8000e4c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d902      	bls.n	800159c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	f000 be29 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>
 800159c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80015b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b4:	fab3 f383 	clz	r3, r3
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d102      	bne.n	80015ce <HAL_RCC_OscConfig+0x1e2>
 80015c8:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	e015      	b.n	80015fa <HAL_RCC_OscConfig+0x20e>
 80015ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80015e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001602:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001606:	fa92 f2a2 	rbit	r2, r2
 800160a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800160e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001612:	fab2 f282 	clz	r2, r2
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f042 0220 	orr.w	r2, r2, #32
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	f002 021f 	and.w	r2, r2, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f202 	lsl.w	r2, r1, r2
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0ab      	beq.n	8001586 <HAL_RCC_OscConfig+0x19a>
 800162e:	e05c      	b.n	80016ea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc0c 	bl	8000e4c <HAL_GetTick>
 8001634:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800163a:	f7ff fc07 	bl	8000e4c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d902      	bls.n	8001650 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	f000 bdcf 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>
 8001650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001654:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001658:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001664:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001668:	fab3 f383 	clz	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d102      	bne.n	8001682 <HAL_RCC_OscConfig+0x296>
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x2c2>
 8001682:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001686:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800168e:	fa93 f3a3 	rbit	r3, r3
 8001692:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800169e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_RCC_OscConfig+0x2f8>)
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80016b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80016ba:	fa92 f2a2 	rbit	r2, r2
 80016be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80016c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80016c6:	fab2 f282 	clz	r2, r2
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	f042 0220 	orr.w	r2, r2, #32
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	f002 021f 	and.w	r2, r2, #31
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f202 	lsl.w	r2, r1, r2
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ab      	bne.n	800163a <HAL_RCC_OscConfig+0x24e>
 80016e2:	e002      	b.n	80016ea <HAL_RCC_OscConfig+0x2fe>
 80016e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 816f 	beq.w	80019d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016fa:	4bd0      	ldr	r3, [pc, #832]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00b      	beq.n	800171e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001706:	4bcd      	ldr	r3, [pc, #820]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b08      	cmp	r3, #8
 8001710:	d16c      	bne.n	80017ec <HAL_RCC_OscConfig+0x400>
 8001712:	4bca      	ldr	r3, [pc, #808]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d166      	bne.n	80017ec <HAL_RCC_OscConfig+0x400>
 800171e:	2302      	movs	r3, #2
 8001720:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001728:	fa93 f3a3 	rbit	r3, r3
 800172c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001730:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001734:	fab3 f383 	clz	r3, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x362>
 8001748:	4bbc      	ldr	r3, [pc, #752]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	e013      	b.n	8001776 <HAL_RCC_OscConfig+0x38a>
 800174e:	2302      	movs	r3, #2
 8001750:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001766:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001772:	4bb2      	ldr	r3, [pc, #712]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 8001774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001776:	2202      	movs	r2, #2
 8001778:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800177c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001780:	fa92 f2a2 	rbit	r2, r2
 8001784:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001788:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800178c:	fab2 f282 	clz	r2, r2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f002 021f 	and.w	r2, r2, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d002      	beq.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f000 bd1b 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4ba0      	ldr	r3, [pc, #640]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	21f8      	movs	r1, #248	; 0xf8
 80017c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017d0:	fa91 f1a1 	rbit	r1, r1
 80017d4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80017d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80017dc:	fab1 f181 	clz	r1, r1
 80017e0:	b2c9      	uxtb	r1, r1
 80017e2:	408b      	lsls	r3, r1
 80017e4:	4995      	ldr	r1, [pc, #596]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e0f5      	b.n	80019d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8085 	beq.w	8001902 <HAL_RCC_OscConfig+0x516>
 80017f8:	2301      	movs	r3, #1
 80017fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001802:	fa93 f3a3 	rbit	r3, r3
 8001806:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800180a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001818:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	461a      	mov	r2, r3
 8001820:	2301      	movs	r3, #1
 8001822:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fb12 	bl	8000e4c <HAL_GetTick>
 8001828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff fb0d 	bl	8000e4c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d902      	bls.n	8001844 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	f000 bcd5 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>
 8001844:	2302      	movs	r3, #2
 8001846:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800184e:	fa93 f3a3 	rbit	r3, r3
 8001852:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001856:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <HAL_RCC_OscConfig+0x488>
 800186e:	4b73      	ldr	r3, [pc, #460]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	e013      	b.n	800189c <HAL_RCC_OscConfig+0x4b0>
 8001874:	2302      	movs	r3, #2
 8001876:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800188c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001890:	fa93 f3a3 	rbit	r3, r3
 8001894:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001898:	4b68      	ldr	r3, [pc, #416]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2202      	movs	r2, #2
 800189e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80018a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80018ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018b2:	fab2 f282 	clz	r2, r2
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	f002 021f 	and.w	r2, r2, #31
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0af      	beq.n	800182e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	21f8      	movs	r1, #248	; 0xf8
 80018de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018e6:	fa91 f1a1 	rbit	r1, r1
 80018ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80018ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80018f2:	fab1 f181 	clz	r1, r1
 80018f6:	b2c9      	uxtb	r1, r1
 80018f8:	408b      	lsls	r3, r1
 80018fa:	4950      	ldr	r1, [pc, #320]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e06a      	b.n	80019d8 <HAL_RCC_OscConfig+0x5ec>
 8001902:	2301      	movs	r3, #1
 8001904:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001908:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001918:	fab3 f383 	clz	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001922:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	461a      	mov	r2, r3
 800192a:	2300      	movs	r3, #0
 800192c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fa8d 	bl	8000e4c <HAL_GetTick>
 8001932:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	e00a      	b.n	800194e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff fa88 	bl	8000e4c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d902      	bls.n	800194e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	f000 bc50 	b.w	80021ee <HAL_RCC_OscConfig+0xe02>
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001960:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <HAL_RCC_OscConfig+0x592>
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	e013      	b.n	80019a6 <HAL_RCC_OscConfig+0x5ba>
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001996:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_RCC_OscConfig+0x650>)
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	2202      	movs	r2, #2
 80019a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80019ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80019b0:	fa92 f2a2 	rbit	r2, r2
 80019b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80019b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019bc:	fab2 f282 	clz	r2, r2
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	f042 0220 	orr.w	r2, r2, #32
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	f002 021f 	and.w	r2, r2, #31
 80019cc:	2101      	movs	r1, #1
 80019ce:	fa01 f202 	lsl.w	r2, r1, r2
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1af      	bne.n	8001938 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 80da 	beq.w	8001b9c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d069      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x6da>
 80019f2:	2301      	movs	r3, #1
 80019f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x654>)
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	461a      	mov	r2, r3
 8001a18:	2301      	movs	r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fa16 	bl	8000e4c <HAL_GetTick>
 8001a20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a24:	e00e      	b.n	8001a44 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fa11 	bl	8000e4c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d906      	bls.n	8001a44 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e3d9      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	10908120 	.word	0x10908120
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fa93 f2a3 	rbit	r2, r3
 8001a80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001a84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	4ba5      	ldr	r3, [pc, #660]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001a88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a8e:	2102      	movs	r1, #2
 8001a90:	6019      	str	r1, [r3, #0]
 8001a92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fa93 f1a3 	rbit	r1, r3
 8001a9c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aa0:	6019      	str	r1, [r3, #0]
  return result;
 8001aa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fab3 f383 	clz	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0b0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x63a>
 8001ac4:	e06a      	b.n	8001b9c <HAL_RCC_OscConfig+0x7b0>
 8001ac6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001adc:	601a      	str	r2, [r3, #0]
  return result;
 8001ade:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ae2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b8c      	ldr	r3, [pc, #560]	; (8001d20 <HAL_RCC_OscConfig+0x934>)
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	461a      	mov	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff f9a8 	bl	8000e4c <HAL_GetTick>
 8001afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b00:	e009      	b.n	8001b16 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff f9a3 	bl	8000e4c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e36b      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 8001b16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	fa93 f2a3 	rbit	r2, r3
 8001b28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5e:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b66:	2102      	movs	r1, #2
 8001b68:	6019      	str	r1, [r3, #0]
 8001b6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	fa93 f1a3 	rbit	r1, r3
 8001b74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b78:	6019      	str	r1, [r3, #0]
  return result;
 8001b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fab3 f383 	clz	r3, r3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1b2      	bne.n	8001b02 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8158 	beq.w	8001e5c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d112      	bne.n	8001be4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a56      	ldr	r2, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001bd2:	f107 0308 	add.w	r3, r7, #8
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be4:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <HAL_RCC_OscConfig+0x938>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d11a      	bne.n	8001c26 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf0:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <HAL_RCC_OscConfig+0x938>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x938>)
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f926 	bl	8000e4c <HAL_GetTick>
 8001c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e009      	b.n	8001c1a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff f921 	bl	8000e4c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e2e9      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1a:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x938>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ef      	beq.n	8001c06 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x852>
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4a39      	ldr	r2, [pc, #228]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6213      	str	r3, [r2, #32]
 8001c3c:	e02f      	b.n	8001c9e <HAL_RCC_OscConfig+0x8b2>
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x876>
 8001c48:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c5a:	f023 0304 	bic.w	r3, r3, #4
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e01d      	b.n	8001c9e <HAL_RCC_OscConfig+0x8b2>
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d10c      	bne.n	8001c86 <HAL_RCC_OscConfig+0x89a>
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6213      	str	r3, [r2, #32]
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6213      	str	r3, [r2, #32]
 8001c84:	e00b      	b.n	8001c9e <HAL_RCC_OscConfig+0x8b2>
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c8c:	f023 0301 	bic.w	r3, r3, #1
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a21      	ldr	r2, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d06b      	beq.n	8001d80 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f8d0 	bl	8000e4c <HAL_GetTick>
 8001cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	e00b      	b.n	8001cca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f8cb 	bl	8000e4c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e291      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 8001cca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001cce:	2202      	movs	r2, #2
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cf8:	601a      	str	r2, [r3, #0]
  return result;
 8001cfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001cfe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d109      	bne.n	8001d28 <HAL_RCC_OscConfig+0x93c>
 8001d14:	4b01      	ldr	r3, [pc, #4]	; (8001d1c <HAL_RCC_OscConfig+0x930>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x958>
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	10908120 	.word	0x10908120
 8001d24:	40007000 	.word	0x40007000
 8001d28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4bbb      	ldr	r3, [pc, #748]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d48:	2102      	movs	r1, #2
 8001d4a:	6011      	str	r1, [r2, #0]
 8001d4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	fa92 f1a2 	rbit	r1, r2
 8001d56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d5a:	6011      	str	r1, [r2, #0]
  return result;
 8001d5c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	fab2 f282 	clz	r2, r2
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	f002 021f 	and.w	r2, r2, #31
 8001d72:	2101      	movs	r1, #1
 8001d74:	fa01 f202 	lsl.w	r2, r1, r2
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d099      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x8c6>
 8001d7e:	e063      	b.n	8001e48 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f864 	bl	8000e4c <HAL_GetTick>
 8001d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00b      	b.n	8001da2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff f85f 	bl	8000e4c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e225      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 8001da2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	fa93 f2a3 	rbit	r2, r3
 8001db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001dd0:	601a      	str	r2, [r3, #0]
  return result;
 8001dd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001dd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd8:	fab3 f383 	clz	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d102      	bne.n	8001df2 <HAL_RCC_OscConfig+0xa06>
 8001dec:	4b90      	ldr	r3, [pc, #576]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	e00d      	b.n	8001e0e <HAL_RCC_OscConfig+0xa22>
 8001df2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	fa93 f2a3 	rbit	r2, r3
 8001e04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	4b89      	ldr	r3, [pc, #548]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e12:	2102      	movs	r1, #2
 8001e14:	6011      	str	r1, [r2, #0]
 8001e16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	fa92 f1a2 	rbit	r1, r2
 8001e20:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001e24:	6011      	str	r1, [r2, #0]
  return result;
 8001e26:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	fab2 f282 	clz	r2, r2
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	f002 021f 	and.w	r2, r2, #31
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1a0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b77      	ldr	r3, [pc, #476]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	4a76      	ldr	r2, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 81c2 	beq.w	80021ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b71      	ldr	r3, [pc, #452]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	f000 819c 	beq.w	80021ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 8114 	bne.w	80020aa <HAL_RCC_OscConfig+0xcbe>
 8001e82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ea0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7fe ffc8 	bl	8000e4c <HAL_GetTick>
 8001ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec0:	e009      	b.n	8001ed6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec2:	f7fe ffc3 	bl	8000e4c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e18b      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 8001ed6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	fa93 f2a3 	rbit	r2, r3
 8001eea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eee:	601a      	str	r2, [r3, #0]
  return result;
 8001ef0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0xb24>
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb5c>
 8001f10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f50:	6011      	str	r1, [r2, #0]
 8001f52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	fa92 f1a2 	rbit	r1, r2
 8001f5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f60:	6011      	str	r1, [r2, #0]
  return result;
 8001f62:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d19e      	bne.n	8001ec2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	4925      	ldr	r1, [pc, #148]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
 8001fa0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fb8:	601a      	str	r2, [r3, #0]
  return result;
 8001fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fbe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7fe ff39 	bl	8000e4c <HAL_GetTick>
 8001fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7fe ff34 	bl	8000e4c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0fc      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 8001ff4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	fa93 f2a3 	rbit	r2, r3
 8002008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002012:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d105      	bne.n	8002034 <HAL_RCC_OscConfig+0xc48>
 8002028:	4b01      	ldr	r3, [pc, #4]	; (8002030 <HAL_RCC_OscConfig+0xc44>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e01e      	b.n	800206c <HAL_RCC_OscConfig+0xc80>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002052:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	fa93 f2a3 	rbit	r2, r3
 8002062:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <HAL_RCC_OscConfig+0xe0c>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002070:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002074:	6011      	str	r1, [r2, #0]
 8002076:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	fa92 f1a2 	rbit	r1, r2
 8002080:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002084:	6011      	str	r1, [r2, #0]
  return result;
 8002086:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	fab2 f282 	clz	r2, r2
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	f042 0220 	orr.w	r2, r2, #32
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	f002 021f 	and.w	r2, r2, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d09b      	beq.n	8001fe0 <HAL_RCC_OscConfig+0xbf4>
 80020a8:	e0a0      	b.n	80021ec <HAL_RCC_OscConfig+0xe00>
 80020aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c2:	601a      	str	r2, [r3, #0]
  return result;
 80020c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe feb4 	bl	8000e4c <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e009      	b.n	80020fe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe feaf 	bl	8000e4c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e077      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
 80020fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	fa93 f2a3 	rbit	r2, r3
 8002112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002116:	601a      	str	r2, [r3, #0]
  return result;
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0xd4c>
 8002132:	4b31      	ldr	r3, [pc, #196]	; (80021f8 <HAL_RCC_OscConfig+0xe0c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e01b      	b.n	8002170 <HAL_RCC_OscConfig+0xd84>
 8002138:	f107 0320 	add.w	r3, r7, #32
 800213c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f107 0320 	add.w	r3, r7, #32
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fa93 f2a3 	rbit	r2, r3
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f107 0318 	add.w	r3, r7, #24
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f107 0314 	add.w	r3, r7, #20
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_RCC_OscConfig+0xe0c>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	f107 0210 	add.w	r2, r7, #16
 8002174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002178:	6011      	str	r1, [r2, #0]
 800217a:	f107 0210 	add.w	r2, r7, #16
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	fa92 f1a2 	rbit	r1, r2
 8002184:	f107 020c 	add.w	r2, r7, #12
 8002188:	6011      	str	r1, [r2, #0]
  return result;
 800218a:	f107 020c 	add.w	r2, r7, #12
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	fab2 f282 	clz	r2, r2
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	f042 0220 	orr.w	r2, r2, #32
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	f002 021f 	and.w	r2, r2, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f202 	lsl.w	r2, r1, r2
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d19e      	bne.n	80020ea <HAL_RCC_OscConfig+0xcfe>
 80021ac:	e01e      	b.n	80021ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <HAL_RCC_OscConfig+0xe0c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80021d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80021da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d001      	beq.n	80021ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b09e      	sub	sp, #120	; 0x78
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e162      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b90      	ldr	r3, [pc, #576]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d910      	bls.n	8002244 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b8d      	ldr	r3, [pc, #564]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0207 	bic.w	r2, r3, #7
 800222a:	498b      	ldr	r1, [pc, #556]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b89      	ldr	r3, [pc, #548]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e14a      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	497f      	ldr	r1, [pc, #508]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 80dc 	beq.w	8002428 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d13c      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xf6>
 8002278:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800227c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002288:	fab3 f383 	clz	r3, r3
 800228c:	b2db      	uxtb	r3, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xa6>
 800229c:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	e00f      	b.n	80022c2 <HAL_RCC_ClockConfig+0xc6>
 80022a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	667b      	str	r3, [r7, #100]	; 0x64
 80022b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b4:	663b      	str	r3, [r7, #96]	; 0x60
 80022b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80022c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022ca:	fa92 f2a2 	rbit	r2, r2
 80022ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80022d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0220 	orr.w	r2, r2, #32
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d17b      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0f3      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d13c      	bne.n	8002374 <HAL_RCC_ClockConfig+0x178>
 80022fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <HAL_RCC_ClockConfig+0x128>
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e00f      	b.n	8002344 <HAL_RCC_ClockConfig+0x148>
 8002324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	647b      	str	r3, [r7, #68]	; 0x44
 8002332:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002336:	643b      	str	r3, [r7, #64]	; 0x40
 8002338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002340:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002348:	63ba      	str	r2, [r7, #56]	; 0x38
 800234a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234c:	fa92 f2a2 	rbit	r2, r2
 8002350:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002354:	fab2 f282 	clz	r2, r2
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	f042 0220 	orr.w	r2, r2, #32
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f002 021f 	and.w	r2, r2, #31
 8002364:	2101      	movs	r1, #1
 8002366:	fa01 f202 	lsl.w	r2, r1, r2
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d13a      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b2      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
 8002374:	2302      	movs	r3, #2
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_RCC_ClockConfig+0x1a0>
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e00d      	b.n	80023b8 <HAL_RCC_ClockConfig+0x1bc>
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	4b29      	ldr	r3, [pc, #164]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	2202      	movs	r2, #2
 80023ba:	61ba      	str	r2, [r7, #24]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	fa92 f2a2 	rbit	r2, r2
 80023c2:	617a      	str	r2, [r7, #20]
  return result;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	fab2 f282 	clz	r2, r2
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f042 0220 	orr.w	r2, r2, #32
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	f002 021f 	and.w	r2, r2, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e079      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f023 0203 	bic.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	491a      	ldr	r1, [pc, #104]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f8:	f7fe fd28 	bl	8000e4c <HAL_GetTick>
 80023fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fe:	e00a      	b.n	8002416 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002400:	f7fe fd24 	bl	8000e4c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	f241 3288 	movw	r2, #5000	; 0x1388
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e061      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_RCC_ClockConfig+0x260>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 020c 	and.w	r2, r3, #12
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	429a      	cmp	r2, r3
 8002426:	d1eb      	bne.n	8002400 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d214      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 0207 	bic.w	r2, r3, #7
 800243e:	4906      	ldr	r1, [pc, #24]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RCC_ClockConfig+0x25c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e040      	b.n	80024da <HAL_RCC_ClockConfig+0x2de>
 8002458:	40022000 	.word	0x40022000
 800245c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <HAL_RCC_ClockConfig+0x2e8>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	491a      	ldr	r1, [pc, #104]	; (80024e4 <HAL_RCC_ClockConfig+0x2e8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_RCC_ClockConfig+0x2e8>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4912      	ldr	r1, [pc, #72]	; (80024e4 <HAL_RCC_ClockConfig+0x2e8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800249e:	f000 f829 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_RCC_ClockConfig+0x2e8>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ac:	22f0      	movs	r2, #240	; 0xf0
 80024ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	fa92 f2a2 	rbit	r2, r2
 80024b6:	60fa      	str	r2, [r7, #12]
  return result;
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	40d3      	lsrs	r3, r2
 80024c2:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <HAL_RCC_ClockConfig+0x2ec>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	fa21 f303 	lsr.w	r3, r1, r3
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_RCC_ClockConfig+0x2f0>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_RCC_ClockConfig+0x2f4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fc76 	bl	8000dc4 <HAL_InitTick>
  
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3778      	adds	r7, #120	; 0x78
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08003b8c 	.word	0x08003b8c
 80024ec:	20000004 	.word	0x20000004
 80024f0:	20000008 	.word	0x20000008

080024f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b08b      	sub	sp, #44	; 0x2c
 80024f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x30>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x36>
 8002522:	e03c      	b.n	800259e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002526:	623b      	str	r3, [r7, #32]
      break;
 8002528:	e03c      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002530:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002534:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	607a      	str	r2, [r7, #4]
  return result;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	40d3      	lsrs	r3, r2
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800254e:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	220f      	movs	r2, #15
 8002558:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	60fa      	str	r2, [r7, #12]
  return result;
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	40d3      	lsrs	r3, r2
 800256c:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	e004      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	623b      	str	r3, [r7, #32]
      break;
 800259c:	e002      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80025a0:	623b      	str	r3, [r7, #32]
      break;
 80025a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a4:	6a3b      	ldr	r3, [r7, #32]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	372c      	adds	r7, #44	; 0x2c
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	017d7840 	.word	0x017d7840
 80025bc:	08003ba4 	.word	0x08003ba4
 80025c0:	08003bb4 	.word	0x08003bb4
 80025c4:	003d0900 	.word	0x003d0900
 80025c8:	007a1200 	.word	0x007a1200

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025ea:	f7ff ffef 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025ee:	4601      	mov	r1, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	fa92 f2a2 	rbit	r2, r2
 8002604:	603a      	str	r2, [r7, #0]
  return result;
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	40d3      	lsrs	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	08003b9c 	.word	0x08003b9c

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800262e:	f7ff ffcd 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002632:	4601      	mov	r1, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800263c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002640:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	fa92 f2a2 	rbit	r2, r2
 8002648:	603a      	str	r2, [r7, #0]
  return result;
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	fab2 f282 	clz	r2, r2
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	40d3      	lsrs	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	08003b9c 	.word	0x08003b9c

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b092      	sub	sp, #72	; 0x48
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80d4 	beq.w	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002690:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10e      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	4a4a      	ldr	r2, [pc, #296]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	61d3      	str	r3, [r2, #28]
 80026a8:	4b48      	ldr	r3, [pc, #288]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a41      	ldr	r2, [pc, #260]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fbbb 	bl	8000e4c <HAL_GetTick>
 80026d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe fbb7 	bl	8000e4c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b64      	cmp	r3, #100	; 0x64
 80026e6:	d901      	bls.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e13c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b38      	ldr	r3, [pc, #224]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002700:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8084 	beq.w	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002714:	429a      	cmp	r2, r3
 8002716:	d07c      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002718:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	461a      	mov	r2, r3
 8002742:	2301      	movs	r3, #1
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800274a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	2300      	movs	r3, #0
 8002768:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d04b      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fb67 	bl	8000e4c <HAL_GetTick>
 800277e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe fb63 	bl	8000e4c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0e6      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002798:	2302      	movs	r3, #2
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
 80027a4:	2302      	movs	r3, #2
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	61fb      	str	r3, [r7, #28]
  return result;
 80027b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d108      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027c6:	4b01      	ldr	r3, [pc, #4]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	e00d      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
 80027d4:	10908100 	.word	0x10908100
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2202      	movs	r2, #2
 80027ea:	613a      	str	r2, [r7, #16]
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	fa92 f2a2 	rbit	r2, r2
 80027f2:	60fa      	str	r2, [r7, #12]
  return result;
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	fab2 f282 	clz	r2, r2
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	f002 021f 	and.w	r2, r2, #31
 8002806:	2101      	movs	r1, #1
 8002808:	fa01 f202 	lsl.w	r2, r1, r2
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0b7      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4954      	ldr	r1, [pc, #336]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002820:	4313      	orrs	r3, r2
 8002822:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002824:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002828:	2b01      	cmp	r3, #1
 800282a:	d105      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002836:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002844:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4947      	ldr	r1, [pc, #284]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002852:	4313      	orrs	r3, r2
 8002854:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4940      	ldr	r1, [pc, #256]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002870:	4313      	orrs	r3, r2
 8002872:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f023 0220 	bic.w	r2, r3, #32
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	4938      	ldr	r1, [pc, #224]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800288e:	4313      	orrs	r3, r2
 8002890:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	4931      	ldr	r1, [pc, #196]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d008      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028bc:	4b2c      	ldr	r3, [pc, #176]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	4929      	ldr	r1, [pc, #164]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d008      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80028da:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	4922      	ldr	r1, [pc, #136]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	491a      	ldr	r1, [pc, #104]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002906:	4313      	orrs	r3, r2
 8002908:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002916:	4b16      	ldr	r3, [pc, #88]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	4913      	ldr	r1, [pc, #76]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002924:	4313      	orrs	r3, r2
 8002926:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	490b      	ldr	r1, [pc, #44]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002942:	4313      	orrs	r3, r2
 8002944:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	4904      	ldr	r1, [pc, #16]	; (8002970 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002960:	4313      	orrs	r3, r2
 8002962:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3748      	adds	r7, #72	; 0x48
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000

08002974 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e083      	b.n	8002a8e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7f5b      	ldrb	r3, [r3, #29]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe f866 	bl	8000a68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	22ca      	movs	r2, #202	; 0xca
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2253      	movs	r2, #83	; 0x53
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f9fb 	bl	8002dae <RTC_EnterInitMode>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	22ff      	movs	r2, #255	; 0xff
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2204      	movs	r2, #4
 80029ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e05e      	b.n	8002a8e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6899      	ldr	r1, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68d2      	ldr	r2, [r2, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6919      	ldr	r1, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a2e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10e      	bne.n	8002a5c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f98d 	bl	8002d5e <HAL_RTC_WaitForSynchro>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e018      	b.n	8002a8e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	22ff      	movs	r2, #255	; 0xff
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a96:	b590      	push	{r4, r7, lr}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	7f1b      	ldrb	r3, [r3, #28]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_RTC_SetTime+0x1c>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0aa      	b.n	8002c08 <HAL_RTC_SetTime+0x172>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2202      	movs	r2, #2
 8002abc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d126      	bne.n	8002b12 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f992 	bl	8002e06 <RTC_ByteToBcd2>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f98b 	bl	8002e06 <RTC_ByteToBcd2>
 8002af0:	4603      	mov	r3, r0
 8002af2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002af4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	789b      	ldrb	r3, [r3, #2]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f983 	bl	8002e06 <RTC_ByteToBcd2>
 8002b00:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b02:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e018      	b.n	8002b44 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2200      	movs	r2, #0
 8002b24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	785b      	ldrb	r3, [r3, #1]
 8002b30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b32:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b38:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	78db      	ldrb	r3, [r3, #3]
 8002b3e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	22ca      	movs	r2, #202	; 0xca
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2253      	movs	r2, #83	; 0x53
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f92a 	bl	8002dae <RTC_EnterInitMode>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	22ff      	movs	r2, #255	; 0xff
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e047      	b.n	8002c08 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002b82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bbe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d111      	bne.n	8002bf2 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 f8c5 	bl	8002d5e <HAL_RTC_WaitForSynchro>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2204      	movs	r2, #4
 8002be6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00a      	b.n	8002c08 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
  }
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}

08002c10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c10:	b590      	push	{r4, r7, lr}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	7f1b      	ldrb	r3, [r3, #28]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_RTC_SetDate+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e094      	b.n	8002d56 <HAL_RTC_SetDate+0x146>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10e      	bne.n	8002c5c <HAL_RTC_SetDate+0x4c>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	785b      	ldrb	r3, [r3, #1]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	785b      	ldrb	r3, [r3, #1]
 8002c4e:	f023 0310 	bic.w	r3, r3, #16
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	330a      	adds	r3, #10
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11c      	bne.n	8002c9c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	78db      	ldrb	r3, [r3, #3]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f8cd 	bl	8002e06 <RTC_ByteToBcd2>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	785b      	ldrb	r3, [r3, #1]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 f8c6 	bl	8002e06 <RTC_ByteToBcd2>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c7e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	789b      	ldrb	r3, [r3, #2]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 f8be 	bl	8002e06 <RTC_ByteToBcd2>
 8002c8a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002c8c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e00e      	b.n	8002cba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	78db      	ldrb	r3, [r3, #3]
 8002ca0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ca8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	22ca      	movs	r2, #202	; 0xca
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2253      	movs	r2, #83	; 0x53
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f86f 	bl	8002dae <RTC_EnterInitMode>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	22ff      	movs	r2, #255	; 0xff
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e033      	b.n	8002d56 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002cf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002cfc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f81e 	bl	8002d5e <HAL_RTC_WaitForSynchro>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2204      	movs	r2, #4
 8002d34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e00a      	b.n	8002d56 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}

08002d5e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d78:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002d7a:	f7fe f867 	bl	8000e4c <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d80:	e009      	b.n	8002d96 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d82:	f7fe f863 	bl	8000e4c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d90:	d901      	bls.n	8002d96 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e007      	b.n	8002da6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ee      	beq.n	8002d82 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b084      	sub	sp, #16
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d119      	bne.n	8002dfc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002dd2:	f7fe f83b 	bl	8000e4c <HAL_GetTick>
 8002dd6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dd8:	e009      	b.n	8002dee <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dda:	f7fe f837 	bl	8000e4c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de8:	d901      	bls.n	8002dee <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e007      	b.n	8002dfe <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ee      	beq.n	8002dda <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002e14:	e005      	b.n	8002e22 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	3b0a      	subs	r3, #10
 8002e20:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	d8f6      	bhi.n	8002e16 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2db      	uxtb	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e09d      	b.n	8002f90 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e64:	d009      	beq.n	8002e7a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	61da      	str	r2, [r3, #28]
 8002e6c:	e005      	b.n	8002e7a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fd fe0d 	bl	8000ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eb0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eba:	d902      	bls.n	8002ec2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e002      	b.n	8002ec8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ed0:	d007      	beq.n	8002ee2 <HAL_SPI_Init+0xa0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	ea42 0103 	orr.w	r1, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	f003 0204 	and.w	r2, r3, #4
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f5e:	ea42 0103 	orr.w	r1, r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e049      	b.n	800303e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fe0a 	bl	8000bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	f000 f8fe 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_TIM_ConfigClockSource+0x1c>
 800305e:	2302      	movs	r3, #2
 8003060:	e0b6      	b.n	80031d0 <HAL_TIM_ConfigClockSource+0x18a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003084:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d03e      	beq.n	800311e <HAL_TIM_ConfigClockSource+0xd8>
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a4:	f200 8087 	bhi.w	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	f000 8086 	beq.w	80031bc <HAL_TIM_ConfigClockSource+0x176>
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b4:	d87f      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030b6:	2b70      	cmp	r3, #112	; 0x70
 80030b8:	d01a      	beq.n	80030f0 <HAL_TIM_ConfigClockSource+0xaa>
 80030ba:	2b70      	cmp	r3, #112	; 0x70
 80030bc:	d87b      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030be:	2b60      	cmp	r3, #96	; 0x60
 80030c0:	d050      	beq.n	8003164 <HAL_TIM_ConfigClockSource+0x11e>
 80030c2:	2b60      	cmp	r3, #96	; 0x60
 80030c4:	d877      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030c6:	2b50      	cmp	r3, #80	; 0x50
 80030c8:	d03c      	beq.n	8003144 <HAL_TIM_ConfigClockSource+0xfe>
 80030ca:	2b50      	cmp	r3, #80	; 0x50
 80030cc:	d873      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d058      	beq.n	8003184 <HAL_TIM_ConfigClockSource+0x13e>
 80030d2:	2b40      	cmp	r3, #64	; 0x40
 80030d4:	d86f      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030d6:	2b30      	cmp	r3, #48	; 0x30
 80030d8:	d064      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x15e>
 80030da:	2b30      	cmp	r3, #48	; 0x30
 80030dc:	d86b      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d060      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x15e>
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d867      	bhi.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d05c      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x15e>
 80030ea:	2b10      	cmp	r3, #16
 80030ec:	d05a      	beq.n	80031a4 <HAL_TIM_ConfigClockSource+0x15e>
 80030ee:	e062      	b.n	80031b6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f000 f952 	bl	80033a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003112:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	609a      	str	r2, [r3, #8]
      break;
 800311c:	e04f      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f000 f93b 	bl	80033a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003140:	609a      	str	r2, [r3, #8]
      break;
 8003142:	e03c      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	461a      	mov	r2, r3
 8003152:	f000 f8af 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2150      	movs	r1, #80	; 0x50
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f908 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 8003162:	e02c      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	461a      	mov	r2, r3
 8003172:	f000 f8ce 	bl	8003312 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2160      	movs	r1, #96	; 0x60
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f8f8 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 8003182:	e01c      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	461a      	mov	r2, r3
 8003192:	f000 f88f 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f8e8 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80031a2:	e00c      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f000 f8df 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80031b4:	e003      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      break;
 80031ba:	e000      	b.n	80031be <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <TIM_Base_SetConfig+0xcc>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d003      	beq.n	80031f8 <TIM_Base_SetConfig+0x20>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d108      	bne.n	800320a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a25      	ldr	r2, [pc, #148]	; (80032a4 <TIM_Base_SetConfig+0xcc>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00f      	beq.n	8003232 <TIM_Base_SetConfig+0x5a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003218:	d00b      	beq.n	8003232 <TIM_Base_SetConfig+0x5a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <TIM_Base_SetConfig+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_Base_SetConfig+0x5a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <TIM_Base_SetConfig+0xd4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_Base_SetConfig+0x5a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <TIM_Base_SetConfig+0xd8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d108      	bne.n	8003244 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <TIM_Base_SetConfig+0xcc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00b      	beq.n	8003288 <TIM_Base_SetConfig+0xb0>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <TIM_Base_SetConfig+0xd0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <TIM_Base_SetConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <TIM_Base_SetConfig+0xd4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_Base_SetConfig+0xb0>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a0b      	ldr	r2, [pc, #44]	; (80032b0 <TIM_Base_SetConfig+0xd8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d103      	bne.n	8003290 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	615a      	str	r2, [r3, #20]
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40012c00 	.word	0x40012c00
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0210 	bic.w	r2, r3, #16
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	f043 0307 	orr.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e04f      	b.n	80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a21      	ldr	r2, [pc, #132]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d108      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003430:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a14      	ldr	r2, [pc, #80]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d004      	beq.n	8003474 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10c      	bne.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40014000 	.word	0x40014000

080034b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e040      	b.n	8003548 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fb9c 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f82c 	bl	8003550 <UART_SetConfig>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e022      	b.n	8003548 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f956 	bl	80037bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0201 	orr.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f9dd 	bl	8003900 <UART_CheckIdleState>
 8003546:	4603      	mov	r3, r0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b8a      	ldr	r3, [pc, #552]	; (80037a4 <UART_SetConfig+0x254>)
 800357c:	4013      	ands	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	6979      	ldr	r1, [r7, #20]
 8003584:	430b      	orrs	r3, r1
 8003586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a78      	ldr	r2, [pc, #480]	; (80037a8 <UART_SetConfig+0x258>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d120      	bne.n	800360e <UART_SetConfig+0xbe>
 80035cc:	4b77      	ldr	r3, [pc, #476]	; (80037ac <UART_SetConfig+0x25c>)
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d817      	bhi.n	8003608 <UART_SetConfig+0xb8>
 80035d8:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <UART_SetConfig+0x90>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	080035fd 	.word	0x080035fd
 80035e8:	08003603 	.word	0x08003603
 80035ec:	080035f7 	.word	0x080035f7
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e01d      	b.n	8003632 <UART_SetConfig+0xe2>
 80035f6:	2302      	movs	r3, #2
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e01a      	b.n	8003632 <UART_SetConfig+0xe2>
 80035fc:	2304      	movs	r3, #4
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e017      	b.n	8003632 <UART_SetConfig+0xe2>
 8003602:	2308      	movs	r3, #8
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e014      	b.n	8003632 <UART_SetConfig+0xe2>
 8003608:	2310      	movs	r3, #16
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e011      	b.n	8003632 <UART_SetConfig+0xe2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a67      	ldr	r2, [pc, #412]	; (80037b0 <UART_SetConfig+0x260>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d102      	bne.n	800361e <UART_SetConfig+0xce>
 8003618:	2300      	movs	r3, #0
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e009      	b.n	8003632 <UART_SetConfig+0xe2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a64      	ldr	r2, [pc, #400]	; (80037b4 <UART_SetConfig+0x264>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <UART_SetConfig+0xde>
 8003628:	2300      	movs	r3, #0
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e001      	b.n	8003632 <UART_SetConfig+0xe2>
 800362e:	2310      	movs	r3, #16
 8003630:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363a:	d15b      	bne.n	80036f4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800363c:	7ffb      	ldrb	r3, [r7, #31]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d827      	bhi.n	8003692 <UART_SetConfig+0x142>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <UART_SetConfig+0xf8>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	0800366d 	.word	0x0800366d
 800364c:	08003675 	.word	0x08003675
 8003650:	0800367d 	.word	0x0800367d
 8003654:	08003693 	.word	0x08003693
 8003658:	08003683 	.word	0x08003683
 800365c:	08003693 	.word	0x08003693
 8003660:	08003693 	.word	0x08003693
 8003664:	08003693 	.word	0x08003693
 8003668:	0800368b 	.word	0x0800368b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800366c:	f7fe ffba 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8003670:	61b8      	str	r0, [r7, #24]
        break;
 8003672:	e013      	b.n	800369c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003674:	f7fe ffd8 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8003678:	61b8      	str	r0, [r7, #24]
        break;
 800367a:	e00f      	b.n	800369c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800367c:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <UART_SetConfig+0x268>)
 800367e:	61bb      	str	r3, [r7, #24]
        break;
 8003680:	e00c      	b.n	800369c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003682:	f7fe ff37 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 8003686:	61b8      	str	r0, [r7, #24]
        break;
 8003688:	e008      	b.n	800369c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368e:	61bb      	str	r3, [r7, #24]
        break;
 8003690:	e004      	b.n	800369c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	77bb      	strb	r3, [r7, #30]
        break;
 800369a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d074      	beq.n	800378c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	005a      	lsls	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b0f      	cmp	r3, #15
 80036be:	d916      	bls.n	80036ee <UART_SetConfig+0x19e>
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d212      	bcs.n	80036ee <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f023 030f 	bic.w	r3, r3, #15
 80036d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	b29a      	uxth	r2, r3
 80036de:	89fb      	ldrh	r3, [r7, #14]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	89fa      	ldrh	r2, [r7, #14]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e04e      	b.n	800378c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	77bb      	strb	r3, [r7, #30]
 80036f2:	e04b      	b.n	800378c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d827      	bhi.n	800374a <UART_SetConfig+0x1fa>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <UART_SetConfig+0x1b0>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003725 	.word	0x08003725
 8003704:	0800372d 	.word	0x0800372d
 8003708:	08003735 	.word	0x08003735
 800370c:	0800374b 	.word	0x0800374b
 8003710:	0800373b 	.word	0x0800373b
 8003714:	0800374b 	.word	0x0800374b
 8003718:	0800374b 	.word	0x0800374b
 800371c:	0800374b 	.word	0x0800374b
 8003720:	08003743 	.word	0x08003743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003724:	f7fe ff5e 	bl	80025e4 <HAL_RCC_GetPCLK1Freq>
 8003728:	61b8      	str	r0, [r7, #24]
        break;
 800372a:	e013      	b.n	8003754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7fe ff7c 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8003730:	61b8      	str	r0, [r7, #24]
        break;
 8003732:	e00f      	b.n	8003754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <UART_SetConfig+0x268>)
 8003736:	61bb      	str	r3, [r7, #24]
        break;
 8003738:	e00c      	b.n	8003754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373a:	f7fe fedb 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 800373e:	61b8      	str	r0, [r7, #24]
        break;
 8003740:	e008      	b.n	8003754 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003746:	61bb      	str	r3, [r7, #24]
        break;
 8003748:	e004      	b.n	8003754 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	77bb      	strb	r3, [r7, #30]
        break;
 8003752:	bf00      	nop
    }

    if (pclk != 0U)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d018      	beq.n	800378c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	085a      	lsrs	r2, r3, #1
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	b29b      	uxth	r3, r3
 800376e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	2b0f      	cmp	r3, #15
 8003774:	d908      	bls.n	8003788 <UART_SetConfig+0x238>
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d204      	bcs.n	8003788 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e001      	b.n	800378c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003798:	7fbb      	ldrb	r3, [r7, #30]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	efff69f3 	.word	0xefff69f3
 80037a8:	40013800 	.word	0x40013800
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40004400 	.word	0x40004400
 80037b4:	40004800 	.word	0x40004800
 80037b8:	007a1200 	.word	0x007a1200

080037bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00a      	beq.n	800382a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00a      	beq.n	800384c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01a      	beq.n	80038d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ba:	d10a      	bne.n	80038d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
  }
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003910:	f7fd fa9c 	bl	8000e4c <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b08      	cmp	r3, #8
 8003922:	d10e      	bne.n	8003942 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003924:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f82d 	bl	8003992 <UART_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e023      	b.n	800398a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d10e      	bne.n	800396e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f817 	bl	8003992 <UART_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e00d      	b.n	800398a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b09c      	sub	sp, #112	; 0x70
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a2:	e0a5      	b.n	8003af0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	f000 80a1 	beq.w	8003af0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ae:	f7fd fa4d 	bl	8000e4c <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80039be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d13e      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d8:	667b      	str	r3, [r7, #100]	; 0x64
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e6      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3308      	adds	r3, #8
 8003a14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a16:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e5      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e067      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d04f      	beq.n	8003af0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	d147      	bne.n	8003af0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
 8003a8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e6      	bne.n	8003a6a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003abc:	623a      	str	r2, [r7, #32]
 8003abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e5      	bne.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e010      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	4013      	ands	r3, r2
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	bf0c      	ite	eq
 8003b00:	2301      	moveq	r3, #1
 8003b02:	2300      	movne	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	f43f af4a 	beq.w	80039a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3770      	adds	r7, #112	; 0x70
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f820 	bl	8003b74 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003bc4 	.word	0x08003bc4
 8003b58:	08003bc4 	.word	0x08003bc4
 8003b5c:	08003bc4 	.word	0x08003bc4
 8003b60:	08003bc8 	.word	0x08003bc8

08003b64 <memset>:
 8003b64:	4402      	add	r2, r0
 8003b66:	4603      	mov	r3, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memset+0xa>
 8003b6c:	4770      	bx	lr
 8003b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b72:	e7f9      	b.n	8003b68 <memset+0x4>

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
